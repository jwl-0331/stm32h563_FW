
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c58c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0801c7d8  0801c7d8  0002c7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       0000314c  0801c808  0801c808  0002c808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f954  0801f954  000300e0  2**0
                  CONTENTS
  5 .ARM          00000008  0801f954  0801f954  0002f954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f95c  0801f95c  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801f95c  0801f95c  0002f95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f960  0801f960  0002f960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  20000000  0801f964  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b1a4  200000e0  0801fa44  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b284  0801fa44  0003b284  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY
 14 .debug_info   000389f9  00000000  00000000  00030159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c04  00000000  00000000  00068b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ab8  00000000  00000000  00071758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021a3  00000000  00000000  00074210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000421f7  00000000  00000000  000763b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004129f  00000000  00000000  000b85aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00167dc2  00000000  00000000  000f9849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bd78  00000000  00000000  0026160c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0026d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e0 	.word	0x200000e0
 8000268:	00000000 	.word	0x00000000
 800026c:	0801c7c0 	.word	0x0801c7c0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000e4 	.word	0x200000e4
 8000288:	0801c7c0 	.word	0x0801c7c0

0800028c <strcmp>:
 800028c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000294:	2a01      	cmp	r2, #1
 8000296:	bf28      	it	cs
 8000298:	429a      	cmpcs	r2, r3
 800029a:	d0f7      	beq.n	800028c <strcmp>
 800029c:	1ad0      	subs	r0, r2, r3
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b982 	b.w	80005cc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d146      	bne.n	800037e <__udivmoddi4+0x9e>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d95e      	bls.n	80003b4 <__udivmoddi4+0xd4>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	409c      	lsls	r4, r3
 8000308:	fa20 f202 	lsr.w	r2, r0, r2
 800030c:	4317      	orrs	r7, r2
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	0c22      	lsrs	r2, r4, #16
 8000318:	fbb7 f1fe 	udiv	r1, r7, lr
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	fb01 f005 	mul.w	r0, r1, r5
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x5e>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x5c>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 8134 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	b2a4      	uxth	r4, r4
 8000342:	fbb2 f0fe 	udiv	r0, r2, lr
 8000346:	fb0e 2210 	mls	r2, lr, r0, r2
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	42a5      	cmp	r5, r4
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x88>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x86>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f200 8119 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000366:	4610      	mov	r0, r2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0x9a>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xb4>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80fc 	beq.w	8000580 <__udivmoddi4+0x2a0>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14c      	bne.n	8000436 <__udivmoddi4+0x156>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2a6>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80ef 	bls.w	8000586 <__udivmoddi4+0x2a6>
 80003a8:	4608      	mov	r0, r1
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e5      	beq.n	800037a <__udivmoddi4+0x9a>
 80003ae:	e9c6 4700 	strd	r4, r7, [r6]
 80003b2:	e7e2      	b.n	800037a <__udivmoddi4+0x9a>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xd8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f382 	clz	r3, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	f040 809f 	bne.w	8000500 <__udivmoddi4+0x220>
 80003c2:	1a8a      	subs	r2, r1, r2
 80003c4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c8:	fa1f f78c 	uxth.w	r7, ip
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d6:	0c22      	lsrs	r2, r4, #16
 80003d8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003dc:	fb07 f005 	mul.w	r0, r7, r5
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d90f      	bls.n	8000404 <__udivmoddi4+0x124>
 80003e4:	eb1c 0202 	adds.w	r2, ip, r2
 80003e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x122>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 80ce 	beq.w	800059e <__udivmoddi4+0x2be>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0fe 	udiv	r0, r2, lr
 800040c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000410:	fb00 f707 	mul.w	r7, r0, r7
 8000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000418:	42a7      	cmp	r7, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	42a7      	cmp	r7, r4
 8000428:	f200 80b3 	bhi.w	8000592 <__udivmoddi4+0x2b2>
 800042c:	4610      	mov	r0, r2
 800042e:	1be4      	subs	r4, r4, r7
 8000430:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000434:	e79c      	b.n	8000370 <__udivmoddi4+0x90>
 8000436:	f1c1 0420 	rsb	r4, r1, #32
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000440:	fa22 f704 	lsr.w	r7, r2, r4
 8000444:	40e5      	lsrs	r5, r4
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f304 	lsr.w	r3, r0, r4
 800044e:	4088      	lsls	r0, r1
 8000450:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fbb5 fef8 	udiv	lr, r5, r8
 8000464:	fb08 551e 	mls	r5, r8, lr, r5
 8000468:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a9      	cmp	r9, r5
 8000472:	d90e      	bls.n	8000492 <__udivmoddi4+0x1b2>
 8000474:	197d      	adds	r5, r7, r5
 8000476:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047a:	bf2c      	ite	cs
 800047c:	f04f 0b01 	movcs.w	fp, #1
 8000480:	f04f 0b00 	movcc.w	fp, #0
 8000484:	45a9      	cmp	r9, r5
 8000486:	d903      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000488:	f1bb 0f00 	cmp.w	fp, #0
 800048c:	f000 808d 	beq.w	80005aa <__udivmoddi4+0x2ca>
 8000490:	46d6      	mov	lr, sl
 8000492:	eba5 0509 	sub.w	r5, r5, r9
 8000496:	fa1f f983 	uxth.w	r9, r3
 800049a:	fbb5 f3f8 	udiv	r3, r5, r8
 800049e:	fb08 5513 	mls	r5, r8, r3, r5
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004aa:	45ac      	cmp	ip, r5
 80004ac:	d906      	bls.n	80004bc <__udivmoddi4+0x1dc>
 80004ae:	197d      	adds	r5, r7, r5
 80004b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x1da>
 80004b6:	45ac      	cmp	ip, r5
 80004b8:	d87e      	bhi.n	80005b8 <__udivmoddi4+0x2d8>
 80004ba:	4643      	mov	r3, r8
 80004bc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c0:	eba5 050c 	sub.w	r5, r5, ip
 80004c4:	fba3 9802 	umull	r9, r8, r3, r2
 80004c8:	4545      	cmp	r5, r8
 80004ca:	46ce      	mov	lr, r9
 80004cc:	46c4      	mov	ip, r8
 80004ce:	d302      	bcc.n	80004d6 <__udivmoddi4+0x1f6>
 80004d0:	d106      	bne.n	80004e0 <__udivmoddi4+0x200>
 80004d2:	4548      	cmp	r0, r9
 80004d4:	d204      	bcs.n	80004e0 <__udivmoddi4+0x200>
 80004d6:	3b01      	subs	r3, #1
 80004d8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004dc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d06f      	beq.n	80005c4 <__udivmoddi4+0x2e4>
 80004e4:	ebb0 020e 	subs.w	r2, r0, lr
 80004e8:	eb65 050c 	sbc.w	r5, r5, ip
 80004ec:	40ca      	lsrs	r2, r1
 80004ee:	fa05 f404 	lsl.w	r4, r5, r4
 80004f2:	40cd      	lsrs	r5, r1
 80004f4:	4618      	mov	r0, r3
 80004f6:	4314      	orrs	r4, r2
 80004f8:	2100      	movs	r1, #0
 80004fa:	e9c6 4500 	strd	r4, r5, [r6]
 80004fe:	e73c      	b.n	800037a <__udivmoddi4+0x9a>
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	f1c3 0220 	rsb	r2, r3, #32
 8000508:	4099      	lsls	r1, r3
 800050a:	409c      	lsls	r4, r3
 800050c:	40d5      	lsrs	r5, r2
 800050e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000512:	fa20 f202 	lsr.w	r2, r0, r2
 8000516:	fa1f f78c 	uxth.w	r7, ip
 800051a:	fbb5 f0fe 	udiv	r0, r5, lr
 800051e:	430a      	orrs	r2, r1
 8000520:	fb0e 5510 	mls	r5, lr, r0, r5
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f507 	mul.w	r5, r0, r7
 800052e:	428d      	cmp	r5, r1
 8000530:	d90e      	bls.n	8000550 <__udivmoddi4+0x270>
 8000532:	eb1c 0101 	adds.w	r1, ip, r1
 8000536:	f100 38ff 	add.w	r8, r0, #4294967295
 800053a:	bf2c      	ite	cs
 800053c:	f04f 0901 	movcs.w	r9, #1
 8000540:	f04f 0900 	movcc.w	r9, #0
 8000544:	428d      	cmp	r5, r1
 8000546:	d902      	bls.n	800054e <__udivmoddi4+0x26e>
 8000548:	f1b9 0f00 	cmp.w	r9, #0
 800054c:	d031      	beq.n	80005b2 <__udivmoddi4+0x2d2>
 800054e:	4640      	mov	r0, r8
 8000550:	1b49      	subs	r1, r1, r5
 8000552:	b292      	uxth	r2, r2
 8000554:	fbb1 f5fe 	udiv	r5, r1, lr
 8000558:	fb0e 1115 	mls	r1, lr, r5, r1
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	fb05 f107 	mul.w	r1, r5, r7
 8000564:	4291      	cmp	r1, r2
 8000566:	d907      	bls.n	8000578 <__udivmoddi4+0x298>
 8000568:	eb1c 0202 	adds.w	r2, ip, r2
 800056c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x296>
 8000572:	4291      	cmp	r1, r2
 8000574:	d823      	bhi.n	80005be <__udivmoddi4+0x2de>
 8000576:	4645      	mov	r5, r8
 8000578:	1a52      	subs	r2, r2, r1
 800057a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057e:	e726      	b.n	80003ce <__udivmoddi4+0xee>
 8000580:	4631      	mov	r1, r6
 8000582:	4630      	mov	r0, r6
 8000584:	e6f9      	b.n	800037a <__udivmoddi4+0x9a>
 8000586:	1a84      	subs	r4, r0, r2
 8000588:	eb65 0203 	sbc.w	r2, r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	4617      	mov	r7, r2
 8000590:	e70b      	b.n	80003aa <__udivmoddi4+0xca>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e74a      	b.n	800042e <__udivmoddi4+0x14e>
 8000598:	4464      	add	r4, ip
 800059a:	3802      	subs	r0, #2
 800059c:	e6e4      	b.n	8000368 <__udivmoddi4+0x88>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	3902      	subs	r1, #2
 80005a6:	4462      	add	r2, ip
 80005a8:	e6c9      	b.n	800033e <__udivmoddi4+0x5e>
 80005aa:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ae:	443d      	add	r5, r7
 80005b0:	e76f      	b.n	8000492 <__udivmoddi4+0x1b2>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	e7cb      	b.n	8000550 <__udivmoddi4+0x270>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	443d      	add	r5, r7
 80005bc:	e77e      	b.n	80004bc <__udivmoddi4+0x1dc>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	e7d9      	b.n	8000578 <__udivmoddi4+0x298>
 80005c4:	4618      	mov	r0, r3
 80005c6:	4631      	mov	r1, r6
 80005c8:	e6d7      	b.n	800037a <__udivmoddi4+0x9a>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ethernetif_notify_conn_changed>:

struct netif gnetif;
extern BOOL timeFlag;

void ethernetif_notify_conn_changed(struct netif *netif)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
   when the callback is needed,
   */
  if (netif_is_link_up(netif))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80005de:	089b      	lsrs	r3, r3, #2
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00a      	beq.n	8000600 <ethernetif_notify_conn_changed+0x30>
  {
    HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <ethernetif_notify_conn_changed+0x4c>)
 80005f0:	f006 fcf0 	bl	8006fd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <ethernetif_notify_conn_changed+0x50>)
 80005fa:	f006 fceb 	bl	8006fd4 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
  }
}
 80005fe:	e009      	b.n	8000614 <ethernetif_notify_conn_changed+0x44>
    HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <ethernetif_notify_conn_changed+0x4c>)
 8000606:	f006 fce5 	bl	8006fd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2110      	movs	r1, #16
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <ethernetif_notify_conn_changed+0x50>)
 8000610:	f006 fce0 	bl	8006fd4 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	42020400 	.word	0x42020400
 8000620:	42021800 	.word	0x42021800

08000624 <AppMain>:

void AppMain()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800062a:	b662      	cpsie	i
}
 800062c:	bf00      	nop
  __enable_irq();

  RESET_Init();
 800062e:	f003 f8ad 	bl	800378c <RESET_Init>
  LED_Init();
 8000632:	f002 fffb 	bl	800362c <LED_Init>
  LED_SimpleAnimation();
 8000636:	f003 f853 	bl	80036e0 <LED_SimpleAnimation>

  svDebugInit();
 800063a:	f003 fabd 	bl	8003bb8 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 800063e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000642:	2000      	movs	r0, #0
 8000644:	f003 f90a 	bl	800385c <UART_Init>

  CAN_Init();
 8000648:	f001 fd3e 	bl	80020c8 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 800064c:	2305      	movs	r3, #5
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2304      	movs	r3, #4
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f001 fdba 	bl	80021d0 <CAN_Open>


  //lwip_init();
  MX_LWIP_Init();
 800065c:	f000 fe2e 	bl	80012bc <MX_LWIP_Init>
  //tcp_echoserver_init(7);

  /* USER CODE BEGIN 2 */
  ethernetif_notify_conn_changed(&gnetif);
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <AppMain+0x6c>)
 8000662:	f7ff ffb5 	bl	80005d0 <ethernetif_notify_conn_changed>


  // Chk Reset Count
  //uint32_t pre_time = HAL_GetTick();
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <AppMain+0x70>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d902      	bls.n	8000674 <AppMain+0x50>
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <AppMain+0x74>)
 8000670:	f003 fad6 	bl	8003c20 <svDebugMessage>
    DHCP_Periodic_Handle(&gnetif);
#endif
    /* End OF ECHO SERVER  */


    svDebugProcess();
 8000674:	f003 fa48 	bl	8003b08 <svDebugProcess>
    MX_LWIP_Process();
 8000678:	f000 fe62 	bl	8001340 <MX_LWIP_Process>

    if(timeFlag)
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <AppMain+0x78>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f7      	beq.n	8000674 <AppMain+0x50>
    {
      timeFlag = FALSE;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <AppMain+0x78>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
      app_start_get_time(); //get time information from the server
 800068a:	f000 fe65 	bl	8001358 <app_start_get_time>
    svDebugProcess();
 800068e:	e7f1      	b.n	8000674 <AppMain+0x50>
 8000690:	200000fc 	.word	0x200000fc
 8000694:	2000003c 	.word	0x2000003c
 8000698:	0801c808 	.word	0x0801c808
 800069c:	20000258 	.word	0x20000258

080006a0 <HAL_GPIO_EXTI_Rising_Callback>:
    */
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b0:	d103      	bne.n	80006ba <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80006b2:	2101      	movs	r1, #1
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 80006b6:	f006 fca5 	bl	8007004 <HAL_GPIO_TogglePin>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	42020400 	.word	0x42020400

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f003 fade 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f80e 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f92a 	bl	800092c <MX_GPIO_Init>
  MX_FLASH_Init();
 80006d8:	f000 f874 	bl	80007c4 <MX_FLASH_Init>
  MX_ICACHE_Init();
 80006dc:	f000 f884 	bl	80007e8 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 80006e0:	f000 f88e 	bl	8000800 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80006e4:	f000 f8d6 	bl	8000894 <MX_USART3_UART_Init>
  //MX_FDCAN1_Init();
  //MX_ETH_Init();
  /* USER CODE BEGIN 2 */

  AppMain();
 80006e8:	f7ff ff9c 	bl	8000624 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x24>
	...

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2250      	movs	r2, #80	; 0x50
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f01b f8b8 	bl	801b874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <SystemClock_Config+0xd0>)
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <SystemClock_Config+0xd0>)
 800071c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000720:	6113      	str	r3, [r2, #16]
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <SystemClock_Config+0xd0>)
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072e:	bf00      	nop
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xd0>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	2b08      	cmp	r3, #8
 800073a:	d1f9      	bne.n	8000730 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800073c:	2309      	movs	r3, #9
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000740:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000746:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000750:	2303      	movs	r3, #3
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000758:	2314      	movs	r3, #20
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000768:	230c      	movs	r3, #12
 800076a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800076c:	2300      	movs	r3, #0
 800076e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f006 fc9f 	bl	80070bc <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000784:	f000 f9e6 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	231f      	movs	r3, #31
 800078a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2303      	movs	r3, #3
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2103      	movs	r1, #3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 f8c0 	bl	800792c <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007b2:	f000 f9cf 	bl	8000b54 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3770      	adds	r7, #112	; 0x70
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	44020800 	.word	0x44020800

080007c4 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80007c8:	f006 f87c 	bl	80068c4 <HAL_FLASH_Unlock>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80007d2:	f000 f9bf 	bl	8000b54 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80007d6:	f006 f89b 	bl	8006910 <HAL_FLASH_Lock>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80007e0:	f000 f9b8 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007ec:	f006 fc56 	bl	800709c <HAL_ICACHE_Enable>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80007f6:	f000 f9ad 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000808:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 800080c:	4a20      	ldr	r2, [pc, #128]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800080e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000824:	220c      	movs	r2, #12
 8000826:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 800083c:	2200      	movs	r2, #0
 800083e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000842:	f00d f853 	bl	800d8ec <HAL_UART_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800084c:	f000 f982 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000854:	f00e ff89 	bl	800f76a <HAL_UARTEx_SetTxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800085e:	f000 f979 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4808      	ldr	r0, [pc, #32]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000866:	f00e ffbe 	bl	800f7e6 <HAL_UARTEx_SetRxFifoThreshold>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000870:	f000 f970 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_LPUART1_UART_Init+0x88>)
 8000876:	f00e ff3f 	bl	800f6f8 <HAL_UARTEx_DisableFifoMode>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000880:	f000 f968 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000130 	.word	0x20000130
 800088c:	44002400 	.word	0x44002400
 8000890:	00033324 	.word	0x00033324

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_USART3_UART_Init+0x90>)
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <MX_USART3_UART_Init+0x94>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008de:	f00d f805 	bl	800d8ec <HAL_UART_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f934 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008f0:	f00e ff3b 	bl	800f76a <HAL_UARTEx_SetTxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f92b 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x90>)
 8000902:	f00e ff70 	bl	800f7e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 f922 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USART3_UART_Init+0x90>)
 8000912:	f00e fef1 	bl	800f6f8 <HAL_UARTEx_DisableFifoMode>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f91a 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200001c4 	.word	0x200001c4
 8000928:	40004800 	.word	0x40004800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000948:	4a69      	ldr	r2, [pc, #420]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000952:	4b67      	ldr	r3, [pc, #412]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	623b      	str	r3, [r7, #32]
 800095e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000960:	4b63      	ldr	r3, [pc, #396]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000966:	4a62      	ldr	r2, [pc, #392]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000970:	4b5f      	ldr	r3, [pc, #380]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097e:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000984:	4a5a      	ldr	r2, [pc, #360]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000986:	f043 0320 	orr.w	r3, r3, #32
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098e:	4b58      	ldr	r3, [pc, #352]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099c:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a2:	4a53      	ldr	r2, [pc, #332]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ac:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b4d      	ldr	r3, [pc, #308]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c0:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ca:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009de:	4a44      	ldr	r2, [pc, #272]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fc:	4a3c      	ldr	r2, [pc, #240]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1a:	4a35      	ldr	r2, [pc, #212]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <MX_GPIO_Init+0x1c4>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2110      	movs	r1, #16
 8000a36:	482f      	ldr	r0, [pc, #188]	; (8000af4 <MX_GPIO_Init+0x1c8>)
 8000a38:	f006 facc 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	482d      	ldr	r0, [pc, #180]	; (8000af8 <MX_GPIO_Init+0x1cc>)
 8000a42:	f006 fac7 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2110      	movs	r1, #16
 8000a4a:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_GPIO_Init+0x1d0>)
 8000a4c:	f006 fac2 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_GPIO_Init+0x1d4>)
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4827      	ldr	r0, [pc, #156]	; (8000b04 <MX_GPIO_Init+0x1d8>)
 8000a66:	f006 f963 	bl	8006d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481c      	ldr	r0, [pc, #112]	; (8000af4 <MX_GPIO_Init+0x1c8>)
 8000a82:	f006 f955 	bl	8006d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <MX_GPIO_Init+0x1cc>)
 8000a9e:	f006 f947 	bl	8006d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <MX_GPIO_Init+0x1d0>)
 8000aba:	f006 f939 	bl	8006d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_GPIO_Init+0x1d4>)
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_GPIO_Init+0x1d0>)
 8000ad2:	f006 f92d 	bl	8006d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2018      	movs	r0, #24
 8000adc:	f003 fa0e 	bl	8003efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000ae0:	2018      	movs	r0, #24
 8000ae2:	f003 fa25 	bl	8003f30 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	44020c00 	.word	0x44020c00
 8000af4:	42021400 	.word	0x42021400
 8000af8:	42020400 	.word	0x42020400
 8000afc:	42021800 	.word	0x42021800
 8000b00:	10110000 	.word	0x10110000
 8000b04:	42020800 	.word	0x42020800

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f003 f8dd 	bl	8003cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  timeCounter++;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b26:	6013      	str	r3, [r2, #0]

  if(timeCounter > 1000)
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b30:	d905      	bls.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    timeFlag = TRUE;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
    timeCounter = 0;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40001000 	.word	0x40001000
 8000b4c:	2000025c 	.word	0x2000025c
 8000b50:	20000258 	.word	0x20000258

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>

08000b5e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	f06f 0001 	mvn.w	r0, #1
 8000b6a:	f003 f9c7 	bl	8003efc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0d0      	sub	sp, #320	; 0x140
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b82:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b98:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f01a fe65 	bl	801b874 <memset>
  if(huart->Instance==LPUART1)
 8000baa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a9e      	ldr	r2, [pc, #632]	; (8000e30 <HAL_UART_MspInit+0x2bc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d15e      	bne.n	8000c7a <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bc0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000bd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4618      	mov	r0, r3
 8000be4:	f007 fa1c 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000bee:	f7ff ffb1 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bf2:	4b90      	ldr	r3, [pc, #576]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000bf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bf8:	4a8e      	ldr	r2, [pc, #568]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfe:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000c02:	4b8c      	ldr	r3, [pc, #560]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c08:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c1a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c1e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b84      	ldr	r3, [pc, #528]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c26:	4a83      	ldr	r2, [pc, #524]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c30:	4b80      	ldr	r3, [pc, #512]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c36:	f003 0202 	and.w	r2, r3, #2
 8000c3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c48:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c4c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23c0      	movs	r3, #192	; 0xc0
 8000c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c66:	2308      	movs	r3, #8
 8000c68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c70:	4619      	mov	r1, r3
 8000c72:	4871      	ldr	r0, [pc, #452]	; (8000e38 <HAL_UART_MspInit+0x2c4>)
 8000c74:	f006 f85c 	bl	8006d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c78:	e0d5      	b.n	8000e26 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000c7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a6d      	ldr	r2, [pc, #436]	; (8000e3c <HAL_UART_MspInit+0x2c8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d165      	bne.n	8000d58 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c90:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000c94:	f04f 0202 	mov.w	r2, #2
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ca4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca8:	2200      	movs	r2, #0
 8000caa:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f007 f9b5 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000cbc:	f7ff ff4a 	bl	8000b54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cc6:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cd6:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000cda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cec:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d04:	f003 0208 	and.w	r2, r3, #8
 8000d08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d1a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d1c:	2360      	movs	r3, #96	; 0x60
 8000d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d34:	2307      	movs	r3, #7
 8000d36:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	483f      	ldr	r0, [pc, #252]	; (8000e40 <HAL_UART_MspInit+0x2cc>)
 8000d42:	f005 fff5 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	203b      	movs	r0, #59	; 0x3b
 8000d4c:	f003 f8d6 	bl	8003efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d50:	203b      	movs	r0, #59	; 0x3b
 8000d52:	f003 f8ed 	bl	8003f30 <HAL_NVIC_EnableIRQ>
}
 8000d56:	e066      	b.n	8000e26 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000d58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <HAL_UART_MspInit+0x2d0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d15d      	bne.n	8000e26 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d6e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d72:	f04f 0204 	mov.w	r2, #4
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d86:	2200      	movs	r2, #0
 8000d88:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 f946 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000d9a:	f7ff fedb 	bl	8000b54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000da4:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000daa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000db4:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000db8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dbc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_UART_MspInit+0x2c0>)
 8000dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de2:	f003 0208 	and.w	r2, r3, #8
 8000de6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000df4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000df8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e14:	2307      	movs	r3, #7
 8000e16:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <HAL_UART_MspInit+0x2cc>)
 8000e22:	f005 ff85 	bl	8006d30 <HAL_GPIO_Init>
}
 8000e26:	bf00      	nop
 8000e28:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	44002400 	.word	0x44002400
 8000e34:	44020c00 	.word	0x44020c00
 8000e38:	42020400 	.word	0x42020400
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	42020c00 	.word	0x42020c00
 8000e44:	40004800 	.word	0x40004800

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	; 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e50:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_InitTick+0xd8>)
 8000e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e56:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_InitTick+0xd8>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <HAL_InitTick+0xd8>)
 8000e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6e:	f107 020c 	add.w	r2, r7, #12
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 f899 	bl	8007fb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e88:	f007 f850 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 8000e8c:	6378      	str	r0, [r7, #52]	; 0x34
 8000e8e:	e004      	b.n	8000e9a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e90:	f007 f84c 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 8000e94:	4603      	mov	r3, r0
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	095b      	lsrs	r3, r3, #5
 8000e9e:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_InitTick+0xdc>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	09db      	lsrs	r3, r3, #7
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_InitTick+0xe0>)
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_InitTick+0xe4>)
 8000eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_InitTick+0xe0>)
 8000eb2:	2263      	movs	r2, #99	; 0x63
 8000eb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <HAL_InitTick+0xe0>)
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_InitTick+0xe0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_InitTick+0xe0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <HAL_InitTick+0xe0>)
 8000eca:	f00c f929 	bl	800d120 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d118      	bne.n	8000f0e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <HAL_InitTick+0xe0>)
 8000ede:	f00c f981 	bl	800d1e4 <HAL_TIM_Base_Start_IT>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10e      	bne.n	8000f0e <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d808      	bhi.n	8000f08 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	2031      	movs	r0, #49	; 0x31
 8000efc:	f002 fffe 	bl	8003efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_InitTick+0xe8>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e002      	b.n	8000f0e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f0e:	2031      	movs	r0, #49	; 0x31
 8000f10:	f003 f80e 	bl	8003f30 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3738      	adds	r7, #56	; 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	44020c00 	.word	0x44020c00
 8000f24:	0a7c5ac5 	.word	0x0a7c5ac5
 8000f28:	20000260 	.word	0x20000260
 8000f2c:	40001000 	.word	0x40001000
 8000f30:	20000040 	.word	0x20000040

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000f64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f68:	f006 f866 	bl	8007038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM6_IRQHandler+0x10>)
 8000f76:	f00c f9e3 	bl	800d340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000260 	.word	0x20000260

08000f84 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <USART2_IRQHandler+0x10>)
 8000f8a:	f00c fdff 	bl	800db8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20003bd0 	.word	0x20003bd0

08000f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return 1;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_kill>:

int _kill(int pid, int sig)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_kill+0x20>)
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	2000b27c 	.word	0x2000b27c

08000fcc <_exit>:

void _exit (int status)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffe5 	bl	8000fa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fde:	e7fe      	b.n	8000fde <_exit+0x12>

08000fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e00a      	b.n	8001008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff2:	f3af 8000 	nop.w
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf0      	blt.n	8000ff2 <_read+0x12>
  }

  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e009      	b.n	8001040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf1      	blt.n	800102c <_write+0x12>
  }
  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	605a      	str	r2, [r3, #4]
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d205      	bcs.n	80010f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <_sbrk+0x6c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200a0000 	.word	0x200a0000
 800111c:	00000400 	.word	0x00000400
 8001120:	200002ac 	.word	0x200002ac
 8001124:	2000b288 	.word	0x2000b288
 8001128:	2000b27c 	.word	0x2000b27c

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <SystemInit+0xdc>)
 8001134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001138:	4a33      	ldr	r2, [pc, #204]	; (8001208 <SystemInit+0xdc>)
 800113a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <SystemInit+0xe0>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <SystemInit+0xe0>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <SystemInit+0xe0>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <SystemInit+0xe0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	492c      	ldr	r1, [pc, #176]	; (800120c <SystemInit+0xe0>)
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <SystemInit+0xe4>)
 800115c:	4013      	ands	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <SystemInit+0xe0>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <SystemInit+0xe0>)
 8001168:	2200      	movs	r2, #0
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <SystemInit+0xe0>)
 800116e:	2200      	movs	r2, #0
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <SystemInit+0xe0>)
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <SystemInit+0xe8>)
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <SystemInit+0xe0>)
 800117a:	2200      	movs	r2, #0
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <SystemInit+0xe0>)
 8001180:	4a24      	ldr	r2, [pc, #144]	; (8001214 <SystemInit+0xe8>)
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <SystemInit+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <SystemInit+0xe0>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemInit+0xe8>)
 800118e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <SystemInit+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <SystemInit+0xe0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <SystemInit+0xe0>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <SystemInit+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <SystemInit+0xdc>)
 80011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ae:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <SystemInit+0xec>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011b8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80011c0:	d003      	beq.n	80011ca <SystemInit+0x9e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80011c8:	d117      	bne.n	80011fa <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <SystemInit+0xec>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <SystemInit+0xec>)
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <SystemInit+0xf0>)
 80011da:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <SystemInit+0xec>)
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <SystemInit+0xf4>)
 80011e0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <SystemInit+0xec>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <SystemInit+0xec>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <SystemInit+0xec>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <SystemInit+0xec>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	61d3      	str	r3, [r2, #28]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	44020c00 	.word	0x44020c00
 8001210:	eae2eae3 	.word	0xeae2eae3
 8001214:	01010280 	.word	0x01010280
 8001218:	40022000 	.word	0x40022000
 800121c:	08192a3b 	.word	0x08192a3b
 8001220:	4c5d6e7f 	.word	0x4c5d6e7f

08001224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f7ff ff80 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001252:	f01a fb81 	bl	801b958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff fa37 	bl	80006c8 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001268:	0801f964 	.word	0x0801f964
  ldr r2, =_sbss
 800126c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001270:	2000b284 	.word	0x2000b284

08001274 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_IRQHandler>

08001276 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  if (netif_is_link_up(netif))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <ethernet_link_status_updated+0x2c>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    LED_OnOff(LED2_YELLOW, TRUE);
 8001290:	2101      	movs	r1, #1
 8001292:	2002      	movs	r0, #2
 8001294:	f002 f9dc 	bl	8003650 <LED_OnOff>
    LED_OnOff(LED3_RED, FALSE);
 8001298:	2100      	movs	r1, #0
 800129a:	2003      	movs	r0, #3
 800129c:	f002 f9d8 	bl	8003650 <LED_OnOff>
#else
    LED_OnOff(LED2_YELLOW, FALSE);
    LED_OnOff(LED3_RED, TRUE);
#endif /* LWIP_DHCP */
  }
}
 80012a0:	e007      	b.n	80012b2 <ethernet_link_status_updated+0x3c>
    LED_OnOff(LED2_YELLOW, FALSE);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2002      	movs	r0, #2
 80012a6:	f002 f9d3 	bl	8003650 <LED_OnOff>
    LED_OnOff(LED3_RED, TRUE);
 80012aa:	2101      	movs	r1, #1
 80012ac:	2003      	movs	r0, #3
 80012ae:	f002 f9cf 	bl	8003650 <LED_OnOff>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80012c2:	f00f fb21 	bl	8010908 <lwip_init>
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else

  /* IP address default setting */
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_LWIP_Init+0x6c>)
 80012c8:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 80012ca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80012ce:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_LWIP_Init+0x70>)
 80012d2:	607b      	str	r3, [r7, #4]
#endif
  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	f107 010c 	add.w	r1, r7, #12
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_LWIP_Init+0x74>)
 80012e0:	9002      	str	r0, [sp, #8]
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_LWIP_Init+0x78>)
 80012e4:	9001      	str	r0, [sp, #4]
 80012e6:	2000      	movs	r0, #0
 80012e8:	9000      	str	r0, [sp, #0]
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <MX_LWIP_Init+0x7c>)
 80012ec:	f00f fff4 	bl	80112d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <MX_LWIP_Init+0x7c>)
 80012f2:	f010 f9a3 	bl	801163c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_LWIP_Init+0x7c>)
 80012f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <MX_LWIP_Init+0x7c>)
 800130a:	f010 f9a7 	bl	801165c <netif_set_up>
 800130e:	e002      	b.n	8001316 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <MX_LWIP_Init+0x7c>)
 8001312:	f010 fa0f 	bl	8011734 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001316:	4909      	ldr	r1, [pc, #36]	; (800133c <MX_LWIP_Init+0x80>)
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_LWIP_Init+0x7c>)
 800131a:	f010 faa1 	bl	8011860 <netif_set_link_callback>
  //dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	78dba8c0 	.word	0x78dba8c0
 800132c:	01dba8c0 	.word	0x01dba8c0
 8001330:	0801ae65 	.word	0x0801ae65
 8001334:	08001925 	.word	0x08001925
 8001338:	200000fc 	.word	0x200000fc
 800133c:	08001277 	.word	0x08001277

08001340 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_LWIP_Process+0x14>)
 8001346:	f000 facd 	bl	80018e4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800134a:	f017 f983 	bl	8018654 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
  //ethernetif_set_link(&gnetif);
/* USER CODE END 4_3 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000fc 	.word	0x200000fc

08001358 <app_start_get_time>:
static void app_close_conn(void); //close function
static void app_send_data(void); //send function


void app_start_get_time(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  app_open_conn();
 800135c:	f000 f802 	bl	8001364 <app_open_conn>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <app_open_conn>:
/*
 * app_open_connection
 * create a client pcb & call tcp_connect
 */
static void app_open_conn(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  err_t err;

  if (pcb_client == NULL)
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <app_open_conn+0x6c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <app_open_conn+0x3c>
  {
    pcb_client = tcp_new();
 8001372:	f012 fbd5 	bl	8013b20 <tcp_new>
 8001376:	4603      	mov	r3, r0
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <app_open_conn+0x6c>)
 800137a:	6013      	str	r3, [r2, #0]
    if (pcb_client == NULL) //lack of memory
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <app_open_conn+0x6c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10d      	bne.n	80013a0 <app_open_conn+0x3c>
    {
      memp_free(MEMP_TCP_PCB, pcb_client);
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <app_open_conn+0x6c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	2001      	movs	r0, #1
 800138c:	f00f ff72 	bl	8011274 <memp_free>
      pcb_client = NULL;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <app_open_conn+0x6c>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //error led
 8001396:	2201      	movs	r2, #1
 8001398:	2110      	movs	r1, #16
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <app_open_conn+0x70>)
 800139c:	f005 fe1a 	bl	8006fd4 <HAL_GPIO_WritePin>
    }
  }

  IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4); //server ip
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <app_open_conn+0x74>)
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <app_open_conn+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  err = tcp_connect(pcb_client, &server_addr, SERVER_PORT, tcp_callback_connected); //connect
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <app_open_conn+0x6c>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <app_open_conn+0x7c>)
 80013ac:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80013b0:	4909      	ldr	r1, [pc, #36]	; (80013d8 <app_open_conn+0x74>)
 80013b2:	f011 fc5b 	bl	8012c6c <tcp_connect>
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]

  if(err == ERR_ISCONN) //already connected
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	f113 0f0a 	cmn.w	r3, #10
 80013c2:	d101      	bne.n	80013c8 <app_open_conn+0x64>
  {
    app_close_conn();
 80013c4:	f000 f928 	bl	8001618 <app_close_conn>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200002b0 	.word	0x200002b0
 80013d4:	42021800 	.word	0x42021800
 80013d8:	200002b4 	.word	0x200002b4
 80013dc:	2adba8c0 	.word	0x2adba8c0
 80013e0:	080013e5 	.word	0x080013e5

080013e4 <tcp_callback_connected>:
/*
 * tcp_callback_connected
 * callback when connected, client sends a request to the server
 */
static err_t tcp_callback_connected(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	4613      	mov	r3, r2
 80013f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);

  if (err != ERR_OK) //error when connect to the server
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <tcp_callback_connected+0x1c>
  {
    return err;
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	e01b      	b.n	8001438 <tcp_callback_connected+0x54>
  }

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for the client pcb
 8001400:	2140      	movs	r1, #64	; 0x40
 8001402:	68b8      	ldr	r0, [r7, #8]
 8001404:	f012 f99a 	bl	801373c <tcp_setprio>

  tcp_arg(pcb_new, 0); //no argument is used
 8001408:	2100      	movs	r1, #0
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f012 fb90 	bl	8013b30 <tcp_arg>
  tcp_sent(pcb_new, tcp_callback_sent); //register send callback
 8001410:	490b      	ldr	r1, [pc, #44]	; (8001440 <tcp_callback_connected+0x5c>)
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f012 fbc0 	bl	8013b98 <tcp_sent>
  tcp_recv(pcb_new, tcp_callback_received);  //register receive callback
 8001418:	490a      	ldr	r1, [pc, #40]	; (8001444 <tcp_callback_connected+0x60>)
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	f012 fb9a 	bl	8013b54 <tcp_recv>
  tcp_err(pcb_new, tcp_callback_error); //register error callback
 8001420:	4909      	ldr	r1, [pc, #36]	; (8001448 <tcp_callback_connected+0x64>)
 8001422:	68b8      	ldr	r0, [r7, #8]
 8001424:	f012 fbda 	bl	8013bdc <tcp_err>
  tcp_poll(pcb_new, tcp_callback_poll, 0); //register poll callback
 8001428:	2200      	movs	r2, #0
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <tcp_callback_connected+0x68>)
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f012 fbf7 	bl	8013c20 <tcp_poll>

  app_send_data(); //send a request
 8001432:	f000 f80d 	bl	8001450 <app_send_data>

  return ERR_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	080014ad 	.word	0x080014ad
 8001444:	08001519 	.word	0x08001519
 8001448:	08001675 	.word	0x08001675
 800144c:	08001699 	.word	0x08001699

08001450 <app_send_data>:
/*
 * app_send_data
 * send the request to the server
 */
static void app_send_data(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  memset(&packet, 0, sizeof(struct time_packet));
 8001454:	220c      	movs	r2, #12
 8001456:	2100      	movs	r1, #0
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <app_send_data+0x50>)
 800145a:	f01a fa0b 	bl	801b874 <memset>
  packet.head = 0xAE; //head
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <app_send_data+0x50>)
 8001460:	22ae      	movs	r2, #174	; 0xae
 8001462:	701a      	strb	r2, [r3, #0]
  packet.type = REQ; //request type
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <app_send_data+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	705a      	strb	r2, [r3, #1]
  packet.tail = 0xEA; //tail
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <app_send_data+0x50>)
 800146c:	22ea      	movs	r2, #234	; 0xea
 800146e:	72da      	strb	r2, [r3, #11]
  packet.dummy[0] = 't';
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <app_send_data+0x50>)
 8001472:	2274      	movs	r2, #116	; 0x74
 8001474:	721a      	strb	r2, [r3, #8]
  packet.dummy[1] = 'e';
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <app_send_data+0x50>)
 8001478:	2265      	movs	r2, #101	; 0x65
 800147a:	725a      	strb	r2, [r3, #9]
  packet.dummy[2] = 's';
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <app_send_data+0x50>)
 800147e:	2273      	movs	r2, #115	; 0x73
 8001480:	729a      	strb	r2, [r3, #10]
  packet.dummy[3] = 't';
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <app_send_data+0x50>)
 8001484:	2274      	movs	r2, #116	; 0x74
 8001486:	72da      	strb	r2, [r3, #11]
  nWritten = 0; //clear index
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <app_send_data+0x54>)
 800148a:	2200      	movs	r2, #0
 800148c:	801a      	strh	r2, [r3, #0]

  // TCP_WRITE_FLAG_COPY : 복사 후 전송하기 때문에 packet 값을 변경해도 되지만 사용하지 않는 경우에는 packet 내용을 변경하면 원하지 않는 데이터가 전송

  //tcp_write(pcb_client, &packet,sizeof(struct time_packet), TCP_WRITE_FLAG_COPY); //use copied data
  tcp_write(pcb_client, &packet,sizeof(struct time_packet), 0); //use pointer, should not changed until receive ACK
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <app_send_data+0x58>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	220c      	movs	r2, #12
 8001496:	4902      	ldr	r1, [pc, #8]	; (80014a0 <app_send_data+0x50>)
 8001498:	f015 fa74 	bl	8016984 <tcp_write>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200002b8 	.word	0x200002b8
 80014a4:	200002c6 	.word	0x200002c6
 80014a8:	200002b0 	.word	0x200002b0

080014ac <tcp_callback_sent>:
/*
 * tcp_callback_sent
 * callback when data sending is finished, control leds
 */
static err_t tcp_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  nWritten += len;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <tcp_callback_sent+0x5c>)
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4413      	add	r3, r2
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <tcp_callback_sent+0x5c>)
 80014c6:	801a      	strh	r2, [r3, #0]

  if(nWritten < sizeof(struct time_packet)) //need to flush remain data
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <tcp_callback_sent+0x5c>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b0b      	cmp	r3, #11
 80014ce:	d805      	bhi.n	80014dc <tcp_callback_sent+0x30>
  {
    tcp_output(pcb_client); //flush
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <tcp_callback_sent+0x60>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f016 f83f 	bl	8017558 <tcp_output>
 80014da:	e00f      	b.n	80014fc <tcp_callback_sent+0x50>
  }
  else if(nWritten > sizeof(struct time_packet)) //invalid length of sent data
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <tcp_callback_sent+0x5c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d907      	bls.n	80014f4 <tcp_callback_sent+0x48>
  {
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //error led
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <tcp_callback_sent+0x64>)
 80014ea:	f005 fd73 	bl	8006fd4 <HAL_GPIO_WritePin>
    app_close_conn();
 80014ee:	f000 f893 	bl	8001618 <app_close_conn>
 80014f2:	e003      	b.n	80014fc <tcp_callback_sent+0x50>
  }
  else
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin); //blink green when sent O.K
 80014f4:	2101      	movs	r1, #1
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <tcp_callback_sent+0x68>)
 80014f8:	f005 fd84 	bl	8007004 <HAL_GPIO_TogglePin>
  }

  return ERR_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002c6 	.word	0x200002c6
 800150c:	200002b0 	.word	0x200002b0
 8001510:	42021800 	.word	0x42021800
 8001514:	42020400 	.word	0x42020400

08001518 <tcp_callback_received>:
/*
 * tcp_callback_received
 * callback when data is received, validate received data and parse it
 */
static err_t tcp_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af04      	add	r7, sp, #16
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	70fb      	strb	r3, [r7, #3]
  err_t ret_err;

  if (p == NULL) //pbuf is null when session is closed
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <tcp_callback_received+0x1e>
  {
    app_close_conn();
 800152c:	f000 f874 	bl	8001618 <app_close_conn>
    ret_err = ERR_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]
 8001534:	e064      	b.n	8001600 <tcp_callback_received+0xe8>
  }
  else if (err != ERR_OK) //ERR_ABRT is returned when called tcp_abort
 8001536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <tcp_callback_received+0x3e>
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	891b      	ldrh	r3, [r3, #8]
 8001542:	4619      	mov	r1, r3
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f011 faf9 	bl	8012b3c <tcp_recved>

    pbuf_free(p); //free pbuf
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f010 fd08 	bl	8011f60 <pbuf_free>
    ret_err = err;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	75fb      	strb	r3, [r7, #23]
 8001554:	e054      	b.n	8001600 <tcp_callback_received+0xe8>
  }
  else //receiving data
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	4619      	mov	r1, r3
 800155c:	68b8      	ldr	r0, [r7, #8]
 800155e:	f011 faed 	bl	8012b3c <tcp_recved>

    memcpy(&packet + nRead, p->payload, p->len);
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <tcp_callback_received+0xf4>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	461a      	mov	r2, r3
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <tcp_callback_received+0xf8>)
 8001574:	18d0      	adds	r0, r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	895b      	ldrh	r3, [r3, #10]
 800157e:	461a      	mov	r2, r3
 8001580:	f01a fa11 	bl	801b9a6 <memcpy>
    nRead += p->len;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	895a      	ldrh	r2, [r3, #10]
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <tcp_callback_received+0xf4>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <tcp_callback_received+0xf4>)
 8001592:	801a      	strh	r2, [r3, #0]

    if(nRead == sizeof(struct time_packet) && packet.type == RESP) //if received length is valid
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <tcp_callback_received+0xf4>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d123      	bne.n	80015e4 <tcp_callback_received+0xcc>
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <tcp_callback_received+0xf8>)
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d11f      	bne.n	80015e4 <tcp_callback_received+0xcc>
    {
      nRead = 0;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <tcp_callback_received+0xf4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]

      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
             packet.year + 2000,
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <tcp_callback_received+0xf8>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015ae:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <tcp_callback_received+0xf8>)
 80015b4:	78db      	ldrb	r3, [r3, #3]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015b6:	461c      	mov	r4, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <tcp_callback_received+0xf8>)
 80015ba:	791b      	ldrb	r3, [r3, #4]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015bc:	461d      	mov	r5, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <tcp_callback_received+0xf8>)
 80015c0:	795b      	ldrb	r3, [r3, #5]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015c2:	461a      	mov	r2, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <tcp_callback_received+0xf8>)
 80015c6:	799b      	ldrb	r3, [r3, #6]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015c8:	4618      	mov	r0, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <tcp_callback_received+0xf8>)
 80015cc:	79db      	ldrb	r3, [r3, #7]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	9001      	str	r0, [sp, #4]
 80015d2:	9200      	str	r2, [sp, #0]
 80015d4:	462b      	mov	r3, r5
 80015d6:	4622      	mov	r2, r4
 80015d8:	480e      	ldr	r0, [pc, #56]	; (8001614 <tcp_callback_received+0xfc>)
 80015da:	f01a f873 	bl	801b6c4 <iprintf>

      app_close_conn(); //close connection
 80015de:	f000 f81b 	bl	8001618 <app_close_conn>
 80015e2:	e008      	b.n	80015f6 <tcp_callback_received+0xde>
    }
    else if(nRead > sizeof(struct time_packet))
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <tcp_callback_received+0xf4>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	d904      	bls.n	80015f6 <tcp_callback_received+0xde>
    {
      nRead = 0;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <tcp_callback_received+0xf4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	801a      	strh	r2, [r3, #0]
      app_close_conn(); //close connection
 80015f2:	f000 f811 	bl	8001618 <app_close_conn>
    }

    pbuf_free(p); //free pbuf
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f010 fcb2 	bl	8011f60 <pbuf_free>
    ret_err = ERR_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret_err;
 8001600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bdb0      	pop	{r4, r5, r7, pc}
 800160c:	200002c4 	.word	0x200002c4
 8001610:	200002b8 	.word	0x200002b8
 8001614:	0801c820 	.word	0x0801c820

08001618 <app_close_conn>:
/*
 * app_close_conn
 * close connection & clear callbacks
 */
static void app_close_conn(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* clear callback functions */
  tcp_arg(pcb_client, NULL);
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <app_close_conn+0x58>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f012 fa84 	bl	8013b30 <tcp_arg>
  tcp_sent(pcb_client, NULL);
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <app_close_conn+0x58>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f012 fab2 	bl	8013b98 <tcp_sent>
  tcp_recv(pcb_client, NULL);
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <app_close_conn+0x58>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f012 fa8a 	bl	8013b54 <tcp_recv>
  tcp_err(pcb_client, NULL);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <app_close_conn+0x58>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f012 fac8 	bl	8013bdc <tcp_err>
  tcp_poll(pcb_client, NULL, 0);
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <app_close_conn+0x58>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f012 fae3 	bl	8013c20 <tcp_poll>

  tcp_close(pcb_client);    //close connection
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <app_close_conn+0x58>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f011 f91c 	bl	801289c <tcp_close>
  pcb_client = NULL;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <app_close_conn+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002b0 	.word	0x200002b0

08001674 <tcp_callback_error>:
/*
 *  error callback
 *  call when there's an error, turn on an error led
 */
static void tcp_callback_error(void *arg, err_t err)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //error loed
 8001680:	2201      	movs	r2, #1
 8001682:	2110      	movs	r1, #16
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <tcp_callback_error+0x20>)
 8001686:	f005 fca5 	bl	8006fd4 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	42021800 	.word	0x42021800

08001698 <tcp_callback_poll>:
/*
 * poll callback
 * called when lwip is idle, do something such as watchdog reset
 */
static err_t tcp_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  return ERR_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80016b8:	4a33      	ldr	r2, [pc, #204]	; (8001788 <low_level_init+0xd8>)
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c2:	6018      	str	r0, [r3, #0]
 80016c4:	3304      	adds	r3, #4
 80016c6:	8019      	strh	r1, [r3, #0]

  EthHandle.Instance = ETH;
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <low_level_init+0xdc>)
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <low_level_init+0xe0>)
 80016cc:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 80016ce:	4a2f      	ldr	r2, [pc, #188]	; (800178c <low_level_init+0xdc>)
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <low_level_init+0xdc>)
 80016d8:	2201      	movs	r2, #1
 80016da:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <low_level_init+0xdc>)
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <low_level_init+0xe4>)
 80016e0:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <low_level_init+0xdc>)
 80016e4:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <low_level_init+0xe8>)
 80016e6:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <low_level_init+0xdc>)
 80016ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ee:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 80016f0:	4826      	ldr	r0, [pc, #152]	; (800178c <low_level_init+0xdc>)
 80016f2:	f002 fcd1 	bl	8004098 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2206      	movs	r2, #6
 80016fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001734:	849a      	strh	r2, [r3, #36]	; 0x24

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800173c:	f043 030a 	orr.w	r3, r3, #10
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8001748:	4814      	ldr	r0, [pc, #80]	; (800179c <low_level_init+0xec>)
 800174a:	f00f fc8d 	bl	8011068 <memp_init_pool>

  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800174e:	2238      	movs	r2, #56	; 0x38
 8001750:	2100      	movs	r1, #0
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <low_level_init+0xf0>)
 8001754:	f01a f88e 	bl	801b874 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <low_level_init+0xf0>)
 800175a:	2221      	movs	r2, #33	; 0x21
 800175c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <low_level_init+0xf0>)
 8001760:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001764:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <low_level_init+0xf0>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800176c:	490d      	ldr	r1, [pc, #52]	; (80017a4 <low_level_init+0xf4>)
 800176e:	480e      	ldr	r0, [pc, #56]	; (80017a8 <low_level_init+0xf8>)
 8001770:	f000 fb48 	bl	8001e04 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <low_level_init+0xf8>)
 8001776:	f000 fb77 	bl	8001e68 <LAN8742_Init>

  ethernet_link_check_state(netif);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa46 	bl	8001c0c <ethernet_link_check_state>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	0801c840 	.word	0x0801c840
 800178c:	20003514 	.word	0x20003514
 8001790:	40028000 	.word	0x40028000
 8001794:	200002c8 	.word	0x200002c8
 8001798:	20000328 	.word	0x20000328
 800179c:	0801f5e8 	.word	0x0801f5e8
 80017a0:	200035c4 	.word	0x200035c4
 80017a4:	20000004 	.word	0x20000004
 80017a8:	200035fc 	.word	0x200035fc

080017ac <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b092      	sub	sp, #72	; 0x48
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2230      	movs	r2, #48	; 0x30
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f01a f851 	bl	801b874 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f01a f84a 	bl	801b874 <memset>

  for(q = p; q != NULL; q = q->next)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40
 80017e4:	e045      	b.n	8001872 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80017e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d902      	bls.n	80017f2 <low_level_output+0x46>
      return ERR_IF;
 80017ec:	f06f 030b 	mvn.w	r3, #11
 80017f0:	e055      	b.n	800189e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80017f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	3348      	adds	r3, #72	; 0x48
 8001802:	443b      	add	r3, r7
 8001804:	3b3c      	subs	r3, #60	; 0x3c
 8001806:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180a:	895b      	ldrh	r3, [r3, #10]
 800180c:	4619      	mov	r1, r3
 800180e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	3348      	adds	r3, #72	; 0x48
 800181a:	443b      	add	r3, r7
 800181c:	3b38      	subs	r3, #56	; 0x38
 800181e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	2b00      	cmp	r3, #0
 8001824:	d011      	beq.n	800184a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	f107 000c 	add.w	r0, r7, #12
 800182e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001830:	460b      	mov	r3, r1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	440b      	add	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	18c1      	adds	r1, r0, r3
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	3348      	adds	r3, #72	; 0x48
 8001844:	443b      	add	r3, r7
 8001846:	3b34      	subs	r3, #52	; 0x34
 8001848:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800184a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8001852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	3348      	adds	r3, #72	; 0x48
 800185e:	443b      	add	r3, r7
 8001860:	3b34      	subs	r3, #52	; 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001868:	3301      	adds	r3, #1
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
 8001872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1b6      	bne.n	80017e6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	891b      	ldrh	r3, [r3, #8]
 800187c:	461a      	mov	r2, r3
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <low_level_output+0xfc>)
 8001880:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <low_level_output+0xfc>)
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <low_level_output+0xfc>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8001890:	2214      	movs	r2, #20
 8001892:	4905      	ldr	r1, [pc, #20]	; (80018a8 <low_level_output+0xfc>)
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <low_level_output+0x100>)
 8001896:	f002 fd97 	bl	80043c8 <HAL_ETH_Transmit>

  return errval;
 800189a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3748      	adds	r7, #72	; 0x48
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200035c4 	.word	0x200035c4
 80018ac:	20003514 	.word	0x20003514

080018b0 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <low_level_input+0x2c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <low_level_input+0x30>)
 80018cc:	f002 fe13 	bl	80044f6 <HAL_ETH_ReadData>
  }
  return p;
 80018d0:	68fb      	ldr	r3, [r7, #12]

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20003510 	.word	0x20003510
 80018e0:	20003514 	.word	0x20003514

080018e4 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input(struct netif *netif)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]

    do
    {
      p = low_level_input( netif );
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffdd 	bl	80018b0 <low_level_input>
 80018f6:	60f8      	str	r0, [r7, #12]
      if (p != NULL)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <ethernetif_input+0x30>
      {
        if (netif->input( p, netif) != ERR_OK )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	4798      	blx	r3
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <ethernetif_input+0x30>
        {
          pbuf_free(p);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f010 fb26 	bl	8011f60 <pbuf_free>
        }
      }

    } while(p!=NULL);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ea      	bne.n	80018f0 <ethernetif_input+0xc>

}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <ethernetif_init+0x1c>
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <ethernetif_init+0x48>)
 8001934:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001938:	490d      	ldr	r1, [pc, #52]	; (8001970 <ethernetif_init+0x4c>)
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <ethernetif_init+0x50>)
 800193c:	f019 fec2 	bl	801b6c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2273      	movs	r2, #115	; 0x73
 8001944:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2274      	movs	r2, #116	; 0x74
 800194c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <ethernetif_init+0x54>)
 8001954:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <ethernetif_init+0x58>)
 800195a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fea7 	bl	80016b0 <low_level_init>

  return ERR_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	0801c848 	.word	0x0801c848
 8001970:	0801c874 	.word	0x0801c874
 8001974:	0801c884 	.word	0x0801c884
 8001978:	080192e5 	.word	0x080192e5
 800197c:	080017ad 	.word	0x080017ad

08001980 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <pbuf_free_custom+0x2c>)
 8001990:	f00f fc4c 	bl	801122c <memp_free_pool>
   /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <pbuf_free_custom+0x30>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d102      	bne.n	80019a2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <pbuf_free_custom+0x30>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
  }
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	0801f5e8 	.word	0x0801f5e8
 80019b0:	20003510 	.word	0x20003510

080019b4 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80019b8:	f002 f9a2 	bl	8003d00 <HAL_GetTick>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
	  if(heth->Instance==ETH)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a5d      	ldr	r2, [pc, #372]	; (8001b58 <HAL_ETH_MspInit+0x194>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f040 80b3 	bne.w	8001b4e <HAL_ETH_MspInit+0x18a>
	  {
	  /* USER CODE BEGIN ETH_MspInit 0 */

	  /* USER CODE END ETH_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ETH_CLK_ENABLE();
 80019e8:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a5b      	ldr	r2, [pc, #364]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 80019f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019f8:	4b58      	ldr	r3, [pc, #352]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
	    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001a06:	4b55      	ldr	r3, [pc, #340]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0c:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a16:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	69fb      	ldr	r3, [r7, #28]
	    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a48:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a66:	4a3d      	ldr	r2, [pc, #244]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a70:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a84:	4a35      	ldr	r2, [pc, #212]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa2:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_ETH_MspInit+0x198>)
 8001aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
	    PC5     ------> ETH_RXD1
	    PB15     ------> ETH_TXD1
	    PG11     ------> ETH_TX_EN
	    PG13     ------> ETH_TXD0
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001aba:	2332      	movs	r3, #50	; 0x32
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aca:	230b      	movs	r3, #11
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4822      	ldr	r0, [pc, #136]	; (8001b60 <HAL_ETH_MspInit+0x19c>)
 8001ad6:	f005 f92b 	bl	8006d30 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001ada:	2386      	movs	r3, #134	; 0x86
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aea:	230b      	movs	r3, #11
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	481b      	ldr	r0, [pc, #108]	; (8001b64 <HAL_ETH_MspInit+0x1a0>)
 8001af6:	f005 f91b 	bl	8006d30 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b0c:	230b      	movs	r3, #11
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <HAL_ETH_MspInit+0x1a4>)
 8001b18:	f005 f90a 	bl	8006d30 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001b1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b2e:	230b      	movs	r3, #11
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <HAL_ETH_MspInit+0x1a8>)
 8001b3a:	f005 f8f9 	bl	8006d30 <HAL_GPIO_Init>

	    /* ETH interrupt Init */
	    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2107      	movs	r1, #7
 8001b42:	206a      	movs	r0, #106	; 0x6a
 8001b44:	f002 f9da 	bl	8003efc <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001b48:	206a      	movs	r0, #106	; 0x6a
 8001b4a:	f002 f9f1 	bl	8003f30 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN ETH_MspInit 1 */

	  /* USER CODE END ETH_MspInit 1 */
	  }
}
 8001b4e:	bf00      	nop
 8001b50:	3738      	adds	r7, #56	; 0x38
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40028000 	.word	0x40028000
 8001b5c:	44020c00 	.word	0x44020c00
 8001b60:	42020800 	.word	0x42020800
 8001b64:	42020000 	.word	0x42020000
 8001b68:	42020400 	.word	0x42020400
 8001b6c:	42021800 	.word	0x42021800

08001b70 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <ETH_PHY_IO_Init+0x10>)
 8001b76:	f003 f883 	bl	8004c80 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20003514 	.word	0x20003514

08001b84 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <ETH_PHY_IO_ReadReg+0x30>)
 8001ba8:	f002 fdd3 	bl	8004752 <HAL_ETH_ReadPHYRegister>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e000      	b.n	8001bba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20003514 	.word	0x20003514

08001bc8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <ETH_PHY_IO_WriteReg+0x30>)
 8001bdc:	f002 fe0e 	bl	80047fc <HAL_ETH_WritePHYRegister>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e000      	b.n	8001bee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20003514 	.word	0x20003514

08001bfc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c00:	f002 f87e 	bl	8003d00 <HAL_GetTick>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <ethernet_link_check_state>:
/**
  * @brief
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0a0      	sub	sp, #128	; 0x80
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2264      	movs	r2, #100	; 0x64
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f019 fe29 	bl	801b874 <memset>
  int32_t PHYLinkState = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex =0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c2e:	2300      	movs	r3, #0
 8001c30:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001c32:	483a      	ldr	r0, [pc, #232]	; (8001d1c <ethernet_link_check_state+0x110>)
 8001c34:	f000 f9c0 	bl	8001fb8 <LAN8742_GetLinkState>
 8001c38:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00c      	beq.n	8001c66 <ethernet_link_check_state+0x5a>
 8001c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	dc09      	bgt.n	8001c66 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&EthHandle);
 8001c52:	4833      	ldr	r0, [pc, #204]	; (8001d20 <ethernet_link_check_state+0x114>)
 8001c54:	f002 fb68 	bl	8004328 <HAL_ETH_Stop>
    netif_set_down(netif);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f00f fd6b 	bl	8011734 <netif_set_down>
    netif_set_link_down(netif);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f00f fdce 	bl	8011800 <netif_set_link_down>
      HAL_ETH_Start(&EthHandle);
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }
}
 8001c64:	e055      	b.n	8001d12 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d14e      	bne.n	8001d12 <ethernet_link_check_state+0x106>
 8001c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	dd4b      	ble.n	8001d12 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8001c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c7c:	3b02      	subs	r3, #2
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d82a      	bhi.n	8001cd8 <ethernet_link_check_state+0xcc>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <ethernet_link_check_state+0x7c>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001c99 	.word	0x08001c99
 8001c8c:	08001cab 	.word	0x08001cab
 8001c90:	08001cbb 	.word	0x08001cbb
 8001c94:	08001ccb 	.word	0x08001ccb
      duplex = ETH_FULLDUPLEX_MODE;
 8001c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ca2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001ca8:	e017      	b.n	8001cda <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001cb8:	e00f      	b.n	8001cda <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8001cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001cc8:	e007      	b.n	8001cda <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001cd6:	e000      	b.n	8001cda <ethernet_link_check_state+0xce>
      break;
 8001cd8:	bf00      	nop
    if(linkchanged)
 8001cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <ethernet_link_check_state+0x114>)
 8001ce8:	f002 fddc 	bl	80048a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8001cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8001cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <ethernet_link_check_state+0x114>)
 8001cfc:	f002 ffa6 	bl	8004c4c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&EthHandle);
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <ethernet_link_check_state+0x114>)
 8001d02:	f002 faaf 	bl	8004264 <HAL_ETH_Start>
      netif_set_up(netif);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f00f fca8 	bl	801165c <netif_set_up>
      netif_set_link_up(netif);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f00f fd43 	bl	8011798 <netif_set_link_up>
}
 8001d12:	bf00      	nop
 8001d14:	3780      	adds	r7, #128	; 0x80
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200035fc 	.word	0x200035fc
 8001d20:	20003514 	.word	0x20003514

08001d24 <HAL_ETH_RxAllocateCallback>:


void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001d2c:	4812      	ldr	r0, [pc, #72]	; (8001d78 <HAL_ETH_RxAllocateCallback+0x54>)
 8001d2e:	f00f fa0f 	bl	8011150 <memp_malloc_pool>
 8001d32:	60f8      	str	r0, [r7, #12]
  if (p)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d014      	beq.n	8001d64 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f103 0220 	add.w	r2, r3, #32
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <HAL_ETH_RxAllocateCallback+0x58>)
 8001d48:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d52:	9201      	str	r2, [sp, #4]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2241      	movs	r2, #65	; 0x41
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f00f ff45 	bl	8011bec <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 8001d62:	e005      	b.n	8001d70 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_ETH_RxAllocateCallback+0x5c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	0801f5e8 	.word	0x0801f5e8
 8001d7c:	08001981 	.word	0x08001981
 8001d80:	20003510 	.word	0x20003510

08001d84 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3b20      	subs	r3, #32
 8001da2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2200      	movs	r2, #0
 8001dae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e003      	b.n	8001dce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e009      	b.n	8001df0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	891a      	ldrh	r2, [r3, #8]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4413      	add	r3, r2
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f2      	bne.n	8001ddc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <LAN8742_RegisterBusIO+0x28>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <LAN8742_RegisterBusIO+0x28>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <LAN8742_RegisterBusIO+0x28>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	e014      	b.n	8001e5c <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d17c      	bne.n	8001f82 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e01c      	b.n	8001edc <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f107 0208 	add.w	r2, r7, #8
 8001eaa:	2112      	movs	r1, #18
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	4798      	blx	r3
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da03      	bge.n	8001ebe <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001eb6:	f06f 0304 	mvn.w	r3, #4
 8001eba:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001ebc:	e00b      	b.n	8001ed6 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d105      	bne.n	8001ed6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
         break;
 8001ed4:	e005      	b.n	8001ee2 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b1f      	cmp	r3, #31
 8001ee0:	d9df      	bls.n	8001ea2 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b1f      	cmp	r3, #31
 8001ee8:	d902      	bls.n	8001ef0 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001eea:	f06f 0302 	mvn.w	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d145      	bne.n	8001f82 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6810      	ldr	r0, [r2, #0]
 8001efe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f02:	2100      	movs	r1, #0
 8001f04:	4798      	blx	r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db37      	blt.n	8001f7c <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6810      	ldr	r0, [r2, #0]
 8001f14:	f107 0208 	add.w	r2, r7, #8
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4798      	blx	r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db28      	blt.n	8001f74 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	4798      	blx	r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f2c:	e01c      	b.n	8001f68 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4798      	blx	r3
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f40:	d80e      	bhi.n	8001f60 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6810      	ldr	r0, [r2, #0]
 8001f4a:	f107 0208 	add.w	r2, r7, #8
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4798      	blx	r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da07      	bge.n	8001f68 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001f58:	f06f 0304 	mvn.w	r3, #4
 8001f5c:	613b      	str	r3, [r7, #16]
                 break;
 8001f5e:	e010      	b.n	8001f82 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001f60:	f06f 0301 	mvn.w	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
               break;
 8001f66:	e00c      	b.n	8001f82 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1dd      	bne.n	8001f2e <LAN8742_Init+0xc6>
 8001f72:	e006      	b.n	8001f82 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f74:	f06f 0304 	mvn.w	r3, #4
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e002      	b.n	8001f82 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f7c:	f06f 0303 	mvn.w	r3, #3
 8001f80:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d112      	bne.n	8001fae <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4798      	blx	r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f92:	bf00      	nop
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4798      	blx	r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fa6:	d9f5      	bls.n	8001f94 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001fae:	693b      	ldr	r3, [r7, #16]
 }
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6810      	ldr	r0, [r2, #0]
 8001fcc:	f107 020c 	add.w	r2, r7, #12
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4798      	blx	r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da02      	bge.n	8001fe0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fda:	f06f 0304 	mvn.w	r3, #4
 8001fde:	e06e      	b.n	80020be <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6810      	ldr	r0, [r2, #0]
 8001fe8:	f107 020c 	add.w	r2, r7, #12
 8001fec:	2101      	movs	r1, #1
 8001fee:	4798      	blx	r3
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da02      	bge.n	8001ffc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ff6:	f06f 0304 	mvn.w	r3, #4
 8001ffa:	e060      	b.n	80020be <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002006:	2301      	movs	r3, #1
 8002008:	e059      	b.n	80020be <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6810      	ldr	r0, [r2, #0]
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2100      	movs	r1, #0
 8002018:	4798      	blx	r3
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	da02      	bge.n	8002026 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002020:	f06f 0304 	mvn.w	r3, #4
 8002024:	e04b      	b.n	80020be <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11b      	bne.n	8002068 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <LAN8742_GetLinkState+0x90>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002044:	2302      	movs	r3, #2
 8002046:	e03a      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002052:	2303      	movs	r3, #3
 8002054:	e033      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002060:	2304      	movs	r3, #4
 8002062:	e02c      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002064:	2305      	movs	r3, #5
 8002066:	e02a      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6810      	ldr	r0, [r2, #0]
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	211f      	movs	r1, #31
 8002076:	4798      	blx	r3
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	da02      	bge.n	8002084 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800207e:	f06f 0304 	mvn.w	r3, #4
 8002082:	e01c      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800208e:	2306      	movs	r3, #6
 8002090:	e015      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 031c 	and.w	r3, r3, #28
 8002098:	2b18      	cmp	r3, #24
 800209a:	d101      	bne.n	80020a0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800209c:	2302      	movs	r3, #2
 800209e:	e00e      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 031c 	and.w	r3, r3, #28
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d101      	bne.n	80020ae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e007      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 031c 	and.w	r3, r3, #28
 80020b4:	2b14      	cmp	r3, #20
 80020b6:	d101      	bne.n	80020bc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80020b8:	2304      	movs	r3, #4
 80020ba:	e000      	b.n	80020be <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80020bc:	2305      	movs	r3, #5
    }
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	e070      	b.n	80021ba <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 80020d8:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <CAN_Init+0x104>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f240 516c 	movw	r1, #1388	; 0x56c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 80020ea:	4a38      	ldr	r2, [pc, #224]	; (80021cc <CAN_Init+0x104>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f240 516c 	movw	r1, #1388	; 0x56c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3304      	adds	r3, #4
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <CAN_Init+0x104>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f240 516c 	movw	r1, #1388	; 0x56c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3308      	adds	r3, #8
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 8002112:	4a2e      	ldr	r2, [pc, #184]	; (80021cc <CAN_Init+0x104>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f240 516c 	movw	r1, #1388	; 0x56c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	330c      	adds	r3, #12
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 8002126:	4a29      	ldr	r2, [pc, #164]	; (80021cc <CAN_Init+0x104>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f240 516c 	movw	r1, #1388	; 0x56c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3310      	adds	r3, #16
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <CAN_Init+0x104>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3314      	adds	r3, #20
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <CAN_Init+0x104>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f240 516c 	movw	r1, #1388	; 0x56c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3318      	adds	r3, #24
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <CAN_Init+0x104>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f240 516c 	movw	r1, #1388	; 0x56c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	331c      	adds	r3, #28
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <CAN_Init+0x104>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f240 516c 	movw	r1, #1388	; 0x56c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3320      	adds	r3, #32
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	3398      	adds	r3, #152	; 0x98
 8002196:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <CAN_Init+0x104>)
 8002198:	1898      	adds	r0, r3, r2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f240 526c 	movw	r2, #1388	; 0x56c
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	33a8      	adds	r3, #168	; 0xa8
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <CAN_Init+0x104>)
 80021a8:	4413      	add	r3, r2
 80021aa:	1d19      	adds	r1, r3, #4
 80021ac:	2310      	movs	r3, #16
 80021ae:	224c      	movs	r2, #76	; 0x4c
 80021b0:	f00d fba6 	bl	800f900 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3301      	adds	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dd8b      	ble.n	80020d8 <CAN_Init+0x10>

  }
  return ret;
 80021c0:	683b      	ldr	r3, [r7, #0]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000361c 	.word	0x2000361c

080021d0 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4623      	mov	r3, r4
 80021e0:	71fb      	strb	r3, [r7, #7]
 80021e2:	4603      	mov	r3, r0
 80021e4:	71bb      	strb	r3, [r7, #6]
 80021e6:	460b      	mov	r3, r1
 80021e8:	717b      	strb	r3, [r7, #5]
 80021ea:	4613      	mov	r3, r2
 80021ec:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f240 526c 	movw	r2, #1388	; 0x56c
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	3330      	adds	r3, #48	; 0x30
 80021fe:	4a90      	ldr	r2, [pc, #576]	; (8002440 <CAN_Open+0x270>)
 8002200:	4413      	add	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <CAN_Open+0x3e>
 800220a:	2300      	movs	r3, #0
 800220c:	e114      	b.n	8002438 <CAN_Open+0x268>

  switch(ch)
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 80a8 	bne.w	8002366 <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4a8a      	ldr	r2, [pc, #552]	; (8002444 <CAN_Open+0x274>)
 800221a:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 8002222:	797b      	ldrb	r3, [r7, #5]
 8002224:	4a88      	ldr	r2, [pc, #544]	; (8002448 <CAN_Open+0x278>)
 8002226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	4a86      	ldr	r2, [pc, #536]	; (800244c <CAN_Open+0x27c>)
 8002232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2201      	movs	r2, #1
 800223e:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2201      	movs	r2, #1
 8002244:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2201      	movs	r2, #1
 800224a:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 800224c:	4b80      	ldr	r3, [pc, #512]	; (8002450 <CAN_Open+0x280>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	793b      	ldrb	r3, [r7, #4]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 800225c:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <CAN_Open+0x280>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	793b      	ldrb	r3, [r7, #4]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 800226c:	4b78      	ldr	r3, [pc, #480]	; (8002450 <CAN_Open+0x280>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	793b      	ldrb	r3, [r7, #4]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 800227c:	4b74      	ldr	r3, [pc, #464]	; (8002450 <CAN_Open+0x280>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	793b      	ldrb	r3, [r7, #4]
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <CAN_Open+0x284>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <CAN_Open+0x284>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 80022b0:	4b68      	ldr	r3, [pc, #416]	; (8002454 <CAN_Open+0x284>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 80022c2:	4b64      	ldr	r3, [pc, #400]	; (8002454 <CAN_Open+0x284>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	4413      	add	r3, r2
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	221c      	movs	r2, #28
 80022d8:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2208      	movs	r2, #8
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2200      	movs	r2, #0
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	4a55      	ldr	r2, [pc, #340]	; (8002440 <CAN_Open+0x270>)
 80022ea:	f240 516c 	movw	r1, #1388	; 0x56c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	332c      	adds	r3, #44	; 0x2c
 80022f6:	79ba      	ldrb	r2, [r7, #6]
 80022f8:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <CAN_Open+0x270>)
 80022fe:	f240 516c 	movw	r1, #1388	; 0x56c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	332d      	adds	r3, #45	; 0x2d
 800230a:	797a      	ldrb	r2, [r7, #5]
 800230c:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <CAN_Open+0x270>)
 8002312:	f240 516c 	movw	r1, #1388	; 0x56c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	332e      	adds	r3, #46	; 0x2e
 800231e:	793a      	ldrb	r2, [r7, #4]
 8002320:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <CAN_Open+0x270>)
 8002326:	f240 516c 	movw	r1, #1388	; 0x56c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	332f      	adds	r3, #47	; 0x2f
 8002332:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002336:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4a41      	ldr	r2, [pc, #260]	; (8002440 <CAN_Open+0x270>)
 800233c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3324      	adds	r3, #36	; 0x24
 8002348:	2240      	movs	r2, #64	; 0x40
 800234a:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <CAN_Open+0x270>)
 8002350:	f240 516c 	movw	r1, #1388	; 0x56c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3328      	adds	r3, #40	; 0x28
 800235c:	4a3e      	ldr	r2, [pc, #248]	; (8002458 <CAN_Open+0x288>)
 800235e:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]

      break;
 8002364:	bf00      	nop
  }

  if(ret != TRUE)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <CAN_Open+0x1a0>
  {
    return FALSE;
 800236c:	2300      	movs	r3, #0
 800236e:	e063      	b.n	8002438 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 8002370:	6938      	ldr	r0, [r7, #16]
 8002372:	f003 fa5f 	bl	8005834 <HAL_FDCAN_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <CAN_Open+0x1b0>
  {
    return FALSE;
 800237c:	2300      	movs	r3, #0
 800237e:	e05b      	b.n	8002438 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 8002380:	79f8      	ldrb	r0, [r7, #7]
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	f000 f866 	bl	800245c <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 8002390:	79f8      	ldrb	r0, [r7, #7]
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2300      	movs	r3, #0
 8002398:	2201      	movs	r2, #1
 800239a:	2100      	movs	r1, #0
 800239c:	f000 f85e 	bl	800245c <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	2202      	movs	r2, #2
 80023a8:	2102      	movs	r1, #2
 80023aa:	6938      	ldr	r0, [r7, #16]
 80023ac:	f003 fbf6 	bl	8005b9c <HAL_FDCAN_ConfigGlobalFilter>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <CAN_Open+0x1ea>
  {
    return FALSE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e03e      	b.n	8002438 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <CAN_Open+0x270>)
 80023be:	f240 516c 	movw	r1, #1388	; 0x56c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3328      	adds	r3, #40	; 0x28
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	6938      	ldr	r0, [r7, #16]
 80023d2:	f003 fec2 	bl	800615a <HAL_FDCAN_ActivateNotification>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <CAN_Open+0x210>
  {
    return FALSE;
 80023dc:	2300      	movs	r3, #0
 80023de:	e02b      	b.n	8002438 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 80023ee:	2200      	movs	r2, #0
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	6938      	ldr	r0, [r7, #16]
 80023f4:	f003 fc03 	bl	8005bfe <HAL_FDCAN_ConfigTxDelayCompensation>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <CAN_Open+0x232>
 80023fe:	2300      	movs	r3, #0
 8002400:	e01a      	b.n	8002438 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 8002402:	6938      	ldr	r0, [r7, #16]
 8002404:	f003 fc1d 	bl	8005c42 <HAL_FDCAN_EnableTxDelayCompensation>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <CAN_Open+0x242>
 800240e:	2300      	movs	r3, #0
 8002410:	e012      	b.n	8002438 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 8002412:	6938      	ldr	r0, [r7, #16]
 8002414:	f003 fc36 	bl	8005c84 <HAL_FDCAN_Start>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <CAN_Open+0x252>
  {
    return FALSE;
 800241e:	2300      	movs	r3, #0
 8002420:	e00a      	b.n	8002438 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <CAN_Open+0x270>)
 8002426:	f240 516c 	movw	r1, #1388	; 0x56c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

  return ret;
 8002436:	697b      	ldr	r3, [r7, #20]
}
 8002438:	4618      	mov	r0, r3
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}
 8002440:	2000361c 	.word	0x2000361c
 8002444:	4000a400 	.word	0x4000a400
 8002448:	0801f744 	.word	0x0801f744
 800244c:	0801f750 	.word	0x0801f750
 8002450:	20000018 	.word	0x20000018
 8002454:	2000001c 	.word	0x2000001c
 8002458:	000e0007 	.word	0x000e0007

0800245c <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	460b      	mov	r3, r1
 800246a:	71bb      	strb	r3, [r7, #6]
 800246c:	4613      	mov	r3, r2
 800246e:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <CAN_ConfigFilter+0x22>
 800247a:	2300      	movs	r3, #0
 800247c:	e034      	b.n	80024e8 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e002      	b.n	8002490 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800248a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248e:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <CAN_ConfigFilter+0x94>)
 8002494:	f240 516c 	movw	r1, #1388	; 0x56c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3324      	adds	r3, #36	; 0x24
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d102      	bne.n	80024ac <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e001      	b.n	80024b0 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 80024b4:	2302      	movs	r3, #2
 80024b6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f240 526c 	movw	r2, #1388	; 0x56c
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	3330      	adds	r3, #48	; 0x30
 80024cc:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <CAN_ConfigFilter+0x94>)
 80024ce:	4413      	add	r3, r2
 80024d0:	f107 020c 	add.w	r2, r7, #12
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fb06 	bl	8005ae8 <HAL_FDCAN_ConfigFilter>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000361c 	.word	0x2000361c

080024f4 <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d901      	bls.n	8002508 <CAN_MsgAvailable+0x14>
 8002504:	2300      	movs	r3, #0
 8002506:	e00b      	b.n	8002520 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f240 526c 	movw	r2, #1388	; 0x56c
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	3398      	adds	r3, #152	; 0x98
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <CAN_MsgAvailable+0x34>)
 8002516:	4413      	add	r3, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f00d fad4 	bl	800fac6 <qbufferAvailable>
 800251e:	4603      	mov	r3, r0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000361c 	.word	0x2000361c

0800252c <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b090      	sub	sp, #64	; 0x40
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 800253a:	2301      	movs	r3, #1
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d901      	bls.n	8002548 <CAN_MsgWrite+0x1c>
 8002544:	2300      	movs	r3, #0
 8002546:	e083      	b.n	8002650 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	4a43      	ldr	r2, [pc, #268]	; (8002658 <CAN_MsgWrite+0x12c>)
 800254c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3308      	adds	r3, #8
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <CAN_MsgWrite+0x3a>
 8002562:	2300      	movs	r3, #0
 8002564:	e074      	b.n	8002650 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	f240 526c 	movw	r2, #1388	; 0x56c
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	3330      	adds	r3, #48	; 0x30
 8002572:	4a39      	ldr	r2, [pc, #228]	; (8002658 <CAN_MsgWrite+0x12c>)
 8002574:	4413      	add	r3, r2
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <CAN_MsgWrite+0x5c>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d003      	beq.n	800258e <CAN_MsgWrite+0x62>
 8002586:	e006      	b.n	8002596 <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
        break;
 800258c:	e003      	b.n	8002596 <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 800258e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002592:	617b      	str	r3, [r7, #20]
        break;
 8002594:	bf00      	nop
    }

    switch(p_msg->frame)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800259c:	2b02      	cmp	r3, #2
 800259e:	d011      	beq.n	80025c4 <CAN_MsgWrite+0x98>
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	dc16      	bgt.n	80025d2 <CAN_MsgWrite+0xa6>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <CAN_MsgWrite+0x82>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <CAN_MsgWrite+0x8c>
 80025ac:	e011      	b.n	80025d2 <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025b6:	e00c      	b.n	80025d2 <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80025b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025c2:	e006      	b.n	80025d2 <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80025c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80025ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025d0:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80025dc:	2300      	movs	r3, #0
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <CAN_MsgWrite+0x130>)
 80025f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f6:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 80025f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025fa:	f003 fd9c 	bl	8006136 <HAL_FDCAN_GetTxFifoFreeLevel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	e023      	b.n	8002650 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8002608:	f001 fb7a 	bl	8003d00 <HAL_GetTick>
 800260c:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1d9a      	adds	r2, r3, #6
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4619      	mov	r1, r3
 8002618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800261a:	f003 fbcb 	bl	8005db4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002624:	e00a      	b.n	800263c <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 8002626:	f001 fb6b 	bl	8003d00 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d802      	bhi.n	800263c <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 8002636:	2300      	movs	r3, #0
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800263a:	e008      	b.n	800264e <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800263c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800263e:	f003 fd7a 	bl	8006136 <HAL_FDCAN_GetTxFifoFreeLevel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ee      	beq.n	8002626 <CAN_MsgWrite+0xfa>
 8002648:	e001      	b.n	800264e <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 800264e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3740      	adds	r7, #64	; 0x40
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	2000361c 	.word	0x2000361c
 800265c:	0801f704 	.word	0x0801f704

08002660 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 800266c:	2301      	movs	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d901      	bls.n	800267a <CAN_MsgRead+0x1a>
 8002676:	2300      	movs	r3, #0
 8002678:	e00e      	b.n	8002698 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	3398      	adds	r3, #152	; 0x98
 8002686:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <CAN_MsgRead+0x40>)
 8002688:	4413      	add	r3, r2
 800268a:	2201      	movs	r2, #1
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f00d f9ae 	bl	800f9f0 <qbufferRead>
 8002694:	60f8      	str	r0, [r7, #12]

  return ret;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000361c 	.word	0x2000361c

080026a4 <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d901      	bls.n	80026bc <CAN_GetRxErrCount+0x18>
 80026b8:	2300      	movs	r3, #0
 80026ba:	e015      	b.n	80026e8 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f240 526c 	movw	r2, #1388	; 0x56c
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	3330      	adds	r3, #48	; 0x30
 80026c8:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <CAN_GetRxErrCount+0x4c>)
 80026ca:	4413      	add	r3, r2
 80026cc:	f107 020c 	add.w	r2, r7, #12
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fd0a 	bl	80060ec <HAL_FDCAN_GetErrorCounters>
 80026d8:	4603      	mov	r3, r0
 80026da:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 80026dc:	7f7b      	ldrb	r3, [r7, #29]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 80026e6:	8bfb      	ldrh	r3, [r7, #30]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	2000361c 	.word	0x2000361c

080026f4 <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d901      	bls.n	800270c <CAN_GetTxErrCount+0x18>
 8002708:	2300      	movs	r3, #0
 800270a:	e015      	b.n	8002738 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	3330      	adds	r3, #48	; 0x30
 8002718:	4a09      	ldr	r2, [pc, #36]	; (8002740 <CAN_GetTxErrCount+0x4c>)
 800271a:	4413      	add	r3, r2
 800271c:	f107 020c 	add.w	r2, r7, #12
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fce2 	bl	80060ec <HAL_FDCAN_GetErrorCounters>
 8002728:	4603      	mov	r3, r0
 800272a:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800272c:	7f7b      	ldrb	r3, [r7, #29]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002736:	8bfb      	ldrh	r3, [r7, #30]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000361c 	.word	0x2000361c

08002744 <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f240 526c 	movw	r2, #1388	; 0x56c
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	3398      	adds	r3, #152	; 0x98
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <CAN_RxFifoCallback+0x148>)
 800275e:	4413      	add	r3, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f00d f99d 	bl	800faa0 <qbufferPeekWrite>
 8002766:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4a48      	ldr	r2, [pc, #288]	; (800288c <CAN_RxFifoCallback+0x148>)
 800276c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3324      	adds	r3, #36	; 0x24
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	3306      	adds	r3, #6
 800277e:	f107 020c 	add.w	r2, r7, #12
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f003 fb5a 	bl	8005e3c <HAL_FDCAN_GetRxMessage>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d179      	bne.n	8002882 <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 800279a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80027a2:	e006      	b.n	80027b2 <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a35      	ldr	r2, [pc, #212]	; (8002890 <CAN_RxFifoCallback+0x14c>)
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c4:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027cc:	d10d      	bne.n	80027ea <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d4:	d104      	bne.n	80027e0 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80027de:	e008      	b.n	80027f2 <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 80027e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80027e8:	e003      	b.n	80027f2 <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f240 526c 	movw	r2, #1388	; 0x56c
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	3398      	adds	r3, #152	; 0x98
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <CAN_RxFifoCallback+0x148>)
 8002800:	4413      	add	r3, r2
 8002802:	2201      	movs	r2, #1
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f00d f899 	bl	800f93e <qbufferWrite>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d011      	beq.n	8002836 <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	491d      	ldr	r1, [pc, #116]	; (800288c <CAN_RxFifoCallback+0x148>)
 8002816:	f240 526c 	movw	r2, #1388	; 0x56c
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	440a      	add	r2, r1
 8002820:	3214      	adds	r2, #20
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	3201      	adds	r2, #1
 8002826:	4919      	ldr	r1, [pc, #100]	; (800288c <CAN_RxFifoCallback+0x148>)
 8002828:	f240 506c 	movw	r0, #1388	; 0x56c
 800282c:	fb00 f303 	mul.w	r3, r0, r3
 8002830:	440b      	add	r3, r1
 8002832:	3314      	adds	r3, #20
 8002834:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <CAN_RxFifoCallback+0x148>)
 800283a:	f240 516c 	movw	r1, #1388	; 0x56c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3394      	adds	r3, #148	; 0x94
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01a      	beq.n	8002882 <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <CAN_RxFifoCallback+0x148>)
 8002850:	f240 516c 	movw	r1, #1388	; 0x56c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3394      	adds	r3, #148	; 0x94
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002860:	4798      	blx	r3
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10c      	bne.n	8002882 <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f240 526c 	movw	r2, #1388	; 0x56c
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	3398      	adds	r3, #152	; 0x98
 8002874:	4a05      	ldr	r2, [pc, #20]	; (800288c <CAN_RxFifoCallback+0x148>)
 8002876:	4413      	add	r3, r2
 8002878:	2201      	movs	r2, #1
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00d f8b7 	bl	800f9f0 <qbufferRead>
      }
    }
  }
}
 8002882:	bf00      	nop
 8002884:	3738      	adds	r7, #56	; 0x38
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000361c 	.word	0x2000361c
 8002890:	0801f6c4 	.word	0x0801f6c4

08002894 <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d828      	bhi.n	80028f6 <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f240 526c 	movw	r2, #1388	; 0x56c
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	3330      	adds	r3, #48	; 0x30
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <CAN_Recovery+0x6c>)
 80028b2:	4413      	add	r3, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fa0d 	bl	8005cd4 <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f240 526c 	movw	r2, #1388	; 0x56c
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	3330      	adds	r3, #48	; 0x30
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <CAN_Recovery+0x6c>)
 80028c8:	4413      	add	r3, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 f9da 	bl	8005c84 <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	490b      	ldr	r1, [pc, #44]	; (8002900 <CAN_Recovery+0x6c>)
 80028d4:	f240 526c 	movw	r2, #1388	; 0x56c
 80028d8:	fb03 f202 	mul.w	r2, r3, r2
 80028dc:	440a      	add	r2, r1
 80028de:	3210      	adds	r2, #16
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	3201      	adds	r2, #1
 80028e4:	4906      	ldr	r1, [pc, #24]	; (8002900 <CAN_Recovery+0x6c>)
 80028e6:	f240 506c 	movw	r0, #1388	; 0x56c
 80028ea:	fb00 f303 	mul.w	r3, r0, r3
 80028ee:	440b      	add	r3, r1
 80028f0:	3310      	adds	r3, #16
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e000      	b.n	80028f8 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 80028f6:	bf00      	nop
}
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000361c 	.word	0x2000361c

08002904 <CAN_Update>:

BOOL     CAN_Update(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	e02f      	b.n	8002974 <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f240 526c 	movw	r2, #1388	; 0x56c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a19      	ldr	r2, [pc, #100]	; (8002984 <CAN_Update+0x80>)
 8002920:	4413      	add	r3, r2
 8002922:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7b1b      	ldrb	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <CAN_Update+0x2e>
 800292c:	2b01      	cmp	r3, #1
 800292e:	d011      	beq.n	8002954 <CAN_Update+0x50>
 8002930:	e01d      	b.n	800296e <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d014      	beq.n	8002968 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ffa6 	bl	8002894 <CAN_Recovery>
          p_can->state = 1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 800294e:	2301      	movs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002952:	e009      	b.n	8002968 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <CAN_Update+0x68>
        {
          p_can->state = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	731a      	strb	r2, [r3, #12]
        }
        break;
 8002966:	e001      	b.n	800296c <CAN_Update+0x68>
        break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <CAN_Update+0x6a>
        break;
 800296c:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	ddcc      	ble.n	8002914 <CAN_Update+0x10>
    }
  }

  return ret;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000361c 	.word	0x2000361c

08002988 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d822      	bhi.n	80029de <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <CAN_ErrPrint+0x60>)
 800299c:	f240 516c 	movw	r1, #1388	; 0x56c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3308      	adds	r3, #8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <CAN_ErrPrint+0x34>
 80029b6:	480d      	ldr	r0, [pc, #52]	; (80029ec <CAN_ErrPrint+0x64>)
 80029b8:	f001 f81c 	bl	80039f4 <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <CAN_ErrPrint+0x44>
 80029c6:	480a      	ldr	r0, [pc, #40]	; (80029f0 <CAN_ErrPrint+0x68>)
 80029c8:	f001 f814 	bl	80039f4 <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <CAN_ErrPrint+0x58>
 80029d6:	4807      	ldr	r0, [pc, #28]	; (80029f4 <CAN_ErrPrint+0x6c>)
 80029d8:	f001 f80c 	bl	80039f4 <UART_Printf>
 80029dc:	e000      	b.n	80029e0 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 80029de:	bf00      	nop
}
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000361c 	.word	0x2000361c
 80029ec:	0801c8ac 	.word	0x0801c8ac
 80029f0:	0801c8c8 	.word	0x0801c8c8
 80029f4:	0801c8e4 	.word	0x0801c8e4

080029f8 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f240 526c 	movw	r2, #1388	; 0x56c
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	3330      	adds	r3, #48	; 0x30
 8002a0e:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a10:	4413      	add	r3, r2
 8002a12:	f107 020c 	add.w	r2, r7, #12
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fb17 	bl	800604c <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d014      	beq.n	8002a4e <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	4a42      	ldr	r2, [pc, #264]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a28:	f240 516c 	movw	r1, #1388	; 0x56c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3308      	adds	r3, #8
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	493c      	ldr	r1, [pc, #240]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a3e:	f240 506c 	movw	r0, #1388	; 0x56c
 8002a42:	fb00 f303 	mul.w	r3, r0, r3
 8002a46:	440b      	add	r3, r1
 8002a48:	3308      	adds	r3, #8
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e013      	b.n	8002a76 <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a52:	f240 516c 	movw	r1, #1388	; 0x56c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	4932      	ldr	r1, [pc, #200]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a68:	f240 506c 	movw	r0, #1388	; 0x56c
 8002a6c:	fb00 f303 	mul.w	r3, r0, r3
 8002a70:	440b      	add	r3, r1
 8002a72:	3308      	adds	r3, #8
 8002a74:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d014      	beq.n	8002aa6 <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a80:	f240 516c 	movw	r1, #1388	; 0x56c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f042 0202 	orr.w	r2, r2, #2
 8002a94:	4926      	ldr	r1, [pc, #152]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002a96:	f240 506c 	movw	r0, #1388	; 0x56c
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e013      	b.n	8002ace <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002aaa:	f240 516c 	movw	r1, #1388	; 0x56c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f022 0202 	bic.w	r2, r2, #2
 8002abe:	491c      	ldr	r1, [pc, #112]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002ac0:	f240 506c 	movw	r0, #1388	; 0x56c
 8002ac4:	fb00 f303 	mul.w	r3, r0, r3
 8002ac8:	440b      	add	r3, r1
 8002aca:	3308      	adds	r3, #8
 8002acc:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d014      	beq.n	8002afe <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002ad8:	f240 516c 	movw	r1, #1388	; 0x56c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f042 0204 	orr.w	r2, r2, #4
 8002aec:	4910      	ldr	r1, [pc, #64]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002aee:	f240 506c 	movw	r0, #1388	; 0x56c
 8002af2:	fb00 f303 	mul.w	r3, r0, r3
 8002af6:	440b      	add	r3, r1
 8002af8:	3308      	adds	r3, #8
 8002afa:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8002afc:	e013      	b.n	8002b26 <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002b02:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f022 0204 	bic.w	r2, r2, #4
 8002b16:	4906      	ldr	r1, [pc, #24]	; (8002b30 <CAN_ErrUpdate+0x138>)
 8002b18:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b1c:	fb00 f303 	mul.w	r3, r0, r3
 8002b20:	440b      	add	r3, r1
 8002b22:	3308      	adds	r3, #8
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	3738      	adds	r7, #56	; 0x38
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000361c 	.word	0x2000361c

08002b34 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff57 	bl	80029f8 <CAN_ErrUpdate>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_FDCAN_ErrorCallback+0x54>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_FDCAN_ErrorCallback+0x54>)
 8002b68:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d013      	beq.n	8002b9a <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_FDCAN_ErrorCallback+0x58>)
 8002b76:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3308      	adds	r3, #8
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	f042 0210 	orr.w	r2, r2, #16
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <HAL_FDCAN_ErrorCallback+0x58>)
 8002b8c:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	440b      	add	r3, r1
 8002b96:	3308      	adds	r3, #8
 8002b98:	601a      	str	r2, [r3, #0]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20003b88 	.word	0x20003b88
 8002bac:	2000361c 	.word	0x2000361c

08002bb0 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <FDCAN1_IT0_IRQHandler+0x10>)
 8002bb6:	f003 fbb6 	bl	8006326 <HAL_FDCAN_IRQHandler>
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000364c 	.word	0x2000364c

08002bc4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7ff fdb2 	bl	8002744 <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002bf2:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	3301      	adds	r3, #1
 8002c04:	4a02      	ldr	r2, [pc, #8]	; (8002c10 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c06:	6213      	str	r3, [r2, #32]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	2000361c 	.word	0x2000361c

08002c14 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0cc      	sub	sp, #304	; 0x130
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c22:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002c42:	461a      	mov	r2, r3
 8002c44:	2100      	movs	r1, #0
 8002c46:	f018 fe15 	bl	801b874 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <HAL_FDCAN_MspInit+0x120>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d166      	bne.n	8002d2a <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c60:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0304 	mov.w	r3, #4
 8002c6c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4618      	mov	r0, r3
 8002c84:	f005 f9cc 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8002c8e:	f7fd ff61 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_FDCAN_MspInit+0x124>)
 8002c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_FDCAN_MspInit+0x124>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_FDCAN_MspInit+0x124>)
 8002ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ca8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cbe:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_FDCAN_MspInit+0x124>)
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_FDCAN_MspInit+0x124>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_FDCAN_MspInit+0x124>)
 8002cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd6:	f003 0201 	and.w	r2, r3, #1
 8002cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ce8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cec:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002cf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002d08:	2309      	movs	r3, #9
 8002d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002d12:	4619      	mov	r1, r3
 8002d14:	4809      	ldr	r0, [pc, #36]	; (8002d3c <HAL_FDCAN_MspInit+0x128>)
 8002d16:	f004 f80b 	bl	8006d30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2105      	movs	r1, #5
 8002d1e:	2027      	movs	r0, #39	; 0x27
 8002d20:	f001 f8ec 	bl	8003efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002d24:	2027      	movs	r0, #39	; 0x27
 8002d26:	f001 f903 	bl	8003f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	4000a400 	.word	0x4000a400
 8002d38:	44020c00 	.word	0x44020c00
 8002d3c:	42020000 	.word	0x42020000

08002d40 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b0a1      	sub	sp, #132	; 0x84
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f040 822b 	bne.w	80031b0 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	f000 80d3 	beq.w	8002f08 <CLI_FDCANTest+0x1c8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	f200 8223 	bhi.w	80031b0 <CLI_FDCANTest+0x470>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d003      	beq.n	8002d78 <CLI_FDCANTest+0x38>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d062      	beq.n	8002e3c <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 8002d76:	e21b      	b.n	80031b0 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d7c:	e057      	b.n	8002e2e <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8002d7e:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <CLI_FDCANTest+0x60>
 8002d86:	4a93      	ldr	r2, [pc, #588]	; (8002fd4 <CLI_FDCANTest+0x294>)
 8002d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d8a:	f240 516c 	movw	r1, #1388	; 0x56c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	488f      	ldr	r0, [pc, #572]	; (8002fd8 <CLI_FDCANTest+0x298>)
 8002d9c:	f000 ff40 	bl	8003c20 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8002da0:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00c      	beq.n	8002dc2 <CLI_FDCANTest+0x82>
 8002da8:	4a8a      	ldr	r2, [pc, #552]	; (8002fd4 <CLI_FDCANTest+0x294>)
 8002daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dac:	f240 516c 	movw	r1, #1388	; 0x56c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3314      	adds	r3, #20
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4887      	ldr	r0, [pc, #540]	; (8002fdc <CLI_FDCANTest+0x29c>)
 8002dbe:	f000 ff2f 	bl	8003c20 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 8002dc2:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <CLI_FDCANTest+0xa4>
 8002dca:	4a82      	ldr	r2, [pc, #520]	; (8002fd4 <CLI_FDCANTest+0x294>)
 8002dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dce:	f240 516c 	movw	r1, #1388	; 0x56c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3318      	adds	r3, #24
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4880      	ldr	r0, [pc, #512]	; (8002fe0 <CLI_FDCANTest+0x2a0>)
 8002de0:	f000 ff1e 	bl	8003c20 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8002de4:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00c      	beq.n	8002e06 <CLI_FDCANTest+0xc6>
 8002dec:	4a79      	ldr	r2, [pc, #484]	; (8002fd4 <CLI_FDCANTest+0x294>)
 8002dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df0:	f240 516c 	movw	r1, #1388	; 0x56c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	331c      	adds	r3, #28
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4878      	ldr	r0, [pc, #480]	; (8002fe4 <CLI_FDCANTest+0x2a4>)
 8002e02:	f000 ff0d 	bl	8003c20 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <CLI_FDCANTest+0xe8>
 8002e0e:	4a71      	ldr	r2, [pc, #452]	; (8002fd4 <CLI_FDCANTest+0x294>)
 8002e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e12:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3320      	adds	r3, #32
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4871      	ldr	r0, [pc, #452]	; (8002fe8 <CLI_FDCANTest+0x2a8>)
 8002e24:	f000 fefc 	bl	8003c20 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8002e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	dda4      	ble.n	8002d7e <CLI_FDCANTest+0x3e>
        ret = TRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8002e38:	bf00      	nop
}
 8002e3a:	e1b9      	b.n	80031b0 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8002e40:	e05d      	b.n	8002efe <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7ff fb56 	bl	80024f4 <CAN_MsgAvailable>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d057      	beq.n	8002efe <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	4619      	mov	r1, r3
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff fc03 	bl	8002660 <CAN_MsgRead>
            index %= 1000;
 8002e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5c:	4a63      	ldr	r2, [pc, #396]	; (8002fec <CLI_FDCANTest+0x2ac>)
 8002e5e:	fba2 1203 	umull	r1, r2, r2, r3
 8002e62:	0992      	lsrs	r2, r2, #6
 8002e64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e68:	fb01 f202 	mul.w	r2, r1, r2
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d006      	beq.n	8002e86 <CLI_FDCANTest+0x146>
 8002e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e7e:	4619      	mov	r1, r3
 8002e80:	485b      	ldr	r0, [pc, #364]	; (8002ff0 <CLI_FDCANTest+0x2b0>)
 8002e82:	f000 fecd 	bl	8003c20 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8002e86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8002e8e:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <CLI_FDCANTest+0x16c>
 8002e96:	4857      	ldr	r0, [pc, #348]	; (8002ff4 <CLI_FDCANTest+0x2b4>)
 8002e98:	f000 fec2 	bl	8003c20 <svDebugMessage>
 8002e9c:	e006      	b.n	8002eac <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <CLI_FDCANTest+0x16c>
 8002ea6:	4854      	ldr	r0, [pc, #336]	; (8002ff8 <CLI_FDCANTest+0x2b8>)
 8002ea8:	f000 feba 	bl	8003c20 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002eac:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <CLI_FDCANTest+0x180>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	8aba      	ldrh	r2, [r7, #20]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4850      	ldr	r0, [pc, #320]	; (8002ffc <CLI_FDCANTest+0x2bc>)
 8002ebc:	f000 feb0 	bl	8003c20 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ec4:	e00f      	b.n	8002ee6 <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8002ec6:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <CLI_FDCANTest+0x1a0>
 8002ece:	f107 0216 	add.w	r2, r7, #22
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4849      	ldr	r0, [pc, #292]	; (8003000 <CLI_FDCANTest+0x2c0>)
 8002edc:	f000 fea0 	bl	8003c20 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	677b      	str	r3, [r7, #116]	; 0x74
 8002ee6:	8abb      	ldrh	r3, [r7, #20]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eec:	4293      	cmp	r3, r2
 8002eee:	dbea      	blt.n	8002ec6 <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8002ef0:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <CLI_FDCANTest+0x1be>
 8002ef8:	4842      	ldr	r0, [pc, #264]	; (8003004 <CLI_FDCANTest+0x2c4>)
 8002efa:	f000 fe91 	bl	8003c20 <svDebugMessage>
        while(svCLI_KeepLoop())
 8002efe:	f00c fee9 	bl	800fcd4 <svCLI_KeepLoop>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d19c      	bne.n	8002e42 <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <CLI_FDCANTest+0x294>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 8002f12:	e145      	b.n	80031a0 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 8002f14:	f000 fef4 	bl	8003d00 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f22:	f0c0 80be 	bcc.w	80030a2 <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 8002f26:	f000 feeb 	bl	8003d00 <HAL_GetTick>
 8002f2a:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 8002f42:	2302      	movs	r3, #2
 8002f44:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	220a      	movs	r2, #10
 8002f54:	4619      	mov	r1, r3
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7ff fae8 	bl	800252c <CAN_MsgWrite>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d070      	beq.n	8003044 <CLI_FDCANTest+0x304>
              index %= 1000;
 8002f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <CLI_FDCANTest+0x2ac>)
 8002f66:	fba2 1203 	umull	r1, r2, r2, r3
 8002f6a:	0992      	lsrs	r2, r2, #6
 8002f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f70:	fb01 f202 	mul.w	r2, r1, r2
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <CLI_FDCANTest+0x24e>
 8002f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f86:	4619      	mov	r1, r3
 8002f88:	481f      	ldr	r0, [pc, #124]	; (8003008 <CLI_FDCANTest+0x2c8>)
 8002f8a:	f000 fe49 	bl	8003c20 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 8002f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <CLI_FDCANTest+0x274>
 8002f9e:	4815      	ldr	r0, [pc, #84]	; (8002ff4 <CLI_FDCANTest+0x2b4>)
 8002fa0:	f000 fe3e 	bl	8003c20 <svDebugMessage>
 8002fa4:	e006      	b.n	8002fb4 <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <CLI_FDCANTest+0x274>
 8002fae:	4812      	ldr	r0, [pc, #72]	; (8002ff8 <CLI_FDCANTest+0x2b8>)
 8002fb0:	f000 fe36 	bl	8003c20 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <CLI_FDCANTest+0x290>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <CLI_FDCANTest+0x288>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	8aba      	ldrh	r2, [r7, #20]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	480e      	ldr	r0, [pc, #56]	; (8002ffc <CLI_FDCANTest+0x2bc>)
 8002fc4:	f000 fe2c 	bl	8003c20 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
 8002fcc:	e02e      	b.n	800302c <CLI_FDCANTest+0x2ec>
 8002fce:	bf00      	nop
 8002fd0:	2000003c 	.word	0x2000003c
 8002fd4:	2000361c 	.word	0x2000361c
 8002fd8:	0801c92c 	.word	0x0801c92c
 8002fdc:	0801c940 	.word	0x0801c940
 8002fe0:	0801c954 	.word	0x0801c954
 8002fe4:	0801c968 	.word	0x0801c968
 8002fe8:	0801c97c 	.word	0x0801c97c
 8002fec:	10624dd3 	.word	0x10624dd3
 8002ff0:	0801c990 	.word	0x0801c990
 8002ff4:	0801c9a0 	.word	0x0801c9a0
 8002ff8:	0801c9a8 	.word	0x0801c9a8
 8002ffc:	0801c9b0 	.word	0x0801c9b0
 8003000:	0801c9c4 	.word	0x0801c9c4
 8003004:	0801c9cc 	.word	0x0801c9cc
 8003008:	0801c9d0 	.word	0x0801c9d0
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <CLI_FDCANTest+0x478>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <CLI_FDCANTest+0x2e6>
 8003014:	f107 0216 	add.w	r2, r7, #22
 8003018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	4866      	ldr	r0, [pc, #408]	; (80031bc <CLI_FDCANTest+0x47c>)
 8003022:	f000 fdfd 	bl	8003c20 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8003026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003028:	3301      	adds	r3, #1
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
 800302c:	8abb      	ldrh	r3, [r7, #20]
 800302e:	461a      	mov	r2, r3
 8003030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003032:	4293      	cmp	r3, r2
 8003034:	dbea      	blt.n	800300c <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 8003036:	4b60      	ldr	r3, [pc, #384]	; (80031b8 <CLI_FDCANTest+0x478>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <CLI_FDCANTest+0x304>
 800303e:	4860      	ldr	r0, [pc, #384]	; (80031c0 <CLI_FDCANTest+0x480>)
 8003040:	f000 fdee 	bl	8003c20 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 8003044:	2000      	movs	r0, #0
 8003046:	f7ff fb2d 	bl	80026a4 <CAN_GetRxErrCount>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <CLI_FDCANTest+0x31c>
 8003050:	2000      	movs	r0, #0
 8003052:	f7ff fb4f 	bl	80026f4 <CAN_GetTxErrCount>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d011      	beq.n	8003080 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <CLI_FDCANTest+0x478>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <CLI_FDCANTest+0x340>
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff fb1d 	bl	80026a4 <CAN_GetRxErrCount>
 800306a:	4603      	mov	r3, r0
 800306c:	461c      	mov	r4, r3
 800306e:	2000      	movs	r0, #0
 8003070:	f7ff fb40 	bl	80026f4 <CAN_GetTxErrCount>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4621      	mov	r1, r4
 800307a:	4852      	ldr	r0, [pc, #328]	; (80031c4 <CLI_FDCANTest+0x484>)
 800307c:	f000 fdd0 	bl	8003c20 <svDebugMessage>
            if (err_int_cnt > 0)
 8003080:	4b51      	ldr	r3, [pc, #324]	; (80031c8 <CLI_FDCANTest+0x488>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00c      	beq.n	80030a2 <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <CLI_FDCANTest+0x478>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <CLI_FDCANTest+0x35c>
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <CLI_FDCANTest+0x488>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	484d      	ldr	r0, [pc, #308]	; (80031cc <CLI_FDCANTest+0x48c>)
 8003098:	f000 fdc2 	bl	8003c20 <svDebugMessage>
              err_int_cnt = 0;
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <CLI_FDCANTest+0x488>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <CLI_FDCANTest+0x490>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d00f      	beq.n	80030cc <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 80030ac:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <CLI_FDCANTest+0x478>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <CLI_FDCANTest+0x380>
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <CLI_FDCANTest+0x490>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4846      	ldr	r0, [pc, #280]	; (80031d4 <CLI_FDCANTest+0x494>)
 80030bc:	f000 fdb0 	bl	8003c20 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff fc61 	bl	8002988 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 80030c6:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <CLI_FDCANTest+0x490>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 80030cc:	f7ff fc1a 	bl	8002904 <CAN_Update>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 80030d6:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <CLI_FDCANTest+0x478>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <CLI_FDCANTest+0x3a4>
 80030de:	483e      	ldr	r0, [pc, #248]	; (80031d8 <CLI_FDCANTest+0x498>)
 80030e0:	f000 fd9e 	bl	8003c20 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7ff fa05 	bl	80024f4 <CAN_MsgAvailable>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d057      	beq.n	80031a0 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 80030f0:	f107 0310 	add.w	r3, r7, #16
 80030f4:	4619      	mov	r1, r3
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7ff fab2 	bl	8002660 <CAN_MsgRead>
            index %= 1000;
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <CLI_FDCANTest+0x49c>)
 8003100:	fba2 1203 	umull	r1, r2, r2, r3
 8003104:	0992      	lsrs	r2, r2, #6
 8003106:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800310a:	fb01 f202 	mul.w	r2, r1, r2
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <CLI_FDCANTest+0x478>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <CLI_FDCANTest+0x3e8>
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003120:	4619      	mov	r1, r3
 8003122:	482f      	ldr	r0, [pc, #188]	; (80031e0 <CLI_FDCANTest+0x4a0>)
 8003124:	f000 fd7c 	bl	8003c20 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8003128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <CLI_FDCANTest+0x478>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <CLI_FDCANTest+0x40e>
 8003138:	482a      	ldr	r0, [pc, #168]	; (80031e4 <CLI_FDCANTest+0x4a4>)
 800313a:	f000 fd71 	bl	8003c20 <svDebugMessage>
 800313e:	e006      	b.n	800314e <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <CLI_FDCANTest+0x478>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <CLI_FDCANTest+0x40e>
 8003148:	4827      	ldr	r0, [pc, #156]	; (80031e8 <CLI_FDCANTest+0x4a8>)
 800314a:	f000 fd69 	bl	8003c20 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <CLI_FDCANTest+0x478>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <CLI_FDCANTest+0x422>
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	8aba      	ldrh	r2, [r7, #20]
 800315a:	4619      	mov	r1, r3
 800315c:	4823      	ldr	r0, [pc, #140]	; (80031ec <CLI_FDCANTest+0x4ac>)
 800315e:	f000 fd5f 	bl	8003c20 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	663b      	str	r3, [r7, #96]	; 0x60
 8003166:	e00f      	b.n	8003188 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <CLI_FDCANTest+0x478>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <CLI_FDCANTest+0x442>
 8003170:	f107 0216 	add.w	r2, r7, #22
 8003174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	480f      	ldr	r0, [pc, #60]	; (80031bc <CLI_FDCANTest+0x47c>)
 800317e:	f000 fd4f 	bl	8003c20 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8003182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003184:	3301      	adds	r3, #1
 8003186:	663b      	str	r3, [r7, #96]	; 0x60
 8003188:	8abb      	ldrh	r3, [r7, #20]
 800318a:	461a      	mov	r2, r3
 800318c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800318e:	4293      	cmp	r3, r2
 8003190:	dbea      	blt.n	8003168 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <CLI_FDCANTest+0x478>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <CLI_FDCANTest+0x460>
 800319a:	4809      	ldr	r0, [pc, #36]	; (80031c0 <CLI_FDCANTest+0x480>)
 800319c:	f000 fd40 	bl	8003c20 <svDebugMessage>
        while(svCLI_KeepLoop())
 80031a0:	f00c fd98 	bl	800fcd4 <svCLI_KeepLoop>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f aeb4 	bne.w	8002f14 <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 80031b0:	bf00      	nop
 80031b2:	3784      	adds	r7, #132	; 0x84
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}
 80031b8:	2000003c 	.word	0x2000003c
 80031bc:	0801c9c4 	.word	0x0801c9c4
 80031c0:	0801c9cc 	.word	0x0801c9cc
 80031c4:	0801c9e0 	.word	0x0801c9e0
 80031c8:	20003b88 	.word	0x20003b88
 80031cc:	0801c9f4 	.word	0x0801c9f4
 80031d0:	2000361c 	.word	0x2000361c
 80031d4:	0801ca00 	.word	0x0801ca00
 80031d8:	0801ca10 	.word	0x0801ca10
 80031dc:	10624dd3 	.word	0x10624dd3
 80031e0:	0801c990 	.word	0x0801c990
 80031e4:	0801c9a0 	.word	0x0801c9a0
 80031e8:	0801c9a8 	.word	0x0801c9a8
 80031ec:	0801c9b0 	.word	0x0801c9b0

080031f0 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	; 0x30
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 800320a:	f003 fb5b 	bl	80068c4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <Flash_Erase+0xb0>)
 8003210:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003214:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	e013      	b.n	8003250 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	b29b      	uxth	r3, r3
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f837 	bl	80032a4 <Flash_InSector>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	2b00      	cmp	r3, #0
 8003240:	da01      	bge.n	8003246 <Flash_Erase+0x56>
      {
        start_sector = i;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	3301      	adds	r3, #1
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b7f      	cmp	r3, #127	; 0x7f
 8003254:	dde8      	ble.n	8003228 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	db19      	blt.n	8003290 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800325c:	2304      	movs	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8003260:	2303      	movs	r3, #3
 8003262:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8003268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	3301      	adds	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8003272:	f107 0208 	add.w	r2, r7, #8
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fc53 	bl	8006b28 <HAL_FLASHEx_Erase>
 8003282:	4603      	mov	r3, r0
 8003284:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 8003290:	f003 fb3e 	bl	8006910 <HAL_FLASH_Lock>
  return ret;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003296:	4618      	mov	r0, r3
 8003298:	3730      	adds	r7, #48	; 0x30
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000

080032a4 <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b08b      	sub	sp, #44	; 0x2c
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80032bc:	035b      	lsls	r3, r3, #13
 80032be:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80032c6:	331f      	adds	r3, #31
 80032c8:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3b01      	subs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d305      	bcc.n	80032ec <Flash_InSector+0x48>
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d801      	bhi.n	80032ec <Flash_InSector+0x48>
  {
    ret = TRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d305      	bcc.n	8003300 <Flash_InSector+0x5c>
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d801      	bhi.n	8003300 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	429a      	cmp	r2, r3
 8003306:	d305      	bcc.n	8003314 <Flash_InSector+0x70>
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	429a      	cmp	r2, r3
 800330e:	d801      	bhi.n	8003314 <Flash_InSector+0x70>
  {
    ret = TRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	429a      	cmp	r2, r3
 800331a:	d305      	bcc.n	8003328 <Flash_InSector+0x84>
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	429a      	cmp	r2, r3
 8003322:	d801      	bhi.n	8003328 <Flash_InSector+0x84>
  {
    ret = TRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800332a:	4618      	mov	r0, r3
 800332c:	372c      	adds	r7, #44	; 0x2c
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b092      	sub	sp, #72	; 0x48
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8003342:	2301      	movs	r3, #1
 8003344:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8003346:	f003 fabd 	bl	80068c4 <HAL_FLASH_Unlock>

  index = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <Flash_Write+0x2e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	f200 808e 	bhi.w	8003480 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 800336c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800336e:	f107 0310 	add.w	r3, r7, #16
 8003372:	2210      	movs	r2, #16
 8003374:	4618      	mov	r0, r3
 8003376:	f018 fb16 	bl	801b9a6 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 800337a:	f107 0210 	add.w	r2, r7, #16
 800337e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003380:	18d0      	adds	r0, r2, r3
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	f1c3 0210 	rsb	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4293      	cmp	r3, r2
 800338c:	bf28      	it	cs
 800338e:	4613      	movcs	r3, r2
 8003390:	461a      	mov	r2, r3
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	f018 fb07 	bl	801b9a6 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	461a      	mov	r2, r3
 800339e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033a0:	2002      	movs	r0, #2
 80033a2:	f003 fa17 	bl	80067d4 <HAL_FLASH_Program>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 80033ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <Flash_Write+0x82>
    {
      return FALSE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e06c      	b.n	8003492 <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <Flash_Write+0x98>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d804      	bhi.n	80033ce <Flash_Write+0x98>
    {
      index += length;
 80033c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
 80033cc:	e004      	b.n	80033d8 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 80033ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	3310      	adds	r3, #16
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 80033d8:	e052      	b.n	8003480 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	bf28      	it	cs
 80033e4:	2310      	movcs	r3, #16
 80033e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d117      	bne.n	800341e <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	18d1      	adds	r1, r2, r3
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	4413      	add	r3, r2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2002      	movs	r0, #2
 80033fe:	f003 f9e9 	bl	80067d4 <HAL_FLASH_Program>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <Flash_Write+0xe0>
      {
        ret = FALSE;
 8003410:	2300      	movs	r3, #0
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003414:	e03a      	b.n	800348c <Flash_Write+0x156>
      }
      index += write_length;
 8003416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	4413      	add	r3, r2
 800341c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003422:	429a      	cmp	r2, r3
 8003424:	d02c      	beq.n	8003480 <Flash_Write+0x14a>
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d827      	bhi.n	8003480 <Flash_Write+0x14a>
    {
      offset = length - index;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343c:	4413      	add	r3, r2
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	2210      	movs	r2, #16
 8003448:	4618      	mov	r0, r3
 800344a:	f018 faac 	bl	801b9a6 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	18d1      	adds	r1, r2, r3
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800345a:	4618      	mov	r0, r3
 800345c:	f018 faa3 	bl	801b9a6 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	461a      	mov	r2, r3
 8003466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003468:	2002      	movs	r0, #2
 800346a:	f003 f9b3 	bl	80067d4 <HAL_FLASH_Program>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <Flash_Write+0x154>
      {
        return FALSE;
 800347c:	2300      	movs	r3, #0
 800347e:	e008      	b.n	8003492 <Flash_Write+0x15c>
  while(index < length)
 8003480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d3a8      	bcc.n	80033da <Flash_Write+0xa4>
 8003488:	e000      	b.n	800348c <Flash_Write+0x156>
      }
      break;
 800348a:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 800348c:	f003 fa40 	bl	8006910 <HAL_FLASH_Lock>
  return ret;
 8003490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003492:	4618      	mov	r0, r3
 8003494:	3748      	adds	r7, #72	; 0x48
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 800349a:	b480      	push	{r7}
 800349c:	b089      	sub	sp, #36	; 0x24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e00c      	b.n	80034ce <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4413      	add	r3, r2
 80034ba:	7819      	ldrb	r1, [r3, #0]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	4413      	add	r3, r2
 80034c4:	460a      	mov	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d8ee      	bhi.n	80034b4 <Flash_Read+0x1a>
  }



  return ret;
 80034d6:	69bb      	ldr	r3, [r7, #24]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3724      	adds	r7, #36	; 0x24
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b09a      	sub	sp, #104	; 0x68
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f040 8085 	bne.w	8003604 <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d049      	beq.n	8003594 <CLI_FlashTest+0xb0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d871      	bhi.n	80035ea <CLI_FlashTest+0x106>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d003      	beq.n	8003514 <CLI_FlashTest+0x30>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d029      	beq.n	8003566 <CLI_FlashTest+0x82>
 8003512:	e06a      	b.n	80035ea <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8003514:	4b3d      	ldr	r3, [pc, #244]	; (800360c <CLI_FlashTest+0x128>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <CLI_FlashTest+0x3e>
 800351c:	483c      	ldr	r0, [pc, #240]	; (8003610 <CLI_FlashTest+0x12c>)
 800351e:	f000 fb7f 	bl	8003c20 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	2210      	movs	r2, #16
 8003528:	4619      	mov	r1, r3
 800352a:	6838      	ldr	r0, [r7, #0]
 800352c:	f7ff ffb5 	bl	800349a <Flash_Read>
        for(int i=0; i<16; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	667b      	str	r3, [r7, #100]	; 0x64
 8003534:	e013      	b.n	800355e <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8003536:	4b35      	ldr	r3, [pc, #212]	; (800360c <CLI_FlashTest+0x128>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <CLI_FlashTest+0x74>
 800353e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	3368      	adds	r3, #104	; 0x68
 800354a:	443b      	add	r3, r7
 800354c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003550:	461a      	mov	r2, r3
 8003552:	4830      	ldr	r0, [pc, #192]	; (8003614 <CLI_FlashTest+0x130>)
 8003554:	f000 fb64 	bl	8003c20 <svDebugMessage>
        for(int i=0; i<16; i++)
 8003558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800355a:	3301      	adds	r3, #1
 800355c:	667b      	str	r3, [r7, #100]	; 0x64
 800355e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003560:	2b0f      	cmp	r3, #15
 8003562:	dde8      	ble.n	8003536 <CLI_FlashTest+0x52>
        }
        break;
 8003564:	e04e      	b.n	8003604 <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 8003566:	2110      	movs	r1, #16
 8003568:	6838      	ldr	r0, [r7, #0]
 800356a:	f7ff fe41 	bl	80031f0 <Flash_Erase>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <CLI_FlashTest+0x128>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03e      	beq.n	80035fa <CLI_FlashTest+0x116>
 800357c:	4826      	ldr	r0, [pc, #152]	; (8003618 <CLI_FlashTest+0x134>)
 800357e:	f000 fb4f 	bl	8003c20 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 8003582:	e03a      	b.n	80035fa <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <CLI_FlashTest+0x128>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d036      	beq.n	80035fa <CLI_FlashTest+0x116>
 800358c:	4823      	ldr	r0, [pc, #140]	; (800361c <CLI_FlashTest+0x138>)
 800358e:	f000 fb47 	bl	8003c20 <svDebugMessage>
        break;
 8003592:	e032      	b.n	80035fa <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 8003594:	2300      	movs	r3, #0
 8003596:	663b      	str	r3, [r7, #96]	; 0x60
 8003598:	e00a      	b.n	80035b0 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 800359a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800359c:	b2d9      	uxtb	r1, r3
 800359e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80035a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a4:	4413      	add	r3, r2
 80035a6:	460a      	mov	r2, r1
 80035a8:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 80035aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ac:	3301      	adds	r3, #1
 80035ae:	663b      	str	r3, [r7, #96]	; 0x60
 80035b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b2:	2b0f      	cmp	r3, #15
 80035b4:	ddf1      	ble.n	800359a <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 80035b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035ba:	2210      	movs	r2, #16
 80035bc:	4619      	mov	r1, r3
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	f7ff feb9 	bl	8003336 <Flash_Write>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <CLI_FlashTest+0x128>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <CLI_FlashTest+0x11a>
 80035d2:	4813      	ldr	r0, [pc, #76]	; (8003620 <CLI_FlashTest+0x13c>)
 80035d4:	f000 fb24 	bl	8003c20 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 80035d8:	e011      	b.n	80035fe <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <CLI_FlashTest+0x128>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <CLI_FlashTest+0x11a>
 80035e2:	4810      	ldr	r0, [pc, #64]	; (8003624 <CLI_FlashTest+0x140>)
 80035e4:	f000 fb1c 	bl	8003c20 <svDebugMessage>
        break;
 80035e8:	e009      	b.n	80035fe <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <CLI_FlashTest+0x128>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <CLI_FlashTest+0x11e>
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <CLI_FlashTest+0x144>)
 80035f4:	f000 fb14 	bl	8003c20 <svDebugMessage>
        break;
 80035f8:	e003      	b.n	8003602 <CLI_FlashTest+0x11e>
        break;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <CLI_FlashTest+0x120>
        break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <CLI_FlashTest+0x120>
        break;
 8003602:	bf00      	nop
    }
  }
}
 8003604:	bf00      	nop
 8003606:	3768      	adds	r7, #104	; 0x68
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2000003c 	.word	0x2000003c
 8003610:	0801ca68 	.word	0x0801ca68
 8003614:	0801ca98 	.word	0x0801ca98
 8003618:	0801caa8 	.word	0x0801caa8
 800361c:	0801cab4 	.word	0x0801cab4
 8003620:	0801cac0 	.word	0x0801cac0
 8003624:	0801cacc 	.word	0x0801cacc
 8003628:	0801cad8 	.word	0x0801cad8

0800362c <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <LED_Init+0x1c>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <LED_Init+0x20>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20003b8c 	.word	0x20003b8c
 800364c:	20003b90 	.word	0x20003b90

08003650 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <LED_OnOff+0x7c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02d      	beq.n	80036c0 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <LED_OnOff+0x80>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d02c      	beq.n	80036c6 <LED_OnOff+0x76>
  {
    switch(eLED){
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d010      	beq.n	8003694 <LED_OnOff+0x44>
 8003672:	2b03      	cmp	r3, #3
 8003674:	dc26      	bgt.n	80036c4 <LED_OnOff+0x74>
 8003676:	2b01      	cmp	r3, #1
 8003678:	d002      	beq.n	8003680 <LED_OnOff+0x30>
 800367a:	2b02      	cmp	r3, #2
 800367c:	d005      	beq.n	800368a <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 800367e:	e021      	b.n	80036c4 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <LED_OnOff+0x84>)
 8003682:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8003684:	2301      	movs	r3, #1
 8003686:	817b      	strh	r3, [r7, #10]
        break;
 8003688:	e009      	b.n	800369e <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <LED_OnOff+0x88>)
 800368c:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 800368e:	2310      	movs	r3, #16
 8003690:	817b      	strh	r3, [r7, #10]
        break;
 8003692:	e004      	b.n	800369e <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <LED_OnOff+0x8c>)
 8003696:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 8003698:	2310      	movs	r3, #16
 800369a:	817b      	strh	r3, [r7, #10]
        break;
 800369c:	bf00      	nop
        break;
    }
    if(bOn)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80036a4:	897b      	ldrh	r3, [r7, #10]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4619      	mov	r1, r3
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f003 fc92 	bl	8006fd4 <HAL_GPIO_WritePin>
 80036b0:	e009      	b.n	80036c6 <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	2200      	movs	r2, #0
 80036b6:	4619      	mov	r1, r3
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f003 fc8b 	bl	8006fd4 <HAL_GPIO_WritePin>
 80036be:	e002      	b.n	80036c6 <LED_OnOff+0x76>
    return;
 80036c0:	bf00      	nop
 80036c2:	e000      	b.n	80036c6 <LED_OnOff+0x76>
        return;
 80036c4:	bf00      	nop
    }
  }
}
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20003b90 	.word	0x20003b90
 80036d0:	20003b8c 	.word	0x20003b8c
 80036d4:	42020400 	.word	0x42020400
 80036d8:	42021400 	.word	0x42021400
 80036dc:	42021800 	.word	0x42021800

080036e0 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	e02c      	b.n	8003746 <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 80036ec:	2101      	movs	r1, #1
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7ff ffae 	bl	8003650 <LED_OnOff>
    HAL_Delay(50);
 80036f4:	2032      	movs	r0, #50	; 0x32
 80036f6:	f000 fb0f 	bl	8003d18 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 80036fa:	2100      	movs	r1, #0
 80036fc:	2001      	movs	r0, #1
 80036fe:	f7ff ffa7 	bl	8003650 <LED_OnOff>
    HAL_Delay(50);
 8003702:	2032      	movs	r0, #50	; 0x32
 8003704:	f000 fb08 	bl	8003d18 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8003708:	2101      	movs	r1, #1
 800370a:	2002      	movs	r0, #2
 800370c:	f7ff ffa0 	bl	8003650 <LED_OnOff>
    HAL_Delay(50);
 8003710:	2032      	movs	r0, #50	; 0x32
 8003712:	f000 fb01 	bl	8003d18 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8003716:	2100      	movs	r1, #0
 8003718:	2002      	movs	r0, #2
 800371a:	f7ff ff99 	bl	8003650 <LED_OnOff>
    HAL_Delay(50);
 800371e:	2032      	movs	r0, #50	; 0x32
 8003720:	f000 fafa 	bl	8003d18 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 8003724:	2101      	movs	r1, #1
 8003726:	2003      	movs	r0, #3
 8003728:	f7ff ff92 	bl	8003650 <LED_OnOff>
    HAL_Delay(50);
 800372c:	2032      	movs	r0, #50	; 0x32
 800372e:	f000 faf3 	bl	8003d18 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 8003732:	2100      	movs	r1, #0
 8003734:	2003      	movs	r0, #3
 8003736:	f7ff ff8b 	bl	8003650 <LED_OnOff>
    HAL_Delay(50);
 800373a:	2032      	movs	r0, #50	; 0x32
 800373c:	f000 faec 	bl	8003d18 <HAL_Delay>
  for(int i =0; i<3; i++)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3301      	adds	r3, #1
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	ddcf      	ble.n	80036ec <LED_SimpleAnimation+0xc>
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d10b      	bne.n	8003782 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7ff ff67 	bl	8003650 <LED_OnOff>
  }
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8003792:	2301      	movs	r3, #1
 8003794:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <RESET_Init+0x80>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 80037aa:	4919      	ldr	r1, [pc, #100]	; (8003810 <RESET_Init+0x84>)
 80037ac:	2002      	movs	r0, #2
 80037ae:	f000 f845 	bl	800383c <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <RESET_Init+0x88>)
 80037b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01c      	beq.n	80037fa <RESET_Init+0x6e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d019      	beq.n	80037fa <RESET_Init+0x6e>
 80037c6:	2002      	movs	r0, #2
 80037c8:	f000 f828 	bl	800381c <RTC_ReadBackupReg>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <RESET_Init+0x84>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d112      	bne.n	80037fa <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 80037d4:	2001      	movs	r0, #1
 80037d6:	f000 f821 	bl	800381c <RTC_ReadBackupReg>
 80037da:	4603      	mov	r3, r0
 80037dc:	3301      	adds	r3, #1
 80037de:	4619      	mov	r1, r3
 80037e0:	2001      	movs	r0, #1
 80037e2:	f000 f82b 	bl	800383c <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 80037e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037ea:	f000 fa95 	bl	8003d18 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 f814 	bl	800381c <RTC_ReadBackupReg>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4a08      	ldr	r2, [pc, #32]	; (8003818 <RESET_Init+0x8c>)
 80037f8:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 80037fa:	2100      	movs	r1, #0
 80037fc:	2001      	movs	r0, #1
 80037fe:	f000 f81d 	bl	800383c <RTC_WriteBackupReg>

  return ret;
 8003802:	683b      	ldr	r3, [r7, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	e000edf0 	.word	0xe000edf0
 8003810:	20240215 	.word	0x20240215
 8003814:	44020c00 	.word	0x44020c00
 8003818:	20003b94 	.word	0x20003b94

0800381c <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4804      	ldr	r0, [pc, #16]	; (8003838 <RTC_ReadBackupReg+0x1c>)
 8003828:	f009 fc64 	bl	800d0f4 <HAL_RTCEx_BKUPRead>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20003b98 	.word	0x20003b98

0800383c <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4803      	ldr	r0, [pc, #12]	; (8003858 <RTC_WriteBackupReg+0x1c>)
 800384c:	f009 fc3a 	bl	800d0c4 <HAL_RTCEx_BKUPWrite>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20003b98 	.word	0x20003b98

0800385c <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d177      	bne.n	800395e <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 800386e:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <UART_Init+0x10c>)
 8003870:	4a3e      	ldr	r2, [pc, #248]	; (800396c <UART_Init+0x110>)
 8003872:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8003874:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <UART_Init+0x10c>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <UART_Init+0x10c>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <UART_Init+0x10c>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 8003886:	4b38      	ldr	r3, [pc, #224]	; (8003968 <UART_Init+0x10c>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <UART_Init+0x10c>)
 800388e:	220c      	movs	r2, #12
 8003890:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003892:	4b35      	ldr	r3, [pc, #212]	; (8003968 <UART_Init+0x10c>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003898:	4b33      	ldr	r3, [pc, #204]	; (8003968 <UART_Init+0x10c>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800389e:	4b32      	ldr	r3, [pc, #200]	; (8003968 <UART_Init+0x10c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038a4:	4b30      	ldr	r3, [pc, #192]	; (8003968 <UART_Init+0x10c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <UART_Init+0x10c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 80038b0:	482d      	ldr	r0, [pc, #180]	; (8003968 <UART_Init+0x10c>)
 80038b2:	f00a f81b 	bl	800d8ec <HAL_UART_Init>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <UART_Init+0x72>
      {
        Error_Handler();
 80038bc:	f7fd f94a 	bl	8000b54 <Error_Handler>
        s_bUARTConnected = FALSE;
 80038c0:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <UART_Init+0x114>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80038c6:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <UART_Init+0x118>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e031      	b.n	8003932 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ce:	2100      	movs	r1, #0
 80038d0:	4825      	ldr	r0, [pc, #148]	; (8003968 <UART_Init+0x10c>)
 80038d2:	f00b ff4a 	bl	800f76a <HAL_UARTEx_SetTxFifoThreshold>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <UART_Init+0x92>
      {
        Error_Handler();
 80038dc:	f7fd f93a 	bl	8000b54 <Error_Handler>
        s_bUARTConnected = FALSE;
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <UART_Init+0x114>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <UART_Init+0x118>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e021      	b.n	8003932 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ee:	2100      	movs	r1, #0
 80038f0:	481d      	ldr	r0, [pc, #116]	; (8003968 <UART_Init+0x10c>)
 80038f2:	f00b ff78 	bl	800f7e6 <HAL_UARTEx_SetRxFifoThreshold>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <UART_Init+0xb2>
      {
        Error_Handler();
 80038fc:	f7fd f92a 	bl	8000b54 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <UART_Init+0x114>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <UART_Init+0x118>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e011      	b.n	8003932 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800390e:	4816      	ldr	r0, [pc, #88]	; (8003968 <UART_Init+0x10c>)
 8003910:	f00b fef2 	bl	800f6f8 <HAL_UARTEx_DisableFifoMode>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <UART_Init+0xd0>
      {
        Error_Handler();
 800391a:	f7fd f91b 	bl	8000b54 <Error_Handler>
        s_bUARTConnected = FALSE;
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <UART_Init+0x114>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <UART_Init+0x118>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e002      	b.n	8003932 <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 800392c:	4812      	ldr	r0, [pc, #72]	; (8003978 <UART_Init+0x11c>)
 800392e:	f00c fee4 	bl	80106fa <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8003932:	2201      	movs	r2, #1
 8003934:	4911      	ldr	r1, [pc, #68]	; (800397c <UART_Init+0x120>)
 8003936:	480c      	ldr	r0, [pc, #48]	; (8003968 <UART_Init+0x10c>)
 8003938:	f00a f8c6 	bl	800dac8 <HAL_UART_Receive_IT>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <UART_Init+0x114>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <UART_Init+0x118>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 800394e:	e007      	b.n	8003960 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <UART_Init+0x114>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <UART_Init+0x118>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
      break;
 800395c:	e000      	b.n	8003960 <UART_Init+0x104>
    default:
      break;
 800395e:	bf00      	nop
  }
  return;
 8003960:	bf00      	nop
}
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20003bd0 	.word	0x20003bd0
 800396c:	40004400 	.word	0x40004400
 8003970:	20003bcc 	.word	0x20003bcc
 8003974:	20003ce4 	.word	0x20003ce4
 8003978:	20000020 	.word	0x20000020
 800397c:	20003bc8 	.word	0x20003bc8

08003980 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <IsUartConnected+0x1c>)
 800398c:	681b      	ldr	r3, [r3, #0]
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20003bcc 	.word	0x20003bcc

080039a0 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	6039      	str	r1, [r7, #0]
 80039aa:	71fb      	strb	r3, [r7, #7]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d110      	bne.n	80039dc <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 80039ba:	88ba      	ldrh	r2, [r7, #4]
 80039bc:	2364      	movs	r3, #100	; 0x64
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	480a      	ldr	r0, [pc, #40]	; (80039ec <UART_Write+0x4c>)
 80039c2:	f009 ffe3 	bl	800d98c <HAL_UART_Transmit>
 80039c6:	4603      	mov	r3, r0
 80039c8:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <UART_Write+0x40>
      {
        ret = Len;
 80039d0:	88bb      	ldrh	r3, [r7, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <UART_Write+0x50>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
      }
      break;
 80039da:	e001      	b.n	80039e0 <UART_Write+0x40>
    default:
      break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <UART_Write+0x42>
      break;
 80039e0:	bf00      	nop
  }
  return ret;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20003bd0 	.word	0x20003bd0
 80039f0:	20003ce4 	.word	0x20003ce4

080039f4 <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 80039f4:	b40e      	push	{r1, r2, r3}
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b0c7      	sub	sp, #284	; 0x11c
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4602      	mov	r2, r0
 80039fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a02:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003a06:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003a08:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003a0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a14:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8003a16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a1e:	f107 0010 	add.w	r0, r7, #16
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a2c:	f017 feca 	bl	801b7c4 <vsniprintf>
 8003a30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	f107 0110 	add.w	r1, r7, #16
 8003a3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a42:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ffa9 	bl	80039a0 <UART_Write>
 8003a4e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8003a52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a62:	b003      	add	sp, #12
 8003a64:	4770      	bx	lr
	...

08003a68 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <Uart_Available+0x28>)
 8003a7e:	f00c fe1a 	bl	80106b6 <svRingBuffer_GetCount>
 8003a82:	60f8      	str	r0, [r7, #12]
      break;
 8003a84:	bf00      	nop
  }

  return ret;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000020 	.word	0x20000020

08003a94 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <HAL_UART_RxCpltCallback+0x40>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d112      	bne.n	8003acc <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <HAL_UART_RxCpltCallback+0x44>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	480b      	ldr	r0, [pc, #44]	; (8003adc <HAL_UART_RxCpltCallback+0x48>)
 8003aae:	f00c fe3c 	bl	801072a <svRingBuffer_Push>
 8003ab2:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f113 0f02 	cmn.w	r3, #2
 8003aba:	d102      	bne.n	8003ac2 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8003abc:	4807      	ldr	r0, [pc, #28]	; (8003adc <HAL_UART_RxCpltCallback+0x48>)
 8003abe:	f00c fe1c 	bl	80106fa <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <HAL_UART_RxCpltCallback+0x44>)
 8003ac6:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <HAL_UART_RxCpltCallback+0x4c>)
 8003ac8:	f009 fffe 	bl	800dac8 <HAL_UART_Receive_IT>
  }
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40004400 	.word	0x40004400
 8003ad8:	20003bc8 	.word	0x20003bc8
 8003adc:	20000020 	.word	0x20000020
 8003ae0:	20003bd0 	.word	0x20003bd0

08003ae4 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8003ae8:	4806      	ldr	r0, [pc, #24]	; (8003b04 <svDebugRxChar+0x20>)
 8003aea:	f00c fde4 	bl	80106b6 <svRingBuffer_GetCount>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8003af4:	4803      	ldr	r0, [pc, #12]	; (8003b04 <svDebugRxChar+0x20>)
 8003af6:	f00c fe4c 	bl	8010792 <svRingBuffer_Pop>
 8003afa:	4603      	mov	r3, r0
 8003afc:	e000      	b.n	8003b00 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8003afe:	2300      	movs	r3, #0
	}
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000020 	.word	0x20000020

08003b08 <svDebugProcess>:

void svDebugProcess(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7ff ff36 	bl	8003980 <IsUartConnected>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <svDebugProcess+0x48>
	  svCLI_Handler();
 8003b1a:	f00c fc79 	bl	8010410 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <svDebugProcess+0x50>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d114      	bne.n	8003b50 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8003b26:	480d      	ldr	r0, [pc, #52]	; (8003b5c <svDebugProcess+0x54>)
 8003b28:	f017 fbad 	bl	801b286 <lwrb_get_linear_block_read_length>
 8003b2c:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <svDebugProcess+0x54>)
 8003b36:	f017 fb8a 	bl	801b24e <lwrb_get_linear_block_read_address>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7ff ff2c 	bl	80039a0 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4804      	ldr	r0, [pc, #16]	; (8003b5c <svDebugProcess+0x54>)
 8003b4c:	f017 fbce 	bl	801b2ec <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20003ce4 	.word	0x20003ce4
 8003b5c:	20003ce8 	.word	0x20003ce8

08003b60 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8003b6e:	7afb      	ldrb	r3, [r7, #11]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d11a      	bne.n	8003baa <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7ff ff03 	bl	8003980 <IsUartConnected>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d014      	beq.n	8003baa <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8003b80:	f000 f8be 	bl	8003d00 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8003b86:	e003      	b.n	8003b90 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <svDebugCallback+0x54>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d006      	beq.n	8003b9e <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f000 f863 	bl	8003c5c <GetElapsedTime>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b63      	cmp	r3, #99	; 0x63
 8003b9a:	d9f5      	bls.n	8003b88 <svDebugCallback+0x28>
 8003b9c:	e000      	b.n	8003ba0 <svDebugCallback+0x40>
					break;
 8003b9e:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <svDebugCallback+0x54>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8003ba6:	f7ff ffaf 	bl	8003b08 <svDebugProcess>
		}
	}
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20003ce4 	.word	0x20003ce4

08003bb8 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8003bbc:	4809      	ldr	r0, [pc, #36]	; (8003be4 <svDebugInit+0x2c>)
 8003bbe:	f00c fd9c 	bl	80106fa <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4908      	ldr	r1, [pc, #32]	; (8003be8 <svDebugInit+0x30>)
 8003bc6:	4809      	ldr	r0, [pc, #36]	; (8003bec <svDebugInit+0x34>)
 8003bc8:	f00b ff96 	bl	800faf8 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8003bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd0:	4907      	ldr	r1, [pc, #28]	; (8003bf0 <svDebugInit+0x38>)
 8003bd2:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <svDebugInit+0x3c>)
 8003bd4:	f017 fa1c 	bl	801b010 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <svDebugInit+0x40>)
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <svDebugInit+0x3c>)
 8003bdc:	f017 fa39 	bl	801b052 <lwrb_set_evt_fn>
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000020 	.word	0x20000020
 8003be8:	08003bfd 	.word	0x08003bfd
 8003bec:	08003ae5 	.word	0x08003ae5
 8003bf0:	20003cfc 	.word	0x20003cfc
 8003bf4:	20003ce8 	.word	0x20003ce8
 8003bf8:	08003b61 	.word	0x08003b61

08003bfc <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8003c06:	1dfb      	adds	r3, r7, #7
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4803      	ldr	r0, [pc, #12]	; (8003c1c <svDebugPutChar+0x20>)
 8003c0e:	f017 fa39 	bl	801b084 <lwrb_write>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20003ce8 	.word	0x20003ce8

08003c20 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8003c20:	b40f      	push	{r0, r1, r2, r3}
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6939      	ldr	r1, [r7, #16]
 8003c32:	4808      	ldr	r0, [pc, #32]	; (8003c54 <svDebugMessage+0x34>)
 8003c34:	f017 fdea 	bl	801b80c <vsiprintf>
 8003c38:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4905      	ldr	r1, [pc, #20]	; (8003c54 <svDebugMessage+0x34>)
 8003c40:	4805      	ldr	r0, [pc, #20]	; (8003c58 <svDebugMessage+0x38>)
 8003c42:	f017 fa1f 	bl	801b084 <lwrb_write>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c50:	b004      	add	sp, #16
 8003c52:	4770      	bx	lr
 8003c54:	20003f00 	.word	0x20003f00
 8003c58:	20003ce8 	.word	0x20003ce8

08003c5c <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8003c64:	f000 f84c 	bl	8003d00 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d204      	bcs.n	8003c7c <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	e002      	b.n	8003c82 <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	1ad3      	subs	r3, r2, r3
	}
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c90:	2003      	movs	r0, #3
 8003c92:	f000 f928 	bl	8003ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003c96:	f004 f801 	bl	8007c9c <HAL_RCC_GetSysClockFreq>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_Init+0x40>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	490a      	ldr	r1, [pc, #40]	; (8003cd0 <HAL_Init+0x44>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_Init+0x48>)
 8003cae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cb0:	200f      	movs	r0, #15
 8003cb2:	f7fd f8c9 	bl	8000e48 <HAL_InitTick>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e002      	b.n	8003cc6 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc0:	f7fc ff4d 	bl	8000b5e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	44020c00 	.word	0x44020c00
 8003cd0:	0801f5d0 	.word	0x0801f5d0
 8003cd4:	20000000 	.word	0x20000000

08003cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x20>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x24>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_IncTick+0x24>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000044 	.word	0x20000044
 8003cfc:	20003f80 	.word	0x20003f80

08003d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return uwTick;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_GetTick+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20003f80 	.word	0x20003f80

08003d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7ff ffee 	bl	8003d00 <HAL_GetTick>
 8003d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d005      	beq.n	8003d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_Delay+0x44>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d3e:	bf00      	nop
 8003d40:	f7ff ffde 	bl	8003d00 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d8f7      	bhi.n	8003d40 <HAL_Delay+0x28>
  {
  }
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000044 	.word	0x20000044

08003d60 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8003d6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d6e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d72:	4905      	ldr	r1, [pc, #20]	; (8003d88 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	44000400 	.word	0x44000400

08003d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <__NVIC_GetPriorityGrouping+0x18>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f003 0307 	and.w	r3, r3, #7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db0b      	blt.n	8003e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	4907      	ldr	r1, [pc, #28]	; (8003e28 <__NVIC_EnableIRQ+0x38>)
 8003e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2001      	movs	r0, #1
 8003e12:	fa00 f202 	lsl.w	r2, r0, r2
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	6039      	str	r1, [r7, #0]
 8003e36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db0a      	blt.n	8003e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <__NVIC_SetPriority+0x4c>)
 8003e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4a:	0112      	lsls	r2, r2, #4
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e54:	e00a      	b.n	8003e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <__NVIC_SetPriority+0x50>)
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	3b04      	subs	r3, #4
 8003e64:	0112      	lsls	r2, r2, #4
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	440b      	add	r3, r1
 8003e6a:	761a      	strb	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	e000e100 	.word	0xe000e100
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f1c3 0307 	rsb	r3, r3, #7
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf28      	it	cs
 8003e9e:	2304      	movcs	r3, #4
 8003ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d902      	bls.n	8003eb0 <NVIC_EncodePriority+0x30>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3b03      	subs	r3, #3
 8003eae:	e000      	b.n	8003eb2 <NVIC_EncodePriority+0x32>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	4313      	orrs	r3, r2
         );
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ff4c 	bl	8003d8c <__NVIC_SetPriorityGrouping>
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0a:	f7ff ff63 	bl	8003dd4 <__NVIC_GetPriorityGrouping>
 8003f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7ff ffb3 	bl	8003e80 <NVIC_EncodePriority>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff82 	bl	8003e2c <__NVIC_SetPriority>
}
 8003f28:	bf00      	nop
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff56 	bl	8003df0 <__NVIC_EnableIRQ>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003f54:	f7ff fed4 	bl	8003d00 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e06b      	b.n	800403c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d008      	beq.n	8003f82 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e05c      	b.n	800403c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0204 	orr.w	r2, r2, #4
 8003f90:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2205      	movs	r2, #5
 8003f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003f9a:	e020      	b.n	8003fde <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003f9c:	f7ff feb0 	bl	8003d00 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d919      	bls.n	8003fde <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	2201      	movs	r2, #1
 8003fd0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e02e      	b.n	800403c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0d7      	beq.n	8003f9c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0202 	orr.w	r2, r2, #2
 8003ffa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800400c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004026:	2201      	movs	r2, #1
 8004028:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2200      	movs	r2, #0
 8004030:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e019      	b.n	800408a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d004      	beq.n	800406c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e00e      	b.n	800408a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2204      	movs	r2, #4
 8004070:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0d2      	b.n	8004250 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2223      	movs	r2, #35	; 0x23
 80040b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fd fc81 	bl	80019c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_ETH_Init+0x1c0>)
 80040c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_ETH_Init+0x1c0>)
 80040ca:	f043 0302 	orr.w	r3, r3, #2
 80040ce:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80040d2:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_ETH_Init+0x1c0>)
 80040d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7a1b      	ldrb	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7ff fe39 	bl	8003d60 <HAL_SBS_ETHInterfaceSelect>
 80040ee:	e003      	b.n	80040f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 80040f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80040f4:	f7ff fe34 	bl	8003d60 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 80040f8:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_ETH_Init+0x1c4>)
 80040fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004114:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004116:	f7ff fdf3 	bl	8003d00 <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800411c:	e011      	b.n	8004142 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800411e:	f7ff fdef 	bl	8003d00 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800412c:	d909      	bls.n	8004142 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2204      	movs	r2, #4
 8004132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	22e0      	movs	r2, #224	; 0xe0
 800413a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e086      	b.n	8004250 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e4      	bne.n	800411e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fd93 	bl	8004c80 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800415a:	f003 fecb 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 800415e:	4603      	mov	r3, r0
 8004160:	4a3f      	ldr	r2, [pc, #252]	; (8004260 <HAL_ETH_Init+0x1c8>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0c9a      	lsrs	r2, r3, #18
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3a01      	subs	r2, #1
 800416e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 ff8e 	bl	8005094 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004184:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004190:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004194:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	22e0      	movs	r2, #224	; 0xe0
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e04b      	b.n	8004250 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041c8:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6952      	ldr	r2, [r2, #20]
 80041d0:	0051      	lsls	r1, r2, #1
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041dc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fff4 	bl	80051ce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 f83a 	bl	8005260 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	3305      	adds	r3, #5
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	021a      	lsls	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	3303      	adds	r3, #3
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	061a      	lsls	r2, r3, #24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	3302      	adds	r3, #2
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	3301      	adds	r3, #1
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800422a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004238:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800423a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2210      	movs	r2, #16
 800424a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	44020c00 	.word	0x44020c00
 800425c:	44000400 	.word	0x44000400
 8004260:	431bde83 	.word	0x431bde83

08004264 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004272:	2b10      	cmp	r3, #16
 8004274:	d153      	bne.n	800431e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2223      	movs	r2, #35	; 0x23
 800427a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2204      	movs	r2, #4
 8004282:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9f6 	bl	8004676 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0202 	orr.w	r2, r2, #2
 8004298:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800430a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800430e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2223      	movs	r2, #35	; 0x23
 8004316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e000      	b.n	8004320 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004336:	2b23      	cmp	r3, #35	; 0x23
 8004338:	d13f      	bne.n	80043ba <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2223      	movs	r2, #35	; 0x23
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800435a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004376:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0202 	bic.w	r2, r2, #2
 80043ac:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2210      	movs	r2, #16
 80043b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	2b23      	cmp	r3, #35	; 0x23
 80043f6:	d179      	bne.n	80044ec <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80043f8:	2200      	movs	r2, #0
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 ff8c 	bl	800531a <ETH_Prepare_Tx_Descriptors>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f043 0202 	orr.w	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e068      	b.n	80044ee <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 800441c:	f3bf 8f4f 	dsb	sy
}
 8004420:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3206      	adds	r2, #6
 800442a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	629a      	str	r2, [r3, #40]	; 0x28
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b03      	cmp	r3, #3
 8004440:	d904      	bls.n	800444c <HAL_ETH_Transmit+0x84>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	1f1a      	subs	r2, r3, #4
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3106      	adds	r1, #6
 8004458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800445c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004460:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8004464:	f7ff fc4c 	bl	8003d00 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800446a:	e039      	b.n	80044e0 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004474:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f043 0208 	orr.w	r2, r3, #8
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e023      	b.n	80044ee <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d018      	beq.n	80044e0 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7ff fc27 	bl	8003d00 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <HAL_ETH_Transmit+0xfc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10d      	bne.n	80044e0 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f043 0204 	orr.w	r2, r3, #4
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80044da:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e006      	b.n	80044ee <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	dbc1      	blt.n	800446c <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b088      	sub	sp, #32
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0a5      	b.n	800466e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004528:	2b23      	cmp	r3, #35	; 0x23
 800452a:	d001      	beq.n	8004530 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e09e      	b.n	800466e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	3212      	adds	r2, #18
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004546:	f1c3 0304 	rsb	r3, r3, #4
 800454a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800454c:	e067      	b.n	800461e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <HAL_ETH_ReadData+0x88>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d03d      	beq.n	80045fa <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80045d4:	461a      	mov	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f7fd fbd3 	bl	8001d84 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d902      	bls.n	800460c <HAL_ETH_ReadData+0x116>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3b04      	subs	r3, #4
 800460a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	3212      	adds	r2, #18
 8004612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004616:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3301      	adds	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004622:	2b00      	cmp	r3, #0
 8004624:	db06      	blt.n	8004634 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d202      	bcs.n	8004634 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d08c      	beq.n	800454e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	441a      	add	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f814 	bl	8004676 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d108      	bne.n	800466c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004682:	2301      	movs	r3, #1
 8004684:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	3212      	adds	r2, #18
 8004692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004696:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800469e:	e03b      	b.n	8004718 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d112      	bne.n	80046ce <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fd fb39 	bl	8001d24 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	74fb      	strb	r3, [r7, #19]
 80046bc:	e007      	b.n	80046ce <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	461a      	mov	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	461a      	mov	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d021      	beq.n	8004718 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80046d4:	f3bf 8f5f 	dmb	sy
}
 80046d8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e003      	b.n	80046f4 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80046f2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d902      	bls.n	8004706 <ETH_UpdateDescriptor+0x90>
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3b04      	subs	r3, #4
 8004704:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	3212      	adds	r2, #18
 800470c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004710:	617b      	str	r3, [r7, #20]
      desccount--;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3b01      	subs	r3, #1
 8004716:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <ETH_UpdateDescriptor+0xae>
 800471e:	7cfb      	ldrb	r3, [r7, #19]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1bd      	bne.n	80046a0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	429a      	cmp	r2, r3
 800472c:	d00d      	beq.n	800474a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800474a:	bf00      	nop
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e03e      	b.n	80047f2 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800477c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	055b      	lsls	r3, r3, #21
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f043 030c 	orr.w	r3, r3, #12
 80047a0:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80047b4:	f7ff faa4 	bl	8003d00 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80047ba:	e009      	b.n	80047d0 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80047bc:	f7ff faa0 	bl	8003d00 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ca:	d901      	bls.n	80047d0 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e010      	b.n	80047f2 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ed      	bne.n	80047bc <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e03c      	b.n	8004898 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004826:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	055b      	lsls	r3, r3, #21
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 030c 	bic.w	r3, r3, #12
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <HAL_ETH_WritePHYRegister+0xa4>)
 800485e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004862:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <HAL_ETH_WritePHYRegister+0xa4>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800486a:	f7ff fa49 	bl	8003d00 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004870:	e009      	b.n	8004886 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004872:	f7ff fa45 	bl	8003d00 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004880:	d901      	bls.n	8004886 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e008      	b.n	8004898 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ed      	bne.n	8004872 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40028000 	.word	0x40028000

080048a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e1c3      	b.n	8004c40 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf0c      	ite	eq
 80049d2:	2301      	moveq	r3, #1
 80049d4:	2300      	movne	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	0e5b      	lsrs	r3, r3, #25
 8004b02:	f003 021f 	and.w	r2, r3, #31
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004bcc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004bdc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e00b      	b.n	8004c78 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d105      	bne.n	8004c76 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f86f 	bl	8004d50 <ETH_SetMACConfig>

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004c9a:	f003 f92b 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 8004c9e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d908      	bls.n	8004cba <HAL_ETH_SetMDIOClockRange+0x3a>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <HAL_ETH_SetMDIOClockRange+0xbc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d804      	bhi.n	8004cba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e034      	b.n	8004d24 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <HAL_ETH_SetMDIOClockRange+0xbc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d908      	bls.n	8004cd4 <HAL_ETH_SetMDIOClockRange+0x54>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d204      	bcs.n	8004cd4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e027      	b.n	8004d24 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d303      	bcc.n	8004ce4 <HAL_ETH_SetMDIOClockRange+0x64>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d91e      	bls.n	8004d22 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d908      	bls.n	8004cfe <HAL_ETH_SetMDIOClockRange+0x7e>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d804      	bhi.n	8004cfe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e012      	b.n	8004d24 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d908      	bls.n	8004d18 <HAL_ETH_SetMDIOClockRange+0x98>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <HAL_ETH_SetMDIOClockRange+0xcc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d804      	bhi.n	8004d18 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e005      	b.n	8004d24 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e000      	b.n	8004d24 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004d22:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	01312cff 	.word	0x01312cff
 8004d3c:	02160ebf 	.word	0x02160ebf
 8004d40:	03938700 	.word	0x03938700
 8004d44:	05f5e0ff 	.word	0x05f5e0ff
 8004d48:	08f0d17f 	.word	0x08f0d17f
 8004d4c:	0ee6b280 	.word	0x0ee6b280

08004d50 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004d62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004d6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	7b1b      	ldrb	r3, [r3, #12]
 8004d70:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	7b5b      	ldrb	r3, [r3, #13]
 8004d78:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	7b9b      	ldrb	r3, [r3, #14]
 8004d80:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	7bdb      	ldrb	r3, [r3, #15]
 8004d88:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	7c12      	ldrb	r2, [r2, #16]
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	d102      	bne.n	8004d9a <ETH_SetMACConfig+0x4a>
 8004d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d98:	e000      	b.n	8004d9c <ETH_SetMACConfig+0x4c>
 8004d9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	7c52      	ldrb	r2, [r2, #17]
 8004da2:	2a00      	cmp	r2, #0
 8004da4:	d102      	bne.n	8004dac <ETH_SetMACConfig+0x5c>
 8004da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004daa:	e000      	b.n	8004dae <ETH_SetMACConfig+0x5e>
 8004dac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7c9b      	ldrb	r3, [r3, #18]
 8004db4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004db6:	431a      	orrs	r2, r3
               macconf->Speed |
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004dbc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004dc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	7f1b      	ldrb	r3, [r3, #28]
 8004dc8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	7f5b      	ldrb	r3, [r3, #29]
 8004dd0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004dd2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	7f92      	ldrb	r2, [r2, #30]
 8004dd8:	2a00      	cmp	r2, #0
 8004dda:	d102      	bne.n	8004de2 <ETH_SetMACConfig+0x92>
 8004ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004de0:	e000      	b.n	8004de4 <ETH_SetMACConfig+0x94>
 8004de2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004de4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	7fdb      	ldrb	r3, [r3, #31]
 8004dea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004dec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d102      	bne.n	8004dfe <ETH_SetMACConfig+0xae>
 8004df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dfc:	e000      	b.n	8004e00 <ETH_SetMACConfig+0xb0>
 8004dfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e00:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004e10:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <ETH_SetMACConfig+0x230>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e4e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d102      	bne.n	8004e62 <ETH_SetMACConfig+0x112>
 8004e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e60:	e000      	b.n	8004e64 <ETH_SetMACConfig+0x114>
 8004e62:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e64:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <ETH_SetMACConfig+0x234>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004eb0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	d101      	bne.n	8004ec6 <ETH_SetMACConfig+0x176>
 8004ec2:	2280      	movs	r2, #128	; 0x80
 8004ec4:	e000      	b.n	8004ec8 <ETH_SetMACConfig+0x178>
 8004ec6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ec8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eda:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004ede:	4013      	ands	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004ef0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004ef8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f023 0103 	bic.w	r1, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f1e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	d101      	bne.n	8004f42 <ETH_SetMACConfig+0x1f2>
 8004f3e:	2240      	movs	r2, #64	; 0x40
 8004f40:	e000      	b.n	8004f44 <ETH_SetMACConfig+0x1f4>
 8004f42:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f4c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f56:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f64:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	00048083 	.word	0x00048083
 8004f84:	c0f88000 	.word	0xc0f88000

08004f88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004fa0:	f023 0302 	bic.w	r3, r3, #2
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6811      	ldr	r1, [r2, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fb2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	791b      	ldrb	r3, [r3, #4]
 8004fb8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fbe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7b1b      	ldrb	r3, [r3, #12]
 8004fc4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fe8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	7b5b      	ldrb	r3, [r3, #13]
 8004fee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005000:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005004:	4b21      	ldr	r3, [pc, #132]	; (800508c <ETH_SetDMAConfig+0x104>)
 8005006:	4013      	ands	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	430b      	orrs	r3, r1
 8005010:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005014:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	7d1b      	ldrb	r3, [r3, #20]
 8005020:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005022:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	7f5b      	ldrb	r3, [r3, #29]
 8005028:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005036:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <ETH_SetDMAConfig+0x108>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	430b      	orrs	r3, r1
 8005046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800504a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	7f1b      	ldrb	r3, [r3, #28]
 8005052:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800506c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	430b      	orrs	r3, r1
 8005078:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800507c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	fffec000 	.word	0xfffec000
 8005090:	ffc0efef 	.word	0xffc0efef

08005094 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b0a4      	sub	sp, #144	; 0x90
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800509c:	2301      	movs	r3, #1
 800509e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050a2:	2300      	movs	r3, #0
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80050ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80050f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005102:	2300      	movs	r3, #0
 8005104:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800510e:	2300      	movs	r3, #0
 8005110:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005112:	2300      	movs	r3, #0
 8005114:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005116:	2300      	movs	r3, #0
 8005118:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800512c:	2320      	movs	r3, #32
 800512e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800513e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005148:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800514a:	2300      	movs	r3, #0
 800514c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005150:	2302      	movs	r3, #2
 8005152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800516e:	2300      	movs	r3, #0
 8005170:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fde6 	bl	8004d50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005184:	2301      	movs	r3, #1
 8005186:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005188:	2301      	movs	r3, #1
 800518a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005196:	2300      	movs	r3, #0
 8005198:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800519a:	2300      	movs	r3, #0
 800519c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800519e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80051b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fee1 	bl	8004f88 <ETH_SetDMAConfig>
}
 80051c6:	bf00      	nop
 80051c8:	3790      	adds	r7, #144	; 0x90
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e01d      	b.n	8005218 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68d9      	ldr	r1, [r3, #12]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	3206      	adds	r2, #6
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d9de      	bls.n	80051dc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	461a      	mov	r2, r3
 800522e:	2303      	movs	r3, #3
 8005230:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005240:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005250:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e023      	b.n	80052b6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2200      	movs	r2, #0
 800528a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2200      	movs	r2, #0
 8005296:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	3212      	adds	r2, #18
 80052ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d9d8      	bls.n	800526e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	461a      	mov	r2, r3
 80052e4:	2303      	movs	r3, #3
 80052e6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800531a:	b480      	push	{r7}
 800531c:	b08d      	sub	sp, #52	; 0x34
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3318      	adds	r3, #24
 800532a:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005344:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535c:	d007      	beq.n	800536e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	3304      	adds	r3, #4
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800536e:	2302      	movs	r3, #2
 8005370:	e25a      	b.n	8005828 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d044      	beq.n	8005408 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800538a:	431a      	orrs	r2, r3
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d027      	beq.n	8005408 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	431a      	orrs	r2, r3
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053f6:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005406:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d010      	beq.n	8005436 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800541c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	6992      	ldr	r2, [r2, #24]
 8005424:	431a      	orrs	r2, r3
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d036      	beq.n	80054bc <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800545a:	f3bf 8f5f 	dmb	sy
}
 800545e:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	3301      	adds	r3, #1
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	2b03      	cmp	r3, #3
 8005476:	d902      	bls.n	800547e <ETH_Prepare_Tx_Descriptors+0x164>
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	3b04      	subs	r3, #4
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	3301      	adds	r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800549a:	d10f      	bne.n	80054bc <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80054a6:	f3bf 8f5f 	dmb	sy
}
 80054aa:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	e1b5      	b.n	8005828 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	3301      	adds	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80054d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	6852      	ldr	r2, [r2, #4]
 80054dc:	431a      	orrs	r2, r3
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005502:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	6852      	ldr	r2, [r2, #4]
 800550a:	0412      	lsls	r2, r2, #16
 800550c:	431a      	orrs	r2, r3
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	e00a      	b.n	800552a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2200      	movs	r2, #0
 8005518:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005522:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	d019      	beq.n	800556a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	04db      	lsls	r3, r3, #19
 8005544:	431a      	orrs	r2, r3
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	0c9b      	lsrs	r3, r3, #18
 8005550:	049b      	lsls	r3, r3, #18
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	69d2      	ldr	r2, [r2, #28]
 8005556:	431a      	orrs	r2, r3
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e028      	b.n	80055bc <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005572:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6852      	ldr	r2, [r2, #4]
 800557a:	431a      	orrs	r2, r3
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	431a      	orrs	r2, r3
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	431a      	orrs	r2, r3
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80055f2:	f3bf 8f5f 	dmb	sy
}
 80055f6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80d9 	beq.w	80057c4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	431a      	orrs	r2, r3
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005624:	e0ce      	b.n	80057c4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	3301      	adds	r3, #1
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b03      	cmp	r3, #3
 800563c:	d902      	bls.n	8005644 <ETH_Prepare_Tx_Descriptors+0x32a>
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	3b04      	subs	r3, #4
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005666:	d007      	beq.n	8005678 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	3304      	adds	r3, #4
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d029      	beq.n	80056cc <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005684:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005686:	2300      	movs	r3, #0
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
 800568a:	e019      	b.n	80056c0 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 800568c:	f3bf 8f5f 	dmb	sy
}
 8005690:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	3301      	adds	r3, #1
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d902      	bls.n	80056b0 <ETH_Prepare_Tx_Descriptors+0x396>
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	3b04      	subs	r3, #4
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	3301      	adds	r3, #1
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d3e1      	bcc.n	800568c <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0ad      	b.n	8005828 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	3301      	adds	r3, #1
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	6852      	ldr	r2, [r2, #4]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d014      	beq.n	800572a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005718:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	6852      	ldr	r2, [r2, #4]
 8005720:	0412      	lsls	r2, r2, #16
 8005722:	431a      	orrs	r2, r3
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	e00a      	b.n	8005740 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2200      	movs	r2, #0
 800572e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005738:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0c9b      	lsrs	r3, r3, #18
 8005752:	049b      	lsls	r3, r3, #18
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	69d2      	ldr	r2, [r2, #28]
 8005758:	431a      	orrs	r2, r3
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	e019      	b.n	80057a0 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005774:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	6852      	ldr	r2, [r2, #4]
 800577c:	431a      	orrs	r2, r3
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	431a      	orrs	r2, r3
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80057a6:	f3bf 8f5f 	dmb	sy
}
 80057aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f af2c 	bne.w	8005626 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	e005      	b.n	80057ee <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	3304      	adds	r3, #4
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005810:	b672      	cpsid	i
}
 8005812:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005822:	b662      	cpsie	i
}
 8005824:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3734      	adds	r7, #52	; 0x34
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e147      	b.n	8005ad6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd f9da 	bl	8002c14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0210 	bic.w	r2, r2, #16
 800586e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005870:	f7fe fa46 	bl	8003d00 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005876:	e012      	b.n	800589e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005878:	f7fe fa42 	bl	8003d00 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b0a      	cmp	r3, #10
 8005884:	d90b      	bls.n	800589e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588a:	f043 0201 	orr.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e11b      	b.n	8005ad6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d0e5      	beq.n	8005878 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058bc:	f7fe fa20 	bl	8003d00 <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058c2:	e012      	b.n	80058ea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058c4:	f7fe fa1c 	bl	8003d00 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b0a      	cmp	r3, #10
 80058d0:	d90b      	bls.n	80058ea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2203      	movs	r2, #3
 80058e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0f5      	b.n	8005ad6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0e5      	beq.n	80058c4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0202 	orr.w	r2, r2, #2
 8005906:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a74      	ldr	r2, [pc, #464]	; (8005ae0 <HAL_FDCAN_Init+0x2ac>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d103      	bne.n	800591a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005912:	4a74      	ldr	r2, [pc, #464]	; (8005ae4 <HAL_FDCAN_Init+0x2b0>)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	7c1b      	ldrb	r3, [r3, #16]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d108      	bne.n	8005934 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e007      	b.n	8005944 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699a      	ldr	r2, [r3, #24]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005942:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7c5b      	ldrb	r3, [r3, #17]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d108      	bne.n	800595e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595a:	619a      	str	r2, [r3, #24]
 800595c:	e007      	b.n	800596e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800596c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	7c9b      	ldrb	r3, [r3, #18]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d108      	bne.n	8005988 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005984:	619a      	str	r2, [r3, #24]
 8005986:	e007      	b.n	8005998 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005996:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80059bc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0210 	bic.w	r2, r2, #16
 80059cc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d108      	bne.n	80059e8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0204 	orr.w	r2, r2, #4
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	e02c      	b.n	8005a42 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d028      	beq.n	8005a42 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d01c      	beq.n	8005a32 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a06:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0210 	orr.w	r2, r2, #16
 8005a16:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d110      	bne.n	8005a42 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0220 	orr.w	r2, r2, #32
 8005a2e:	619a      	str	r2, [r3, #24]
 8005a30:	e007      	b.n	8005a42 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0220 	orr.w	r2, r2, #32
 8005a40:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a52:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a5a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a6a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a6c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a76:	d115      	bne.n	8005aa4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	3b01      	subs	r3, #1
 8005a84:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a86:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a90:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005aa0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005aa2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fdac 	bl	8006618 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	4000a400 	.word	0x4000a400
 8005ae4:	4000a500 	.word	0x4000a500

08005ae8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005af8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d002      	beq.n	8005b06 <HAL_FDCAN_ConfigFilter+0x1e>
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d13d      	bne.n	8005b82 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d119      	bne.n	8005b42 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005b1a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005b22:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e01d      	b.n	8005b7e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	075a      	lsls	r2, r3, #29
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	079a      	lsls	r2, r3, #30
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3304      	adds	r3, #4
 8005b76:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e006      	b.n	8005b90 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	f043 0202 	orr.w	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d116      	bne.n	8005be4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bbe:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	011a      	lsls	r2, r3, #4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e006      	b.n	8005bf2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	f043 0204 	orr.w	r2, r3, #4
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d108      	bne.n	8005c28 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	0219      	lsls	r1, r3, #8
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e006      	b.n	8005c36 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2c:	f043 0204 	orr.w	r2, r3, #4
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
  }
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d109      	bne.n	8005c6a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c64:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e006      	b.n	8005c78 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d110      	bne.n	8005cba <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e006      	b.n	8005cc8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cbe:	f043 0204 	orr.w	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d156      	bne.n	8005d9a <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005cfc:	e011      	b.n	8005d22 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b0a      	cmp	r3, #10
 8005d02:	d90b      	bls.n	8005d1c <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	f043 0201 	orr.w	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2203      	movs	r2, #3
 8005d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e045      	b.n	8005da8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0e6      	beq.n	8005cfe <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0210 	bic.w	r2, r2, #16
 8005d42:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d44:	e011      	b.n	8005d6a <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b0a      	cmp	r3, #10
 8005d4a:	d90b      	bls.n	8005d64 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d50:	f043 0201 	orr.w	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e021      	b.n	8005da8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d0e6      	beq.n	8005d46 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0202 	orr.w	r2, r2, #2
 8005d86:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e006      	b.n	8005da8 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	f043 0208 	orr.w	r2, r3, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
  }
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d12c      	bne.n	8005e26 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e023      	b.n	8005e34 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fc6a 	bl	80066dc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	fa01 f202 	lsl.w	r2, r1, r2
 8005e14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005e18:	2201      	movs	r2, #1
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e006      	b.n	8005e34 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b08b      	sub	sp, #44	; 0x2c
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e54:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005e56:	7efb      	ldrb	r3, [r7, #27]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f040 80e8 	bne.w	800602e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d137      	bne.n	8005ed4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d107      	bne.n	8005e84 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0db      	b.n	800603c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	0e1b      	lsrs	r3, r3, #24
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d10a      	bne.n	8005eac <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e9e:	0a5b      	lsrs	r3, r3, #9
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4413      	add	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	440b      	add	r3, r1
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	e036      	b.n	8005f42 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d107      	bne.n	8005ef4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0a3      	b.n	800603c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efc:	0e1b      	lsrs	r3, r3, #24
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10a      	bne.n	8005f1c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	4613      	mov	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	440b      	add	r3, r1
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	0c9b      	lsrs	r3, r3, #18
 8005f5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e005      	b.n	8005f72 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	f003 020f 	and.w	r2, r3, #15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	0e1b      	lsrs	r3, r3, #24
 8005fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	0fda      	lsrs	r2, r3, #31
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3304      	adds	r3, #4
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	e00a      	b.n	8005ffe <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	441a      	add	r2, r3
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	440b      	add	r3, r1
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	4a11      	ldr	r2, [pc, #68]	; (8006048 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006004:	5cd3      	ldrb	r3, [r2, r3]
 8006006:	461a      	mov	r2, r3
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	4293      	cmp	r3, r2
 800600c:	d3ec      	bcc.n	8005fe8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d105      	bne.n	8006020 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800601e:	e004      	b.n	800602a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e006      	b.n	800603c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006032:	f043 0208 	orr.w	r2, r3, #8
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	372c      	adds	r7, #44	; 0x2c
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	0801f75c 	.word	0x0801f75c

0800604c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0207 	and.w	r2, r3, #7
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	f003 0207 	and.w	r2, r3, #7
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0218 	and.w	r2, r3, #24
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f003 0201 	and.w	r2, r3, #1
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	099b      	lsrs	r3, r3, #6
 800608e:	f003 0201 	and.w	r2, r3, #1
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	09db      	lsrs	r3, r3, #7
 800609a:	f003 0201 	and.w	r2, r3, #1
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	0adb      	lsrs	r3, r3, #11
 80060a6:	f003 0201 	and.w	r2, r3, #1
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	0b1b      	lsrs	r3, r3, #12
 80060b2:	f003 0201 	and.w	r2, r3, #1
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	0b5b      	lsrs	r3, r3, #13
 80060be:	f003 0201 	and.w	r2, r3, #1
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	0b9b      	lsrs	r3, r3, #14
 80060ca:	f003 0201 	and.w	r2, r3, #1
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0bdb      	lsrs	r3, r3, #15
 8006116:	f003 0201 	and.w	r2, r3, #1
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	b2da      	uxtb	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800615a:	b480      	push	{r7}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800616c:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d003      	beq.n	800617c <HAL_FDCAN_ActivateNotification+0x22>
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b02      	cmp	r3, #2
 8006178:	f040 80c8 	bne.w	800630c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d03b      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d031      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d027      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d004      	beq.n	80061d4 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01d      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d013      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d107      	bne.n	8006220 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d13b      	bne.n	80062ac <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d131      	bne.n	80062ac <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d127      	bne.n	80062ac <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11d      	bne.n	80062ac <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d113      	bne.n	80062ac <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0202 	orr.w	r2, r2, #2
 80062ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	430a      	orrs	r2, r1
 8006306:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e006      	b.n	800631a <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006310:	f043 0202 	orr.w	r2, r3, #2
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b08c      	sub	sp, #48	; 0x30
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006342:	4013      	ands	r3, r2
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800635a:	4013      	ands	r3, r2
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	4013      	ands	r3, r2
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006380:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	6a3a      	ldr	r2, [r7, #32]
 800638a:	4013      	ands	r3, r2
 800638c:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006394:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006398:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	4013      	ands	r3, r2
 80063a4:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ac:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d006      	beq.n	80063d8 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f916 	bl	8006604 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d019      	beq.n	8006416 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d014      	beq.n	8006416 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063f4:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4013      	ands	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800640c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800640e:	6939      	ldr	r1, [r7, #16]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f8d8 	bl	80065c6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006422:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8a2 	bl	8006570 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800643a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fc fbc1 	bl	8002bc4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f897 	bl	8006586 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006474:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f890 	bl	800659c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006498:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f87c 	bl	80065b0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00c      	beq.n	80064dc <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064d4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f880 	bl	80065dc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80064f8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f878 	bl	80065f0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00f      	beq.n	800652a <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800651c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006522:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006538:	69f9      	ldr	r1, [r7, #28]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fc fafa 	bl	8002b34 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc faf6 	bl	8002b54 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006568:	bf00      	nop
 800656a:	3730      	adds	r7, #48	; 0x30
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006620:	4b2c      	ldr	r3, [pc, #176]	; (80066d4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8006622:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d103      	bne.n	8006636 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006634:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006644:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	041a      	lsls	r2, r3, #16
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666a:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	061a      	lsls	r2, r3, #24
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e005      	b.n	80066b8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d3f3      	bcc.n	80066ac <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	4000ac00 	.word	0x4000ac00
 80066d8:	4000a800 	.word	0x4000a800

080066dc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80066dc:	b480      	push	{r7}
 80066de:	b089      	sub	sp, #36	; 0x24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80066fa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006702:	4313      	orrs	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e00a      	b.n	800671e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006710:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006716:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006728:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800672e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006734:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4413      	add	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	440b      	add	r3, r1
 8006750:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	3304      	adds	r3, #4
 800675c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	3304      	adds	r3, #4
 8006768:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e020      	b.n	80067b2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	3303      	adds	r3, #3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3302      	adds	r3, #2
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	440b      	add	r3, r1
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006788:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	3301      	adds	r3, #1
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	440b      	add	r3, r1
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006796:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	440a      	add	r2, r1
 800679e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80067a0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	3304      	adds	r3, #4
 80067aa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3304      	adds	r3, #4
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	4a06      	ldr	r2, [pc, #24]	; (80067d0 <FDCAN_CopyMessageToRAM+0xf4>)
 80067b8:	5cd3      	ldrb	r3, [r2, r3]
 80067ba:	461a      	mov	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4293      	cmp	r3, r2
 80067c0:	d3d6      	bcc.n	8006770 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	3724      	adds	r7, #36	; 0x24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	0801f75c 	.word	0x0801f75c

080067d4 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80067e0:	4b32      	ldr	r3, [pc, #200]	; (80068ac <HAL_FLASH_Program+0xd8>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_FLASH_Program+0x18>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e05a      	b.n	80068a2 <HAL_FLASH_Program+0xce>
 80067ec:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <HAL_FLASH_Program+0xd8>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067f2:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <HAL_FLASH_Program+0xd8>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80067f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067fc:	f000 f8a4 	bl	8006948 <FLASH_WaitForLastOperation>
 8006800:	4603      	mov	r3, r0
 8006802:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8006804:	7ffb      	ldrb	r3, [r7, #31]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d147      	bne.n	800689a <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 800680a:	4a28      	ldr	r2, [pc, #160]	; (80068ac <HAL_FLASH_Program+0xd8>)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <HAL_FLASH_Program+0xdc>)
 8006812:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800681a:	2b02      	cmp	r3, #2
 800681c:	d104      	bne.n	8006828 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68b8      	ldr	r0, [r7, #8]
 8006822:	f000 f8df 	bl	80069e4 <FLASH_Program_QuadWord>
 8006826:	e01b      	b.n	8006860 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <HAL_FLASH_Program+0xe0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <HAL_FLASH_Program+0x64>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <HAL_FLASH_Program+0xe4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d104      	bne.n	8006842 <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	f000 f90e 	bl	8006a5c <FLASH_Program_QuadWord_OBK>
 8006840:	e00e      	b.n	8006860 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <HAL_FLASH_Program+0xe8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d104      	bne.n	8006858 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	f000 f94f 	bl	8006af4 <FLASH_Program_HalfWord>
 8006856:	e003      	b.n	8006860 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	68b8      	ldr	r0, [r7, #8]
 800685c:	f000 f94a 	bl	8006af4 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006864:	f000 f870 	bl	8006948 <FLASH_WaitForLastOperation>
 8006868:	4603      	mov	r3, r0
 800686a:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8006876:	f023 0304 	bic.w	r3, r3, #4
 800687a:	43db      	mvns	r3, r3
 800687c:	401a      	ands	r2, r3
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a0c      	ldr	r2, [pc, #48]	; (80068b8 <HAL_FLASH_Program+0xe4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d107      	bne.n	800689a <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800688a:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <HAL_FLASH_Program+0xec>)
 800688c:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f023 0204 	bic.w	r2, r3, #4
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800689a:	4b04      	ldr	r3, [pc, #16]	; (80068ac <HAL_FLASH_Program+0xd8>)
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80068a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000048 	.word	0x20000048
 80068b0:	40022028 	.word	0x40022028
 80068b4:	10000002 	.word	0x10000002
 80068b8:	10000006 	.word	0x10000006
 80068bc:	40000002 	.word	0x40000002
 80068c0:	40022040 	.word	0x40022040

080068c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <HAL_FLASH_Unlock+0x40>)
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <HAL_FLASH_Unlock+0x40>)
 80068dc:	4a0a      	ldr	r2, [pc, #40]	; (8006908 <HAL_FLASH_Unlock+0x44>)
 80068de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <HAL_FLASH_Unlock+0x40>)
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <HAL_FLASH_Unlock+0x48>)
 80068e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <HAL_FLASH_Unlock+0x40>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80068f6:	79fb      	ldrb	r3, [r7, #7]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40022000 	.word	0x40022000
 8006908:	45670123 	.word	0x45670123
 800690c:	cdef89ab 	.word	0xcdef89ab

08006910 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <HAL_FLASH_Lock+0x34>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <HAL_FLASH_Lock+0x34>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <HAL_FLASH_Lock+0x34>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006936:	79fb      	ldrb	r3, [r7, #7]
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40022000 	.word	0x40022000

08006948 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8006950:	f7fd f9d6 	bl	8003d00 <HAL_GetTick>
 8006954:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8006956:	4b20      	ldr	r3, [pc, #128]	; (80069d8 <FLASH_WaitForLastOperation+0x90>)
 8006958:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800695a:	e010      	b.n	800697e <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d00c      	beq.n	800697e <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006964:	f7fd f9cc 	bl	8003d00 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <FLASH_WaitForLastOperation+0x32>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e027      	b.n	80069ce <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030b 	and.w	r3, r3, #11
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e8      	bne.n	800695c <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <FLASH_WaitForLastOperation+0x94>)
 800698c:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 8006996:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <FLASH_WaitForLastOperation+0x98>)
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	4a0e      	ldr	r2, [pc, #56]	; (80069e0 <FLASH_WaitForLastOperation+0x98>)
 80069a8:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e00a      	b.n	80069ce <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069ca:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40022020 	.word	0x40022020
 80069dc:	40022030 	.word	0x40022030
 80069e0:	20000048 	.word	0x20000048

080069e4 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b08b      	sub	sp, #44	; 0x2c
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80069ee:	2304      	movs	r3, #4
 80069f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <FLASH_Program_QuadWord+0x74>)
 80069fe:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f043 0202 	orr.w	r2, r3, #2
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a10:	613b      	str	r3, [r7, #16]
  return(result);
 8006a12:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a16:	b672      	cpsid	i
}
 8006a18:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	3304      	adds	r3, #4
 8006a26:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	61fb      	str	r3, [r7, #28]
    index--;
 8006a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a32:	3b01      	subs	r3, #1
 8006a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ec      	bne.n	8006a1a <FLASH_Program_QuadWord+0x36>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006a4c:	bf00      	nop
 8006a4e:	372c      	adds	r7, #44	; 0x2c
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40022028 	.word	0x40022028

08006a5c <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b08b      	sub	sp, #44	; 0x2c
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006a66:	2304      	movs	r3, #4
 8006a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006a74:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <FLASH_Program_QuadWord_OBK+0x8c>)
 8006a76:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006a78:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <FLASH_Program_QuadWord_OBK+0x90>)
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f043 0202 	orr.w	r2, r3, #2
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b18      	ldr	r3, [pc, #96]	; (8006af0 <FLASH_Program_QuadWord_OBK+0x94>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	431a      	orrs	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aa0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aa4:	b672      	cpsid	i
}
 8006aa6:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	61fb      	str	r3, [r7, #28]
    index--;
 8006abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1ec      	bne.n	8006aa8 <FLASH_Program_QuadWord_OBK+0x4c>
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006ada:	bf00      	nop
 8006adc:	372c      	adds	r7, #44	; 0x2c
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40022028 	.word	0x40022028
 8006aec:	40022040 	.word	0x40022040
 8006af0:	20000048 	.word	0x20000048

08006af4 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <FLASH_Program_HalfWord+0x30>)
 8006b00:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f043 0202 	orr.w	r2, r3, #2
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	b292      	uxth	r2, r2
 8006b16:	801a      	strh	r2, [r3, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	40022028 	.word	0x40022028

08006b28 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b32:	4b3a      	ldr	r3, [pc, #232]	; (8006c1c <HAL_FLASHEx_Erase+0xf4>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_FLASHEx_Erase+0x16>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e06a      	b.n	8006c14 <HAL_FLASHEx_Erase+0xec>
 8006b3e:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <HAL_FLASHEx_Erase+0xf4>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b44:	4b35      	ldr	r3, [pc, #212]	; (8006c1c <HAL_FLASHEx_Erase+0xf4>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b4e:	f7ff fefb 	bl	8006948 <FLASH_WaitForLastOperation>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d157      	bne.n	8006c0c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2e      	ldr	r2, [pc, #184]	; (8006c1c <HAL_FLASHEx_Erase+0xf4>)
 8006b62:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006b64:	4b2e      	ldr	r3, [pc, #184]	; (8006c20 <HAL_FLASHEx_Erase+0xf8>)
 8006b66:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b70:	f248 0208 	movw	r2, #32776	; 0x8008
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10b      	bne.n	8006b90 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 f853 	bl	8006c28 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b86:	f7ff fedf 	bl	8006948 <FLASH_WaitForLastOperation>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]
 8006b8e:	e033      	b.n	8006bf8 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <HAL_FLASHEx_Erase+0xfc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8006b9a:	f000 f8b5 	bl	8006d08 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ba2:	f7ff fed1 	bl	8006948 <FLASH_WaitForLastOperation>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
 8006baa:	e025      	b.n	8006bf8 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	e015      	b.n	8006be8 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6938      	ldr	r0, [r7, #16]
 8006bc4:	f000 f868 	bl	8006c98 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bcc:	f7ff febc 	bl	8006948 <FLASH_WaitForLastOperation>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	601a      	str	r2, [r3, #0]
          break;
 8006be0:	e00a      	b.n	8006bf8 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	3301      	adds	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3e1      	bcc.n	8006bbc <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c0c:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <HAL_FLASHEx_Erase+0xf4>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]

  return status;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000048 	.word	0x20000048
 8006c20:	40022028 	.word	0x40022028
 8006c24:	80000008 	.word	0x80000008

08006c28 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006c30:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <FLASH_MassErase+0x6c>)
 8006c32:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d108      	bne.n	8006c50 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c46:	f043 0320 	orr.w	r3, r3, #32
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8006c4e:	e01b      	b.n	8006c88 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c62:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006c66:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c80:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	6013      	str	r3, [r2, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40022028 	.word	0x40022028

08006c98 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006ca2:	4b18      	ldr	r3, [pc, #96]	; (8006d04 <FLASH_Erase_Sector+0x6c>)
 8006ca4:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d011      	beq.n	8006cd4 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cb8:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	019b      	lsls	r3, r3, #6
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8006cd2:	e010      	b.n	8006cf6 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	019b      	lsls	r3, r3, #6
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cee:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	6013      	str	r3, [r2, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40022028 	.word	0x40022028

08006d08 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <FLASH_OBKErase+0x24>)
 8006d10:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f043 0208 	orr.w	r2, r3, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40022040 	.word	0x40022040

08006d30 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006d3e:	e136      	b.n	8006fae <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	2101      	movs	r1, #1
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8128 	beq.w	8006fa8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d003      	beq.n	8006d68 <HAL_GPIO_Init+0x38>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b12      	cmp	r3, #18
 8006d66:	d125      	bne.n	8006db4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	08da      	lsrs	r2, r3, #3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3208      	adds	r2, #8
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	220f      	movs	r2, #15
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	08da      	lsrs	r2, r3, #3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3208      	adds	r2, #8
 8006dae:	6979      	ldr	r1, [r7, #20]
 8006db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f003 0203 	and.w	r2, r3, #3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d00b      	beq.n	8006e08 <HAL_GPIO_Init+0xd8>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d007      	beq.n	8006e08 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dfc:	2b11      	cmp	r3, #17
 8006dfe:	d003      	beq.n	8006e08 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b12      	cmp	r3, #18
 8006e06:	d130      	bne.n	8006e6a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	2203      	movs	r2, #3
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e3e:	2201      	movs	r2, #1
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	43db      	mvns	r3, r3
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	f003 0201 	and.w	r2, r3, #1
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d017      	beq.n	8006ea2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43db      	mvns	r3, r3
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4013      	ands	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d07c      	beq.n	8006fa8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006eae:	4a47      	ldr	r2, [pc, #284]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	089b      	lsrs	r3, r3, #2
 8006eb4:	3318      	adds	r3, #24
 8006eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eba:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	220f      	movs	r2, #15
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0a9a      	lsrs	r2, r3, #10
 8006ed6:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <HAL_GPIO_Init+0x2a0>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	f002 0203 	and.w	r2, r2, #3
 8006ee0:	00d2      	lsls	r2, r2, #3
 8006ee2:	4093      	lsls	r3, r2
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006eea:	4938      	ldr	r1, [pc, #224]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	089b      	lsrs	r3, r3, #2
 8006ef0:	3318      	adds	r3, #24
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006ef8:	4b34      	ldr	r3, [pc, #208]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	43db      	mvns	r3, r3
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4013      	ands	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006f1c:	4a2b      	ldr	r2, [pc, #172]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006f22:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	43db      	mvns	r3, r3
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	43db      	mvns	r3, r3
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006f72:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f80:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	43db      	mvns	r3, r3
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <HAL_GPIO_Init+0x29c>)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3301      	adds	r3, #1
 8006fac:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f47f aec1 	bne.w	8006d40 <HAL_GPIO_Init+0x10>
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	44022000 	.word	0x44022000
 8006fd0:	002f7f7f 	.word	0x002f7f7f

08006fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fe4:	787b      	ldrb	r3, [r7, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fea:	887a      	ldrh	r2, [r7, #2]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ff0:	e002      	b.n	8006ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ff2:	887a      	ldrh	r2, [r7, #2]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4013      	ands	r3, r2
 800701c:	041a      	lsls	r2, r3, #16
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	43d9      	mvns	r1, r3
 8007022:	887b      	ldrh	r3, [r7, #2]
 8007024:	400b      	ands	r3, r1
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	619a      	str	r2, [r3, #24]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007042:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d006      	beq.n	800705c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800704e:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	4618      	mov	r0, r3
 8007058:	f7f9 fb22 	bl	80006a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800705c:	4b08      	ldr	r3, [pc, #32]	; (8007080 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	4013      	ands	r3, r2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d006      	beq.n	8007076 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007068:	4a05      	ldr	r2, [pc, #20]	; (8007080 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f807 	bl	8007084 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	44022000 	.word	0x44022000

08007084 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_ICACHE_Enable+0x1c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <HAL_ICACHE_Enable+0x1c>)
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	40030400 	.word	0x40030400

080070bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f000 bc28 	b.w	8007920 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070d0:	4b94      	ldr	r3, [pc, #592]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f003 0318 	and.w	r3, r3, #24
 80070d8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80070da:	4b92      	ldr	r3, [pc, #584]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d05b      	beq.n	80071a8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d005      	beq.n	8007102 <HAL_RCC_OscConfig+0x46>
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	2b18      	cmp	r3, #24
 80070fa:	d114      	bne.n	8007126 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d111      	bne.n	8007126 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f000 bc08 	b.w	8007920 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007110:	4b84      	ldr	r3, [pc, #528]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	041b      	lsls	r3, r3, #16
 800711e:	4981      	ldr	r1, [pc, #516]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007120:	4313      	orrs	r3, r2
 8007122:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007124:	e040      	b.n	80071a8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d023      	beq.n	8007176 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800712e:	4b7d      	ldr	r3, [pc, #500]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a7c      	ldr	r2, [pc, #496]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713a:	f7fc fde1 	bl	8003d00 <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007142:	f7fc fddd 	bl	8003d00 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e3e5      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007154:	4b73      	ldr	r3, [pc, #460]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007160:	4b70      	ldr	r3, [pc, #448]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	496d      	ldr	r1, [pc, #436]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007170:	4313      	orrs	r3, r2
 8007172:	618b      	str	r3, [r1, #24]
 8007174:	e018      	b.n	80071a8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007176:	4b6b      	ldr	r3, [pc, #428]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a6a      	ldr	r2, [pc, #424]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800717c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007182:	f7fc fdbd 	bl	8003d00 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800718a:	f7fc fdb9 	bl	8003d00 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e3c1      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800719c:	4b61      	ldr	r3, [pc, #388]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80a0 	beq.w	80072f6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d005      	beq.n	80071c8 <HAL_RCC_OscConfig+0x10c>
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	2b18      	cmp	r3, #24
 80071c0:	d109      	bne.n	80071d6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d106      	bne.n	80071d6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8092 	bne.w	80072f6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e3a4      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071de:	d106      	bne.n	80071ee <HAL_RCC_OscConfig+0x132>
 80071e0:	4b50      	ldr	r3, [pc, #320]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a4f      	ldr	r2, [pc, #316]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80071e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e058      	b.n	80072a0 <HAL_RCC_OscConfig+0x1e4>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d112      	bne.n	800721c <HAL_RCC_OscConfig+0x160>
 80071f6:	4b4b      	ldr	r3, [pc, #300]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a4a      	ldr	r2, [pc, #296]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80071fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	4b48      	ldr	r3, [pc, #288]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a47      	ldr	r2, [pc, #284]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007208:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	4b45      	ldr	r3, [pc, #276]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a44      	ldr	r2, [pc, #272]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	e041      	b.n	80072a0 <HAL_RCC_OscConfig+0x1e4>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007224:	d112      	bne.n	800724c <HAL_RCC_OscConfig+0x190>
 8007226:	4b3f      	ldr	r3, [pc, #252]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3e      	ldr	r2, [pc, #248]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800722c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	4b3c      	ldr	r3, [pc, #240]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a3b      	ldr	r2, [pc, #236]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007238:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	4b39      	ldr	r3, [pc, #228]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a38      	ldr	r2, [pc, #224]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e029      	b.n	80072a0 <HAL_RCC_OscConfig+0x1e4>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007254:	d112      	bne.n	800727c <HAL_RCC_OscConfig+0x1c0>
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a32      	ldr	r2, [pc, #200]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800725c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	4b30      	ldr	r3, [pc, #192]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a2f      	ldr	r2, [pc, #188]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a2c      	ldr	r2, [pc, #176]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e011      	b.n	80072a0 <HAL_RCC_OscConfig+0x1e4>
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a28      	ldr	r2, [pc, #160]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	4b26      	ldr	r3, [pc, #152]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a25      	ldr	r2, [pc, #148]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800728e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	4b23      	ldr	r3, [pc, #140]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 800729a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800729e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d013      	beq.n	80072d0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fc fd2a 	bl	8003d00 <HAL_GetTick>
 80072ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80072b0:	f7fc fd26 	bl	8003d00 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b64      	cmp	r3, #100	; 0x64
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e32e      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072c2:	4b18      	ldr	r3, [pc, #96]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0f0      	beq.n	80072b0 <HAL_RCC_OscConfig+0x1f4>
 80072ce:	e012      	b.n	80072f6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fc fd16 	bl	8003d00 <HAL_GetTick>
 80072d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80072d8:	f7fc fd12 	bl	8003d00 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b64      	cmp	r3, #100	; 0x64
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e31a      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ea:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <HAL_RCC_OscConfig+0x268>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 809a 	beq.w	8007438 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_RCC_OscConfig+0x25a>
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2b18      	cmp	r3, #24
 800730e:	d149      	bne.n	80073a4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d146      	bne.n	80073a4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e2fe      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
 8007322:	bf00      	nop
 8007324:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11c      	bne.n	8007368 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800732e:	4b9a      	ldr	r3, [pc, #616]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0218 	and.w	r2, r3, #24
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	429a      	cmp	r2, r3
 800733c:	d014      	beq.n	8007368 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800733e:	4b96      	ldr	r3, [pc, #600]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f023 0218 	bic.w	r2, r3, #24
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	4993      	ldr	r1, [pc, #588]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800734c:	4313      	orrs	r3, r2
 800734e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8007350:	f000 fdd0 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007354:	4b91      	ldr	r3, [pc, #580]	; (800759c <HAL_RCC_OscConfig+0x4e0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7f9 fd75 	bl	8000e48 <HAL_InitTick>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e2db      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fc fcca 	bl	8003d00 <HAL_GetTick>
 800736c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007370:	f7fc fcc6 	bl	8003d00 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e2ce      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007382:	4b85      	ldr	r3, [pc, #532]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800738e:	4b82      	ldr	r3, [pc, #520]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	497e      	ldr	r1, [pc, #504]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80073a2:	e049      	b.n	8007438 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d02c      	beq.n	8007406 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80073ac:	4b7a      	ldr	r3, [pc, #488]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f023 0218 	bic.w	r2, r3, #24
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	4977      	ldr	r1, [pc, #476]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80073be:	4b76      	ldr	r3, [pc, #472]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a75      	ldr	r2, [pc, #468]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80073c4:	f043 0301 	orr.w	r3, r3, #1
 80073c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ca:	f7fc fc99 	bl	8003d00 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80073d2:	f7fc fc95 	bl	8003d00 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e29d      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073e4:	4b6c      	ldr	r3, [pc, #432]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f0      	beq.n	80073d2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80073f0:	4b69      	ldr	r3, [pc, #420]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	041b      	lsls	r3, r3, #16
 80073fe:	4966      	ldr	r1, [pc, #408]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007400:	4313      	orrs	r3, r2
 8007402:	610b      	str	r3, [r1, #16]
 8007404:	e018      	b.n	8007438 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007406:	4b64      	ldr	r3, [pc, #400]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a63      	ldr	r2, [pc, #396]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007412:	f7fc fc75 	bl	8003d00 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800741a:	f7fc fc71 	bl	8003d00 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e279      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800742c:	4b5a      	ldr	r3, [pc, #360]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1f0      	bne.n	800741a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d03c      	beq.n	80074be <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01c      	beq.n	8007486 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800744c:	4b52      	ldr	r3, [pc, #328]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800744e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007452:	4a51      	ldr	r2, [pc, #324]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007458:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745c:	f7fc fc50 	bl	8003d00 <HAL_GetTick>
 8007460:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007464:	f7fc fc4c 	bl	8003d00 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e254      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007476:	4b48      	ldr	r3, [pc, #288]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800747c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ef      	beq.n	8007464 <HAL_RCC_OscConfig+0x3a8>
 8007484:	e01b      	b.n	80074be <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007486:	4b44      	ldr	r3, [pc, #272]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800748c:	4a42      	ldr	r2, [pc, #264]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800748e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007492:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fc fc33 	bl	8003d00 <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800749e:	f7fc fc2f 	bl	8003d00 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e237      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074b0:	4b39      	ldr	r3, [pc, #228]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 80074b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1ef      	bne.n	800749e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 80d2 	beq.w	8007670 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80074cc:	4b34      	ldr	r3, [pc, #208]	; (80075a0 <HAL_RCC_OscConfig+0x4e4>)
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d118      	bne.n	800750a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80074d8:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <HAL_RCC_OscConfig+0x4e4>)
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	4a30      	ldr	r2, [pc, #192]	; (80075a0 <HAL_RCC_OscConfig+0x4e4>)
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e4:	f7fc fc0c 	bl	8003d00 <HAL_GetTick>
 80074e8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ec:	f7fc fc08 	bl	8003d00 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e210      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80074fe:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <HAL_RCC_OscConfig+0x4e4>)
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d108      	bne.n	8007524 <HAL_RCC_OscConfig+0x468>
 8007512:	4b21      	ldr	r3, [pc, #132]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007518:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007522:	e074      	b.n	800760e <HAL_RCC_OscConfig+0x552>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d118      	bne.n	800755e <HAL_RCC_OscConfig+0x4a2>
 800752c:	4b1a      	ldr	r3, [pc, #104]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800752e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007532:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800753c:	4b16      	ldr	r3, [pc, #88]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800753e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007542:	4a15      	ldr	r2, [pc, #84]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007548:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800754e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007552:	4a11      	ldr	r2, [pc, #68]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007554:	f023 0304 	bic.w	r3, r3, #4
 8007558:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800755c:	e057      	b.n	800760e <HAL_RCC_OscConfig+0x552>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	2b05      	cmp	r3, #5
 8007564:	d11e      	bne.n	80075a4 <HAL_RCC_OscConfig+0x4e8>
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800756c:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800756e:	f043 0304 	orr.w	r3, r3, #4
 8007572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800757c:	4a06      	ldr	r2, [pc, #24]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800757e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007582:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007586:	4b04      	ldr	r3, [pc, #16]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 8007588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800758c:	4a02      	ldr	r2, [pc, #8]	; (8007598 <HAL_RCC_OscConfig+0x4dc>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007596:	e03a      	b.n	800760e <HAL_RCC_OscConfig+0x552>
 8007598:	44020c00 	.word	0x44020c00
 800759c:	20000040 	.word	0x20000040
 80075a0:	44020800 	.word	0x44020800
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b85      	cmp	r3, #133	; 0x85
 80075aa:	d118      	bne.n	80075de <HAL_RCC_OscConfig+0x522>
 80075ac:	4ba2      	ldr	r3, [pc, #648]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075b2:	4aa1      	ldr	r2, [pc, #644]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075b4:	f043 0304 	orr.w	r3, r3, #4
 80075b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075bc:	4b9e      	ldr	r3, [pc, #632]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075c2:	4a9d      	ldr	r2, [pc, #628]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075cc:	4b9a      	ldr	r3, [pc, #616]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d2:	4a99      	ldr	r2, [pc, #612]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075dc:	e017      	b.n	800760e <HAL_RCC_OscConfig+0x552>
 80075de:	4b96      	ldr	r3, [pc, #600]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e4:	4a94      	ldr	r2, [pc, #592]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075ee:	4b92      	ldr	r3, [pc, #584]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f4:	4a90      	ldr	r2, [pc, #576]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80075f6:	f023 0304 	bic.w	r3, r3, #4
 80075fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075fe:	4b8e      	ldr	r3, [pc, #568]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007604:	4a8c      	ldr	r2, [pc, #560]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007616:	f7fc fb73 	bl	8003d00 <HAL_GetTick>
 800761a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800761c:	e00a      	b.n	8007634 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761e:	f7fc fb6f 	bl	8003d00 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	f241 3288 	movw	r2, #5000	; 0x1388
 800762c:	4293      	cmp	r3, r2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e175      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007634:	4b80      	ldr	r3, [pc, #512]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ed      	beq.n	800761e <HAL_RCC_OscConfig+0x562>
 8007642:	e015      	b.n	8007670 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007644:	f7fc fb5c 	bl	8003d00 <HAL_GetTick>
 8007648:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800764a:	e00a      	b.n	8007662 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800764c:	f7fc fb58 	bl	8003d00 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	; 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e15e      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007662:	4b75      	ldr	r3, [pc, #468]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1ed      	bne.n	800764c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d036      	beq.n	80076ea <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007684:	4b6c      	ldr	r3, [pc, #432]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a6b      	ldr	r2, [pc, #428]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 800768a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800768e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007690:	f7fc fb36 	bl	8003d00 <HAL_GetTick>
 8007694:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007698:	f7fc fb32 	bl	8003d00 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e13a      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076aa:	4b63      	ldr	r3, [pc, #396]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0x5dc>
 80076b6:	e018      	b.n	80076ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076b8:	4b5f      	ldr	r3, [pc, #380]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a5e      	ldr	r2, [pc, #376]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80076be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c4:	f7fc fb1c 	bl	8003d00 <HAL_GetTick>
 80076c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80076cc:	f7fc fb18 	bl	8003d00 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e120      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076de:	4b56      	ldr	r3, [pc, #344]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8115 	beq.w	800791e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b18      	cmp	r3, #24
 80076f8:	f000 80af 	beq.w	800785a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b02      	cmp	r3, #2
 8007702:	f040 8086 	bne.w	8007812 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007706:	4b4c      	ldr	r3, [pc, #304]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a4b      	ldr	r2, [pc, #300]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 800770c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007712:	f7fc faf5 	bl	8003d00 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800771a:	f7fc faf1 	bl	8003d00 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e0f9      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800772c:	4b42      	ldr	r3, [pc, #264]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1f0      	bne.n	800771a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007738:	4b3f      	ldr	r3, [pc, #252]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007740:	f023 0303 	bic.w	r3, r3, #3
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800774c:	0212      	lsls	r2, r2, #8
 800774e:	430a      	orrs	r2, r1
 8007750:	4939      	ldr	r1, [pc, #228]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007752:	4313      	orrs	r3, r2
 8007754:	628b      	str	r3, [r1, #40]	; 0x28
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775a:	3b01      	subs	r3, #1
 800775c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	3b01      	subs	r3, #1
 8007766:	025b      	lsls	r3, r3, #9
 8007768:	b29b      	uxth	r3, r3
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	3b01      	subs	r3, #1
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	3b01      	subs	r3, #1
 8007780:	061b      	lsls	r3, r3, #24
 8007782:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007786:	492c      	ldr	r1, [pc, #176]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007788:	4313      	orrs	r3, r2
 800778a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800778c:	4b2a      	ldr	r3, [pc, #168]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	4a29      	ldr	r2, [pc, #164]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779c:	4a26      	ldr	r2, [pc, #152]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80077a2:	4b25      	ldr	r3, [pc, #148]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	4a24      	ldr	r2, [pc, #144]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077a8:	f043 0310 	orr.w	r3, r3, #16
 80077ac:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80077ae:	4b22      	ldr	r3, [pc, #136]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	f023 020c 	bic.w	r2, r3, #12
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	491f      	ldr	r1, [pc, #124]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80077c0:	4b1d      	ldr	r3, [pc, #116]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	f023 0220 	bic.w	r2, r3, #32
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077cc:	491a      	ldr	r1, [pc, #104]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077d2:	4b19      	ldr	r3, [pc, #100]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077dc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 80077e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fc fa89 	bl	8003d00 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80077f2:	f7fc fa85 	bl	8003d00 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e08d      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007804:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_RCC_OscConfig+0x736>
 8007810:	e085      	b.n	800791e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a08      	ldr	r2, [pc, #32]	; (8007838 <HAL_RCC_OscConfig+0x77c>)
 8007818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800781c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781e:	f7fc fa6f 	bl	8003d00 <HAL_GetTick>
 8007822:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007824:	e00a      	b.n	800783c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007826:	f7fc fa6b 	bl	8003d00 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d903      	bls.n	800783c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e073      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
 8007838:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800783c:	4b3a      	ldr	r3, [pc, #232]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ee      	bne.n	8007826 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007848:	4b37      	ldr	r3, [pc, #220]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	4a36      	ldr	r2, [pc, #216]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 800784e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	6293      	str	r3, [r2, #40]	; 0x28
 8007858:	e061      	b.n	800791e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800785a:	4b33      	ldr	r3, [pc, #204]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007860:	4b31      	ldr	r3, [pc, #196]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 8007862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007864:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	2b01      	cmp	r3, #1
 800786c:	d031      	beq.n	80078d2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f003 0203 	and.w	r2, r3, #3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007878:	429a      	cmp	r2, r3
 800787a:	d12a      	bne.n	80078d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d122      	bne.n	80078d2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007898:	429a      	cmp	r2, r3
 800789a:	d11a      	bne.n	80078d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0a5b      	lsrs	r3, r3, #9
 80078a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d111      	bne.n	80078d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	0c1b      	lsrs	r3, r3, #16
 80078b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80078bc:	429a      	cmp	r2, r3
 80078be:	d108      	bne.n	80078d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0e1b      	lsrs	r3, r3, #24
 80078c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d001      	beq.n	80078d6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e024      	b.n	8007920 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	08db      	lsrs	r3, r3, #3
 80078dc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d01a      	beq.n	800791e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 80078ee:	f023 0310 	bic.w	r3, r3, #16
 80078f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fc fa04 	bl	8003d00 <HAL_GetTick>
 80078f8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80078fa:	bf00      	nop
 80078fc:	f7fc fa00 	bl	8003d00 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	4293      	cmp	r3, r2
 8007906:	d0f9      	beq.n	80078fc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790c:	4a06      	ldr	r2, [pc, #24]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007912:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	4a04      	ldr	r2, [pc, #16]	; (8007928 <HAL_RCC_OscConfig+0x86c>)
 8007918:	f043 0310 	orr.w	r3, r3, #16
 800791c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3720      	adds	r7, #32
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	44020c00 	.word	0x44020c00

0800792c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e19e      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007940:	4b83      	ldr	r3, [pc, #524]	; (8007b50 <HAL_RCC_ClockConfig+0x224>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d910      	bls.n	8007970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794e:	4b80      	ldr	r3, [pc, #512]	; (8007b50 <HAL_RCC_ClockConfig+0x224>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f023 020f 	bic.w	r2, r3, #15
 8007956:	497e      	ldr	r1, [pc, #504]	; (8007b50 <HAL_RCC_ClockConfig+0x224>)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	4313      	orrs	r3, r2
 800795c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800795e:	4b7c      	ldr	r3, [pc, #496]	; (8007b50 <HAL_RCC_ClockConfig+0x224>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d001      	beq.n	8007970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e186      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d012      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	695a      	ldr	r2, [r3, #20]
 8007980:	4b74      	ldr	r3, [pc, #464]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	0a1b      	lsrs	r3, r3, #8
 8007986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800798a:	429a      	cmp	r2, r3
 800798c:	d909      	bls.n	80079a2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800798e:	4b71      	ldr	r3, [pc, #452]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	496d      	ldr	r1, [pc, #436]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d012      	beq.n	80079d4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	091b      	lsrs	r3, r3, #4
 80079b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079bc:	429a      	cmp	r2, r3
 80079be:	d909      	bls.n	80079d4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80079c0:	4b64      	ldr	r3, [pc, #400]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	4961      	ldr	r1, [pc, #388]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	4b5b      	ldr	r3, [pc, #364]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d908      	bls.n	8007a02 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80079f0:	4b58      	ldr	r3, [pc, #352]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4955      	ldr	r1, [pc, #340]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	4b50      	ldr	r3, [pc, #320]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d908      	bls.n	8007a30 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007a1e:	4b4d      	ldr	r3, [pc, #308]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 020f 	bic.w	r2, r3, #15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	494a      	ldr	r1, [pc, #296]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8093 	beq.w	8007b64 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d107      	bne.n	8007a56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007a46:	4b43      	ldr	r3, [pc, #268]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d121      	bne.n	8007a96 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e113      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d107      	bne.n	8007a6e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a5e:	4b3d      	ldr	r3, [pc, #244]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d115      	bne.n	8007a96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e107      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d107      	bne.n	8007a86 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007a76:	4b37      	ldr	r3, [pc, #220]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e0fb      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a86:	4b33      	ldr	r3, [pc, #204]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e0f3      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007a96:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	f023 0203 	bic.w	r2, r3, #3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	492c      	ldr	r1, [pc, #176]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa8:	f7fc f92a 	bl	8003d00 <HAL_GetTick>
 8007aac:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d112      	bne.n	8007adc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ab6:	e00a      	b.n	8007ace <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007ab8:	f7fc f922 	bl	8003d00 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e0d7      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0318 	and.w	r3, r3, #24
 8007ad6:	2b18      	cmp	r3, #24
 8007ad8:	d1ee      	bne.n	8007ab8 <HAL_RCC_ClockConfig+0x18c>
 8007ada:	e043      	b.n	8007b64 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d112      	bne.n	8007b0a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ae4:	e00a      	b.n	8007afc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae6:	f7fc f90b 	bl	8003d00 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e0c0      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007afc:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f003 0318 	and.w	r3, r3, #24
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d1ee      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0x1ba>
 8007b08:	e02c      	b.n	8007b64 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d122      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007b12:	e00a      	b.n	8007b2a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b14:	f7fc f8f4 	bl	8003d00 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e0a9      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <HAL_RCC_ClockConfig+0x228>)
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f003 0318 	and.w	r3, r3, #24
 8007b32:	2b08      	cmp	r3, #8
 8007b34:	d1ee      	bne.n	8007b14 <HAL_RCC_ClockConfig+0x1e8>
 8007b36:	e015      	b.n	8007b64 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b38:	f7fc f8e2 	bl	8003d00 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d906      	bls.n	8007b58 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e097      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
 8007b4e:	bf00      	nop
 8007b50:	40022000 	.word	0x40022000
 8007b54:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b58:	4b4b      	ldr	r3, [pc, #300]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f003 0318 	and.w	r3, r3, #24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e9      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	4b44      	ldr	r3, [pc, #272]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d208      	bcs.n	8007b92 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007b80:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	f023 020f 	bic.w	r2, r3, #15
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	493e      	ldr	r1, [pc, #248]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b92:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <HAL_RCC_ClockConfig+0x360>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 030f 	and.w	r3, r3, #15
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d210      	bcs.n	8007bc2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba0:	4b3a      	ldr	r3, [pc, #232]	; (8007c8c <HAL_RCC_ClockConfig+0x360>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f023 020f 	bic.w	r2, r3, #15
 8007ba8:	4938      	ldr	r1, [pc, #224]	; (8007c8c <HAL_RCC_ClockConfig+0x360>)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb0:	4b36      	ldr	r3, [pc, #216]	; (8007c8c <HAL_RCC_ClockConfig+0x360>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d001      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e05d      	b.n	8007c7e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d010      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	4b2d      	ldr	r3, [pc, #180]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d208      	bcs.n	8007bf0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007bde:	4b2a      	ldr	r3, [pc, #168]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	4927      	ldr	r1, [pc, #156]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d012      	beq.n	8007c22 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	4b21      	ldr	r3, [pc, #132]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	091b      	lsrs	r3, r3, #4
 8007c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d209      	bcs.n	8007c22 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	491a      	ldr	r1, [pc, #104]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0310 	and.w	r3, r3, #16
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d012      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d209      	bcs.n	8007c54 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007c40:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	490e      	ldr	r1, [pc, #56]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007c54:	f000 f822 	bl	8007c9c <HAL_RCC_GetSysClockFreq>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_ClockConfig+0x35c>)
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	490b      	ldr	r1, [pc, #44]	; (8007c90 <HAL_RCC_ClockConfig+0x364>)
 8007c64:	5ccb      	ldrb	r3, [r1, r3]
 8007c66:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6a:	4a0a      	ldr	r2, [pc, #40]	; (8007c94 <HAL_RCC_ClockConfig+0x368>)
 8007c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <HAL_RCC_ClockConfig+0x36c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f9 f8e8 	bl	8000e48 <HAL_InitTick>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	44020c00 	.word	0x44020c00
 8007c8c:	40022000 	.word	0x40022000
 8007c90:	0801f5d0 	.word	0x0801f5d0
 8007c94:	20000000 	.word	0x20000000
 8007c98:	20000040 	.word	0x20000040

08007c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b089      	sub	sp, #36	; 0x24
 8007ca0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007ca2:	4b8c      	ldr	r3, [pc, #560]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f003 0318 	and.w	r3, r3, #24
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d102      	bne.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007cae:	4b8a      	ldr	r3, [pc, #552]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e107      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cb4:	4b87      	ldr	r3, [pc, #540]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f003 0318 	and.w	r3, r3, #24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d112      	bne.n	8007ce6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007cc0:	4b84      	ldr	r3, [pc, #528]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d009      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ccc:	4b81      	ldr	r3, [pc, #516]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	08db      	lsrs	r3, r3, #3
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	4a81      	ldr	r2, [pc, #516]	; (8007edc <HAL_RCC_GetSysClockFreq+0x240>)
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	e0f1      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007ce0:	4b7e      	ldr	r3, [pc, #504]	; (8007edc <HAL_RCC_GetSysClockFreq+0x240>)
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e0ee      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ce6:	4b7b      	ldr	r3, [pc, #492]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	f003 0318 	and.w	r3, r3, #24
 8007cee:	2b10      	cmp	r3, #16
 8007cf0:	d102      	bne.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cf2:	4b7b      	ldr	r3, [pc, #492]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x244>)
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	e0e5      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cf8:	4b76      	ldr	r3, [pc, #472]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 0318 	and.w	r3, r3, #24
 8007d00:	2b18      	cmp	r3, #24
 8007d02:	f040 80dd 	bne.w	8007ec0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007d06:	4b73      	ldr	r3, [pc, #460]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007d10:	4b70      	ldr	r3, [pc, #448]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	0a1b      	lsrs	r3, r3, #8
 8007d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007d1c:	4b6d      	ldr	r3, [pc, #436]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	091b      	lsrs	r3, r3, #4
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007d28:	4b6a      	ldr	r3, [pc, #424]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007d2c:	08db      	lsrs	r3, r3, #3
 8007d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	fb02 f303 	mul.w	r3, r2, r3
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d40:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80b7 	beq.w	8007eba <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d003      	beq.n	8007d5a <HAL_RCC_GetSysClockFreq+0xbe>
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d056      	beq.n	8007e06 <HAL_RCC_GetSysClockFreq+0x16a>
 8007d58:	e077      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007d5a:	4b5e      	ldr	r3, [pc, #376]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d02d      	beq.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d66:	4b5b      	ldr	r3, [pc, #364]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	4a5a      	ldr	r2, [pc, #360]	; (8007edc <HAL_RCC_GetSysClockFreq+0x240>)
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d90:	4b50      	ldr	r3, [pc, #320]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d98:	ee07 3a90 	vmov	s15, r3
 8007d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007da0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007da4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8007da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007dc0:	e065      	b.n	8007e8e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dcc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007ee8 <HAL_RCC_GetSysClockFreq+0x24c>
 8007dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ddc:	ee07 3a90 	vmov	s15, r3
 8007de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007de8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8007dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e00:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007e04:	e043      	b.n	8007e8e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e10:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007eec <HAL_RCC_GetSysClockFreq+0x250>
 8007e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e18:	4b2e      	ldr	r3, [pc, #184]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e20:	ee07 3a90 	vmov	s15, r3
 8007e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e2c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8007e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e44:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007e48:	e021      	b.n	8007e8e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	ee07 3a90 	vmov	s15, r3
 8007e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e54:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007ef0 <HAL_RCC_GetSysClockFreq+0x254>
 8007e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e70:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8007e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e88:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007e8c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	0a5b      	lsrs	r3, r3, #9
 8007e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e98:	3301      	adds	r3, #1
 8007e9a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ea6:	edd7 6a06 	vldr	s13, [r7, #24]
 8007eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb2:	ee17 3a90 	vmov	r3, s15
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	e004      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	e001      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <HAL_RCC_GetSysClockFreq+0x240>)
 8007ec2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3724      	adds	r7, #36	; 0x24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	44020c00 	.word	0x44020c00
 8007ed8:	003d0900 	.word	0x003d0900
 8007edc:	03d09000 	.word	0x03d09000
 8007ee0:	007a1200 	.word	0x007a1200
 8007ee4:	46000000 	.word	0x46000000
 8007ee8:	4c742400 	.word	0x4c742400
 8007eec:	4af42400 	.word	0x4af42400
 8007ef0:	4a742400 	.word	0x4a742400

08007ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007ef8:	f7ff fed0 	bl	8007c9c <HAL_RCC_GetSysClockFreq>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007f00:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007f02:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f06:	4907      	ldr	r1, [pc, #28]	; (8007f24 <HAL_RCC_GetHCLKFreq+0x30>)
 8007f08:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007f0a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	4a05      	ldr	r2, [pc, #20]	; (8007f28 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f14:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007f16:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f18:	681b      	ldr	r3, [r3, #0]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	44020c00 	.word	0x44020c00
 8007f24:	0801f5d0 	.word	0x0801f5d0
 8007f28:	20000000 	.word	0x20000000

08007f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8007f30:	f7ff ffe0 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 8007f34:	4602      	mov	r2, r0
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	091b      	lsrs	r3, r3, #4
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	4904      	ldr	r1, [pc, #16]	; (8007f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f42:	5ccb      	ldrb	r3, [r1, r3]
 8007f44:	f003 031f 	and.w	r3, r3, #31
 8007f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	44020c00 	.word	0x44020c00
 8007f54:	0801f5e0 	.word	0x0801f5e0

08007f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007f5c:	f7ff ffca 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	4904      	ldr	r1, [pc, #16]	; (8007f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f6e:	5ccb      	ldrb	r3, [r1, r3]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	44020c00 	.word	0x44020c00
 8007f80:	0801f5e0 	.word	0x0801f5e0

08007f84 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007f88:	f7ff ffb4 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	0b1b      	lsrs	r3, r3, #12
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	4904      	ldr	r1, [pc, #16]	; (8007fac <HAL_RCC_GetPCLK3Freq+0x28>)
 8007f9a:	5ccb      	ldrb	r3, [r1, r3]
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	44020c00 	.word	0x44020c00
 8007fac:	0801f5e0 	.word	0x0801f5e0

08007fb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	221f      	movs	r2, #31
 8007fbe:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007fc0:	4b15      	ldr	r3, [pc, #84]	; (8008018 <HAL_RCC_GetClockConfig+0x68>)
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f003 0203 	and.w	r2, r3, #3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8007fcc:	4b12      	ldr	r3, [pc, #72]	; (8008018 <HAL_RCC_GetClockConfig+0x68>)
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	091b      	lsrs	r3, r3, #4
 8007fea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	0a1b      	lsrs	r3, r3, #8
 8007ff6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ffe:	4b07      	ldr	r3, [pc, #28]	; (800801c <HAL_RCC_GetClockConfig+0x6c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 020f 	and.w	r2, r3, #15
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	44020c00 	.word	0x44020c00
 800801c:	40022000 	.word	0x40022000

08008020 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008024:	b0d8      	sub	sp, #352	; 0x160
 8008026:	af00      	add	r7, sp, #0
 8008028:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800802c:	2300      	movs	r3, #0
 800802e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008032:	2300      	movs	r3, #0
 8008034:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8008044:	2500      	movs	r5, #0
 8008046:	ea54 0305 	orrs.w	r3, r4, r5
 800804a:	d00b      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800804c:	4bcd      	ldr	r3, [pc, #820]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800804e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008052:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8008056:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800805a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805c:	4ac9      	ldr	r2, [pc, #804]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800805e:	430b      	orrs	r3, r1
 8008060:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 0801 	and.w	r8, r2, #1
 8008070:	f04f 0900 	mov.w	r9, #0
 8008074:	ea58 0309 	orrs.w	r3, r8, r9
 8008078:	d042      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800807a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	2b05      	cmp	r3, #5
 8008082:	d823      	bhi.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8008084:	a201      	add	r2, pc, #4	; (adr r2, 800808c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080d5 	.word	0x080080d5
 8008090:	080080a5 	.word	0x080080a5
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080d5 	.word	0x080080d5
 800809c:	080080d5 	.word	0x080080d5
 80080a0:	080080d5 	.word	0x080080d5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80080a8:	3308      	adds	r3, #8
 80080aa:	4618      	mov	r0, r3
 80080ac:	f004 feda 	bl	800ce64 <RCCEx_PLL2_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80080b6:	e00e      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80080bc:	3330      	adds	r3, #48	; 0x30
 80080be:	4618      	mov	r0, r3
 80080c0:	f004 ff68 	bl	800cf94 <RCCEx_PLL3_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80080ca:	e004      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80080d2:	e000      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80080d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10c      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80080de:	4ba9      	ldr	r3, [pc, #676]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80080e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80080e4:	f023 0107 	bic.w	r1, r3, #7
 80080e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80080ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ee:	4aa5      	ldr	r2, [pc, #660]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80080f0:	430b      	orrs	r3, r1
 80080f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80080f6:	e003      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80080fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f002 0a02 	and.w	sl, r2, #2
 800810c:	f04f 0b00 	mov.w	fp, #0
 8008110:	ea5a 030b 	orrs.w	r3, sl, fp
 8008114:	f000 8088 	beq.w	8008228 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8008118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800811c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811e:	2b28      	cmp	r3, #40	; 0x28
 8008120:	d868      	bhi.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	080081fd 	.word	0x080081fd
 800812c:	080081f5 	.word	0x080081f5
 8008130:	080081f5 	.word	0x080081f5
 8008134:	080081f5 	.word	0x080081f5
 8008138:	080081f5 	.word	0x080081f5
 800813c:	080081f5 	.word	0x080081f5
 8008140:	080081f5 	.word	0x080081f5
 8008144:	080081f5 	.word	0x080081f5
 8008148:	080081cd 	.word	0x080081cd
 800814c:	080081f5 	.word	0x080081f5
 8008150:	080081f5 	.word	0x080081f5
 8008154:	080081f5 	.word	0x080081f5
 8008158:	080081f5 	.word	0x080081f5
 800815c:	080081f5 	.word	0x080081f5
 8008160:	080081f5 	.word	0x080081f5
 8008164:	080081f5 	.word	0x080081f5
 8008168:	080081e1 	.word	0x080081e1
 800816c:	080081f5 	.word	0x080081f5
 8008170:	080081f5 	.word	0x080081f5
 8008174:	080081f5 	.word	0x080081f5
 8008178:	080081f5 	.word	0x080081f5
 800817c:	080081f5 	.word	0x080081f5
 8008180:	080081f5 	.word	0x080081f5
 8008184:	080081f5 	.word	0x080081f5
 8008188:	080081fd 	.word	0x080081fd
 800818c:	080081f5 	.word	0x080081f5
 8008190:	080081f5 	.word	0x080081f5
 8008194:	080081f5 	.word	0x080081f5
 8008198:	080081f5 	.word	0x080081f5
 800819c:	080081f5 	.word	0x080081f5
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	080081f5 	.word	0x080081f5
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	080081f5 	.word	0x080081f5
 80081b0:	080081f5 	.word	0x080081f5
 80081b4:	080081f5 	.word	0x080081f5
 80081b8:	080081f5 	.word	0x080081f5
 80081bc:	080081f5 	.word	0x080081f5
 80081c0:	080081f5 	.word	0x080081f5
 80081c4:	080081f5 	.word	0x080081f5
 80081c8:	080081fd 	.word	0x080081fd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80081d0:	3308      	adds	r3, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f004 fe46 	bl	800ce64 <RCCEx_PLL2_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80081de:	e00e      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80081e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80081e4:	3330      	adds	r3, #48	; 0x30
 80081e6:	4618      	mov	r0, r3
 80081e8:	f004 fed4 	bl	800cf94 <RCCEx_PLL3_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80081f2:	e004      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80081fa:	e000      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80081fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10c      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008206:	4b5f      	ldr	r3, [pc, #380]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008208:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800820c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008216:	4a5b      	ldr	r2, [pc, #364]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008218:	430b      	orrs	r3, r1
 800821a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800821e:	e003      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008220:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008224:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008228:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f002 0304 	and.w	r3, r2, #4
 8008234:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008238:	2300      	movs	r3, #0
 800823a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800823e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8008242:	460b      	mov	r3, r1
 8008244:	4313      	orrs	r3, r2
 8008246:	d04e      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8008248:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800824c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008252:	d02c      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8008254:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008258:	d825      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800825a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800825e:	d028      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008264:	d81f      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008266:	2bc0      	cmp	r3, #192	; 0xc0
 8008268:	d025      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800826a:	2bc0      	cmp	r3, #192	; 0xc0
 800826c:	d81b      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	d00f      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d817      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01f      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	d113      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800827e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008282:	3308      	adds	r3, #8
 8008284:	4618      	mov	r0, r3
 8008286:	f004 fded 	bl	800ce64 <RCCEx_PLL2_Config>
 800828a:	4603      	mov	r3, r0
 800828c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8008290:	e014      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008292:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008296:	3330      	adds	r3, #48	; 0x30
 8008298:	4618      	mov	r0, r3
 800829a:	f004 fe7b 	bl	800cf94 <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80082a4:	e00a      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082ae:	bf00      	nop
 80082b0:	e004      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082b2:	bf00      	nop
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10c      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80082c4:	4b2f      	ldr	r3, [pc, #188]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80082ca:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80082ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d4:	4a2b      	ldr	r2, [pc, #172]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082d6:	430b      	orrs	r3, r1
 80082d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80082e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f002 0308 	and.w	r3, r2, #8
 80082f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80082f6:	2300      	movs	r3, #0
 80082f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80082fc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d056      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8008306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800830a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800830c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008310:	d031      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008312:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008316:	d82a      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831c:	d02d      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800831e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008322:	d824      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008324:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008328:	d029      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800832a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800832e:	d81e      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008334:	d011      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833a:	d818      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800833c:	2b00      	cmp	r3, #0
 800833e:	d023      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008344:	d113      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008346:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800834a:	3308      	adds	r3, #8
 800834c:	4618      	mov	r0, r3
 800834e:	f004 fd89 	bl	800ce64 <RCCEx_PLL2_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8008358:	e017      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800835a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800835e:	3330      	adds	r3, #48	; 0x30
 8008360:	4618      	mov	r0, r3
 8008362:	f004 fe17 	bl	800cf94 <RCCEx_PLL3_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800836c:	e00d      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008374:	e009      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008376:	bf00      	nop
 8008378:	e007      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800837a:	bf00      	nop
 800837c:	e005      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800837e:	bf00      	nop
 8008380:	e003      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008382:	bf00      	nop
 8008384:	44020c00 	.word	0x44020c00
        break;
 8008388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10c      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008392:	4bbb      	ldr	r3, [pc, #748]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008398:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800839c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083a2:	4ab7      	ldr	r2, [pc, #732]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80083a4:	430b      	orrs	r3, r1
 80083a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80083aa:	e003      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80083b0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f002 0310 	and.w	r3, r2, #16
 80083c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80083ca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d053      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80083d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80083de:	d031      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80083e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80083e4:	d82a      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80083e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ea:	d02d      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f0:	d824      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80083f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083f6:	d029      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80083f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083fc:	d81e      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80083fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008402:	d011      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008408:	d818      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d020      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800840e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008412:	d113      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008418:	3308      	adds	r3, #8
 800841a:	4618      	mov	r0, r3
 800841c:	f004 fd22 	bl	800ce64 <RCCEx_PLL2_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008426:	e014      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800842c:	3330      	adds	r3, #48	; 0x30
 800842e:	4618      	mov	r0, r3
 8008430:	f004 fdb0 	bl	800cf94 <RCCEx_PLL3_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800843a:	e00a      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008442:	e006      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008444:	bf00      	nop
 8008446:	e004      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008448:	bf00      	nop
 800844a:	e002      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800844c:	bf00      	nop
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008452:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10c      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800845a:	4b89      	ldr	r3, [pc, #548]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800845c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008460:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846a:	4a85      	ldr	r2, [pc, #532]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800846c:	430b      	orrs	r3, r1
 800846e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008472:	e003      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008474:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008478:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800847c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f002 0320 	and.w	r3, r2, #32
 8008488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800848c:	2300      	movs	r3, #0
 800848e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008492:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8008496:	460b      	mov	r3, r1
 8008498:	4313      	orrs	r3, r2
 800849a:	d053      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800849c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80084a6:	d031      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80084a8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80084ac:	d82a      	bhi.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b2:	d02d      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80084b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b8:	d824      	bhi.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084ba:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80084be:	d029      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80084c0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80084c4:	d81e      	bhi.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ca:	d011      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80084cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084d0:	d818      	bhi.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d020      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80084d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084da:	d113      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084e0:	3308      	adds	r3, #8
 80084e2:	4618      	mov	r0, r3
 80084e4:	f004 fcbe 	bl	800ce64 <RCCEx_PLL2_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80084ee:	e014      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084f4:	3330      	adds	r3, #48	; 0x30
 80084f6:	4618      	mov	r0, r3
 80084f8:	f004 fd4c 	bl	800cf94 <RCCEx_PLL3_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008502:	e00a      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800850a:	e006      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800850c:	bf00      	nop
 800850e:	e004      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008510:	bf00      	nop
 8008512:	e002      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008514:	bf00      	nop
 8008516:	e000      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800851a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10c      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008522:	4b57      	ldr	r3, [pc, #348]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008528:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800852c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008532:	4a53      	ldr	r2, [pc, #332]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008534:	430b      	orrs	r3, r1
 8008536:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800853a:	e003      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008540:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008550:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008554:	2300      	movs	r3, #0
 8008556:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800855a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d053      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8008564:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800856e:	d031      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008570:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008574:	d82a      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800857a:	d02d      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800857c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008580:	d824      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008582:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008586:	d029      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008588:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800858c:	d81e      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800858e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008592:	d011      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008598:	d818      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d020      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800859e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085a2:	d113      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085a8:	3308      	adds	r3, #8
 80085aa:	4618      	mov	r0, r3
 80085ac:	f004 fc5a 	bl	800ce64 <RCCEx_PLL2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80085b6:	e014      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085bc:	3330      	adds	r3, #48	; 0x30
 80085be:	4618      	mov	r0, r3
 80085c0:	f004 fce8 	bl	800cf94 <RCCEx_PLL3_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80085ca:	e00a      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80085d2:	e006      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085d4:	bf00      	nop
 80085d6:	e004      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085d8:	bf00      	nop
 80085da:	e002      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085dc:	bf00      	nop
 80085de:	e000      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10c      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80085ea:	4b25      	ldr	r3, [pc, #148]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80085ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80085f0:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80085f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	4a21      	ldr	r2, [pc, #132]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80085fc:	430b      	orrs	r3, r1
 80085fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008602:	e003      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008604:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008608:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800860c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008618:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800861c:	2300      	movs	r3, #0
 800861e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008622:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8008626:	460b      	mov	r3, r1
 8008628:	4313      	orrs	r3, r2
 800862a:	d055      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800862c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008632:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008636:	d033      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008638:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800863c:	d82c      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800863e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008642:	d02f      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008648:	d826      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800864a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800864e:	d02b      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008650:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008654:	d820      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800865a:	d013      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800865c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008660:	d81a      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d022      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800866a:	d115      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800866c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008670:	3308      	adds	r3, #8
 8008672:	4618      	mov	r0, r3
 8008674:	f004 fbf6 	bl	800ce64 <RCCEx_PLL2_Config>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800867e:	e016      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008680:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008688:	3330      	adds	r3, #48	; 0x30
 800868a:	4618      	mov	r0, r3
 800868c:	f004 fc82 	bl	800cf94 <RCCEx_PLL3_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008696:	e00a      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800869e:	e006      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086a0:	bf00      	nop
 80086a2:	e004      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086a4:	bf00      	nop
 80086a6:	e002      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086a8:	bf00      	nop
 80086aa:	e000      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10c      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80086b6:	4bbb      	ldr	r3, [pc, #748]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80086b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086bc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80086c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086c6:	4ab7      	ldr	r2, [pc, #732]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80086c8:	430b      	orrs	r3, r1
 80086ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80086ce:	e003      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80086d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80086d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80086e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80086e8:	2300      	movs	r3, #0
 80086ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80086ee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80086f2:	460b      	mov	r3, r1
 80086f4:	4313      	orrs	r3, r2
 80086f6:	d053      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80086f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008702:	d031      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008704:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008708:	d82a      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800870a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800870e:	d02d      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008714:	d824      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800871a:	d029      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800871c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008720:	d81e      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008726:	d011      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872c:	d818      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d020      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008732:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008736:	d113      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800873c:	3308      	adds	r3, #8
 800873e:	4618      	mov	r0, r3
 8008740:	f004 fb90 	bl	800ce64 <RCCEx_PLL2_Config>
 8008744:	4603      	mov	r3, r0
 8008746:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800874a:	e014      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800874c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008750:	3330      	adds	r3, #48	; 0x30
 8008752:	4618      	mov	r0, r3
 8008754:	f004 fc1e 	bl	800cf94 <RCCEx_PLL3_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800875e:	e00a      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008766:	e006      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008768:	bf00      	nop
 800876a:	e004      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008776:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10c      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800877e:	4b89      	ldr	r3, [pc, #548]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008784:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008788:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800878c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878e:	4a85      	ldr	r2, [pc, #532]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008790:	430b      	orrs	r3, r1
 8008792:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008796:	e003      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800879c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80087a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80087ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80087b0:	2300      	movs	r3, #0
 80087b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80087b6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80087ba:	460b      	mov	r3, r1
 80087bc:	4313      	orrs	r3, r2
 80087be:	d055      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80087c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80087cc:	d031      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80087ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80087d2:	d82a      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80087d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d8:	d02d      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80087da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087de:	d824      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80087e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80087e4:	d029      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80087e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80087ea:	d81e      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80087ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f0:	d011      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80087f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f6:	d818      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d020      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80087fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008800:	d113      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008806:	3308      	adds	r3, #8
 8008808:	4618      	mov	r0, r3
 800880a:	f004 fb2b 	bl	800ce64 <RCCEx_PLL2_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008814:	e014      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008816:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800881a:	3330      	adds	r3, #48	; 0x30
 800881c:	4618      	mov	r0, r3
 800881e:	f004 fbb9 	bl	800cf94 <RCCEx_PLL3_Config>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008828:	e00a      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008830:	e006      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008832:	bf00      	nop
 8008834:	e004      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008836:	bf00      	nop
 8008838:	e002      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800883a:	bf00      	nop
 800883c:	e000      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800883e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008840:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10d      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008848:	4b56      	ldr	r3, [pc, #344]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800884a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800884e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8008852:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800885a:	4a52      	ldr	r2, [pc, #328]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800885c:	430b      	orrs	r3, r1
 800885e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008862:	e003      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008864:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008868:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800886c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008878:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800887c:	2300      	movs	r3, #0
 800887e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008882:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008886:	460b      	mov	r3, r1
 8008888:	4313      	orrs	r3, r2
 800888a:	d044      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800888c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008894:	2b05      	cmp	r3, #5
 8008896:	d823      	bhi.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088e9 	.word	0x080088e9
 80088b0:	080088e9 	.word	0x080088e9
 80088b4:	080088e9 	.word	0x080088e9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088bc:	3308      	adds	r3, #8
 80088be:	4618      	mov	r0, r3
 80088c0:	f004 fad0 	bl	800ce64 <RCCEx_PLL2_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80088ca:	e00e      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088d0:	3330      	adds	r3, #48	; 0x30
 80088d2:	4618      	mov	r0, r3
 80088d4:	f004 fb5e 	bl	800cf94 <RCCEx_PLL3_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80088de:	e004      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80088e6:	e000      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80088e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10d      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80088f2:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80088f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80088f8:	f023 0107 	bic.w	r1, r3, #7
 80088fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008904:	4a27      	ldr	r2, [pc, #156]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008906:	430b      	orrs	r3, r1
 8008908:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800890c:	e003      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008912:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008922:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008926:	2300      	movs	r3, #0
 8008928:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800892c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008930:	460b      	mov	r3, r1
 8008932:	4313      	orrs	r3, r2
 8008934:	d04f      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008936:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800893a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893e:	2b50      	cmp	r3, #80	; 0x50
 8008940:	d029      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008942:	2b50      	cmp	r3, #80	; 0x50
 8008944:	d823      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d027      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	d81f      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800894e:	2b30      	cmp	r3, #48	; 0x30
 8008950:	d025      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008952:	2b30      	cmp	r3, #48	; 0x30
 8008954:	d81b      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008956:	2b20      	cmp	r3, #32
 8008958:	d00f      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800895a:	2b20      	cmp	r3, #32
 800895c:	d817      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d022      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008962:	2b10      	cmp	r3, #16
 8008964:	d113      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800896a:	3308      	adds	r3, #8
 800896c:	4618      	mov	r0, r3
 800896e:	f004 fa79 	bl	800ce64 <RCCEx_PLL2_Config>
 8008972:	4603      	mov	r3, r0
 8008974:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008978:	e017      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800897a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800897e:	3330      	adds	r3, #48	; 0x30
 8008980:	4618      	mov	r0, r3
 8008982:	f004 fb07 	bl	800cf94 <RCCEx_PLL3_Config>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800898c:	e00d      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008994:	e009      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008996:	bf00      	nop
 8008998:	e007      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800899a:	bf00      	nop
 800899c:	e005      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800899e:	bf00      	nop
 80089a0:	e003      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80089a2:	bf00      	nop
 80089a4:	44020c00 	.word	0x44020c00
        break;
 80089a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10d      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80089b2:	4baf      	ldr	r3, [pc, #700]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80089b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80089b8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80089bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c4:	4aaa      	ldr	r2, [pc, #680]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80089c6:	430b      	orrs	r3, r1
 80089c8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80089cc:	e003      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80089d2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80089e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d055      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80089f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a02:	d031      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8008a04:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a08:	d82a      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a0e:	d02d      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a14:	d824      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a1a:	d029      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008a1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a20:	d81e      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a26:	d011      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8008a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a2c:	d818      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d020      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8008a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a36:	d113      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f004 fa10 	bl	800ce64 <RCCEx_PLL2_Config>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008a4a:	e014      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a50:	3330      	adds	r3, #48	; 0x30
 8008a52:	4618      	mov	r0, r3
 8008a54:	f004 fa9e 	bl	800cf94 <RCCEx_PLL3_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008a66:	e006      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a68:	bf00      	nop
 8008a6a:	e004      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a6c:	bf00      	nop
 8008a6e:	e002      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a70:	bf00      	nop
 8008a72:	e000      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008a7e:	4b7c      	ldr	r3, [pc, #496]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a90:	4a77      	ldr	r2, [pc, #476]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008a92:	430b      	orrs	r3, r1
 8008a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a98:	e003      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a9e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ab8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008abc:	460b      	mov	r3, r1
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	d03d      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8008ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ace:	d01b      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8008ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ad4:	d814      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ada:	d017      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8008adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ae0:	d80e      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d014      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8008ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aea:	d109      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008af0:	3330      	adds	r3, #48	; 0x30
 8008af2:	4618      	mov	r0, r3
 8008af4:	f004 fa4e 	bl	800cf94 <RCCEx_PLL3_Config>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8008afe:	e008      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008b06:	e004      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008b08:	bf00      	nop
 8008b0a:	e002      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10d      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008b1a:	4b55      	ldr	r3, [pc, #340]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b20:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b2c:	4a50      	ldr	r2, [pc, #320]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008b34:	e003      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008b4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	d03d      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8008b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b6a:	d01b      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8008b6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b70:	d814      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b76:	d017      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8008b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b7c:	d80e      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d014      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8008b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b86:	d109      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b8c:	3330      	adds	r3, #48	; 0x30
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f004 fa00 	bl	800cf94 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8008b9a:	e008      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008ba2:	e004      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008ba4:	bf00      	nop
 8008ba6:	e002      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e000      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10d      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008bb6:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bbc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bc8:	4a29      	ldr	r2, [pc, #164]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008bd0:	e003      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bd6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bea:	2300      	movs	r3, #0
 8008bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bf0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	d040      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8008bfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c06:	d01b      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c0c:	d814      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c12:	d017      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c18:	d80e      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d014      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c22:	d109      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c28:	3330      	adds	r3, #48	; 0x30
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f004 f9b2 	bl	800cf94 <RCCEx_PLL3_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008c36:	e008      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008c40:	bf00      	nop
 8008c42:	e002      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d110      	bne.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c64:	4a02      	ldr	r2, [pc, #8]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008c66:	430b      	orrs	r3, r1
 8008c68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008c6c:	e006      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008c6e:	bf00      	nop
 8008c70:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c78:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	2100      	movs	r1, #0
 8008c86:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	d03d      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8008c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ca4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ca8:	d01b      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008caa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cae:	d814      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8008cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cb4:	d017      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8008cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cba:	d80e      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d014      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8008cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cc4:	d109      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cca:	3330      	adds	r3, #48	; 0x30
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f004 f961 	bl	800cf94 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8008cd8:	e008      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008ce0:	e004      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008ce2:	bf00      	nop
 8008ce4:	e002      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008ce6:	bf00      	nop
 8008ce8:	e000      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10d      	bne.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008cf4:	4bbe      	ldr	r3, [pc, #760]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008cf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008cfa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d06:	4aba      	ldr	r2, [pc, #744]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008d0e:	e003      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008d32:	460b      	mov	r3, r1
 8008d34:	4313      	orrs	r3, r2
 8008d36:	d035      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d44:	d015      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d4a:	d80e      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d012      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8008d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d54:	d109      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d5a:	3330      	adds	r3, #48	; 0x30
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f004 f919 	bl	800cf94 <RCCEx_PLL3_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008d68:	e006      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d70:	e002      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008d72:	bf00      	nop
 8008d74:	e000      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10d      	bne.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8008d80:	4b9b      	ldr	r3, [pc, #620]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008d82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d86:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d92:	4a97      	ldr	r2, [pc, #604]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008d94:	430b      	orrs	r3, r1
 8008d96:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008d9a:	e003      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008da0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	2100      	movs	r1, #0
 8008dae:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008db6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	d00e      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8008dc4:	4b8a      	ldr	r3, [pc, #552]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	4a89      	ldr	r2, [pc, #548]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008dca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dce:	61d3      	str	r3, [r2, #28]
 8008dd0:	4b87      	ldr	r3, [pc, #540]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008dd2:	69d9      	ldr	r1, [r3, #28]
 8008dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008ddc:	4a84      	ldr	r2, [pc, #528]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008dde:	430b      	orrs	r3, r1
 8008de0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008df2:	2300      	movs	r3, #0
 8008df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008df8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	d055      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e0e:	d031      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8008e10:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e14:	d82a      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1a:	d02d      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8008e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e20:	d824      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e26:	d029      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8008e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e2c:	d81e      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e32:	d011      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e38:	d818      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d020      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8008e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e42:	d113      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e48:	3308      	adds	r3, #8
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f004 f80a 	bl	800ce64 <RCCEx_PLL2_Config>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008e56:	e014      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e5c:	3330      	adds	r3, #48	; 0x30
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f004 f898 	bl	800cf94 <RCCEx_PLL3_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008e6a:	e00a      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008e72:	e006      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e74:	bf00      	nop
 8008e76:	e004      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e78:	bf00      	nop
 8008e7a:	e002      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e7c:	bf00      	nop
 8008e7e:	e000      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10d      	bne.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008e8a:	4b59      	ldr	r3, [pc, #356]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008e8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008e90:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e9c:	4a54      	ldr	r2, [pc, #336]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008ea4:	e003      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008eaa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ec4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	d055      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8008ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ed6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008eda:	d031      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8008edc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008ee0:	d82a      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ee6:	d02d      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8008ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008eec:	d824      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ef2:	d029      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8008ef4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ef8:	d81e      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008efe:	d011      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8008f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f04:	d818      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d020      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0e:	d113      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f14:	3308      	adds	r3, #8
 8008f16:	4618      	mov	r0, r3
 8008f18:	f003 ffa4 	bl	800ce64 <RCCEx_PLL2_Config>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008f22:	e014      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f28:	3330      	adds	r3, #48	; 0x30
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f004 f832 	bl	800cf94 <RCCEx_PLL3_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008f36:	e00a      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008f3e:	e006      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f40:	bf00      	nop
 8008f42:	e004      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f44:	bf00      	nop
 8008f46:	e002      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f48:	bf00      	nop
 8008f4a:	e000      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008f56:	4b26      	ldr	r3, [pc, #152]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f68:	4a21      	ldr	r2, [pc, #132]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008f70:	e003      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8008f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	2100      	movs	r1, #0
 8008f84:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f94:	460b      	mov	r3, r1
 8008f96:	4313      	orrs	r3, r2
 8008f98:	d057      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8008f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fa6:	d033      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8008fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fac:	d82c      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fb2:	d02f      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8008fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fb8:	d826      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fbe:	d02b      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8008fc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fc4:	d820      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fca:	d013      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd0:	d81a      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d022      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8008fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fda:	d115      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f003 ff3e 	bl	800ce64 <RCCEx_PLL2_Config>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008fee:	e016      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8008ff0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ff8:	3330      	adds	r3, #48	; 0x30
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f003 ffca 	bl	800cf94 <RCCEx_PLL3_Config>
 8009000:	4603      	mov	r3, r0
 8009002:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009006:	e00a      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800900e:	e006      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009010:	bf00      	nop
 8009012:	e004      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009014:	bf00      	nop
 8009016:	e002      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009018:	bf00      	nop
 800901a:	e000      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800901c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8009026:	4bbb      	ldr	r3, [pc, #748]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009028:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800902c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009034:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009038:	4ab6      	ldr	r2, [pc, #728]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800903a:	430b      	orrs	r3, r1
 800903c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009040:	e003      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009042:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009046:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800904a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	2100      	movs	r1, #0
 8009054:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009060:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009064:	460b      	mov	r3, r1
 8009066:	4313      	orrs	r3, r2
 8009068:	d055      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800906a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800906e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009072:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009076:	d031      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8009078:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800907c:	d82a      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800907e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009082:	d02d      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8009084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009088:	d824      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800908a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800908e:	d029      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8009090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009094:	d81e      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800909a:	d011      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800909c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a0:	d818      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d020      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80090a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090aa:	d113      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090b0:	3308      	adds	r3, #8
 80090b2:	4618      	mov	r0, r3
 80090b4:	f003 fed6 	bl	800ce64 <RCCEx_PLL2_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80090be:	e014      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090c4:	3330      	adds	r3, #48	; 0x30
 80090c6:	4618      	mov	r0, r3
 80090c8:	f003 ff64 	bl	800cf94 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80090d2:	e00a      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80090da:	e006      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80090dc:	bf00      	nop
 80090de:	e004      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80090e0:	bf00      	nop
 80090e2:	e002      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80090e4:	bf00      	nop
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80090e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10d      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80090f2:	4b88      	ldr	r3, [pc, #544]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80090f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80090f8:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80090fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009104:	4a83      	ldr	r2, [pc, #524]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009106:	430b      	orrs	r3, r1
 8009108:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800910c:	e003      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009112:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8009116:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	2100      	movs	r1, #0
 8009120:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800912c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009130:	460b      	mov	r3, r1
 8009132:	4313      	orrs	r3, r2
 8009134:	d055      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8009136:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800913a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800913e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009142:	d031      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8009144:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009148:	d82a      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800914a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800914e:	d02d      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8009150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009154:	d824      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800915a:	d029      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800915c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009160:	d81e      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009166:	d011      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8009168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800916c:	d818      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800916e:	2b00      	cmp	r3, #0
 8009170:	d020      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8009172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009176:	d113      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800917c:	3308      	adds	r3, #8
 800917e:	4618      	mov	r0, r3
 8009180:	f003 fe70 	bl	800ce64 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800918a:	e014      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800918c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009190:	3330      	adds	r3, #48	; 0x30
 8009192:	4618      	mov	r0, r3
 8009194:	f003 fefe 	bl	800cf94 <RCCEx_PLL3_Config>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800919e:	e00a      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80091a6:	e006      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091a8:	bf00      	nop
 80091aa:	e004      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091ac:	bf00      	nop
 80091ae:	e002      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091b0:	bf00      	nop
 80091b2:	e000      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10d      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80091be:	4b55      	ldr	r3, [pc, #340]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80091c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80091c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80091c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091d0:	4a50      	ldr	r2, [pc, #320]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80091d2:	430b      	orrs	r3, r1
 80091d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80091e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	2100      	movs	r1, #0
 80091ec:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80091f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80091fc:	460b      	mov	r3, r1
 80091fe:	4313      	orrs	r3, r2
 8009200:	d055      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8009202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009206:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800920a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800920e:	d031      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8009210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009214:	d82a      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921a:	d02d      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009220:	d824      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009226:	d029      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8009228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800922c:	d81e      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800922e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009232:	d011      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8009234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009238:	d818      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d020      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800923e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009242:	d113      	bne.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009248:	3308      	adds	r3, #8
 800924a:	4618      	mov	r0, r3
 800924c:	f003 fe0a 	bl	800ce64 <RCCEx_PLL2_Config>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8009256:	e014      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009258:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800925c:	3330      	adds	r3, #48	; 0x30
 800925e:	4618      	mov	r0, r3
 8009260:	f003 fe98 	bl	800cf94 <RCCEx_PLL3_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800926a:	e00a      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009272:	e006      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009274:	bf00      	nop
 8009276:	e004      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009278:	bf00      	nop
 800927a:	e002      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800927c:	bf00      	nop
 800927e:	e000      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009282:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10d      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800928a:	4b22      	ldr	r3, [pc, #136]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800928c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009290:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009294:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009298:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800929c:	4a1d      	ldr	r2, [pc, #116]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800929e:	430b      	orrs	r3, r1
 80092a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80092a4:	e003      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80092ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80092ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092be:	2300      	movs	r3, #0
 80092c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80092c8:	460b      	mov	r3, r1
 80092ca:	4313      	orrs	r3, r2
 80092cc:	d055      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80092ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80092d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092da:	d035      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80092dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092e0:	d82e      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80092e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092e6:	d031      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80092e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092ec:	d828      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80092ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f2:	d01b      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80092f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f8:	d822      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80092fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009302:	d009      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8009304:	e01c      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009306:	4b03      	ldr	r3, [pc, #12]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	4a02      	ldr	r2, [pc, #8]	; (8009314 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800930c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009310:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009312:	e01c      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8009314:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009318:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800931c:	3308      	adds	r3, #8
 800931e:	4618      	mov	r0, r3
 8009320:	f003 fda0 	bl	800ce64 <RCCEx_PLL2_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800932a:	e010      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800932c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009330:	3330      	adds	r3, #48	; 0x30
 8009332:	4618      	mov	r0, r3
 8009334:	f003 fe2e 	bl	800cf94 <RCCEx_PLL3_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800933e:	e006      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009346:	e002      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8009348:	bf00      	nop
 800934a:	e000      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800934c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800934e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10d      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009356:	4bc3      	ldr	r3, [pc, #780]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800935c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009368:	4abe      	ldr	r2, [pc, #760]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800936a:	430b      	orrs	r3, r1
 800936c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009370:	e003      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009376:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800937a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800938a:	2300      	movs	r3, #0
 800938c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009390:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009394:	460b      	mov	r3, r1
 8009396:	4313      	orrs	r3, r2
 8009398:	d051      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800939a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800939e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80093a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093a6:	d033      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80093a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093ac:	d82c      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80093ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80093b2:	d02d      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80093b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80093b8:	d826      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80093ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093be:	d019      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80093c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093c4:	d820      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80093ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093ce:	d007      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80093d0:	e01a      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d2:	4ba4      	ldr	r3, [pc, #656]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	4aa3      	ldr	r2, [pc, #652]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80093d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80093de:	e018      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80093e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093e4:	3308      	adds	r3, #8
 80093e6:	4618      	mov	r0, r3
 80093e8:	f003 fd3c 	bl	800ce64 <RCCEx_PLL2_Config>
 80093ec:	4603      	mov	r3, r0
 80093ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80093f2:	e00e      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093f8:	3330      	adds	r3, #48	; 0x30
 80093fa:	4618      	mov	r0, r3
 80093fc:	f003 fdca 	bl	800cf94 <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009406:	e004      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800940e:	e000      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8009410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009412:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10d      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800941a:	4b92      	ldr	r3, [pc, #584]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800941c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009420:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8009424:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009428:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800942c:	4a8d      	ldr	r2, [pc, #564]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800942e:	430b      	orrs	r3, r1
 8009430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009434:	e003      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800943a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800943e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800944a:	67bb      	str	r3, [r7, #120]	; 0x78
 800944c:	2300      	movs	r3, #0
 800944e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009450:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009454:	460b      	mov	r3, r1
 8009456:	4313      	orrs	r3, r2
 8009458:	d032      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800945a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800945e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009462:	2b05      	cmp	r3, #5
 8009464:	d80f      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d211      	bcs.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800946a:	2b01      	cmp	r3, #1
 800946c:	d911      	bls.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800946e:	2b02      	cmp	r3, #2
 8009470:	d109      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009472:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009476:	3308      	adds	r3, #8
 8009478:	4618      	mov	r0, r3
 800947a:	f003 fcf3 	bl	800ce64 <RCCEx_PLL2_Config>
 800947e:	4603      	mov	r3, r0
 8009480:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800948c:	e002      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800948e:	bf00      	nop
 8009490:	e000      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8009492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009494:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10d      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800949c:	4b71      	ldr	r3, [pc, #452]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800949e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094a2:	f023 0107 	bic.w	r1, r3, #7
 80094a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80094ae:	4a6d      	ldr	r2, [pc, #436]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80094b0:	430b      	orrs	r3, r1
 80094b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80094b6:	e003      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80094c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	2100      	movs	r1, #0
 80094ca:	6739      	str	r1, [r7, #112]	; 0x70
 80094cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094d0:	677b      	str	r3, [r7, #116]	; 0x74
 80094d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80094d6:	460b      	mov	r3, r1
 80094d8:	4313      	orrs	r3, r2
 80094da:	d024      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80094dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d005      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80094f2:	e002      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80094f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10d      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8009502:	4b58      	ldr	r3, [pc, #352]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009508:	f023 0108 	bic.w	r1, r3, #8
 800950c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009514:	4a53      	ldr	r2, [pc, #332]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009516:	430b      	orrs	r3, r1
 8009518:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800951c:	e003      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009522:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009526:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009532:	66bb      	str	r3, [r7, #104]	; 0x68
 8009534:	2300      	movs	r3, #0
 8009536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009538:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800953c:	460b      	mov	r3, r1
 800953e:	4313      	orrs	r3, r2
 8009540:	f000 80b9 	beq.w	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009544:	4b48      	ldr	r3, [pc, #288]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	4a47      	ldr	r2, [pc, #284]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800954a:	f043 0301 	orr.w	r3, r3, #1
 800954e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009550:	f7fa fbd6 	bl	8003d00 <HAL_GetTick>
 8009554:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009558:	e00b      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800955a:	f7fa fbd1 	bl	8003d00 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d903      	bls.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009570:	e005      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009572:	4b3d      	ldr	r3, [pc, #244]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0ed      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800957e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009582:	2b00      	cmp	r3, #0
 8009584:	f040 8093 	bne.w	80096ae <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009588:	4b36      	ldr	r3, [pc, #216]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800958a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800958e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009592:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009596:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d023      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800959e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80095a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d01b      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095ae:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095bc:	4b29      	ldr	r3, [pc, #164]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095c2:	4a28      	ldr	r2, [pc, #160]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095cc:	4b25      	ldr	r3, [pc, #148]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095d2:	4a24      	ldr	r2, [pc, #144]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095dc:	4a21      	ldr	r2, [pc, #132]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80095e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80095e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d019      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f2:	f7fa fb85 	bl	8003d00 <HAL_GetTick>
 80095f6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095fa:	e00d      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095fc:	f7fa fb80 	bl	8003d00 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	f241 3388 	movw	r3, #5000	; 0x1388
 800960c:	429a      	cmp	r2, r3
 800960e:	d903      	bls.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8009616:	e006      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009618:	4b12      	ldr	r3, [pc, #72]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800961a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0ea      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8009626:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800962a:	2b00      	cmp	r3, #0
 800962c:	d13a      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800962e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009632:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800963a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800963e:	d115      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8009640:	4b08      	ldr	r3, [pc, #32]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009648:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800964c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009650:	091b      	lsrs	r3, r3, #4
 8009652:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009656:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800965a:	4a02      	ldr	r2, [pc, #8]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800965c:	430b      	orrs	r3, r1
 800965e:	61d3      	str	r3, [r2, #28]
 8009660:	e00a      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8009662:	bf00      	nop
 8009664:	44020c00 	.word	0x44020c00
 8009668:	44020800 	.word	0x44020800
 800966c:	4b9f      	ldr	r3, [pc, #636]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	4a9e      	ldr	r2, [pc, #632]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009672:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009676:	61d3      	str	r3, [r2, #28]
 8009678:	4b9c      	ldr	r3, [pc, #624]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800967a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800967e:	4a9b      	ldr	r2, [pc, #620]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009684:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009688:	4b98      	ldr	r3, [pc, #608]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800968a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800968e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009692:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800969a:	4a94      	ldr	r2, [pc, #592]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800969c:	430b      	orrs	r3, r1
 800969e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80096a2:	e008      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80096ac:	e003      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80096b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80096c2:	663b      	str	r3, [r7, #96]	; 0x60
 80096c4:	2300      	movs	r3, #0
 80096c6:	667b      	str	r3, [r7, #100]	; 0x64
 80096c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80096cc:	460b      	mov	r3, r1
 80096ce:	4313      	orrs	r3, r2
 80096d0:	d035      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80096d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80096da:	2b30      	cmp	r3, #48	; 0x30
 80096dc:	d014      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80096de:	2b30      	cmp	r3, #48	; 0x30
 80096e0:	d80e      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d012      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d80a      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d106      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f2:	4b7e      	ldr	r3, [pc, #504]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	4a7d      	ldr	r2, [pc, #500]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80096f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80096fe:	e008      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009706:	e004      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009708:	bf00      	nop
 800970a:	e002      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800970c:	bf00      	nop
 800970e:	e000      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009712:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10d      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800971a:	4b74      	ldr	r3, [pc, #464]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800971c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009720:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009728:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800972c:	4a6f      	ldr	r2, [pc, #444]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800972e:	430b      	orrs	r3, r1
 8009730:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009734:	e003      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009736:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800973a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800973e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800974a:	65bb      	str	r3, [r7, #88]	; 0x58
 800974c:	2300      	movs	r3, #0
 800974e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009750:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009754:	460b      	mov	r3, r1
 8009756:	4313      	orrs	r3, r2
 8009758:	d033      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800975a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800975e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d007      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800976a:	e010      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800976c:	4b5f      	ldr	r3, [pc, #380]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800976e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009770:	4a5e      	ldr	r2, [pc, #376]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009776:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009778:	e00d      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800977a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800977e:	3308      	adds	r3, #8
 8009780:	4618      	mov	r0, r3
 8009782:	f003 fb6f 	bl	800ce64 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800978c:	e003      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009796:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10d      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800979e:	4b53      	ldr	r3, [pc, #332]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80097a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097a4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80097a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80097b0:	4a4e      	ldr	r2, [pc, #312]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80097b2:	430b      	orrs	r3, r1
 80097b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80097b8:	e003      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80097c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80097ce:	653b      	str	r3, [r7, #80]	; 0x50
 80097d0:	2300      	movs	r3, #0
 80097d2:	657b      	str	r3, [r7, #84]	; 0x54
 80097d4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80097d8:	460b      	mov	r3, r1
 80097da:	4313      	orrs	r3, r2
 80097dc:	d033      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80097de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80097ea:	2b80      	cmp	r3, #128	; 0x80
 80097ec:	d007      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80097ee:	e010      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f0:	4b3e      	ldr	r3, [pc, #248]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80097f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f4:	4a3d      	ldr	r2, [pc, #244]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80097f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80097fc:	e00d      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009802:	3308      	adds	r3, #8
 8009804:	4618      	mov	r0, r3
 8009806:	f003 fb2d 	bl	800ce64 <RCCEx_PLL2_Config>
 800980a:	4603      	mov	r3, r0
 800980c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009810:	e003      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10d      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8009822:	4b32      	ldr	r3, [pc, #200]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009824:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009828:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800982c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009830:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009834:	4a2d      	ldr	r2, [pc, #180]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009836:	430b      	orrs	r3, r1
 8009838:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800983c:	e003      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009842:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009852:	64bb      	str	r3, [r7, #72]	; 0x48
 8009854:	2300      	movs	r3, #0
 8009856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009858:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800985c:	460b      	mov	r3, r1
 800985e:	4313      	orrs	r3, r2
 8009860:	d04a      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009862:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800986a:	2b04      	cmp	r3, #4
 800986c:	d827      	bhi.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800986e:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	08009889 	.word	0x08009889
 8009878:	08009897 	.word	0x08009897
 800987c:	080098ab 	.word	0x080098ab
 8009880:	080098c7 	.word	0x080098c7
 8009884:	080098c7 	.word	0x080098c7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009888:	4b18      	ldr	r3, [pc, #96]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	4a17      	ldr	r2, [pc, #92]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800988e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009892:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009894:	e018      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009896:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800989a:	3308      	adds	r3, #8
 800989c:	4618      	mov	r0, r3
 800989e:	f003 fae1 	bl	800ce64 <RCCEx_PLL2_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80098a8:	e00e      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80098aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ae:	3330      	adds	r3, #48	; 0x30
 80098b0:	4618      	mov	r0, r3
 80098b2:	f003 fb6f 	bl	800cf94 <RCCEx_PLL3_Config>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80098bc:	e004      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098c4:	e000      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80098c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80098d0:	4b06      	ldr	r3, [pc, #24]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098d6:	f023 0107 	bic.w	r1, r3, #7
 80098da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098e2:	4a02      	ldr	r2, [pc, #8]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098e4:	430b      	orrs	r3, r1
 80098e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098ea:	e005      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80098ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80098f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009904:	643b      	str	r3, [r7, #64]	; 0x40
 8009906:	2300      	movs	r3, #0
 8009908:	647b      	str	r3, [r7, #68]	; 0x44
 800990a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800990e:	460b      	mov	r3, r1
 8009910:	4313      	orrs	r3, r2
 8009912:	f000 8081 	beq.w	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800991a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800991e:	2b20      	cmp	r3, #32
 8009920:	d85f      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	080099ad 	.word	0x080099ad
 800992c:	080099e3 	.word	0x080099e3
 8009930:	080099e3 	.word	0x080099e3
 8009934:	080099e3 	.word	0x080099e3
 8009938:	080099e3 	.word	0x080099e3
 800993c:	080099e3 	.word	0x080099e3
 8009940:	080099e3 	.word	0x080099e3
 8009944:	080099e3 	.word	0x080099e3
 8009948:	080099bb 	.word	0x080099bb
 800994c:	080099e3 	.word	0x080099e3
 8009950:	080099e3 	.word	0x080099e3
 8009954:	080099e3 	.word	0x080099e3
 8009958:	080099e3 	.word	0x080099e3
 800995c:	080099e3 	.word	0x080099e3
 8009960:	080099e3 	.word	0x080099e3
 8009964:	080099e3 	.word	0x080099e3
 8009968:	080099cf 	.word	0x080099cf
 800996c:	080099e3 	.word	0x080099e3
 8009970:	080099e3 	.word	0x080099e3
 8009974:	080099e3 	.word	0x080099e3
 8009978:	080099e3 	.word	0x080099e3
 800997c:	080099e3 	.word	0x080099e3
 8009980:	080099e3 	.word	0x080099e3
 8009984:	080099e3 	.word	0x080099e3
 8009988:	080099eb 	.word	0x080099eb
 800998c:	080099e3 	.word	0x080099e3
 8009990:	080099e3 	.word	0x080099e3
 8009994:	080099e3 	.word	0x080099e3
 8009998:	080099e3 	.word	0x080099e3
 800999c:	080099e3 	.word	0x080099e3
 80099a0:	080099e3 	.word	0x080099e3
 80099a4:	080099e3 	.word	0x080099e3
 80099a8:	080099eb 	.word	0x080099eb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ac:	4bab      	ldr	r3, [pc, #684]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80099ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b0:	4aaa      	ldr	r2, [pc, #680]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80099b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80099b8:	e018      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80099ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099be:	3308      	adds	r3, #8
 80099c0:	4618      	mov	r0, r3
 80099c2:	f003 fa4f 	bl	800ce64 <RCCEx_PLL2_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80099cc:	e00e      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80099ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099d2:	3330      	adds	r3, #48	; 0x30
 80099d4:	4618      	mov	r0, r3
 80099d6:	f003 fadd 	bl	800cf94 <RCCEx_PLL3_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80099e0:	e004      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80099ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10d      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80099f4:	4b99      	ldr	r3, [pc, #612]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80099f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80099fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a06:	4a95      	ldr	r2, [pc, #596]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a0e:	e003      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4313      	orrs	r3, r2
 8009a32:	d04e      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8009a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a40:	d02e      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a46:	d827      	bhi.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009a48:	2bc0      	cmp	r3, #192	; 0xc0
 8009a4a:	d02b      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8009a4c:	2bc0      	cmp	r3, #192	; 0xc0
 8009a4e:	d823      	bhi.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009a50:	2b80      	cmp	r3, #128	; 0x80
 8009a52:	d017      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8009a54:	2b80      	cmp	r3, #128	; 0x80
 8009a56:	d81f      	bhi.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8009a5c:	2b40      	cmp	r3, #64	; 0x40
 8009a5e:	d007      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8009a60:	e01a      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a62:	4b7e      	ldr	r3, [pc, #504]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	4a7d      	ldr	r2, [pc, #500]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a6c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009a6e:	e01a      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a74:	3308      	adds	r3, #8
 8009a76:	4618      	mov	r0, r3
 8009a78:	f003 f9f4 	bl	800ce64 <RCCEx_PLL2_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009a82:	e010      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a88:	3330      	adds	r3, #48	; 0x30
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f003 fa82 	bl	800cf94 <RCCEx_PLL3_Config>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009a96:	e006      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009a9e:	e002      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009aa0:	bf00      	nop
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10d      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009aae:	4b6b      	ldr	r3, [pc, #428]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ab4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ac0:	4a66      	ldr	r2, [pc, #408]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ac8:	e003      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ace:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8009ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009ade:	633b      	str	r3, [r7, #48]	; 0x30
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ae4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4313      	orrs	r3, r2
 8009aec:	d055      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8009aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009af2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009af6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009afa:	d031      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8009afc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009b00:	d82a      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b06:	d02d      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8009b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0c:	d824      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b12:	d029      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8009b14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b18:	d81e      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b1e:	d011      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8009b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b24:	d818      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d020      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8009b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b2e:	d113      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b34:	3308      	adds	r3, #8
 8009b36:	4618      	mov	r0, r3
 8009b38:	f003 f994 	bl	800ce64 <RCCEx_PLL2_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009b42:	e014      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b48:	3330      	adds	r3, #48	; 0x30
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f003 fa22 	bl	800cf94 <RCCEx_PLL3_Config>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009b56:	e00a      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b5e:	e006      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b60:	bf00      	nop
 8009b62:	e004      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b64:	bf00      	nop
 8009b66:	e002      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b68:	bf00      	nop
 8009b6a:	e000      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10d      	bne.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8009b76:	4b39      	ldr	r3, [pc, #228]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b7c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8009b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009b88:	4a34      	ldr	r2, [pc, #208]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b90:	e003      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8009b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	d058      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8009bb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009bbe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009bc2:	d031      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8009bc4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009bc8:	d82a      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bce:	d02d      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8009bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bd4:	d824      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bda:	d029      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8009bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009be0:	d81e      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be6:	d011      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8009be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bec:	d818      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d020      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8009bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf6:	d113      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f003 f930 	bl	800ce64 <RCCEx_PLL2_Config>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009c0a:	e014      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c10:	3330      	adds	r3, #48	; 0x30
 8009c12:	4618      	mov	r0, r3
 8009c14:	f003 f9be 	bl	800cf94 <RCCEx_PLL3_Config>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009c1e:	e00a      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009c26:	e006      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c28:	bf00      	nop
 8009c2a:	e004      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c2c:	bf00      	nop
 8009c2e:	e002      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c30:	bf00      	nop
 8009c32:	e000      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d110      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c50:	4902      	ldr	r1, [pc, #8]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009c58:	e006      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8009c5a:	bf00      	nop
 8009c5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	2100      	movs	r1, #0
 8009c72:	6239      	str	r1, [r7, #32]
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d055      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8009c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c8c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009c90:	d031      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8009c92:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009c96:	d82a      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c9c:	d02d      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8009c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ca2:	d824      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009ca4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009ca8:	d029      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8009caa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009cae:	d81e      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb4:	d011      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8009cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cba:	d818      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d020      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8009cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc4:	d113      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cca:	3308      	adds	r3, #8
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f003 f8c9 	bl	800ce64 <RCCEx_PLL2_Config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cd8:	e014      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cde:	3330      	adds	r3, #48	; 0x30
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f003 f957 	bl	800cf94 <RCCEx_PLL3_Config>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cec:	e00a      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009cf4:	e006      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009cf6:	bf00      	nop
 8009cf8:	e004      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009cfa:	bf00      	nop
 8009cfc:	e002      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009cfe:	bf00      	nop
 8009d00:	e000      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d04:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10d      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8009d0c:	4b88      	ldr	r3, [pc, #544]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d12:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8009d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d1e:	4984      	ldr	r1, [pc, #528]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009d26:	e003      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d2c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	2100      	movs	r1, #0
 8009d3a:	61b9      	str	r1, [r7, #24]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d46:	460b      	mov	r3, r1
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	d03d      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8009d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d81c      	bhi.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009d9b 	.word	0x08009d9b
 8009d64:	08009d71 	.word	0x08009d71
 8009d68:	08009d7f 	.word	0x08009d7f
 8009d6c:	08009d9b 	.word	0x08009d9b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d70:	4b6f      	ldr	r3, [pc, #444]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	4a6e      	ldr	r2, [pc, #440]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d7a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009d7c:	e00e      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d82:	3308      	adds	r3, #8
 8009d84:	4618      	mov	r0, r3
 8009d86:	f003 f86d 	bl	800ce64 <RCCEx_PLL2_Config>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8009d90:	e004      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009d98:	e000      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8009d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10d      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009da4:	4b62      	ldr	r3, [pc, #392]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009da6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009daa:	f023 0203 	bic.w	r2, r3, #3
 8009dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009db2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009db6:	495e      	ldr	r1, [pc, #376]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009dbe:	e003      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009dc4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6139      	str	r1, [r7, #16]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d03a      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8009de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009de8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df0:	d00e      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8009df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df6:	d815      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d017      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8009dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e00:	d110      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e02:	4b4b      	ldr	r3, [pc, #300]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	4a4a      	ldr	r2, [pc, #296]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009e0e:	e00e      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e14:	3308      	adds	r3, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f003 f824 	bl	800ce64 <RCCEx_PLL2_Config>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009e22:	e004      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e2a:	e000      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8009e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10d      	bne.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8009e36:	4b3e      	ldr	r3, [pc, #248]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009e48:	4939      	ldr	r1, [pc, #228]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e52:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e56:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	2100      	movs	r1, #0
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e70:	460b      	mov	r3, r1
 8009e72:	4313      	orrs	r3, r2
 8009e74:	d038      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8009e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009e7e:	2b30      	cmp	r3, #48	; 0x30
 8009e80:	d01b      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8009e82:	2b30      	cmp	r3, #48	; 0x30
 8009e84:	d815      	bhi.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d002      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d007      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8009e8e:	e010      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	4a26      	ldr	r2, [pc, #152]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e9a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e9c:	e00e      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ea2:	3330      	adds	r3, #48	; 0x30
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f003 f875 	bl	800cf94 <RCCEx_PLL3_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8009eb0:	e004      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009eb8:	e000      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8009eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ebc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10d      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8009ec4:	4b1a      	ldr	r3, [pc, #104]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009ed6:	4916      	ldr	r1, [pc, #88]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009ede:	e003      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ee4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6039      	str	r1, [r7, #0]
 8009ef4:	f003 0308 	and.w	r3, r3, #8
 8009ef8:	607b      	str	r3, [r7, #4]
 8009efa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009efe:	460b      	mov	r3, r1
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d00c      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009f16:	4906      	ldr	r1, [pc, #24]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8009f1e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f2e:	bf00      	nop
 8009f30:	44020c00 	.word	0x44020c00

08009f34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b08b      	sub	sp, #44	; 0x2c
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009f3c:	4bad      	ldr	r3, [pc, #692]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f44:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009f46:	4bab      	ldr	r3, [pc, #684]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009f50:	4ba8      	ldr	r3, [pc, #672]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	0a1b      	lsrs	r3, r3, #8
 8009f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f5a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8009f5c:	4ba5      	ldr	r3, [pc, #660]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	f003 0310 	and.w	r3, r3, #16
 8009f64:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f66:	4ba3      	ldr	r3, [pc, #652]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	fb02 f303 	mul.w	r3, r2, r3
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8126 	beq.w	800a1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d053      	beq.n	800a038 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d86f      	bhi.n	800a076 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d003      	beq.n	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d02b      	beq.n	8009ffa <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8009fa2:	e068      	b.n	800a076 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fa4:	4b93      	ldr	r3, [pc, #588]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	08db      	lsrs	r3, r3, #3
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	4a92      	ldr	r2, [pc, #584]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	ee07 3a90 	vmov	s15, r3
 8009fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	ee07 3a90 	vmov	s15, r3
 8009fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd8:	ed97 6a04 	vldr	s12, [r7, #16]
 8009fdc:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a1fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8009fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8009ff8:	e068      	b.n	800a0cc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	ee07 3a90 	vmov	s15, r3
 800a000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a004:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a04 	vldr	s12, [r7, #16]
 800a01a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a036:	e049      	b.n	800a0cc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a204 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a054:	ed97 6a04 	vldr	s12, [r7, #16]
 800a058:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a1fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a070:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a074:	e02a      	b.n	800a0cc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a076:	4b5f      	ldr	r3, [pc, #380]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	08db      	lsrs	r3, r3, #3
 800a07c:	f003 0303 	and.w	r3, r3, #3
 800a080:	4a5d      	ldr	r2, [pc, #372]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	ee07 3a90 	vmov	s15, r3
 800a098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0aa:	ed97 6a04 	vldr	s12, [r7, #16]
 800a0ae:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a1fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a0ca:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0cc:	4b49      	ldr	r3, [pc, #292]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0d8:	d121      	bne.n	800a11e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a0da:	4b46      	ldr	r3, [pc, #280]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d017      	beq.n	800a116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a0e6:	4b43      	ldr	r3, [pc, #268]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ea:	0a5b      	lsrs	r3, r3, #9
 800a0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a0f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a100:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a10c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e006      	b.n	800a124 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	e002      	b.n	800a124 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a124:	4b33      	ldr	r3, [pc, #204]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a12c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a130:	d121      	bne.n	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a132:	4b30      	ldr	r3, [pc, #192]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d017      	beq.n	800a16e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a13e:	4b2d      	ldr	r3, [pc, #180]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a142:	0c1b      	lsrs	r3, r3, #16
 800a144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a148:	ee07 3a90 	vmov	s15, r3
 800a14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a154:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a158:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a164:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
 800a16c:	e006      	b.n	800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	605a      	str	r2, [r3, #4]
 800a174:	e002      	b.n	800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a17c:	4b1d      	ldr	r3, [pc, #116]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a188:	d121      	bne.n	800a1ce <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a18a:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d017      	beq.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a196:	4b17      	ldr	r3, [pc, #92]	; (800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19a:	0e1b      	lsrs	r3, r3, #24
 800a19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a0:	ee07 3a90 	vmov	s15, r3
 800a1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a1a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a1b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a1b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1bc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1c4:	e010      	b.n	800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	609a      	str	r2, [r3, #8]
}
 800a1cc:	e00c      	b.n	800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	609a      	str	r2, [r3, #8]
}
 800a1d4:	e008      	b.n	800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	372c      	adds	r7, #44	; 0x2c
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	44020c00 	.word	0x44020c00
 800a1f8:	03d09000 	.word	0x03d09000
 800a1fc:	46000000 	.word	0x46000000
 800a200:	4a742400 	.word	0x4a742400
 800a204:	4af42400 	.word	0x4af42400

0800a208 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a208:	b480      	push	{r7}
 800a20a:	b08b      	sub	sp, #44	; 0x2c
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a210:	4bad      	ldr	r3, [pc, #692]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a218:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a21a:	4bab      	ldr	r3, [pc, #684]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a224:	4ba8      	ldr	r3, [pc, #672]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	0a1b      	lsrs	r3, r3, #8
 800a22a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a22e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a230:	4ba5      	ldr	r3, [pc, #660]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	f003 0310 	and.w	r3, r3, #16
 800a238:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a23a:	4ba3      	ldr	r3, [pc, #652]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	fb02 f303 	mul.w	r3, r2, r3
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8126 	beq.w	800a4aa <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	2b03      	cmp	r3, #3
 800a262:	d053      	beq.n	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	2b03      	cmp	r3, #3
 800a268:	d86f      	bhi.n	800a34a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d003      	beq.n	800a278 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d02b      	beq.n	800a2ce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800a276:	e068      	b.n	800a34a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a278:	4b93      	ldr	r3, [pc, #588]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	08db      	lsrs	r3, r3, #3
 800a27e:	f003 0303 	and.w	r3, r3, #3
 800a282:	4a92      	ldr	r2, [pc, #584]	; (800a4cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a284:	fa22 f303 	lsr.w	r3, r2, r3
 800a288:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ac:	ed97 6a04 	vldr	s12, [r7, #16]
 800a2b0:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a2b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a2cc:	e068      	b.n	800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a2dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ea:	ed97 6a04 	vldr	s12, [r7, #16]
 800a2ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a306:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a30a:	e049      	b.n	800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800a31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	ee07 3a90 	vmov	s15, r3
 800a324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a328:	ed97 6a04 	vldr	s12, [r7, #16]
 800a32c:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a33c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a340:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a344:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a348:	e02a      	b.n	800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a34a:	4b5f      	ldr	r3, [pc, #380]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	08db      	lsrs	r3, r3, #3
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	4a5d      	ldr	r2, [pc, #372]	; (800a4cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a356:	fa22 f303 	lsr.w	r3, r2, r3
 800a35a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	ee07 3a90 	vmov	s15, r3
 800a362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	ee07 3a90 	vmov	s15, r3
 800a36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a37e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a382:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a38e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a39e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3a0:	4b49      	ldr	r3, [pc, #292]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ac:	d121      	bne.n	800a3f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a3ae:	4b46      	ldr	r3, [pc, #280]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d017      	beq.n	800a3ea <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a3ba:	4b43      	ldr	r3, [pc, #268]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3be:	0a5b      	lsrs	r3, r3, #9
 800a3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3c4:	ee07 3a90 	vmov	s15, r3
 800a3c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800a3cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a3d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a3d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	e006      	b.n	800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e002      	b.n	800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3f8:	4b33      	ldr	r3, [pc, #204]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a404:	d121      	bne.n	800a44a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a406:	4b30      	ldr	r3, [pc, #192]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d017      	beq.n	800a442 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a412:	4b2d      	ldr	r3, [pc, #180]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a416:	0c1b      	lsrs	r3, r3, #16
 800a418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a41c:	ee07 3a90 	vmov	s15, r3
 800a420:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a428:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a42c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a438:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	605a      	str	r2, [r3, #4]
 800a440:	e006      	b.n	800a450 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	605a      	str	r2, [r3, #4]
 800a448:	e002      	b.n	800a450 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a450:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a45c:	d121      	bne.n	800a4a2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a45e:	4b1a      	ldr	r3, [pc, #104]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d017      	beq.n	800a49a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a46a:	4b17      	ldr	r3, [pc, #92]	; (800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	0e1b      	lsrs	r3, r3, #24
 800a470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a474:	ee07 3a90 	vmov	s15, r3
 800a478:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800a47c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a480:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a484:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a490:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a498:	e010      	b.n	800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	609a      	str	r2, [r3, #8]
}
 800a4a0:	e00c      	b.n	800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	609a      	str	r2, [r3, #8]
}
 800a4a8:	e008      	b.n	800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	609a      	str	r2, [r3, #8]
}
 800a4bc:	bf00      	nop
 800a4be:	372c      	adds	r7, #44	; 0x2c
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	44020c00 	.word	0x44020c00
 800a4cc:	03d09000 	.word	0x03d09000
 800a4d0:	46000000 	.word	0x46000000
 800a4d4:	4a742400 	.word	0x4a742400
 800a4d8:	4af42400 	.word	0x4af42400

0800a4dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b08b      	sub	sp, #44	; 0x2c
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a4e4:	4bad      	ldr	r3, [pc, #692]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ec:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a4ee:	4bab      	ldr	r3, [pc, #684]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800a4f8:	4ba8      	ldr	r3, [pc, #672]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fc:	0a1b      	lsrs	r3, r3, #8
 800a4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a502:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800a504:	4ba5      	ldr	r3, [pc, #660]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a50e:	4ba3      	ldr	r3, [pc, #652]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a512:	08db      	lsrs	r3, r3, #3
 800a514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	fb02 f303 	mul.w	r3, r2, r3
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8126 	beq.w	800a77e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d053      	beq.n	800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d86f      	bhi.n	800a61e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d003      	beq.n	800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d02b      	beq.n	800a5a2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800a54a:	e068      	b.n	800a61e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a54c:	4b93      	ldr	r3, [pc, #588]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	08db      	lsrs	r3, r3, #3
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	4a92      	ldr	r2, [pc, #584]	; (800a7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a558:	fa22 f303 	lsr.w	r3, r2, r3
 800a55c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	ee07 3a90 	vmov	s15, r3
 800a564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	ee07 3a90 	vmov	s15, r3
 800a57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a580:	ed97 6a04 	vldr	s12, [r7, #16]
 800a584:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a58c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a5a0:	e068      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	ee07 3a90 	vmov	s15, r3
 800a5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ac:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a5b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5be:	ed97 6a04 	vldr	s12, [r7, #16]
 800a5c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a5de:	e049      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800a5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fc:	ed97 6a04 	vldr	s12, [r7, #16]
 800a600:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a618:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a61c:	e02a      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a61e:	4b5f      	ldr	r3, [pc, #380]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	08db      	lsrs	r3, r3, #3
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	4a5d      	ldr	r2, [pc, #372]	; (800a7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a62a:	fa22 f303 	lsr.w	r3, r2, r3
 800a62e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	ee07 3a90 	vmov	s15, r3
 800a640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a652:	ed97 6a04 	vldr	s12, [r7, #16]
 800a656:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a672:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a674:	4b49      	ldr	r3, [pc, #292]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a67c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a680:	d121      	bne.n	800a6c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a682:	4b46      	ldr	r3, [pc, #280]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d017      	beq.n	800a6be <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a68e:	4b43      	ldr	r3, [pc, #268]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	0a5b      	lsrs	r3, r3, #9
 800a694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800a6a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a6a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	e006      	b.n	800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	e002      	b.n	800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6cc:	4b33      	ldr	r3, [pc, #204]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6d8:	d121      	bne.n	800a71e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a6da:	4b30      	ldr	r3, [pc, #192]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d017      	beq.n	800a716 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a6e6:	4b2d      	ldr	r3, [pc, #180]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	0c1b      	lsrs	r3, r3, #16
 800a6ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f0:	ee07 3a90 	vmov	s15, r3
 800a6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a6f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a700:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a70c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	605a      	str	r2, [r3, #4]
 800a714:	e006      	b.n	800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	605a      	str	r2, [r3, #4]
 800a71c:	e002      	b.n	800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a724:	4b1d      	ldr	r3, [pc, #116]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a72c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a730:	d121      	bne.n	800a776 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a732:	4b1a      	ldr	r3, [pc, #104]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d017      	beq.n	800a76e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a73e:	4b17      	ldr	r3, [pc, #92]	; (800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a742:	0e1b      	lsrs	r3, r3, #24
 800a744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800a750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a754:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a758:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a764:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800a76c:	e010      	b.n	800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	609a      	str	r2, [r3, #8]
}
 800a774:	e00c      	b.n	800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]
}
 800a77c:	e008      	b.n	800a790 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	609a      	str	r2, [r3, #8]
}
 800a790:	bf00      	nop
 800a792:	372c      	adds	r7, #44	; 0x2c
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	44020c00 	.word	0x44020c00
 800a7a0:	03d09000 	.word	0x03d09000
 800a7a4:	46000000 	.word	0x46000000
 800a7a8:	4a742400 	.word	0x4a742400
 800a7ac:	4af42400 	.word	0x4af42400

0800a7b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a7b0:	b590      	push	{r4, r7, lr}
 800a7b2:	b08f      	sub	sp, #60	; 0x3c
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a7ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a7be:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800a7c2:	4321      	orrs	r1, r4
 800a7c4:	d150      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a7c6:	4b26      	ldr	r3, [pc, #152]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a7c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7d0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a7d2:	4b23      	ldr	r3, [pc, #140]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a7d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d108      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e6:	d104      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a7e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ee:	f002 bb2a 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a7f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a800:	d108      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a808:	d104      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800a80a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a80e:	637b      	str	r3, [r7, #52]	; 0x34
 800a810:	f002 bb19 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800a814:	4b12      	ldr	r3, [pc, #72]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a820:	d119      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a828:	d115      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a82a:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a836:	d30a      	bcc.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800a838:	4b09      	ldr	r3, [pc, #36]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	0a1b      	lsrs	r3, r3, #8
 800a83e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a842:	4a08      	ldr	r2, [pc, #32]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a844:	fbb2 f3f3 	udiv	r3, r2, r3
 800a848:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a84a:	f002 bafc 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800a84e:	2300      	movs	r3, #0
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a852:	f002 baf8 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
 800a85a:	f002 baf4 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a85e:	bf00      	nop
 800a860:	44020c00 	.word	0x44020c00
 800a864:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800a868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a86c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800a870:	ea50 0104 	orrs.w	r1, r0, r4
 800a874:	f001 8275 	beq.w	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800a878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a87c:	2801      	cmp	r0, #1
 800a87e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800a882:	f082 82dd 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a88a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800a88e:	ea50 0104 	orrs.w	r1, r0, r4
 800a892:	f001 816c 	beq.w	800bb6e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800a896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a89a:	2801      	cmp	r0, #1
 800a89c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800a8a0:	f082 82ce 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8a8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800a8ac:	ea50 0104 	orrs.w	r1, r0, r4
 800a8b0:	f001 8602 	beq.w	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800a8b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8b8:	2801      	cmp	r0, #1
 800a8ba:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800a8be:	f082 82bf 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8c6:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800a8ca:	ea50 0104 	orrs.w	r1, r0, r4
 800a8ce:	f001 854c 	beq.w	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800a8d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8d6:	2801      	cmp	r0, #1
 800a8d8:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800a8dc:	f082 82b0 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8e4:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800a8e8:	ea50 0104 	orrs.w	r1, r0, r4
 800a8ec:	f001 849e 	beq.w	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800a8f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8f4:	2801      	cmp	r0, #1
 800a8f6:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800a8fa:	f082 82a1 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a902:	f1a1 0420 	sub.w	r4, r1, #32
 800a906:	ea50 0104 	orrs.w	r1, r0, r4
 800a90a:	f001 83e8 	beq.w	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800a90e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a912:	2801      	cmp	r0, #1
 800a914:	f171 0120 	sbcs.w	r1, r1, #32
 800a918:	f082 8292 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a91c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a920:	f1a1 0410 	sub.w	r4, r1, #16
 800a924:	ea50 0104 	orrs.w	r1, r0, r4
 800a928:	f002 8256 	beq.w	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a92c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a930:	2801      	cmp	r0, #1
 800a932:	f171 0110 	sbcs.w	r1, r1, #16
 800a936:	f082 8283 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a93a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a93e:	f1a1 0408 	sub.w	r4, r1, #8
 800a942:	ea50 0104 	orrs.w	r1, r0, r4
 800a946:	f002 81cc 	beq.w	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800a94a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a94e:	2801      	cmp	r0, #1
 800a950:	f171 0108 	sbcs.w	r1, r1, #8
 800a954:	f082 8274 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a95c:	1f0c      	subs	r4, r1, #4
 800a95e:	ea50 0104 	orrs.w	r1, r0, r4
 800a962:	f001 8648 	beq.w	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800a966:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a96a:	2801      	cmp	r0, #1
 800a96c:	f171 0104 	sbcs.w	r1, r1, #4
 800a970:	f082 8266 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a974:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a978:	1e8c      	subs	r4, r1, #2
 800a97a:	ea50 0104 	orrs.w	r1, r0, r4
 800a97e:	f002 8143 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800a982:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a986:	2801      	cmp	r0, #1
 800a988:	f171 0102 	sbcs.w	r1, r1, #2
 800a98c:	f082 8258 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a990:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a994:	1e4c      	subs	r4, r1, #1
 800a996:	ea50 0104 	orrs.w	r1, r0, r4
 800a99a:	f002 80ce 	beq.w	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800a99e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9a2:	2801      	cmp	r0, #1
 800a9a4:	f171 0101 	sbcs.w	r1, r1, #1
 800a9a8:	f082 824a 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a9ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9b0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800a9b4:	4321      	orrs	r1, r4
 800a9b6:	f002 8059 	beq.w	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800a9ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9be:	4cd9      	ldr	r4, [pc, #868]	; (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800a9c0:	42a0      	cmp	r0, r4
 800a9c2:	f171 0100 	sbcs.w	r1, r1, #0
 800a9c6:	f082 823b 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a9ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9ce:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800a9d2:	4321      	orrs	r1, r4
 800a9d4:	f001 87d9 	beq.w	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800a9d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9dc:	4cd2      	ldr	r4, [pc, #840]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800a9de:	42a0      	cmp	r0, r4
 800a9e0:	f171 0100 	sbcs.w	r1, r1, #0
 800a9e4:	f082 822c 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a9e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9ec:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800a9f0:	4321      	orrs	r1, r4
 800a9f2:	f001 8751 	beq.w	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800a9f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9fa:	4ccc      	ldr	r4, [pc, #816]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a9fc:	42a0      	cmp	r0, r4
 800a9fe:	f171 0100 	sbcs.w	r1, r1, #0
 800aa02:	f082 821d 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa0a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800aa0e:	4321      	orrs	r1, r4
 800aa10:	f001 869a 	beq.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800aa14:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa18:	4cc5      	ldr	r4, [pc, #788]	; (800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800aa1a:	42a0      	cmp	r0, r4
 800aa1c:	f171 0100 	sbcs.w	r1, r1, #0
 800aa20:	f082 820e 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa24:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa28:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800aa2c:	4321      	orrs	r1, r4
 800aa2e:	f001 8612 	beq.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800aa32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa36:	4cbf      	ldr	r4, [pc, #764]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800aa38:	42a0      	cmp	r0, r4
 800aa3a:	f171 0100 	sbcs.w	r1, r1, #0
 800aa3e:	f082 81ff 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa46:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800aa4a:	4321      	orrs	r1, r4
 800aa4c:	f002 817e 	beq.w	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800aa50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa54:	4cb8      	ldr	r4, [pc, #736]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa56:	42a0      	cmp	r0, r4
 800aa58:	f171 0100 	sbcs.w	r1, r1, #0
 800aa5c:	f082 81f0 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa64:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800aa68:	4321      	orrs	r1, r4
 800aa6a:	f000 829e 	beq.w	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800aa6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa72:	4cb2      	ldr	r4, [pc, #712]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa74:	42a0      	cmp	r0, r4
 800aa76:	f171 0100 	sbcs.w	r1, r1, #0
 800aa7a:	f082 81e1 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa82:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800aa86:	4321      	orrs	r1, r4
 800aa88:	f000 826d 	beq.w	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800aa8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa90:	4cab      	ldr	r4, [pc, #684]	; (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa92:	42a0      	cmp	r0, r4
 800aa94:	f171 0100 	sbcs.w	r1, r1, #0
 800aa98:	f082 81d2 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaa0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800aaa4:	4321      	orrs	r1, r4
 800aaa6:	f001 800d 	beq.w	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800aaaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaae:	4ca5      	ldr	r4, [pc, #660]	; (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aab0:	42a0      	cmp	r0, r4
 800aab2:	f171 0100 	sbcs.w	r1, r1, #0
 800aab6:	f082 81c3 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aaba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aabe:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800aac2:	4321      	orrs	r1, r4
 800aac4:	f000 81d0 	beq.w	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800aac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aacc:	4c9e      	ldr	r4, [pc, #632]	; (800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800aace:	42a0      	cmp	r0, r4
 800aad0:	f171 0100 	sbcs.w	r1, r1, #0
 800aad4:	f082 81b4 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aadc:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800aae0:	4321      	orrs	r1, r4
 800aae2:	f000 8142 	beq.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800aae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaea:	4c98      	ldr	r4, [pc, #608]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800aaec:	42a0      	cmp	r0, r4
 800aaee:	f171 0100 	sbcs.w	r1, r1, #0
 800aaf2:	f082 81a5 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aaf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aafa:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800aafe:	4321      	orrs	r1, r4
 800ab00:	f001 824e 	beq.w	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800ab04:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab08:	4c91      	ldr	r4, [pc, #580]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800ab0a:	42a0      	cmp	r0, r4
 800ab0c:	f171 0100 	sbcs.w	r1, r1, #0
 800ab10:	f082 8196 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab14:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab18:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800ab1c:	4321      	orrs	r1, r4
 800ab1e:	f001 8197 	beq.w	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800ab22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab26:	4c8b      	ldr	r4, [pc, #556]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800ab28:	42a0      	cmp	r0, r4
 800ab2a:	f171 0100 	sbcs.w	r1, r1, #0
 800ab2e:	f082 8187 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab36:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800ab3a:	4321      	orrs	r1, r4
 800ab3c:	f001 8154 	beq.w	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800ab40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab44:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800ab48:	f171 0100 	sbcs.w	r1, r1, #0
 800ab4c:	f082 8178 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab54:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800ab58:	4321      	orrs	r1, r4
 800ab5a:	f001 80b7 	beq.w	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800ab5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab62:	f248 0401 	movw	r4, #32769	; 0x8001
 800ab66:	42a0      	cmp	r0, r4
 800ab68:	f171 0100 	sbcs.w	r1, r1, #0
 800ab6c:	f082 8168 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab74:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800ab78:	4321      	orrs	r1, r4
 800ab7a:	f001 8064 	beq.w	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800ab7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab82:	f244 0401 	movw	r4, #16385	; 0x4001
 800ab86:	42a0      	cmp	r0, r4
 800ab88:	f171 0100 	sbcs.w	r1, r1, #0
 800ab8c:	f082 8158 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab94:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800ab98:	4321      	orrs	r1, r4
 800ab9a:	f001 8011 	beq.w	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800ab9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aba2:	f242 0401 	movw	r4, #8193	; 0x2001
 800aba6:	42a0      	cmp	r0, r4
 800aba8:	f171 0100 	sbcs.w	r1, r1, #0
 800abac:	f082 8148 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abb4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800abb8:	4321      	orrs	r1, r4
 800abba:	f000 871e 	beq.w	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800abbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abc2:	f241 0401 	movw	r4, #4097	; 0x1001
 800abc6:	42a0      	cmp	r0, r4
 800abc8:	f171 0100 	sbcs.w	r1, r1, #0
 800abcc:	f082 8138 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abd4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800abd8:	4321      	orrs	r1, r4
 800abda:	f000 86a8 	beq.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800abde:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abe2:	f640 0401 	movw	r4, #2049	; 0x801
 800abe6:	42a0      	cmp	r0, r4
 800abe8:	f171 0100 	sbcs.w	r1, r1, #0
 800abec:	f082 8128 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf4:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800abf8:	4321      	orrs	r1, r4
 800abfa:	f000 8632 	beq.w	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800abfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac02:	f240 4401 	movw	r4, #1025	; 0x401
 800ac06:	42a0      	cmp	r0, r4
 800ac08:	f171 0100 	sbcs.w	r1, r1, #0
 800ac0c:	f082 8118 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac14:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800ac18:	4321      	orrs	r1, r4
 800ac1a:	f000 85b0 	beq.w	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800ac1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac22:	f240 2401 	movw	r4, #513	; 0x201
 800ac26:	42a0      	cmp	r0, r4
 800ac28:	f171 0100 	sbcs.w	r1, r1, #0
 800ac2c:	f082 8108 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac34:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800ac38:	4321      	orrs	r1, r4
 800ac3a:	f000 8535 	beq.w	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800ac3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac42:	f240 1401 	movw	r4, #257	; 0x101
 800ac46:	42a0      	cmp	r0, r4
 800ac48:	f171 0100 	sbcs.w	r1, r1, #0
 800ac4c:	f082 80f8 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac54:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800ac58:	4321      	orrs	r1, r4
 800ac5a:	f000 84ba 	beq.w	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800ac5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac62:	2881      	cmp	r0, #129	; 0x81
 800ac64:	f171 0100 	sbcs.w	r1, r1, #0
 800ac68:	f082 80ea 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac70:	2821      	cmp	r0, #33	; 0x21
 800ac72:	f171 0100 	sbcs.w	r1, r1, #0
 800ac76:	d26f      	bcs.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ac78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac7c:	4301      	orrs	r1, r0
 800ac7e:	f002 80df 	beq.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac86:	1e42      	subs	r2, r0, #1
 800ac88:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ac8c:	2a20      	cmp	r2, #32
 800ac8e:	f173 0100 	sbcs.w	r1, r3, #0
 800ac92:	f082 80d5 	bcs.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac96:	2a1f      	cmp	r2, #31
 800ac98:	f202 80d2 	bhi.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac9c:	a101      	add	r1, pc, #4	; (adr r1, 800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800ac9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aca2:	bf00      	nop
 800aca4:	0800b005 	.word	0x0800b005
 800aca8:	0800b0d1 	.word	0x0800b0d1
 800acac:	0800ce41 	.word	0x0800ce41
 800acb0:	0800b191 	.word	0x0800b191
 800acb4:	0800ce41 	.word	0x0800ce41
 800acb8:	0800ce41 	.word	0x0800ce41
 800acbc:	0800ce41 	.word	0x0800ce41
 800acc0:	0800b261 	.word	0x0800b261
 800acc4:	0800ce41 	.word	0x0800ce41
 800acc8:	0800ce41 	.word	0x0800ce41
 800accc:	0800ce41 	.word	0x0800ce41
 800acd0:	0800ce41 	.word	0x0800ce41
 800acd4:	0800ce41 	.word	0x0800ce41
 800acd8:	0800ce41 	.word	0x0800ce41
 800acdc:	0800ce41 	.word	0x0800ce41
 800ace0:	0800b343 	.word	0x0800b343
 800ace4:	0800ce41 	.word	0x0800ce41
 800ace8:	0800ce41 	.word	0x0800ce41
 800acec:	0800ce41 	.word	0x0800ce41
 800acf0:	0800ce41 	.word	0x0800ce41
 800acf4:	0800ce41 	.word	0x0800ce41
 800acf8:	0800ce41 	.word	0x0800ce41
 800acfc:	0800ce41 	.word	0x0800ce41
 800ad00:	0800ce41 	.word	0x0800ce41
 800ad04:	0800ce41 	.word	0x0800ce41
 800ad08:	0800ce41 	.word	0x0800ce41
 800ad0c:	0800ce41 	.word	0x0800ce41
 800ad10:	0800ce41 	.word	0x0800ce41
 800ad14:	0800ce41 	.word	0x0800ce41
 800ad18:	0800ce41 	.word	0x0800ce41
 800ad1c:	0800ce41 	.word	0x0800ce41
 800ad20:	0800b419 	.word	0x0800b419
 800ad24:	80000001 	.word	0x80000001
 800ad28:	40000001 	.word	0x40000001
 800ad2c:	20000001 	.word	0x20000001
 800ad30:	10000001 	.word	0x10000001
 800ad34:	08000001 	.word	0x08000001
 800ad38:	04000001 	.word	0x04000001
 800ad3c:	00800001 	.word	0x00800001
 800ad40:	00400001 	.word	0x00400001
 800ad44:	00200001 	.word	0x00200001
 800ad48:	00100001 	.word	0x00100001
 800ad4c:	00080001 	.word	0x00080001
 800ad50:	00040001 	.word	0x00040001
 800ad54:	00020001 	.word	0x00020001
 800ad58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad5c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800ad60:	430b      	orrs	r3, r1
 800ad62:	f000 83c4 	beq.w	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800ad66:	f002 b86b 	b.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ad6a:	4ba1      	ldr	r3, [pc, #644]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ad6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad70:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad7c:	d036      	beq.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad84:	d86b      	bhi.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad8c:	d02b      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad94:	d863      	bhi.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad9c:	d01b      	beq.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ada4:	d85b      	bhi.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d004      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb2:	d008      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800adb4:	e053      	b.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adb6:	f107 0320 	add.w	r3, r7, #32
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff f8ba 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800adc4:	e04e      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc6:	f107 0314 	add.w	r3, r7, #20
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fa1c 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800add4:	e046      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add6:	f107 0308 	add.w	r3, r7, #8
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff fb7e 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ade4:	e03e      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ade6:	4b83      	ldr	r3, [pc, #524]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ade8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800adea:	e03b      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adec:	4b80      	ldr	r3, [pc, #512]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800adee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adf2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800adf6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adf8:	4b7d      	ldr	r3, [pc, #500]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d10c      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae0a:	4b79      	ldr	r3, [pc, #484]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	08db      	lsrs	r3, r3, #3
 800ae10:	f003 0303 	and.w	r3, r3, #3
 800ae14:	4a78      	ldr	r2, [pc, #480]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ae16:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae1c:	e01e      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae1e:	4b74      	ldr	r3, [pc, #464]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae2a:	d106      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae32:	d102      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ae34:	4b71      	ldr	r3, [pc, #452]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800ae36:	637b      	str	r3, [r7, #52]	; 0x34
 800ae38:	e010      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae3a:	4b6d      	ldr	r3, [pc, #436]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae46:	d106      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae4e:	d102      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ae50:	4b6b      	ldr	r3, [pc, #428]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800ae52:	637b      	str	r3, [r7, #52]	; 0x34
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ae5a:	e003      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800ae5c:	e002      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae62:	bf00      	nop
          }
        }
        break;
 800ae64:	f001 bfef 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ae68:	4b61      	ldr	r3, [pc, #388]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae6e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800ae72:	633b      	str	r3, [r7, #48]	; 0x30
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae7a:	d036      	beq.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae82:	d86b      	bhi.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ae8a:	d02b      	beq.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ae92:	d863      	bhi.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae9a:	d01b      	beq.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aea2:	d85b      	bhi.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d004      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aeb0:	d008      	beq.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800aeb2:	e053      	b.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeb4:	f107 0320 	add.w	r3, r7, #32
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff f83b 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aec2:	e04e      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aec4:	f107 0314 	add.w	r3, r7, #20
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff f99d 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aed2:	e046      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff faff 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aee2:	e03e      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800aee4:	4b43      	ldr	r3, [pc, #268]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800aee6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aee8:	e03b      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aeea:	4b41      	ldr	r3, [pc, #260]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aeec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aef0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aef6:	4b3e      	ldr	r3, [pc, #248]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d10c      	bne.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d109      	bne.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af08:	4b39      	ldr	r3, [pc, #228]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	08db      	lsrs	r3, r3, #3
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	4a39      	ldr	r2, [pc, #228]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800af14:	fa22 f303 	lsr.w	r3, r2, r3
 800af18:	637b      	str	r3, [r7, #52]	; 0x34
 800af1a:	e01e      	b.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af1c:	4b34      	ldr	r3, [pc, #208]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af28:	d106      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af30:	d102      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800af32:	4b32      	ldr	r3, [pc, #200]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800af34:	637b      	str	r3, [r7, #52]	; 0x34
 800af36:	e010      	b.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af38:	4b2d      	ldr	r3, [pc, #180]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af44:	d106      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af4c:	d102      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800af4e:	4b2c      	ldr	r3, [pc, #176]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
 800af52:	e002      	b.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800af58:	e003      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800af5a:	e002      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af60:	bf00      	nop
          }
        }
        break;
 800af62:	f001 bf70 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800af66:	4b22      	ldr	r3, [pc, #136]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af70:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	2b00      	cmp	r3, #0
 800af76:	d108      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af78:	f107 0320 	add.w	r3, r7, #32
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe ffd9 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800af86:	f001 bf5e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	2b40      	cmp	r3, #64	; 0x40
 800af8e:	d108      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af90:	f107 0314 	add.w	r3, r7, #20
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff f937 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af9e:	f001 bf52 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afa6:	f001 bf4e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800afb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d108      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afbc:	f107 0320 	add.w	r3, r7, #32
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe ffb7 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800afca:	f001 bf3c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	2b80      	cmp	r3, #128	; 0x80
 800afd2:	d108      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afd4:	f107 0314 	add.w	r3, r7, #20
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff f915 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe2:	f001 bf30 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afea:	f001 bf2c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afee:	bf00      	nop
 800aff0:	44020c00 	.word	0x44020c00
 800aff4:	00bb8000 	.word	0x00bb8000
 800aff8:	03d09000 	.word	0x03d09000
 800affc:	003d0900 	.word	0x003d0900
 800b000:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b004:	4b9d      	ldr	r3, [pc, #628]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b00a:	f003 0307 	and.w	r3, r3, #7
 800b00e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b016:	f7fc ff9f 	bl	8007f58 <HAL_RCC_GetPCLK2Freq>
 800b01a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b01c:	f001 bf13 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b020:	4b96      	ldr	r3, [pc, #600]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b02c:	d10a      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	2b01      	cmp	r3, #1
 800b032:	d107      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff f8e5 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
 800b042:	e043      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b044:	4b8d      	ldr	r3, [pc, #564]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b050:	d10a      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	2b02      	cmp	r3, #2
 800b056:	d107      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b058:	f107 0308 	add.w	r3, r7, #8
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff fa3d 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	637b      	str	r3, [r7, #52]	; 0x34
 800b066:	e031      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b068:	4b84      	ldr	r3, [pc, #528]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0302 	and.w	r3, r3, #2
 800b070:	2b02      	cmp	r3, #2
 800b072:	d10c      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	2b03      	cmp	r3, #3
 800b078:	d109      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b07a:	4b80      	ldr	r3, [pc, #512]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	08db      	lsrs	r3, r3, #3
 800b080:	f003 0303 	and.w	r3, r3, #3
 800b084:	4a7e      	ldr	r2, [pc, #504]	; (800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b086:	fa22 f303 	lsr.w	r3, r2, r3
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
 800b08c:	e01e      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b08e:	4b7b      	ldr	r3, [pc, #492]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b09a:	d105      	bne.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d102      	bne.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800b0a2:	4b78      	ldr	r3, [pc, #480]	; (800b284 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a6:	e011      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b0a8:	4b74      	ldr	r3, [pc, #464]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b0aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d106      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	2b05      	cmp	r3, #5
 800b0ba:	d103      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800b0bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c2:	e003      	b.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0c8:	f001 bebd 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0cc:	f001 bebb 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b0d0:	4b6a      	ldr	r3, [pc, #424]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b0d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0da:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d104      	bne.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0e2:	f7fc ff23 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b0e6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b0e8:	f001 bead 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b0ec:	4b63      	ldr	r3, [pc, #396]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0f8:	d10a      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	2b08      	cmp	r3, #8
 800b0fe:	d107      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff f87f 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	637b      	str	r3, [r7, #52]	; 0x34
 800b10e:	e03d      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	2b10      	cmp	r3, #16
 800b114:	d108      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b116:	f107 0308 	add.w	r3, r7, #8
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff f9de 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b124:	f001 be8f 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b128:	4b54      	ldr	r3, [pc, #336]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b02      	cmp	r3, #2
 800b132:	d10c      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2b18      	cmp	r3, #24
 800b138:	d109      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b13a:	4b50      	ldr	r3, [pc, #320]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	08db      	lsrs	r3, r3, #3
 800b140:	f003 0303 	and.w	r3, r3, #3
 800b144:	4a4e      	ldr	r2, [pc, #312]	; (800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b146:	fa22 f303 	lsr.w	r3, r2, r3
 800b14a:	637b      	str	r3, [r7, #52]	; 0x34
 800b14c:	e01e      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b14e:	4b4b      	ldr	r3, [pc, #300]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b15a:	d105      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	2b20      	cmp	r3, #32
 800b160:	d102      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800b162:	4b48      	ldr	r3, [pc, #288]	; (800b284 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b164:	637b      	str	r3, [r7, #52]	; 0x34
 800b166:	e011      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b168:	4b44      	ldr	r3, [pc, #272]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b16a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b02      	cmp	r3, #2
 800b174:	d106      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	2b28      	cmp	r3, #40	; 0x28
 800b17a:	d103      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800b17c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
 800b182:	e003      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b188:	f001 be5d 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b18c:	f001 be5b 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b190:	4b3a      	ldr	r3, [pc, #232]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b196:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b19a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1a2:	f7fc fec3 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b1a6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b1a8:	f001 be4d 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b1ac:	4b33      	ldr	r3, [pc, #204]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1b8:	d10a      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	2b40      	cmp	r3, #64	; 0x40
 800b1be:	d107      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1c0:	f107 0314 	add.w	r3, r7, #20
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff f81f 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ce:	e045      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b1d0:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1dc:	d10a      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	2b80      	cmp	r3, #128	; 0x80
 800b1e2:	d107      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1e4:	f107 0308 	add.w	r3, r7, #8
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff f977 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1f2:	e033      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b1f4:	4b21      	ldr	r3, [pc, #132]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d10c      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	2bc0      	cmp	r3, #192	; 0xc0
 800b204:	d109      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b206:	4b1d      	ldr	r3, [pc, #116]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	08db      	lsrs	r3, r3, #3
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	4a1b      	ldr	r2, [pc, #108]	; (800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b212:	fa22 f303 	lsr.w	r3, r2, r3
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
 800b218:	e020      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b21a:	4b18      	ldr	r3, [pc, #96]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b226:	d106      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b22e:	d102      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800b230:	4b14      	ldr	r3, [pc, #80]	; (800b284 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b232:	637b      	str	r3, [r7, #52]	; 0x34
 800b234:	e012      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b236:	4b11      	ldr	r3, [pc, #68]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	2b02      	cmp	r3, #2
 800b242:	d107      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b24a:	d103      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800b24c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b250:	637b      	str	r3, [r7, #52]	; 0x34
 800b252:	e003      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b258:	f001 bdf5 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b25c:	f001 bdf3 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b260:	4b06      	ldr	r3, [pc, #24]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b262:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b266:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b26a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b272:	f7fc fe5b 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b276:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b278:	f001 bde5 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b27c:	44020c00 	.word	0x44020c00
 800b280:	03d09000 	.word	0x03d09000
 800b284:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b288:	4ba0      	ldr	r3, [pc, #640]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b294:	d10b      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b29c:	d107      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b29e:	f107 0314 	add.w	r3, r7, #20
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe ffb0 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b2ac:	e047      	b.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b2ae:	4b97      	ldr	r3, [pc, #604]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ba:	d10b      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2c2:	d107      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c4:	f107 0308 	add.w	r3, r7, #8
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff f907 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d2:	e034      	b.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b2d4:	4b8d      	ldr	r3, [pc, #564]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d10d      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b2e6:	d109      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b2e8:	4b88      	ldr	r3, [pc, #544]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	08db      	lsrs	r3, r3, #3
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	4a87      	ldr	r2, [pc, #540]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b2fa:	e020      	b.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800b2fc:	4b83      	ldr	r3, [pc, #524]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b308:	d106      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b310:	d102      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800b312:	4b80      	ldr	r3, [pc, #512]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b314:	637b      	str	r3, [r7, #52]	; 0x34
 800b316:	e012      	b.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b318:	4b7c      	ldr	r3, [pc, #496]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b31a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b02      	cmp	r3, #2
 800b324:	d107      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b32c:	d103      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800b32e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b332:	637b      	str	r3, [r7, #52]	; 0x34
 800b334:	e003      	b.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b33a:	f001 bd84 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b33e:	f001 bd82 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b342:	4b72      	ldr	r3, [pc, #456]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b348:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b34c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	2b00      	cmp	r3, #0
 800b352:	d104      	bne.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b354:	f7fc fdea 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b358:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b35a:	f001 bd74 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800b35e:	4b6b      	ldr	r3, [pc, #428]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b36a:	d10b      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b372:	d107      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fe ff45 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
 800b382:	e047      	b.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800b384:	4b61      	ldr	r3, [pc, #388]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b390:	d10b      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b398:	d107      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b39a:	f107 0308 	add.w	r3, r7, #8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff f89c 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a8:	e034      	b.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b3aa:	4b58      	ldr	r3, [pc, #352]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0302 	and.w	r3, r3, #2
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d10d      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3bc:	d109      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3be:	4b53      	ldr	r3, [pc, #332]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	08db      	lsrs	r3, r3, #3
 800b3c4:	f003 0303 	and.w	r3, r3, #3
 800b3c8:	4a51      	ldr	r2, [pc, #324]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b3d0:	e020      	b.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800b3d2:	4b4e      	ldr	r3, [pc, #312]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3de:	d106      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3e6:	d102      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800b3e8:	4b4a      	ldr	r3, [pc, #296]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b3ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ec:	e012      	b.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b3ee:	4b47      	ldr	r3, [pc, #284]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d107      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b402:	d103      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800b404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b408:	637b      	str	r3, [r7, #52]	; 0x34
 800b40a:	e003      	b.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b410:	f001 bd19 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b414:	f001 bd17 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b418:	4b3c      	ldr	r3, [pc, #240]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b41a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b41e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800b422:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b42a:	f7fc fd7f 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b42e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800b430:	f001 bd09 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800b434:	4b35      	ldr	r3, [pc, #212]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b43c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b440:	d10b      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b448:	d107      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b44a:	f107 0314 	add.w	r3, r7, #20
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe feda 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	637b      	str	r3, [r7, #52]	; 0x34
 800b458:	e047      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800b45a:	4b2c      	ldr	r3, [pc, #176]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d10b      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b46e:	d107      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b470:	f107 0308 	add.w	r3, r7, #8
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff f831 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34
 800b47e:	e034      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b480:	4b22      	ldr	r3, [pc, #136]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d10d      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800b492:	d109      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b494:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	08db      	lsrs	r3, r3, #3
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	4a1c      	ldr	r2, [pc, #112]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a6:	e020      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800b4a8:	4b18      	ldr	r3, [pc, #96]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b4:	d106      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4bc:	d102      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800b4be:	4b15      	ldr	r3, [pc, #84]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c2:	e012      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b4c4:	4b11      	ldr	r3, [pc, #68]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d107      	bne.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800b4d8:	d103      	bne.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800b4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4de:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e0:	e003      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4e6:	f001 bcae 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b4ea:	f001 bcac 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800b4ee:	4b07      	ldr	r3, [pc, #28]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b4f4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800b4f8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10b      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b500:	f7fc fd14 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b504:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800b506:	f001 bc9e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b50a:	bf00      	nop
 800b50c:	44020c00 	.word	0x44020c00
 800b510:	03d09000 	.word	0x03d09000
 800b514:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800b518:	4ba0      	ldr	r3, [pc, #640]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b524:	d10b      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b52c:	d107      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b52e:	f107 0314 	add.w	r3, r7, #20
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fe68 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	637b      	str	r3, [r7, #52]	; 0x34
 800b53c:	e047      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800b53e:	4b97      	ldr	r3, [pc, #604]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54a:	d10b      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b552:	d107      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b554:	f107 0308 	add.w	r3, r7, #8
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe ffbf 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	637b      	str	r3, [r7, #52]	; 0x34
 800b562:	e034      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800b564:	4b8d      	ldr	r3, [pc, #564]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0302 	and.w	r3, r3, #2
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d10d      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b576:	d109      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b578:	4b88      	ldr	r3, [pc, #544]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	08db      	lsrs	r3, r3, #3
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	4a87      	ldr	r2, [pc, #540]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b584:	fa22 f303 	lsr.w	r3, r2, r3
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
 800b58a:	e020      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800b58c:	4b83      	ldr	r3, [pc, #524]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b598:	d106      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5a0:	d102      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800b5a2:	4b80      	ldr	r3, [pc, #512]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a6:	e012      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800b5a8:	4b7c      	ldr	r3, [pc, #496]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b5aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d107      	bne.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b5bc:	d103      	bne.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800b5be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c4:	e003      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ca:	f001 bc3c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b5ce:	f001 bc3a 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800b5d2:	4b72      	ldr	r3, [pc, #456]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b5d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5d8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b5dc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d104      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b5e4:	f7fc fca2 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b5e8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800b5ea:	f001 bc2c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800b5ee:	4b6b      	ldr	r3, [pc, #428]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5fa:	d10b      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b602:	d107      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b604:	f107 0314 	add.w	r3, r7, #20
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fdfd 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
 800b612:	e047      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800b614:	4b61      	ldr	r3, [pc, #388]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b61c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b620:	d10b      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b628:	d107      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe ff54 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	637b      	str	r3, [r7, #52]	; 0x34
 800b638:	e034      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800b63a:	4b58      	ldr	r3, [pc, #352]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b02      	cmp	r3, #2
 800b644:	d10d      	bne.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b64c:	d109      	bne.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b64e:	4b53      	ldr	r3, [pc, #332]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	08db      	lsrs	r3, r3, #3
 800b654:	f003 0303 	and.w	r3, r3, #3
 800b658:	4a51      	ldr	r2, [pc, #324]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	637b      	str	r3, [r7, #52]	; 0x34
 800b660:	e020      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800b662:	4b4e      	ldr	r3, [pc, #312]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b66a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b66e:	d106      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b676:	d102      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800b678:	4b4a      	ldr	r3, [pc, #296]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b67a:	637b      	str	r3, [r7, #52]	; 0x34
 800b67c:	e012      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800b67e:	4b47      	ldr	r3, [pc, #284]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d107      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b692:	d103      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800b694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b698:	637b      	str	r3, [r7, #52]	; 0x34
 800b69a:	e003      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6a0:	f001 bbd1 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6a4:	f001 bbcf 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800b6a8:	4b3c      	ldr	r3, [pc, #240]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b6b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d104      	bne.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b6ba:	f7fc fc37 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b6be:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6c0:	f001 bbc1 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800b6c4:	4b35      	ldr	r3, [pc, #212]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6d0:	d10b      	bne.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6d8:	d107      	bne.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6da:	f107 0314 	add.w	r3, r7, #20
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fe fd92 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e8:	e047      	b.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800b6ea:	4b2c      	ldr	r3, [pc, #176]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f6:	d10b      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6fe:	d107      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b700:	f107 0308 	add.w	r3, r7, #8
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe fee9 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	637b      	str	r3, [r7, #52]	; 0x34
 800b70e:	e034      	b.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800b710:	4b22      	ldr	r3, [pc, #136]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0302 	and.w	r3, r3, #2
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d10d      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b722:	d109      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b724:	4b1d      	ldr	r3, [pc, #116]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	4a1c      	ldr	r2, [pc, #112]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
 800b736:	e020      	b.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800b738:	4b18      	ldr	r3, [pc, #96]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b744:	d106      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b74c:	d102      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800b74e:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
 800b752:	e012      	b.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800b754:	4b11      	ldr	r3, [pc, #68]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d107      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b768:	d103      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800b76a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b76e:	637b      	str	r3, [r7, #52]	; 0x34
 800b770:	e003      	b.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b776:	f001 bb66 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b77a:	f001 bb64 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800b77e:	4b07      	ldr	r3, [pc, #28]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b784:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800b788:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10b      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b790:	f7fc fbcc 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b794:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800b796:	f001 bb56 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b79a:	bf00      	nop
 800b79c:	44020c00 	.word	0x44020c00
 800b7a0:	03d09000 	.word	0x03d09000
 800b7a4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800b7a8:	4ba1      	ldr	r3, [pc, #644]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7b4:	d10b      	bne.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7bc:	d107      	bne.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7be:	f107 0314 	add.w	r3, r7, #20
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fd20 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b7cc:	e047      	b.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800b7ce:	4b98      	ldr	r3, [pc, #608]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7da:	d10b      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7e2:	d107      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7e4:	f107 0308 	add.w	r3, r7, #8
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fe77 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f2:	e034      	b.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800b7f4:	4b8e      	ldr	r3, [pc, #568]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0302 	and.w	r3, r3, #2
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d10d      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b806:	d109      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b808:	4b89      	ldr	r3, [pc, #548]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	08db      	lsrs	r3, r3, #3
 800b80e:	f003 0303 	and.w	r3, r3, #3
 800b812:	4a88      	ldr	r2, [pc, #544]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b814:	fa22 f303 	lsr.w	r3, r2, r3
 800b818:	637b      	str	r3, [r7, #52]	; 0x34
 800b81a:	e020      	b.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800b81c:	4b84      	ldr	r3, [pc, #528]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b828:	d106      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b830:	d102      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800b832:	4b81      	ldr	r3, [pc, #516]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b834:	637b      	str	r3, [r7, #52]	; 0x34
 800b836:	e012      	b.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800b838:	4b7d      	ldr	r3, [pc, #500]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b83a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b02      	cmp	r3, #2
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800b84c:	d103      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800b84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
 800b854:	e003      	b.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b85a:	f001 baf4 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b85e:	f001 baf2 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800b862:	4b73      	ldr	r3, [pc, #460]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b864:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b868:	f003 0307 	and.w	r3, r3, #7
 800b86c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	2b00      	cmp	r3, #0
 800b872:	d104      	bne.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b874:	f7fc fb5a 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b878:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800b87a:	f001 bae4 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800b87e:	4b6c      	ldr	r3, [pc, #432]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b88a:	d10a      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d107      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b892:	f107 0314 	add.w	r3, r7, #20
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fcb6 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a0:	e043      	b.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800b8a2:	4b63      	ldr	r3, [pc, #396]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ae:	d10a      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d107      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8b6:	f107 0308 	add.w	r3, r7, #8
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fe0e 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c4:	e031      	b.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800b8c6:	4b5a      	ldr	r3, [pc, #360]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d10c      	bne.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	2b03      	cmp	r3, #3
 800b8d6:	d109      	bne.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b8d8:	4b55      	ldr	r3, [pc, #340]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	08db      	lsrs	r3, r3, #3
 800b8de:	f003 0303 	and.w	r3, r3, #3
 800b8e2:	4a54      	ldr	r2, [pc, #336]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ea:	e01e      	b.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800b8ec:	4b50      	ldr	r3, [pc, #320]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f8:	d105      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d102      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800b900:	4b4d      	ldr	r3, [pc, #308]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
 800b904:	e011      	b.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800b906:	4b4a      	ldr	r3, [pc, #296]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	2b02      	cmp	r3, #2
 800b912:	d106      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	2b05      	cmp	r3, #5
 800b918:	d103      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800b91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b91e:	637b      	str	r3, [r7, #52]	; 0x34
 800b920:	e003      	b.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b926:	f001 ba8e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b92a:	f001 ba8c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800b92e:	4b40      	ldr	r3, [pc, #256]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b930:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b934:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b938:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d104      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b940:	f7fc faf4 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800b944:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800b946:	f001 ba7e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800b94a:	4b39      	ldr	r3, [pc, #228]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b956:	d10a      	bne.n	800b96e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	2b10      	cmp	r3, #16
 800b95c:	d107      	bne.n	800b96e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b95e:	f107 0314 	add.w	r3, r7, #20
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe fc50 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	637b      	str	r3, [r7, #52]	; 0x34
 800b96c:	e043      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800b96e:	4b30      	ldr	r3, [pc, #192]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b97a:	d10a      	bne.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	2b20      	cmp	r3, #32
 800b980:	d107      	bne.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b982:	f107 0308 	add.w	r3, r7, #8
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fda8 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	637b      	str	r3, [r7, #52]	; 0x34
 800b990:	e031      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800b992:	4b27      	ldr	r3, [pc, #156]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d10c      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	2b30      	cmp	r3, #48	; 0x30
 800b9a2:	d109      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9a4:	4b22      	ldr	r3, [pc, #136]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	08db      	lsrs	r3, r3, #3
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	4a21      	ldr	r2, [pc, #132]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b6:	e01e      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800b9b8:	4b1d      	ldr	r3, [pc, #116]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9c4:	d105      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	2b40      	cmp	r3, #64	; 0x40
 800b9ca:	d102      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d0:	e011      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800b9d2:	4b17      	ldr	r3, [pc, #92]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d106      	bne.n	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	2b50      	cmp	r3, #80	; 0x50
 800b9e4:	d103      	bne.n	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800b9e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ec:	e003      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9f2:	f001 ba28 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b9f6:	f001 ba26 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba00:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ba04:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ba0c:	f7fc faba 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800ba10:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba12:	f001 ba18 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba1c:	d10e      	bne.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba1e:	f107 0314 	add.w	r3, r7, #20
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fe fbf0 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba2c:	f001 ba0b 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba30:	44020c00 	.word	0x44020c00
 800ba34:	03d09000 	.word	0x03d09000
 800ba38:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba42:	d108      	bne.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba44:	f107 0308 	add.w	r3, r7, #8
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fd47 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba52:	f001 b9f8 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ba56:	4ba4      	ldr	r3, [pc, #656]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d10d      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba68:	d109      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba6a:	4b9f      	ldr	r3, [pc, #636]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	08db      	lsrs	r3, r3, #3
 800ba70:	f003 0303 	and.w	r3, r3, #3
 800ba74:	4a9d      	ldr	r2, [pc, #628]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ba76:	fa22 f303 	lsr.w	r3, r2, r3
 800ba7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba7c:	e020      	b.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800ba7e:	4b9a      	ldr	r3, [pc, #616]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba8a:	d106      	bne.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba92:	d102      	bne.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800ba94:	4b96      	ldr	r3, [pc, #600]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ba96:	637b      	str	r3, [r7, #52]	; 0x34
 800ba98:	e012      	b.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ba9a:	4b93      	ldr	r3, [pc, #588]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ba9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800baa0:	f003 0302 	and.w	r3, r3, #2
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d107      	bne.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800baae:	d103      	bne.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800bab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bab4:	637b      	str	r3, [r7, #52]	; 0x34
 800bab6:	e003      	b.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800babc:	f001 b9c3 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bac0:	f001 b9c1 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bac4:	4b88      	ldr	r3, [pc, #544]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800bad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d104      	bne.n	800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800bad6:	f7fc fa0d 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 800bada:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800badc:	f001 b9b3 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d104      	bne.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800bae6:	f7fc f8d9 	bl	8007c9c <HAL_RCC_GetSysClockFreq>
 800baea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800baec:	f001 b9ab 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d108      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baf6:	f107 0314 	add.w	r3, r7, #20
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fb84 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb04:	f001 b99f 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800bb08:	4b77      	ldr	r3, [pc, #476]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb14:	d105      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d102      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800bb1c:	4b75      	ldr	r3, [pc, #468]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb20:	e023      	b.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800bb22:	4b71      	ldr	r3, [pc, #452]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d10c      	bne.n	800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d109      	bne.n	800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb34:	4b6c      	ldr	r3, [pc, #432]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	08db      	lsrs	r3, r3, #3
 800bb3a:	f003 0303 	and.w	r3, r3, #3
 800bb3e:	4a6b      	ldr	r2, [pc, #428]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bb40:	fa22 f303 	lsr.w	r3, r2, r3
 800bb44:	637b      	str	r3, [r7, #52]	; 0x34
 800bb46:	e010      	b.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800bb48:	4b67      	ldr	r3, [pc, #412]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb54:	d105      	bne.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	2b05      	cmp	r3, #5
 800bb5a:	d102      	bne.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800bb5c:	4b64      	ldr	r3, [pc, #400]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb60:	e003      	b.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800bb62:	2300      	movs	r3, #0
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb66:	f001 b96e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb6a:	f001 b96c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800bb6e:	4b5e      	ldr	r3, [pc, #376]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb74:	f003 0308 	and.w	r3, r3, #8
 800bb78:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800bb7a:	4b5b      	ldr	r3, [pc, #364]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb80:	f003 0302 	and.w	r3, r3, #2
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d106      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d103      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800bb8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb92:	637b      	str	r3, [r7, #52]	; 0x34
 800bb94:	e012      	b.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800bb96:	4b54      	ldr	r3, [pc, #336]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bba4:	d106      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d103      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800bbac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bbb0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb2:	e003      	b.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800bbb8:	f001 b945 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbbc:	f001 b943 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bbc0:	4b49      	ldr	r3, [pc, #292]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bbc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bbc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bbca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d104      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bbd2:	f7fc f9ab 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800bbd6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bbd8:	f001 b935 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe2:	d108      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbe4:	f107 0308 	add.w	r3, r7, #8
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe fc77 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbf2:	f001 b928 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bbf6:	4b3c      	ldr	r3, [pc, #240]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d10d      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc08:	d109      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc0a:	4b37      	ldr	r3, [pc, #220]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	08db      	lsrs	r3, r3, #3
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	4a35      	ldr	r2, [pc, #212]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bc16:	fa22 f303 	lsr.w	r3, r2, r3
 800bc1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc1c:	e011      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800bc1e:	4b32      	ldr	r3, [pc, #200]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc2a:	d106      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc32:	d102      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800bc34:	4b2e      	ldr	r3, [pc, #184]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bc36:	637b      	str	r3, [r7, #52]	; 0x34
 800bc38:	e003      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc3e:	f001 b902 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc42:	f001 b900 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bc46:	4b28      	ldr	r3, [pc, #160]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc58:	f7fc f968 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800bc5c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc5e:	f001 b8f2 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc68:	d108      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc6a:	f107 0308 	add.w	r3, r7, #8
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fc34 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc78:	f001 b8e5 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d10d      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bc8e:	d109      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc90:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	08db      	lsrs	r3, r3, #3
 800bc96:	f003 0303 	and.w	r3, r3, #3
 800bc9a:	4a14      	ldr	r2, [pc, #80]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
 800bca2:	e011      	b.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800bca4:	4b10      	ldr	r3, [pc, #64]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcb0:	d106      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bcb8:	d102      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800bcba:	4b0d      	ldr	r3, [pc, #52]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bcbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcbe:	e003      	b.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcc4:	f001 b8bf 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bcc8:	f001 b8bd 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bccc:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bcce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bcd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bcd6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10c      	bne.n	800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bcde:	f7fc f951 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800bce2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800bce4:	f001 b8af 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bce8:	44020c00 	.word	0x44020c00
 800bcec:	03d09000 	.word	0x03d09000
 800bcf0:	003d0900 	.word	0x003d0900
 800bcf4:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcfe:	d108      	bne.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd00:	f107 0308 	add.w	r3, r7, #8
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe fbe9 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd0e:	f001 b89a 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800bd12:	4b9f      	ldr	r3, [pc, #636]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d10d      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd24:	d109      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd26:	4b9a      	ldr	r3, [pc, #616]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	08db      	lsrs	r3, r3, #3
 800bd2c:	f003 0303 	and.w	r3, r3, #3
 800bd30:	4a98      	ldr	r2, [pc, #608]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bd32:	fa22 f303 	lsr.w	r3, r2, r3
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
 800bd38:	e011      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800bd3a:	4b95      	ldr	r3, [pc, #596]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd46:	d106      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd4e:	d102      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800bd50:	4b91      	ldr	r3, [pc, #580]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bd52:	637b      	str	r3, [r7, #52]	; 0x34
 800bd54:	e003      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd5a:	f001 b874 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd5e:	f001 b872 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bd62:	4b8b      	ldr	r3, [pc, #556]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bd6c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d104      	bne.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bd74:	f7fc f906 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800bd78:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd7a:	f001 b864 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd84:	d108      	bne.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd86:	f107 0308 	add.w	r3, r7, #8
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fba6 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd94:	f001 b857 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bd98:	4b7d      	ldr	r3, [pc, #500]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d10d      	bne.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdaa:	d109      	bne.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bdac:	4b78      	ldr	r3, [pc, #480]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	08db      	lsrs	r3, r3, #3
 800bdb2:	f003 0303 	and.w	r3, r3, #3
 800bdb6:	4a77      	ldr	r2, [pc, #476]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bdb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdbe:	e011      	b.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800bdc0:	4b73      	ldr	r3, [pc, #460]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdcc:	d106      	bne.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bdd4:	d102      	bne.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800bdd6:	4b70      	ldr	r3, [pc, #448]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bdd8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdda:	e003      	b.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bde0:	f001 b831 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bde4:	f001 b82f 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800bde8:	4b69      	ldr	r3, [pc, #420]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bdea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bdee:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bdf2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d104      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bdfa:	f7fc f897 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800bdfe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800be00:	f001 b821 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800be04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be0a:	d108      	bne.n	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4618      	mov	r0, r3
 800be12:	f7fe fb63 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be1a:	f001 b814 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800be1e:	4b5c      	ldr	r3, [pc, #368]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0302 	and.w	r3, r3, #2
 800be26:	2b02      	cmp	r3, #2
 800be28:	d10e      	bne.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be30:	d10a      	bne.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be32:	4b57      	ldr	r3, [pc, #348]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	08db      	lsrs	r3, r3, #3
 800be38:	f003 0303 	and.w	r3, r3, #3
 800be3c:	4a55      	ldr	r2, [pc, #340]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800be3e:	fa22 f303 	lsr.w	r3, r2, r3
 800be42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be44:	f000 bfff 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800be48:	2300      	movs	r3, #0
 800be4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be4c:	f000 bffb 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be50:	4b4f      	ldr	r3, [pc, #316]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800be56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be5a:	633b      	str	r3, [r7, #48]	; 0x30
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800be62:	d056      	beq.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800be6a:	f200 808b 	bhi.w	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be74:	d03e      	beq.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be7c:	f200 8082 	bhi.w	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be86:	d027      	beq.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be8e:	d879      	bhi.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be96:	d017      	beq.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be9e:	d871      	bhi.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d004      	beq.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beac:	d004      	beq.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800beae:	e069      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800beb0:	f7fc f868 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800beb4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800beb6:	e068      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beb8:	f107 0314 	add.w	r3, r7, #20
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe f9a3 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bec6:	e060      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bec8:	f107 0308 	add.w	r3, r7, #8
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe fb05 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bed6:	e058      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bed8:	4b2d      	ldr	r3, [pc, #180]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800beda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bede:	f003 0302 	and.w	r3, r3, #2
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d103      	bne.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800bee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beea:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800beec:	e04d      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bef2:	e04a      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bef4:	4b26      	ldr	r3, [pc, #152]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800befa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800befe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf02:	d103      	bne.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800bf04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bf0a:	e03e      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf10:	e03b      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf12:	4b1f      	ldr	r3, [pc, #124]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf18:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf1e:	4b1c      	ldr	r3, [pc, #112]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d10c      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf30:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	08db      	lsrs	r3, r3, #3
 800bf36:	f003 0303 	and.w	r3, r3, #3
 800bf3a:	4a16      	ldr	r2, [pc, #88]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bf3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf40:	637b      	str	r3, [r7, #52]	; 0x34
 800bf42:	e01e      	b.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf44:	4b12      	ldr	r3, [pc, #72]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf50:	d106      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf58:	d102      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5e:	e010      	b.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf60:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf6c:	d106      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf74:	d102      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bf76:	4b09      	ldr	r3, [pc, #36]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800bf78:	637b      	str	r3, [r7, #52]	; 0x34
 800bf7a:	e002      	b.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800bf80:	e003      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800bf82:	e002      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800bf84:	2300      	movs	r3, #0
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf88:	bf00      	nop
          }
        }
        break;
 800bf8a:	f000 bf5c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf8e:	bf00      	nop
 800bf90:	44020c00 	.word	0x44020c00
 800bf94:	03d09000 	.word	0x03d09000
 800bf98:	003d0900 	.word	0x003d0900
 800bf9c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bfa0:	4b9e      	ldr	r3, [pc, #632]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bfa2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bfa6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bfaa:	633b      	str	r3, [r7, #48]	; 0x30
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bfb2:	d056      	beq.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bfba:	f200 808b 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfc4:	d03e      	beq.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfcc:	f200 8082 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfd6:	d027      	beq.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfde:	d879      	bhi.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfe6:	d017      	beq.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfee:	d871      	bhi.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d004      	beq.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffc:	d004      	beq.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800bffe:	e069      	b.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c000:	f7fb ff94 	bl	8007f2c <HAL_RCC_GetPCLK1Freq>
 800c004:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c006:	e068      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c008:	f107 0314 	add.w	r3, r7, #20
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe f8fb 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c016:	e060      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c018:	f107 0308 	add.w	r3, r7, #8
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fa5d 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c026:	e058      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c028:	4b7c      	ldr	r3, [pc, #496]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c02a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c02e:	f003 0302 	and.w	r3, r3, #2
 800c032:	2b02      	cmp	r3, #2
 800c034:	d103      	bne.n	800c03e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800c036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c03a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c03c:	e04d      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c042:	e04a      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c044:	4b75      	ldr	r3, [pc, #468]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c04e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c052:	d103      	bne.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800c054:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c058:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c05a:	e03e      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c060:	e03b      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c062:	4b6e      	ldr	r3, [pc, #440]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c068:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c06c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c06e:	4b6b      	ldr	r3, [pc, #428]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b02      	cmp	r3, #2
 800c078:	d10c      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800c07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d109      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c080:	4b66      	ldr	r3, [pc, #408]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	08db      	lsrs	r3, r3, #3
 800c086:	f003 0303 	and.w	r3, r3, #3
 800c08a:	4a65      	ldr	r2, [pc, #404]	; (800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c08c:	fa22 f303 	lsr.w	r3, r2, r3
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
 800c092:	e01e      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c094:	4b61      	ldr	r3, [pc, #388]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c09c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0a0:	d106      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a8:	d102      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c0aa:	4b5e      	ldr	r3, [pc, #376]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ae:	e010      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0b0:	4b5a      	ldr	r3, [pc, #360]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0bc:	d106      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0c4:	d102      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c0c6:	4b58      	ldr	r3, [pc, #352]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c0c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ca:	e002      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c0d0:	e003      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800c0d2:	e002      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0d8:	bf00      	nop
          }
        }
        break;
 800c0da:	f000 beb4 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c0de:	4b4f      	ldr	r3, [pc, #316]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c0e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c0e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0e8:	633b      	str	r3, [r7, #48]	; 0x30
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0f0:	d056      	beq.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0f8:	f200 808b 	bhi.w	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c102:	d03e      	beq.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c10a:	f200 8082 	bhi.w	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c114:	d027      	beq.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c11c:	d879      	bhi.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c124:	d017      	beq.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c12c:	d871      	bhi.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c13a:	d004      	beq.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800c13c:	e069      	b.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c13e:	f7fb ff21 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800c142:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c144:	e068      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c146:	f107 0314 	add.w	r3, r7, #20
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe f85c 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c154:	e060      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c156:	f107 0308 	add.w	r3, r7, #8
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe f9be 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c164:	e058      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c166:	4b2d      	ldr	r3, [pc, #180]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b02      	cmp	r3, #2
 800c172:	d103      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800c174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c178:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c17a:	e04d      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c180:	e04a      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c182:	4b26      	ldr	r3, [pc, #152]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c18c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c190:	d103      	bne.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800c192:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c196:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c198:	e03e      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c19e:	e03b      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1a0:	4b1e      	ldr	r3, [pc, #120]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1ac:	4b1b      	ldr	r3, [pc, #108]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0302 	and.w	r3, r3, #2
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d10c      	bne.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d109      	bne.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c1be:	4b17      	ldr	r3, [pc, #92]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	08db      	lsrs	r3, r3, #3
 800c1c4:	f003 0303 	and.w	r3, r3, #3
 800c1c8:	4a15      	ldr	r2, [pc, #84]	; (800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d0:	e01e      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1d2:	4b12      	ldr	r3, [pc, #72]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1de:	d106      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1e6:	d102      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c1e8:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c1ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ec:	e010      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1ee:	4b0b      	ldr	r3, [pc, #44]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1fa:	d106      	bne.n	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800c1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c202:	d102      	bne.n	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c204:	4b08      	ldr	r3, [pc, #32]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c206:	637b      	str	r3, [r7, #52]	; 0x34
 800c208:	e002      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c20e:	e003      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800c210:	e002      	b.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c216:	bf00      	nop
          }
        }
        break;
 800c218:	f000 be15 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c21c:	44020c00 	.word	0x44020c00
 800c220:	03d09000 	.word	0x03d09000
 800c224:	003d0900 	.word	0x003d0900
 800c228:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c22c:	4b9e      	ldr	r3, [pc, #632]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c22e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c232:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800c236:	633b      	str	r3, [r7, #48]	; 0x30
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c23e:	d056      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c246:	f200 808b 	bhi.w	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c250:	d03e      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c258:	f200 8082 	bhi.w	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c262:	d027      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c26a:	d879      	bhi.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c272:	d017      	beq.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c27a:	d871      	bhi.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d004      	beq.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c288:	d004      	beq.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800c28a:	e069      	b.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c28c:	f7fb fe7a 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800c290:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c292:	e068      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c294:	f107 0314 	add.w	r3, r7, #20
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fd ffb5 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2a2:	e060      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2a4:	f107 0308 	add.w	r3, r7, #8
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe f917 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2b2:	e058      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c2b4:	4b7c      	ldr	r3, [pc, #496]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c2b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d103      	bne.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800c2c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2c6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c2c8:	e04d      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2ce:	e04a      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c2d0:	4b75      	ldr	r3, [pc, #468]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c2d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2de:	d103      	bne.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800c2e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c2e4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c2e6:	e03e      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2ec:	e03b      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2ee:	4b6e      	ldr	r3, [pc, #440]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c2f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c2f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c2f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2fa:	4b6b      	ldr	r3, [pc, #428]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0302 	and.w	r3, r3, #2
 800c302:	2b02      	cmp	r3, #2
 800c304:	d10c      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800c306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d109      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c30c:	4b66      	ldr	r3, [pc, #408]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	08db      	lsrs	r3, r3, #3
 800c312:	f003 0303 	and.w	r3, r3, #3
 800c316:	4a65      	ldr	r2, [pc, #404]	; (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c318:	fa22 f303 	lsr.w	r3, r2, r3
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
 800c31e:	e01e      	b.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c320:	4b61      	ldr	r3, [pc, #388]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c32c:	d106      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c334:	d102      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c336:	4b5e      	ldr	r3, [pc, #376]	; (800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c338:	637b      	str	r3, [r7, #52]	; 0x34
 800c33a:	e010      	b.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c33c:	4b5a      	ldr	r3, [pc, #360]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c348:	d106      	bne.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c350:	d102      	bne.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c352:	4b58      	ldr	r3, [pc, #352]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c354:	637b      	str	r3, [r7, #52]	; 0x34
 800c356:	e002      	b.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c35c:	e003      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800c35e:	e002      	b.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c364:	bf00      	nop
          }
        }
        break;
 800c366:	f000 bd6e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800c36a:	4b4f      	ldr	r3, [pc, #316]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c36c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c370:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c374:	633b      	str	r3, [r7, #48]	; 0x30
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c37c:	d056      	beq.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c384:	f200 808b 	bhi.w	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c38e:	d03e      	beq.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c396:	f200 8082 	bhi.w	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c3a0:	d027      	beq.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c3a8:	d879      	bhi.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3b0:	d017      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3b8:	d871      	bhi.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800c3c8:	e069      	b.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c3ca:	f7fb fddb 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800c3ce:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c3d0:	e068      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d2:	f107 0314 	add.w	r3, r7, #20
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fd ff16 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c3e0:	e060      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3e2:	f107 0308 	add.w	r3, r7, #8
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe f878 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c3f0:	e058      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c3f2:	4b2d      	ldr	r3, [pc, #180]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c3f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d103      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800c400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c404:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c406:	e04d      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c40c:	e04a      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c40e:	4b26      	ldr	r3, [pc, #152]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c41c:	d103      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800c41e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c422:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c424:	e03e      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c42a:	e03b      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c42c:	4b1e      	ldr	r3, [pc, #120]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c42e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c432:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c438:	4b1b      	ldr	r3, [pc, #108]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0302 	and.w	r3, r3, #2
 800c440:	2b02      	cmp	r3, #2
 800c442:	d10c      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d109      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c44a:	4b17      	ldr	r3, [pc, #92]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	08db      	lsrs	r3, r3, #3
 800c450:	f003 0303 	and.w	r3, r3, #3
 800c454:	4a15      	ldr	r2, [pc, #84]	; (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c456:	fa22 f303 	lsr.w	r3, r2, r3
 800c45a:	637b      	str	r3, [r7, #52]	; 0x34
 800c45c:	e01e      	b.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c45e:	4b12      	ldr	r3, [pc, #72]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c46a:	d106      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c472:	d102      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c474:	4b0e      	ldr	r3, [pc, #56]	; (800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c476:	637b      	str	r3, [r7, #52]	; 0x34
 800c478:	e010      	b.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c47a:	4b0b      	ldr	r3, [pc, #44]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c486:	d106      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800c488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c48e:	d102      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c490:	4b08      	ldr	r3, [pc, #32]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c492:	637b      	str	r3, [r7, #52]	; 0x34
 800c494:	e002      	b.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c49a:	e003      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800c49c:	e002      	b.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4a2:	bf00      	nop
          }
        }
        break;
 800c4a4:	f000 bccf 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c4a8:	44020c00 	.word	0x44020c00
 800c4ac:	03d09000 	.word	0x03d09000
 800c4b0:	003d0900 	.word	0x003d0900
 800c4b4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800c4b8:	4b9e      	ldr	r3, [pc, #632]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c4ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c4be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4ca:	d056      	beq.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4d2:	f200 808b 	bhi.w	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4dc:	d03e      	beq.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e4:	f200 8082 	bhi.w	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4ee:	d027      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4f6:	d879      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4fe:	d017      	beq.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c506:	d871      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c514:	d004      	beq.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800c516:	e069      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c518:	f7fb fd34 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800c51c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c51e:	e068      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c520:	f107 0314 	add.w	r3, r7, #20
 800c524:	4618      	mov	r0, r3
 800c526:	f7fd fe6f 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c52e:	e060      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c530:	f107 0308 	add.w	r3, r7, #8
 800c534:	4618      	mov	r0, r3
 800c536:	f7fd ffd1 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c53e:	e058      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c540:	4b7c      	ldr	r3, [pc, #496]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c546:	f003 0302 	and.w	r3, r3, #2
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d103      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800c54e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c552:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c554:	e04d      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c55a:	e04a      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c55c:	4b75      	ldr	r3, [pc, #468]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c55e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c56a:	d103      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800c56c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c570:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c572:	e03e      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c578:	e03b      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c57a:	4b6e      	ldr	r3, [pc, #440]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c57c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c580:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c586:	4b6b      	ldr	r3, [pc, #428]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0302 	and.w	r3, r3, #2
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d10c      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c598:	4b66      	ldr	r3, [pc, #408]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	08db      	lsrs	r3, r3, #3
 800c59e:	f003 0303 	and.w	r3, r3, #3
 800c5a2:	4a65      	ldr	r2, [pc, #404]	; (800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5aa:	e01e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5ac:	4b61      	ldr	r3, [pc, #388]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5b8:	d106      	bne.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5c0:	d102      	bne.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c5c2:	4b5e      	ldr	r3, [pc, #376]	; (800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c5c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c5c6:	e010      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5c8:	4b5a      	ldr	r3, [pc, #360]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d4:	d106      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5dc:	d102      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c5de:	4b58      	ldr	r3, [pc, #352]	; (800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5e2:	e002      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c5e8:	e003      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800c5ea:	e002      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5f0:	bf00      	nop
          }
        }
        break;
 800c5f2:	f000 bc28 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c5f6:	4b4f      	ldr	r3, [pc, #316]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c600:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800c602:	4b4c      	ldr	r3, [pc, #304]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c60e:	d106      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800c616:	4b4a      	ldr	r3, [pc, #296]	; (800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800c61a:	f000 bc14 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c624:	d108      	bne.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c626:	f107 0320 	add.w	r3, r7, #32
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fd fc82 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c634:	f000 bc07 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c63e:	d107      	bne.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c640:	f107 0314 	add.w	r3, r7, #20
 800c644:	4618      	mov	r0, r3
 800c646:	f7fd fddf 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c64e:	e3fa      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c654:	e3f7      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c656:	4b37      	ldr	r3, [pc, #220]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c65c:	f003 0307 	and.w	r3, r3, #7
 800c660:	633b      	str	r3, [r7, #48]	; 0x30
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	2b04      	cmp	r3, #4
 800c666:	d861      	bhi.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800c668:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800c66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66e:	bf00      	nop
 800c670:	0800c685 	.word	0x0800c685
 800c674:	0800c695 	.word	0x0800c695
 800c678:	0800c6a5 	.word	0x0800c6a5
 800c67c:	0800c6b5 	.word	0x0800c6b5
 800c680:	0800c6bb 	.word	0x0800c6bb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c684:	f107 0320 	add.w	r3, r7, #32
 800c688:	4618      	mov	r0, r3
 800c68a:	f7fd fc53 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c692:	e04e      	b.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c694:	f107 0314 	add.w	r3, r7, #20
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fd fdb5 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6a2:	e046      	b.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a4:	f107 0308 	add.w	r3, r7, #8
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fd ff17 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6b2:	e03e      	b.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c6b4:	4b23      	ldr	r3, [pc, #140]	; (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6b8:	e03b      	b.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6ba:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c6c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6c6:	4b1b      	ldr	r3, [pc, #108]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d10c      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d109      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6d8:	4b16      	ldr	r3, [pc, #88]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	08db      	lsrs	r3, r3, #3
 800c6de:	f003 0303 	and.w	r3, r3, #3
 800c6e2:	4a15      	ldr	r2, [pc, #84]	; (800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c6e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ea:	e01e      	b.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6ec:	4b11      	ldr	r3, [pc, #68]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6f8:	d106      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800c6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c700:	d102      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c702:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
 800c706:	e010      	b.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c708:	4b0a      	ldr	r3, [pc, #40]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c714:	d106      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c71c:	d102      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c71e:	4b08      	ldr	r3, [pc, #32]	; (800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c720:	637b      	str	r3, [r7, #52]	; 0x34
 800c722:	e002      	b.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c728:	e003      	b.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800c72a:	e002      	b.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c730:	bf00      	nop
          }
        }
        break;
 800c732:	e388      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c734:	44020c00 	.word	0x44020c00
 800c738:	03d09000 	.word	0x03d09000
 800c73c:	003d0900 	.word	0x003d0900
 800c740:	007a1200 	.word	0x007a1200
 800c744:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c748:	4ba9      	ldr	r3, [pc, #676]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c74a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c74e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c752:	633b      	str	r3, [r7, #48]	; 0x30
 800c754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c756:	2b20      	cmp	r3, #32
 800c758:	f200 809a 	bhi.w	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800c75c:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800c75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c762:	bf00      	nop
 800c764:	0800c7e9 	.word	0x0800c7e9
 800c768:	0800c891 	.word	0x0800c891
 800c76c:	0800c891 	.word	0x0800c891
 800c770:	0800c891 	.word	0x0800c891
 800c774:	0800c891 	.word	0x0800c891
 800c778:	0800c891 	.word	0x0800c891
 800c77c:	0800c891 	.word	0x0800c891
 800c780:	0800c891 	.word	0x0800c891
 800c784:	0800c7f9 	.word	0x0800c7f9
 800c788:	0800c891 	.word	0x0800c891
 800c78c:	0800c891 	.word	0x0800c891
 800c790:	0800c891 	.word	0x0800c891
 800c794:	0800c891 	.word	0x0800c891
 800c798:	0800c891 	.word	0x0800c891
 800c79c:	0800c891 	.word	0x0800c891
 800c7a0:	0800c891 	.word	0x0800c891
 800c7a4:	0800c809 	.word	0x0800c809
 800c7a8:	0800c891 	.word	0x0800c891
 800c7ac:	0800c891 	.word	0x0800c891
 800c7b0:	0800c891 	.word	0x0800c891
 800c7b4:	0800c891 	.word	0x0800c891
 800c7b8:	0800c891 	.word	0x0800c891
 800c7bc:	0800c891 	.word	0x0800c891
 800c7c0:	0800c891 	.word	0x0800c891
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c891 	.word	0x0800c891
 800c7cc:	0800c891 	.word	0x0800c891
 800c7d0:	0800c891 	.word	0x0800c891
 800c7d4:	0800c891 	.word	0x0800c891
 800c7d8:	0800c891 	.word	0x0800c891
 800c7dc:	0800c891 	.word	0x0800c891
 800c7e0:	0800c891 	.word	0x0800c891
 800c7e4:	0800c81f 	.word	0x0800c81f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e8:	f107 0320 	add.w	r3, r7, #32
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd fba1 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7f6:	e04e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f8:	f107 0314 	add.w	r3, r7, #20
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd fd03 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c806:	e046      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c808:	f107 0308 	add.w	r3, r7, #8
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fd fe65 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c816:	e03e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c818:	4b76      	ldr	r3, [pc, #472]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c81a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c81c:	e03b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c81e:	4b74      	ldr	r3, [pc, #464]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c824:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c828:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c82a:	4b71      	ldr	r3, [pc, #452]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0302 	and.w	r3, r3, #2
 800c832:	2b02      	cmp	r3, #2
 800c834:	d10c      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d109      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c83c:	4b6c      	ldr	r3, [pc, #432]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	08db      	lsrs	r3, r3, #3
 800c842:	f003 0303 	and.w	r3, r3, #3
 800c846:	4a6c      	ldr	r2, [pc, #432]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800c848:	fa22 f303 	lsr.w	r3, r2, r3
 800c84c:	637b      	str	r3, [r7, #52]	; 0x34
 800c84e:	e01e      	b.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c850:	4b67      	ldr	r3, [pc, #412]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c85c:	d106      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c864:	d102      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c866:	4b65      	ldr	r3, [pc, #404]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
 800c86a:	e010      	b.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c86c:	4b60      	ldr	r3, [pc, #384]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c878:	d106      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c880:	d102      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c882:	4b5f      	ldr	r3, [pc, #380]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800c884:	637b      	str	r3, [r7, #52]	; 0x34
 800c886:	e002      	b.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c88c:	e003      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800c88e:	e002      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c894:	bf00      	nop
          }
        }
        break;
 800c896:	e2d6      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c898:	4b55      	ldr	r3, [pc, #340]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c89a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c89e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c8a2:	633b      	str	r3, [r7, #48]	; 0x30
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8aa:	d031      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b2:	d866      	bhi.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	2bc0      	cmp	r3, #192	; 0xc0
 800c8b8:	d027      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	2bc0      	cmp	r3, #192	; 0xc0
 800c8be:	d860      	bhi.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c2:	2b80      	cmp	r3, #128	; 0x80
 800c8c4:	d019      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	2b80      	cmp	r3, #128	; 0x80
 800c8ca:	d85a      	bhi.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d003      	beq.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d4:	2b40      	cmp	r3, #64	; 0x40
 800c8d6:	d008      	beq.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800c8d8:	e053      	b.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8da:	f107 0320 	add.w	r3, r7, #32
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fd fb28 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c8e8:	e04e      	b.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8ea:	f107 0314 	add.w	r3, r7, #20
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fd fc8a 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c8f8:	e046      	b.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8fa:	f107 0308 	add.w	r3, r7, #8
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fd fdec 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c908:	e03e      	b.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c90a:	4b3a      	ldr	r3, [pc, #232]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c90c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c90e:	e03b      	b.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c910:	4b37      	ldr	r3, [pc, #220]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c916:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c91a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c91c:	4b34      	ldr	r3, [pc, #208]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0302 	and.w	r3, r3, #2
 800c924:	2b02      	cmp	r3, #2
 800c926:	d10c      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d109      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c92e:	4b30      	ldr	r3, [pc, #192]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	08db      	lsrs	r3, r3, #3
 800c934:	f003 0303 	and.w	r3, r3, #3
 800c938:	4a2f      	ldr	r2, [pc, #188]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800c93a:	fa22 f303 	lsr.w	r3, r2, r3
 800c93e:	637b      	str	r3, [r7, #52]	; 0x34
 800c940:	e01e      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c942:	4b2b      	ldr	r3, [pc, #172]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c94a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c94e:	d106      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c956:	d102      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c958:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800c95a:	637b      	str	r3, [r7, #52]	; 0x34
 800c95c:	e010      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c95e:	4b24      	ldr	r3, [pc, #144]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c96a:	d106      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c972:	d102      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c974:	4b22      	ldr	r3, [pc, #136]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800c976:	637b      	str	r3, [r7, #52]	; 0x34
 800c978:	e002      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c97e:	e003      	b.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800c980:	e002      	b.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c986:	bf00      	nop
          }
        }
        break;
 800c988:	e25d      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800c98a:	4b19      	ldr	r3, [pc, #100]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c990:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800c994:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d103      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800c99c:	f7fb fadc 	bl	8007f58 <HAL_RCC_GetPCLK2Freq>
 800c9a0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c9a2:	e250      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800c9a4:	4b12      	ldr	r3, [pc, #72]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9b0:	d10b      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9b8:	d107      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ba:	f107 0314 	add.w	r3, r7, #20
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fd fc22 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9c8:	e04f      	b.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800c9ca:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d6:	d115      	bne.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9de:	d111      	bne.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9e0:	f107 0308 	add.w	r3, r7, #8
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fd fd79 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ee:	e03c      	b.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800c9f0:	44020c00 	.word	0x44020c00
 800c9f4:	00bb8000 	.word	0x00bb8000
 800c9f8:	03d09000 	.word	0x03d09000
 800c9fc:	003d0900 	.word	0x003d0900
 800ca00:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800ca04:	4b94      	ldr	r3, [pc, #592]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d10d      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca16:	d109      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ca18:	4b8f      	ldr	r3, [pc, #572]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	08db      	lsrs	r3, r3, #3
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	4a8e      	ldr	r2, [pc, #568]	; (800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ca24:	fa22 f303 	lsr.w	r3, r2, r3
 800ca28:	637b      	str	r3, [r7, #52]	; 0x34
 800ca2a:	e01e      	b.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800ca2c:	4b8a      	ldr	r3, [pc, #552]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca38:	d106      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca40:	d102      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800ca42:	4b87      	ldr	r3, [pc, #540]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ca44:	637b      	str	r3, [r7, #52]	; 0x34
 800ca46:	e010      	b.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800ca48:	4b83      	ldr	r3, [pc, #524]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca54:	d106      	bne.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ca5c:	d102      	bne.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800ca5e:	4b81      	ldr	r3, [pc, #516]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ca60:	637b      	str	r3, [r7, #52]	; 0x34
 800ca62:	e002      	b.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800ca64:	2300      	movs	r3, #0
 800ca66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca68:	e1ed      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ca6a:	e1ec      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800ca6c:	4b7a      	ldr	r3, [pc, #488]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d103      	bne.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ca7e:	f7fb fa81 	bl	8007f84 <HAL_RCC_GetPCLK3Freq>
 800ca82:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ca84:	e1df      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800ca86:	4b74      	ldr	r3, [pc, #464]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca92:	d10b      	bne.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca9a:	d107      	bne.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca9c:	f107 0314 	add.w	r3, r7, #20
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fd fbb1 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	637b      	str	r3, [r7, #52]	; 0x34
 800caaa:	e045      	b.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800caac:	4b6a      	ldr	r3, [pc, #424]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab8:	d10b      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cac0:	d107      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cac2:	f107 0308 	add.w	r3, r7, #8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fd fd08 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	637b      	str	r3, [r7, #52]	; 0x34
 800cad0:	e032      	b.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800cad2:	4b61      	ldr	r3, [pc, #388]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0302 	and.w	r3, r3, #2
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d10d      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cae4:	d109      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cae6:	4b5c      	ldr	r3, [pc, #368]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	08db      	lsrs	r3, r3, #3
 800caec:	f003 0303 	and.w	r3, r3, #3
 800caf0:	4a5a      	ldr	r2, [pc, #360]	; (800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800caf2:	fa22 f303 	lsr.w	r3, r2, r3
 800caf6:	637b      	str	r3, [r7, #52]	; 0x34
 800caf8:	e01e      	b.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800cafa:	4b57      	ldr	r3, [pc, #348]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb06:	d106      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb0e:	d102      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800cb10:	4b53      	ldr	r3, [pc, #332]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cb12:	637b      	str	r3, [r7, #52]	; 0x34
 800cb14:	e010      	b.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800cb16:	4b50      	ldr	r3, [pc, #320]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb22:	d106      	bne.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cb2a:	d102      	bne.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800cb2c:	4b4d      	ldr	r3, [pc, #308]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cb2e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb30:	e002      	b.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800cb32:	2300      	movs	r3, #0
 800cb34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cb36:	e186      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cb38:	e185      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb3a:	4b47      	ldr	r3, [pc, #284]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb40:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800cb44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d103      	bne.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cb4c:	f7fb fa04 	bl	8007f58 <HAL_RCC_GetPCLK2Freq>
 800cb50:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cb52:	e178      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800cb54:	4b40      	ldr	r3, [pc, #256]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb60:	d10b      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb68:	d107      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb6a:	f107 0314 	add.w	r3, r7, #20
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd fb4a 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	637b      	str	r3, [r7, #52]	; 0x34
 800cb78:	e045      	b.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800cb7a:	4b37      	ldr	r3, [pc, #220]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb86:	d10b      	bne.n	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb8e:	d107      	bne.n	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb90:	f107 0308 	add.w	r3, r7, #8
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fd fca1 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb9e:	e032      	b.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800cba0:	4b2d      	ldr	r3, [pc, #180]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d10d      	bne.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800cbb2:	d109      	bne.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cbb4:	4b28      	ldr	r3, [pc, #160]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	08db      	lsrs	r3, r3, #3
 800cbba:	f003 0303 	and.w	r3, r3, #3
 800cbbe:	4a27      	ldr	r2, [pc, #156]	; (800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800cbc0:	fa22 f303 	lsr.w	r3, r2, r3
 800cbc4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc6:	e01e      	b.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800cbc8:	4b23      	ldr	r3, [pc, #140]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd4:	d106      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbdc:	d102      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800cbde:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe2:	e010      	b.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800cbe4:	4b1c      	ldr	r3, [pc, #112]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbf0:	d106      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800cbf8:	d102      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800cbfa:	4b1a      	ldr	r3, [pc, #104]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cbfc:	637b      	str	r3, [r7, #52]	; 0x34
 800cbfe:	e002      	b.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc04:	e11f      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cc06:	e11e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cc08:	4b13      	ldr	r3, [pc, #76]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc0e:	f003 0303 	and.w	r3, r3, #3
 800cc12:	633b      	str	r3, [r7, #48]	; 0x30
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d85f      	bhi.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800cc1a:	a201      	add	r2, pc, #4	; (adr r2, 800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800cc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc20:	0800cc31 	.word	0x0800cc31
 800cc24:	0800cc39 	.word	0x0800cc39
 800cc28:	0800cc49 	.word	0x0800cc49
 800cc2c:	0800cc69 	.word	0x0800cc69

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800cc30:	f7fb f960 	bl	8007ef4 <HAL_RCC_GetHCLKFreq>
 800cc34:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cc36:	e053      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc38:	f107 0320 	add.w	r3, r7, #32
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fd f979 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc46:	e04b      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fd fadb 	bl	800a208 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc56:	e043      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800cc58:	44020c00 	.word	0x44020c00
 800cc5c:	03d09000 	.word	0x03d09000
 800cc60:	003d0900 	.word	0x003d0900
 800cc64:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc68:	4b79      	ldr	r3, [pc, #484]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cc6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc6e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cc72:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc74:	4b76      	ldr	r3, [pc, #472]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0302 	and.w	r3, r3, #2
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d10c      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d109      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc86:	4b72      	ldr	r3, [pc, #456]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	08db      	lsrs	r3, r3, #3
 800cc8c:	f003 0303 	and.w	r3, r3, #3
 800cc90:	4a70      	ldr	r2, [pc, #448]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800cc92:	fa22 f303 	lsr.w	r3, r2, r3
 800cc96:	637b      	str	r3, [r7, #52]	; 0x34
 800cc98:	e01e      	b.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc9a:	4b6d      	ldr	r3, [pc, #436]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cca6:	d106      	bne.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccae:	d102      	bne.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ccb0:	4b69      	ldr	r3, [pc, #420]	; (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ccb2:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb4:	e010      	b.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccb6:	4b66      	ldr	r3, [pc, #408]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccc2:	d106      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccca:	d102      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cccc:	4b63      	ldr	r3, [pc, #396]	; (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800ccce:	637b      	str	r3, [r7, #52]	; 0x34
 800ccd0:	e002      	b.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ccd6:	e003      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ccd8:	e002      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ccde:	bf00      	nop
          }
        }
        break;
 800cce0:	e0b1      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800cce2:	4b5b      	ldr	r3, [pc, #364]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cce8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccec:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800ccee:	4b58      	ldr	r3, [pc, #352]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ccf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d106      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d103      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800cd02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd06:	637b      	str	r3, [r7, #52]	; 0x34
 800cd08:	e01f      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800cd0a:	4b51      	ldr	r3, [pc, #324]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd18:	d106      	bne.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	2b40      	cmp	r3, #64	; 0x40
 800cd1e:	d103      	bne.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800cd20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd24:	637b      	str	r3, [r7, #52]	; 0x34
 800cd26:	e010      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800cd28:	4b49      	ldr	r3, [pc, #292]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd34:	d106      	bne.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	2b80      	cmp	r3, #128	; 0x80
 800cd3a:	d103      	bne.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800cd3c:	f248 0312 	movw	r3, #32786	; 0x8012
 800cd40:	637b      	str	r3, [r7, #52]	; 0x34
 800cd42:	e002      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800cd48:	e07d      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cd4a:	e07c      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800cd4c:	4b40      	ldr	r3, [pc, #256]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd56:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800cd58:	4b3d      	ldr	r3, [pc, #244]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd64:	d105      	bne.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d102      	bne.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800cd6c:	4b3c      	ldr	r3, [pc, #240]	; (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800cd6e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd70:	e031      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800cd72:	4b37      	ldr	r3, [pc, #220]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd7e:	d10a      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	2b10      	cmp	r3, #16
 800cd84:	d107      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd86:	f107 0320 	add.w	r3, r7, #32
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fd f8d2 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	637b      	str	r3, [r7, #52]	; 0x34
 800cd94:	e01f      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800cd96:	4b2e      	ldr	r3, [pc, #184]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd9c:	f003 0302 	and.w	r3, r3, #2
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d106      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	2b20      	cmp	r3, #32
 800cda8:	d103      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800cdaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdae:	637b      	str	r3, [r7, #52]	; 0x34
 800cdb0:	e011      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800cdb2:	4b27      	ldr	r3, [pc, #156]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cdb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdc0:	d106      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	2b30      	cmp	r3, #48	; 0x30
 800cdc6:	d103      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800cdc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cdcc:	637b      	str	r3, [r7, #52]	; 0x34
 800cdce:	e002      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800cdd4:	e037      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cdd6:	e036      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800cdd8:	4b1d      	ldr	r3, [pc, #116]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cdda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cdde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cde2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	2b10      	cmp	r3, #16
 800cde8:	d107      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdea:	f107 0320 	add.w	r3, r7, #32
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fd f8a0 	bl	8009f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800cdf8:	e025      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800cdfa:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce06:	d10a      	bne.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	2b20      	cmp	r3, #32
 800ce0c:	d107      	bne.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce0e:	f107 0308 	add.w	r3, r7, #8
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fd fb62 	bl	800a4dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce1c:	e00f      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ce1e:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce2a:	d105      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	2b30      	cmp	r3, #48	; 0x30
 800ce30:	d102      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800ce32:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
 800ce36:	e002      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800ce3c:	e003      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ce3e:	e002      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800ce40:	2300      	movs	r3, #0
 800ce42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ce44:	bf00      	nop
    }
  }

  return (frequency);
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	373c      	adds	r7, #60	; 0x3c
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd90      	pop	{r4, r7, pc}
 800ce50:	44020c00 	.word	0x44020c00
 800ce54:	03d09000 	.word	0x03d09000
 800ce58:	003d0900 	.word	0x003d0900
 800ce5c:	007a1200 	.word	0x007a1200
 800ce60:	02dc6c00 	.word	0x02dc6c00

0800ce64 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800ce6c:	4b48      	ldr	r3, [pc, #288]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a47      	ldr	r2, [pc, #284]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800ce72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce78:	f7f6 ff42 	bl	8003d00 <HAL_GetTick>
 800ce7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce7e:	e008      	b.n	800ce92 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce80:	f7f6 ff3e 	bl	8003d00 <HAL_GetTick>
 800ce84:	4602      	mov	r2, r0
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d901      	bls.n	800ce92 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	e07a      	b.n	800cf88 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce92:	4b3f      	ldr	r3, [pc, #252]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1f0      	bne.n	800ce80 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ce9e:	4b3c      	ldr	r3, [pc, #240]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	6811      	ldr	r1, [r2, #0]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	6852      	ldr	r2, [r2, #4]
 800ceb2:	0212      	lsls	r2, r2, #8
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	4936      	ldr	r1, [pc, #216]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	62cb      	str	r3, [r1, #44]	; 0x2c
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	025b      	lsls	r3, r3, #9
 800cece:	b29b      	uxth	r3, r3
 800ced0:	431a      	orrs	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	3b01      	subs	r3, #1
 800ced8:	041b      	lsls	r3, r3, #16
 800ceda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cede:	431a      	orrs	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	695b      	ldr	r3, [r3, #20]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	061b      	lsls	r3, r3, #24
 800cee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceec:	4928      	ldr	r1, [pc, #160]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800cef2:	4b27      	ldr	r3, [pc, #156]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef6:	f023 020c 	bic.w	r2, r3, #12
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	699b      	ldr	r3, [r3, #24]
 800cefe:	4924      	ldr	r1, [pc, #144]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf00:	4313      	orrs	r3, r2
 800cf02:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800cf04:	4b22      	ldr	r3, [pc, #136]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	f023 0220 	bic.w	r2, r3, #32
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	491f      	ldr	r1, [pc, #124]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800cf16:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1e:	491c      	ldr	r1, [pc, #112]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800cf24:	4b1a      	ldr	r3, [pc, #104]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	4a19      	ldr	r2, [pc, #100]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf2a:	f023 0310 	bic.w	r3, r3, #16
 800cf2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800cf30:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	6a12      	ldr	r2, [r2, #32]
 800cf40:	00d2      	lsls	r2, r2, #3
 800cf42:	4913      	ldr	r1, [pc, #76]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800cf48:	4b11      	ldr	r3, [pc, #68]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	4a10      	ldr	r2, [pc, #64]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf4e:	f043 0310 	orr.w	r3, r3, #16
 800cf52:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a0d      	ldr	r2, [pc, #52]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf60:	f7f6 fece 	bl	8003d00 <HAL_GetTick>
 800cf64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf66:	e008      	b.n	800cf7a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf68:	f7f6 feca 	bl	8003d00 <HAL_GetTick>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d901      	bls.n	800cf7a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e006      	b.n	800cf88 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf7a:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <RCCEx_PLL2_Config+0x12c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0f0      	beq.n	800cf68 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800cf86:	2300      	movs	r3, #0

}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	44020c00 	.word	0x44020c00

0800cf94 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800cf9c:	4b48      	ldr	r3, [pc, #288]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a47      	ldr	r2, [pc, #284]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800cfa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfa6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cfa8:	f7f6 feaa 	bl	8003d00 <HAL_GetTick>
 800cfac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfae:	e008      	b.n	800cfc2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfb0:	f7f6 fea6 	bl	8003d00 <HAL_GetTick>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d901      	bls.n	800cfc2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e07a      	b.n	800d0b8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfc2:	4b3f      	ldr	r3, [pc, #252]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1f0      	bne.n	800cfb0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800cfce:	4b3c      	ldr	r3, [pc, #240]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800cfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cfd6:	f023 0303 	bic.w	r3, r3, #3
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	6811      	ldr	r1, [r2, #0]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	6852      	ldr	r2, [r2, #4]
 800cfe2:	0212      	lsls	r2, r2, #8
 800cfe4:	430a      	orrs	r2, r1
 800cfe6:	4936      	ldr	r1, [pc, #216]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	630b      	str	r3, [r1, #48]	; 0x30
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	025b      	lsls	r3, r3, #9
 800cffe:	b29b      	uxth	r3, r3
 800d000:	431a      	orrs	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	3b01      	subs	r3, #1
 800d008:	041b      	lsls	r3, r3, #16
 800d00a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	3b01      	subs	r3, #1
 800d016:	061b      	lsls	r3, r3, #24
 800d018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d01c:	4928      	ldr	r1, [pc, #160]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d01e:	4313      	orrs	r3, r2
 800d020:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d022:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d026:	f023 020c 	bic.w	r2, r3, #12
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	4924      	ldr	r1, [pc, #144]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d030:	4313      	orrs	r3, r2
 800d032:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d034:	4b22      	ldr	r3, [pc, #136]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d038:	f023 0220 	bic.w	r2, r3, #32
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	69db      	ldr	r3, [r3, #28]
 800d040:	491f      	ldr	r1, [pc, #124]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d042:	4313      	orrs	r3, r2
 800d044:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	491c      	ldr	r1, [pc, #112]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d050:	4313      	orrs	r3, r2
 800d052:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d054:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	4a19      	ldr	r2, [pc, #100]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d05a:	f023 0310 	bic.w	r3, r3, #16
 800d05e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d060:	4b17      	ldr	r3, [pc, #92]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d068:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	6a12      	ldr	r2, [r2, #32]
 800d070:	00d2      	lsls	r2, r2, #3
 800d072:	4913      	ldr	r1, [pc, #76]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d074:	4313      	orrs	r3, r2
 800d076:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d078:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07c:	4a10      	ldr	r2, [pc, #64]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d07e:	f043 0310 	orr.w	r3, r3, #16
 800d082:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d084:	4b0e      	ldr	r3, [pc, #56]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a0d      	ldr	r2, [pc, #52]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d08a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d08e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d090:	f7f6 fe36 	bl	8003d00 <HAL_GetTick>
 800d094:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d096:	e008      	b.n	800d0aa <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d098:	f7f6 fe32 	bl	8003d00 <HAL_GetTick>
 800d09c:	4602      	mov	r2, r0
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d901      	bls.n	800d0aa <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	e006      	b.n	800d0b8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <RCCEx_PLL3_Config+0x12c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0f0      	beq.n	800d098 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	44020c00 	.word	0x44020c00

0800d0c4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b087      	sub	sp, #28
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d0d0:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <HAL_RTCEx_BKUPWrite+0x2c>)
 800d0d2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	697a      	ldr	r2, [r7, #20]
 800d0da:	4413      	add	r3, r2
 800d0dc:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	601a      	str	r2, [r3, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	371c      	adds	r7, #28
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	44007d00 	.word	0x44007d00

0800d0f4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d0fe:	4b07      	ldr	r3, [pc, #28]	; (800d11c <HAL_RTCEx_BKUPRead+0x28>)
 800d100:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	44007d00 	.word	0x44007d00

0800d120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e049      	b.n	800d1c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f841 	bl	800d1ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4619      	mov	r1, r3
 800d15e:	4610      	mov	r0, r2
 800d160:	f000 fa60 	bl	800d624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
	...

0800d1e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d001      	beq.n	800d1fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e07c      	b.n	800d2f6 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68da      	ldr	r2, [r3, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f042 0201 	orr.w	r2, r2, #1
 800d212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a3a      	ldr	r2, [pc, #232]	; (800d304 <HAL_TIM_Base_Start_IT+0x120>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d04a      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a39      	ldr	r2, [pc, #228]	; (800d308 <HAL_TIM_Base_Start_IT+0x124>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d045      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d230:	d040      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d23a:	d03b      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a32      	ldr	r2, [pc, #200]	; (800d30c <HAL_TIM_Base_Start_IT+0x128>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d036      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a31      	ldr	r2, [pc, #196]	; (800d310 <HAL_TIM_Base_Start_IT+0x12c>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d031      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a2f      	ldr	r2, [pc, #188]	; (800d314 <HAL_TIM_Base_Start_IT+0x130>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d02c      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a2e      	ldr	r2, [pc, #184]	; (800d318 <HAL_TIM_Base_Start_IT+0x134>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d027      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a2c      	ldr	r2, [pc, #176]	; (800d31c <HAL_TIM_Base_Start_IT+0x138>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d022      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a2b      	ldr	r2, [pc, #172]	; (800d320 <HAL_TIM_Base_Start_IT+0x13c>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d01d      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a29      	ldr	r2, [pc, #164]	; (800d324 <HAL_TIM_Base_Start_IT+0x140>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d018      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a28      	ldr	r2, [pc, #160]	; (800d328 <HAL_TIM_Base_Start_IT+0x144>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d013      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a26      	ldr	r2, [pc, #152]	; (800d32c <HAL_TIM_Base_Start_IT+0x148>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d00e      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a25      	ldr	r2, [pc, #148]	; (800d330 <HAL_TIM_Base_Start_IT+0x14c>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d009      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a23      	ldr	r2, [pc, #140]	; (800d334 <HAL_TIM_Base_Start_IT+0x150>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d004      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a22      	ldr	r2, [pc, #136]	; (800d338 <HAL_TIM_Base_Start_IT+0x154>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d115      	bne.n	800d2e0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	689a      	ldr	r2, [r3, #8]
 800d2ba:	4b20      	ldr	r3, [pc, #128]	; (800d33c <HAL_TIM_Base_Start_IT+0x158>)
 800d2bc:	4013      	ands	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b06      	cmp	r3, #6
 800d2c4:	d015      	beq.n	800d2f2 <HAL_TIM_Base_Start_IT+0x10e>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2cc:	d011      	beq.n	800d2f2 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f042 0201 	orr.w	r2, r2, #1
 800d2dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2de:	e008      	b.n	800d2f2 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f042 0201 	orr.w	r2, r2, #1
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	e000      	b.n	800d2f4 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	40012c00 	.word	0x40012c00
 800d308:	50012c00 	.word	0x50012c00
 800d30c:	40000400 	.word	0x40000400
 800d310:	50000400 	.word	0x50000400
 800d314:	40000800 	.word	0x40000800
 800d318:	50000800 	.word	0x50000800
 800d31c:	40000c00 	.word	0x40000c00
 800d320:	50000c00 	.word	0x50000c00
 800d324:	40013400 	.word	0x40013400
 800d328:	50013400 	.word	0x50013400
 800d32c:	40001800 	.word	0x40001800
 800d330:	50001800 	.word	0x50001800
 800d334:	40014000 	.word	0x40014000
 800d338:	50014000 	.word	0x50014000
 800d33c:	00010007 	.word	0x00010007

0800d340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f003 0302 	and.w	r3, r3, #2
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d020      	beq.n	800d3a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f003 0302 	and.w	r3, r3, #2
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01b      	beq.n	800d3a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f06f 0202 	mvn.w	r2, #2
 800d374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	f003 0303 	and.w	r3, r3, #3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d003      	beq.n	800d392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f92c 	bl	800d5e8 <HAL_TIM_IC_CaptureCallback>
 800d390:	e005      	b.n	800d39e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f91e 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f92f 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	f003 0304 	and.w	r3, r3, #4
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d020      	beq.n	800d3f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01b      	beq.n	800d3f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f06f 0204 	mvn.w	r2, #4
 800d3c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f906 	bl	800d5e8 <HAL_TIM_IC_CaptureCallback>
 800d3dc:	e005      	b.n	800d3ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f8f8 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f909 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	f003 0308 	and.w	r3, r3, #8
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d020      	beq.n	800d43c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f003 0308 	and.w	r3, r3, #8
 800d400:	2b00      	cmp	r3, #0
 800d402:	d01b      	beq.n	800d43c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f06f 0208 	mvn.w	r2, #8
 800d40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2204      	movs	r2, #4
 800d412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	69db      	ldr	r3, [r3, #28]
 800d41a:	f003 0303 	and.w	r3, r3, #3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d003      	beq.n	800d42a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f8e0 	bl	800d5e8 <HAL_TIM_IC_CaptureCallback>
 800d428:	e005      	b.n	800d436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f8d2 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f8e3 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f003 0310 	and.w	r3, r3, #16
 800d442:	2b00      	cmp	r3, #0
 800d444:	d020      	beq.n	800d488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f003 0310 	and.w	r3, r3, #16
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01b      	beq.n	800d488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f06f 0210 	mvn.w	r2, #16
 800d458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2208      	movs	r2, #8
 800d45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	69db      	ldr	r3, [r3, #28]
 800d466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f8ba 	bl	800d5e8 <HAL_TIM_IC_CaptureCallback>
 800d474:	e005      	b.n	800d482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f8ac 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 f8bd 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00c      	beq.n	800d4ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d007      	beq.n	800d4ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f06f 0201 	mvn.w	r2, #1
 800d4a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7f3 fb2e 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00c      	beq.n	800d4d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d007      	beq.n	800d4d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f9d2 	bl	800d874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00c      	beq.n	800d4f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d007      	beq.n	800d4f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f9ca 	bl	800d888 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00c      	beq.n	800d518 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d504:	2b00      	cmp	r3, #0
 800d506:	d007      	beq.n	800d518 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f87c 	bl	800d610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00c      	beq.n	800d53c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f003 0320 	and.w	r3, r3, #32
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d007      	beq.n	800d53c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f06f 0220 	mvn.w	r2, #32
 800d534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f992 	bl	800d860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00c      	beq.n	800d560 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d007      	beq.n	800d560 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f99e 	bl	800d89c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00c      	beq.n	800d584 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f996 	bl	800d8b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00c      	beq.n	800d5a8 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d5a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f98e 	bl	800d8c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00c      	beq.n	800d5cc <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d007      	beq.n	800d5cc <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f986 	bl	800d8d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5cc:	bf00      	nop
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a74      	ldr	r2, [pc, #464]	; (800d808 <TIM_Base_SetConfig+0x1e4>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d02b      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a73      	ldr	r2, [pc, #460]	; (800d80c <TIM_Base_SetConfig+0x1e8>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d027      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d64a:	d023      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d652:	d01f      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4a6e      	ldr	r2, [pc, #440]	; (800d810 <TIM_Base_SetConfig+0x1ec>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d01b      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	4a6d      	ldr	r2, [pc, #436]	; (800d814 <TIM_Base_SetConfig+0x1f0>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d017      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a6c      	ldr	r2, [pc, #432]	; (800d818 <TIM_Base_SetConfig+0x1f4>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d013      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4a6b      	ldr	r2, [pc, #428]	; (800d81c <TIM_Base_SetConfig+0x1f8>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d00f      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a6a      	ldr	r2, [pc, #424]	; (800d820 <TIM_Base_SetConfig+0x1fc>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d00b      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	4a69      	ldr	r2, [pc, #420]	; (800d824 <TIM_Base_SetConfig+0x200>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d007      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4a68      	ldr	r2, [pc, #416]	; (800d828 <TIM_Base_SetConfig+0x204>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d003      	beq.n	800d694 <TIM_Base_SetConfig+0x70>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a67      	ldr	r2, [pc, #412]	; (800d82c <TIM_Base_SetConfig+0x208>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d108      	bne.n	800d6a6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d69a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a57      	ldr	r2, [pc, #348]	; (800d808 <TIM_Base_SetConfig+0x1e4>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d05b      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a56      	ldr	r2, [pc, #344]	; (800d80c <TIM_Base_SetConfig+0x1e8>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d057      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6bc:	d053      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6c4:	d04f      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a51      	ldr	r2, [pc, #324]	; (800d810 <TIM_Base_SetConfig+0x1ec>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d04b      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a50      	ldr	r2, [pc, #320]	; (800d814 <TIM_Base_SetConfig+0x1f0>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d047      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a4f      	ldr	r2, [pc, #316]	; (800d818 <TIM_Base_SetConfig+0x1f4>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d043      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a4e      	ldr	r2, [pc, #312]	; (800d81c <TIM_Base_SetConfig+0x1f8>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d03f      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4a4d      	ldr	r2, [pc, #308]	; (800d820 <TIM_Base_SetConfig+0x1fc>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d03b      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4a4c      	ldr	r2, [pc, #304]	; (800d824 <TIM_Base_SetConfig+0x200>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d037      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a4b      	ldr	r2, [pc, #300]	; (800d828 <TIM_Base_SetConfig+0x204>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d033      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a4a      	ldr	r2, [pc, #296]	; (800d82c <TIM_Base_SetConfig+0x208>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d02f      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a49      	ldr	r2, [pc, #292]	; (800d830 <TIM_Base_SetConfig+0x20c>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d02b      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a48      	ldr	r2, [pc, #288]	; (800d834 <TIM_Base_SetConfig+0x210>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d027      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a47      	ldr	r2, [pc, #284]	; (800d838 <TIM_Base_SetConfig+0x214>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d023      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a46      	ldr	r2, [pc, #280]	; (800d83c <TIM_Base_SetConfig+0x218>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d01f      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a45      	ldr	r2, [pc, #276]	; (800d840 <TIM_Base_SetConfig+0x21c>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d01b      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a44      	ldr	r2, [pc, #272]	; (800d844 <TIM_Base_SetConfig+0x220>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d017      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a43      	ldr	r2, [pc, #268]	; (800d848 <TIM_Base_SetConfig+0x224>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d013      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a42      	ldr	r2, [pc, #264]	; (800d84c <TIM_Base_SetConfig+0x228>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d00f      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4a41      	ldr	r2, [pc, #260]	; (800d850 <TIM_Base_SetConfig+0x22c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d00b      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a40      	ldr	r2, [pc, #256]	; (800d854 <TIM_Base_SetConfig+0x230>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d007      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a3f      	ldr	r2, [pc, #252]	; (800d858 <TIM_Base_SetConfig+0x234>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d003      	beq.n	800d766 <TIM_Base_SetConfig+0x142>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a3e      	ldr	r2, [pc, #248]	; (800d85c <TIM_Base_SetConfig+0x238>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d108      	bne.n	800d778 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d76c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	4313      	orrs	r3, r2
 800d776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	695b      	ldr	r3, [r3, #20]
 800d782:	4313      	orrs	r3, r2
 800d784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	689a      	ldr	r2, [r3, #8]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a1a      	ldr	r2, [pc, #104]	; (800d808 <TIM_Base_SetConfig+0x1e4>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d023      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a19      	ldr	r2, [pc, #100]	; (800d80c <TIM_Base_SetConfig+0x1e8>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d01f      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a1e      	ldr	r2, [pc, #120]	; (800d828 <TIM_Base_SetConfig+0x204>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d01b      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a1d      	ldr	r2, [pc, #116]	; (800d82c <TIM_Base_SetConfig+0x208>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d017      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a22      	ldr	r2, [pc, #136]	; (800d848 <TIM_Base_SetConfig+0x224>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d013      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a21      	ldr	r2, [pc, #132]	; (800d84c <TIM_Base_SetConfig+0x228>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d00f      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a20      	ldr	r2, [pc, #128]	; (800d850 <TIM_Base_SetConfig+0x22c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d00b      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a1f      	ldr	r2, [pc, #124]	; (800d854 <TIM_Base_SetConfig+0x230>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d007      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a1e      	ldr	r2, [pc, #120]	; (800d858 <TIM_Base_SetConfig+0x234>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d003      	beq.n	800d7ec <TIM_Base_SetConfig+0x1c8>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a1d      	ldr	r2, [pc, #116]	; (800d85c <TIM_Base_SetConfig+0x238>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d103      	bne.n	800d7f4 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	691a      	ldr	r2, [r3, #16]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	615a      	str	r2, [r3, #20]
}
 800d7fa:	bf00      	nop
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	40012c00 	.word	0x40012c00
 800d80c:	50012c00 	.word	0x50012c00
 800d810:	40000400 	.word	0x40000400
 800d814:	50000400 	.word	0x50000400
 800d818:	40000800 	.word	0x40000800
 800d81c:	50000800 	.word	0x50000800
 800d820:	40000c00 	.word	0x40000c00
 800d824:	50000c00 	.word	0x50000c00
 800d828:	40013400 	.word	0x40013400
 800d82c:	50013400 	.word	0x50013400
 800d830:	40001800 	.word	0x40001800
 800d834:	50001800 	.word	0x50001800
 800d838:	40001c00 	.word	0x40001c00
 800d83c:	50001c00 	.word	0x50001c00
 800d840:	40002000 	.word	0x40002000
 800d844:	50002000 	.word	0x50002000
 800d848:	40014000 	.word	0x40014000
 800d84c:	50014000 	.word	0x50014000
 800d850:	40014400 	.word	0x40014400
 800d854:	50014400 	.word	0x50014400
 800d858:	40014800 	.word	0x40014800
 800d85c:	50014800 	.word	0x50014800

0800d860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e042      	b.n	800d984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7f3 f92f 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2224      	movs	r2, #36	; 0x24
 800d91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f022 0201 	bic.w	r2, r2, #1
 800d92c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fe0a 	bl	800e550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fc19 	bl	800e174 <UART_SetConfig>
 800d942:	4603      	mov	r3, r0
 800d944:	2b01      	cmp	r3, #1
 800d946:	d101      	bne.n	800d94c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d948:	2301      	movs	r3, #1
 800d94a:	e01b      	b.n	800d984 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d95a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	689a      	ldr	r2, [r3, #8]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d96a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f042 0201 	orr.w	r2, r2, #1
 800d97a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 fe89 	bl	800e694 <UART_CheckIdleState>
 800d982:	4603      	mov	r3, r0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08a      	sub	sp, #40	; 0x28
 800d990:	af02      	add	r7, sp, #8
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	603b      	str	r3, [r7, #0]
 800d998:	4613      	mov	r3, r2
 800d99a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	f040 808b 	bne.w	800dabe <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d002      	beq.n	800d9b4 <HAL_UART_Transmit+0x28>
 800d9ae:	88fb      	ldrh	r3, [r7, #6]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e083      	b.n	800dac0 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9c2:	2b80      	cmp	r3, #128	; 0x80
 800d9c4:	d107      	bne.n	800d9d6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	689a      	ldr	r2, [r3, #8]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9d4:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2221      	movs	r2, #33	; 0x21
 800d9e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9e6:	f7f6 f98b 	bl	8003d00 <HAL_GetTick>
 800d9ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	88fa      	ldrh	r2, [r7, #6]
 800d9f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	88fa      	ldrh	r2, [r7, #6]
 800d9f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da04:	d108      	bne.n	800da18 <HAL_UART_Transmit+0x8c>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d104      	bne.n	800da18 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	61bb      	str	r3, [r7, #24]
 800da16:	e003      	b.n	800da20 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da1c:	2300      	movs	r3, #0
 800da1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da20:	e030      	b.n	800da84 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2200      	movs	r2, #0
 800da2a:	2180      	movs	r1, #128	; 0x80
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 fedb 	bl	800e7e8 <UART_WaitOnFlagUntilTimeout>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d005      	beq.n	800da44 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2220      	movs	r2, #32
 800da3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800da40:	2303      	movs	r3, #3
 800da42:	e03d      	b.n	800dac0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10b      	bne.n	800da62 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	3302      	adds	r3, #2
 800da5e:	61bb      	str	r3, [r7, #24]
 800da60:	e007      	b.n	800da72 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	781a      	ldrb	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	3301      	adds	r3, #1
 800da70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da78:	b29b      	uxth	r3, r3
 800da7a:	3b01      	subs	r3, #1
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1c8      	bne.n	800da22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2200      	movs	r2, #0
 800da98:	2140      	movs	r1, #64	; 0x40
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f000 fea4 	bl	800e7e8 <UART_WaitOnFlagUntilTimeout>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d005      	beq.n	800dab2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2220      	movs	r2, #32
 800daaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800daae:	2303      	movs	r3, #3
 800dab0:	e006      	b.n	800dac0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2220      	movs	r2, #32
 800dab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	e000      	b.n	800dac0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800dabe:	2302      	movs	r3, #2
  }
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b08a      	sub	sp, #40	; 0x28
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	4613      	mov	r3, r2
 800dad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dadc:	2b20      	cmp	r3, #32
 800dade:	d14b      	bne.n	800db78 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <HAL_UART_Receive_IT+0x24>
 800dae6:	88fb      	ldrh	r3, [r7, #6]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	e044      	b.n	800db7a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db00:	2b40      	cmp	r3, #64	; 0x40
 800db02:	d107      	bne.n	800db14 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	689a      	ldr	r2, [r3, #8]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db12:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a1a      	ldr	r2, [pc, #104]	; (800db84 <HAL_UART_Receive_IT+0xbc>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d024      	beq.n	800db68 <HAL_UART_Receive_IT+0xa0>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a19      	ldr	r2, [pc, #100]	; (800db88 <HAL_UART_Receive_IT+0xc0>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d01f      	beq.n	800db68 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db32:	2b00      	cmp	r3, #0
 800db34:	d018      	beq.n	800db68 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	e853 3f00 	ldrex	r3, [r3]
 800db42:	613b      	str	r3, [r7, #16]
   return(result);
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db4a:	627b      	str	r3, [r7, #36]	; 0x24
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	461a      	mov	r2, r3
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	623b      	str	r3, [r7, #32]
 800db56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db58:	69f9      	ldr	r1, [r7, #28]
 800db5a:	6a3a      	ldr	r2, [r7, #32]
 800db5c:	e841 2300 	strex	r3, r2, [r1]
 800db60:	61bb      	str	r3, [r7, #24]
   return(result);
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1e6      	bne.n	800db36 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800db68:	88fb      	ldrh	r3, [r7, #6]
 800db6a:	461a      	mov	r2, r3
 800db6c:	68b9      	ldr	r1, [r7, #8]
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 fea2 	bl	800e8b8 <UART_Start_Receive_IT>
 800db74:	4603      	mov	r3, r0
 800db76:	e000      	b.n	800db7a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800db78:	2302      	movs	r3, #2
  }
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3728      	adds	r7, #40	; 0x28
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	44002400 	.word	0x44002400
 800db88:	54002400 	.word	0x54002400

0800db8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b0ae      	sub	sp, #184	; 0xb8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	69db      	ldr	r3, [r3, #28]
 800db9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dbb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbb6:	f640 030f 	movw	r3, #2063	; 0x80f
 800dbba:	4013      	ands	r3, r2
 800dbbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800dbc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d11b      	bne.n	800dc00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbcc:	f003 0320 	and.w	r3, r3, #32
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d015      	beq.n	800dc00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dbd8:	f003 0320 	and.w	r3, r3, #32
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d105      	bne.n	800dbec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dbe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dbe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d009      	beq.n	800dc00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 8293 	beq.w	800e11c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	4798      	blx	r3
      }
      return;
 800dbfe:	e28d      	b.n	800e11c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 80fd 	beq.w	800de04 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dc0e:	4b7a      	ldr	r3, [pc, #488]	; (800ddf8 <HAL_UART_IRQHandler+0x26c>)
 800dc10:	4013      	ands	r3, r2
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d106      	bne.n	800dc24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc1a:	4b78      	ldr	r3, [pc, #480]	; (800ddfc <HAL_UART_IRQHandler+0x270>)
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f000 80f0 	beq.w	800de04 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc28:	f003 0301 	and.w	r3, r3, #1
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d011      	beq.n	800dc54 <HAL_UART_IRQHandler+0xc8>
 800dc30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dc34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00b      	beq.n	800dc54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2201      	movs	r2, #1
 800dc42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc4a:	f043 0201 	orr.w	r2, r3, #1
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc58:	f003 0302 	and.w	r3, r3, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d011      	beq.n	800dc84 <HAL_UART_IRQHandler+0xf8>
 800dc60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00b      	beq.n	800dc84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2202      	movs	r2, #2
 800dc72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc7a:	f043 0204 	orr.w	r2, r3, #4
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc88:	f003 0304 	and.w	r3, r3, #4
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d011      	beq.n	800dcb4 <HAL_UART_IRQHandler+0x128>
 800dc90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00b      	beq.n	800dcb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2204      	movs	r2, #4
 800dca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcaa:	f043 0202 	orr.w	r2, r3, #2
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dcb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcb8:	f003 0308 	and.w	r3, r3, #8
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d017      	beq.n	800dcf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dcc4:	f003 0320 	and.w	r3, r3, #32
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d105      	bne.n	800dcd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dcd0:	4b49      	ldr	r3, [pc, #292]	; (800ddf8 <HAL_UART_IRQHandler+0x26c>)
 800dcd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00b      	beq.n	800dcf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2208      	movs	r2, #8
 800dcde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dce6:	f043 0208 	orr.w	r2, r3, #8
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dcf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d012      	beq.n	800dd22 <HAL_UART_IRQHandler+0x196>
 800dcfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00c      	beq.n	800dd22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd18:	f043 0220 	orr.w	r2, r3, #32
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 81f9 	beq.w	800e120 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd32:	f003 0320 	and.w	r3, r3, #32
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d013      	beq.n	800dd62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d105      	bne.n	800dd52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d007      	beq.n	800dd62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd76:	2b40      	cmp	r3, #64	; 0x40
 800dd78:	d005      	beq.n	800dd86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d02e      	beq.n	800dde4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 feb8 	bl	800eafc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd96:	2b40      	cmp	r3, #64	; 0x40
 800dd98:	d120      	bne.n	800dddc <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d017      	beq.n	800ddd4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddaa:	4a15      	ldr	r2, [pc, #84]	; (800de00 <HAL_UART_IRQHandler+0x274>)
 800ddac:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7f6 f945 	bl	8004044 <HAL_DMA_Abort_IT>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d019      	beq.n	800ddf4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ddce:	4610      	mov	r0, r2
 800ddd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddd2:	e00f      	b.n	800ddf4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f9b7 	bl	800e148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddda:	e00b      	b.n	800ddf4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f9b3 	bl	800e148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dde2:	e007      	b.n	800ddf4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f9af 	bl	800e148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ddf2:	e195      	b.n	800e120 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf4:	bf00      	nop
    return;
 800ddf6:	e193      	b.n	800e120 <HAL_UART_IRQHandler+0x594>
 800ddf8:	10000001 	.word	0x10000001
 800ddfc:	04000120 	.word	0x04000120
 800de00:	0800ebc9 	.word	0x0800ebc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de08:	2b01      	cmp	r3, #1
 800de0a:	f040 8129 	bne.w	800e060 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de12:	f003 0310 	and.w	r3, r3, #16
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 8122 	beq.w	800e060 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800de20:	f003 0310 	and.w	r3, r3, #16
 800de24:	2b00      	cmp	r3, #0
 800de26:	f000 811b 	beq.w	800e060 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2210      	movs	r2, #16
 800de30:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de3c:	2b40      	cmp	r3, #64	; 0x40
 800de3e:	f040 8091 	bne.w	800df64 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de4c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800de50:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 8165 	beq.w	800e124 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de60:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800de64:	429a      	cmp	r2, r3
 800de66:	f080 815d 	bcs.w	800e124 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800de70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de7c:	2b81      	cmp	r3, #129	; 0x81
 800de7e:	d060      	beq.n	800df42 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de88:	e853 3f00 	ldrex	r3, [r3]
 800de8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800de8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	461a      	mov	r2, r3
 800de9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dea6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800deaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800deae:	e841 2300 	strex	r3, r2, [r1]
 800deb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800deb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1e2      	bne.n	800de80 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	3308      	adds	r3, #8
 800dec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dec4:	e853 3f00 	ldrex	r3, [r3]
 800dec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800deca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800decc:	f023 0301 	bic.w	r3, r3, #1
 800ded0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3308      	adds	r3, #8
 800deda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dede:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dee0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dee6:	e841 2300 	strex	r3, r2, [r1]
 800deea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800deec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e3      	bne.n	800deba <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2220      	movs	r2, #32
 800def6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df08:	e853 3f00 	ldrex	r3, [r3]
 800df0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df10:	f023 0310 	bic.w	r3, r3, #16
 800df14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	461a      	mov	r2, r3
 800df1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df22:	65bb      	str	r3, [r7, #88]	; 0x58
 800df24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df2a:	e841 2300 	strex	r3, r2, [r1]
 800df2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e4      	bne.n	800df00 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7f6 f805 	bl	8003f4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2202      	movs	r2, #2
 800df46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df54:	b29b      	uxth	r3, r3
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	b29b      	uxth	r3, r3
 800df5a:	4619      	mov	r1, r3
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 f8fd 	bl	800e15c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df62:	e0df      	b.n	800e124 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df70:	b29b      	uxth	r3, r3
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df7e:	b29b      	uxth	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 80d1 	beq.w	800e128 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800df86:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f000 80cc 	beq.w	800e128 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df98:	e853 3f00 	ldrex	r3, [r3]
 800df9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	461a      	mov	r2, r3
 800dfae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfb2:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfba:	e841 2300 	strex	r3, r2, [r1]
 800dfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1e4      	bne.n	800df90 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	e853 3f00 	ldrex	r3, [r3]
 800dfd4:	623b      	str	r3, [r7, #32]
   return(result);
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfdc:	f023 0301 	bic.w	r3, r3, #1
 800dfe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3308      	adds	r3, #8
 800dfea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dfee:	633a      	str	r2, [r7, #48]	; 0x30
 800dff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff6:	e841 2300 	strex	r3, r2, [r1]
 800dffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1e1      	bne.n	800dfc6 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2220      	movs	r2, #32
 800e006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	e853 3f00 	ldrex	r3, [r3]
 800e022:	60fb      	str	r3, [r7, #12]
   return(result);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f023 0310 	bic.w	r3, r3, #16
 800e02a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e038:	61fb      	str	r3, [r7, #28]
 800e03a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03c:	69b9      	ldr	r1, [r7, #24]
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	e841 2300 	strex	r3, r2, [r1]
 800e044:	617b      	str	r3, [r7, #20]
   return(result);
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1e4      	bne.n	800e016 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2202      	movs	r2, #2
 800e050:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e052:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e056:	4619      	mov	r1, r3
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 f87f 	bl	800e15c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e05e:	e063      	b.n	800e128 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00e      	beq.n	800e08a <HAL_UART_IRQHandler+0x4fe>
 800e06c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d008      	beq.n	800e08a <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f001 fb1a 	bl	800f6bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e088:	e051      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e08a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e092:	2b00      	cmp	r3, #0
 800e094:	d014      	beq.n	800e0c0 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e096:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d105      	bne.n	800e0ae <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e0a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d008      	beq.n	800e0c0 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d03a      	beq.n	800e12c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	4798      	blx	r3
    }
    return;
 800e0be:	e035      	b.n	800e12c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d009      	beq.n	800e0e0 <HAL_UART_IRQHandler+0x554>
 800e0cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d003      	beq.n	800e0e0 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fd8b 	bl	800ebf4 <UART_EndTransmit_IT>
    return;
 800e0de:	e026      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e0e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d009      	beq.n	800e100 <HAL_UART_IRQHandler+0x574>
 800e0ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e0f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d003      	beq.n	800e100 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f001 faf3 	bl	800f6e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0fe:	e016      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d010      	beq.n	800e12e <HAL_UART_IRQHandler+0x5a2>
 800e10c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e110:	2b00      	cmp	r3, #0
 800e112:	da0c      	bge.n	800e12e <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f001 fadb 	bl	800f6d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e11a:	e008      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e11c:	bf00      	nop
 800e11e:	e006      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
    return;
 800e120:	bf00      	nop
 800e122:	e004      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e124:	bf00      	nop
 800e126:	e002      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e128:	bf00      	nop
 800e12a:	e000      	b.n	800e12e <HAL_UART_IRQHandler+0x5a2>
    return;
 800e12c:	bf00      	nop
  }
}
 800e12e:	37b8      	adds	r7, #184	; 0xb8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e178:	b094      	sub	sp, #80	; 0x50
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	4b78      	ldr	r3, [pc, #480]	; (800e36c <UART_SetConfig+0x1f8>)
 800e18a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	431a      	orrs	r2, r3
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	431a      	orrs	r2, r3
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	69db      	ldr	r3, [r3, #28]
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4971      	ldr	r1, [pc, #452]	; (800e370 <UART_SetConfig+0x1fc>)
 800e1ac:	4019      	ands	r1, r3
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1b4:	430b      	orrs	r3, r1
 800e1b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	68d9      	ldr	r1, [r3, #12]
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	ea40 0301 	orr.w	r3, r0, r1
 800e1ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	4b64      	ldr	r3, [pc, #400]	; (800e36c <UART_SetConfig+0x1f8>)
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d009      	beq.n	800e1f4 <UART_SetConfig+0x80>
 800e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	4b63      	ldr	r3, [pc, #396]	; (800e374 <UART_SetConfig+0x200>)
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d004      	beq.n	800e1f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	6a1a      	ldr	r2, [r3, #32]
 800e1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e1fe:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e208:	430b      	orrs	r3, r1
 800e20a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e212:	f023 000f 	bic.w	r0, r3, #15
 800e216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e218:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	ea40 0301 	orr.w	r3, r0, r1
 800e222:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	4b53      	ldr	r3, [pc, #332]	; (800e378 <UART_SetConfig+0x204>)
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d102      	bne.n	800e234 <UART_SetConfig+0xc0>
 800e22e:	2301      	movs	r3, #1
 800e230:	64bb      	str	r3, [r7, #72]	; 0x48
 800e232:	e066      	b.n	800e302 <UART_SetConfig+0x18e>
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	4b50      	ldr	r3, [pc, #320]	; (800e37c <UART_SetConfig+0x208>)
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d102      	bne.n	800e244 <UART_SetConfig+0xd0>
 800e23e:	2302      	movs	r3, #2
 800e240:	64bb      	str	r3, [r7, #72]	; 0x48
 800e242:	e05e      	b.n	800e302 <UART_SetConfig+0x18e>
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	4b4d      	ldr	r3, [pc, #308]	; (800e380 <UART_SetConfig+0x20c>)
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d102      	bne.n	800e254 <UART_SetConfig+0xe0>
 800e24e:	2304      	movs	r3, #4
 800e250:	64bb      	str	r3, [r7, #72]	; 0x48
 800e252:	e056      	b.n	800e302 <UART_SetConfig+0x18e>
 800e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	4b4a      	ldr	r3, [pc, #296]	; (800e384 <UART_SetConfig+0x210>)
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d102      	bne.n	800e264 <UART_SetConfig+0xf0>
 800e25e:	2308      	movs	r3, #8
 800e260:	64bb      	str	r3, [r7, #72]	; 0x48
 800e262:	e04e      	b.n	800e302 <UART_SetConfig+0x18e>
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	4b47      	ldr	r3, [pc, #284]	; (800e388 <UART_SetConfig+0x214>)
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d102      	bne.n	800e274 <UART_SetConfig+0x100>
 800e26e:	2310      	movs	r3, #16
 800e270:	64bb      	str	r3, [r7, #72]	; 0x48
 800e272:	e046      	b.n	800e302 <UART_SetConfig+0x18e>
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	4b44      	ldr	r3, [pc, #272]	; (800e38c <UART_SetConfig+0x218>)
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d102      	bne.n	800e284 <UART_SetConfig+0x110>
 800e27e:	2320      	movs	r3, #32
 800e280:	64bb      	str	r3, [r7, #72]	; 0x48
 800e282:	e03e      	b.n	800e302 <UART_SetConfig+0x18e>
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	4b41      	ldr	r3, [pc, #260]	; (800e390 <UART_SetConfig+0x21c>)
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d102      	bne.n	800e294 <UART_SetConfig+0x120>
 800e28e:	2340      	movs	r3, #64	; 0x40
 800e290:	64bb      	str	r3, [r7, #72]	; 0x48
 800e292:	e036      	b.n	800e302 <UART_SetConfig+0x18e>
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	4b3e      	ldr	r3, [pc, #248]	; (800e394 <UART_SetConfig+0x220>)
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d102      	bne.n	800e2a4 <UART_SetConfig+0x130>
 800e29e:	2380      	movs	r3, #128	; 0x80
 800e2a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2a2:	e02e      	b.n	800e302 <UART_SetConfig+0x18e>
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	4b3b      	ldr	r3, [pc, #236]	; (800e398 <UART_SetConfig+0x224>)
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d103      	bne.n	800e2b6 <UART_SetConfig+0x142>
 800e2ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2b4:	e025      	b.n	800e302 <UART_SetConfig+0x18e>
 800e2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	4b38      	ldr	r3, [pc, #224]	; (800e39c <UART_SetConfig+0x228>)
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d103      	bne.n	800e2c8 <UART_SetConfig+0x154>
 800e2c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2c6:	e01c      	b.n	800e302 <UART_SetConfig+0x18e>
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4b34      	ldr	r3, [pc, #208]	; (800e3a0 <UART_SetConfig+0x22c>)
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d103      	bne.n	800e2da <UART_SetConfig+0x166>
 800e2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2d8:	e013      	b.n	800e302 <UART_SetConfig+0x18e>
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	4b31      	ldr	r3, [pc, #196]	; (800e3a4 <UART_SetConfig+0x230>)
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d103      	bne.n	800e2ec <UART_SetConfig+0x178>
 800e2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2ea:	e00a      	b.n	800e302 <UART_SetConfig+0x18e>
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	4b1e      	ldr	r3, [pc, #120]	; (800e36c <UART_SetConfig+0x1f8>)
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d103      	bne.n	800e2fe <UART_SetConfig+0x18a>
 800e2f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2fc:	e001      	b.n	800e302 <UART_SetConfig+0x18e>
 800e2fe:	2300      	movs	r3, #0
 800e300:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	4b19      	ldr	r3, [pc, #100]	; (800e36c <UART_SetConfig+0x1f8>)
 800e308:	429a      	cmp	r2, r3
 800e30a:	d005      	beq.n	800e318 <UART_SetConfig+0x1a4>
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	4b18      	ldr	r3, [pc, #96]	; (800e374 <UART_SetConfig+0x200>)
 800e312:	429a      	cmp	r2, r3
 800e314:	f040 8094 	bne.w	800e440 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e31a:	2200      	movs	r2, #0
 800e31c:	623b      	str	r3, [r7, #32]
 800e31e:	627a      	str	r2, [r7, #36]	; 0x24
 800e320:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e324:	f7fc fa44 	bl	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e328:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f000 80f7 	beq.w	800e520 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e336:	4a1c      	ldr	r2, [pc, #112]	; (800e3a8 <UART_SetConfig+0x234>)
 800e338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e33c:	461a      	mov	r2, r3
 800e33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e340:	fbb3 f3f2 	udiv	r3, r3, r2
 800e344:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e348:	685a      	ldr	r2, [r3, #4]
 800e34a:	4613      	mov	r3, r2
 800e34c:	005b      	lsls	r3, r3, #1
 800e34e:	4413      	add	r3, r2
 800e350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e352:	429a      	cmp	r2, r3
 800e354:	d305      	bcc.n	800e362 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e35c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e35e:	429a      	cmp	r2, r3
 800e360:	d924      	bls.n	800e3ac <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800e362:	2301      	movs	r3, #1
 800e364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e368:	e069      	b.n	800e43e <UART_SetConfig+0x2ca>
 800e36a:	bf00      	nop
 800e36c:	44002400 	.word	0x44002400
 800e370:	cfff69f3 	.word	0xcfff69f3
 800e374:	54002400 	.word	0x54002400
 800e378:	40013800 	.word	0x40013800
 800e37c:	40004400 	.word	0x40004400
 800e380:	40004800 	.word	0x40004800
 800e384:	40004c00 	.word	0x40004c00
 800e388:	40005000 	.word	0x40005000
 800e38c:	40006400 	.word	0x40006400
 800e390:	40007800 	.word	0x40007800
 800e394:	40007c00 	.word	0x40007c00
 800e398:	40008000 	.word	0x40008000
 800e39c:	40006800 	.word	0x40006800
 800e3a0:	40006c00 	.word	0x40006c00
 800e3a4:	40008400 	.word	0x40008400
 800e3a8:	0801f76c 	.word	0x0801f76c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	61bb      	str	r3, [r7, #24]
 800e3b2:	61fa      	str	r2, [r7, #28]
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	4a64      	ldr	r2, [pc, #400]	; (800e54c <UART_SetConfig+0x3d8>)
 800e3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	613b      	str	r3, [r7, #16]
 800e3c4:	617a      	str	r2, [r7, #20]
 800e3c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e3ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e3ce:	f7f1 ff6f 	bl	80002b0 <__aeabi_uldivmod>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	4619      	mov	r1, r3
 800e3da:	f04f 0200 	mov.w	r2, #0
 800e3de:	f04f 0300 	mov.w	r3, #0
 800e3e2:	020b      	lsls	r3, r1, #8
 800e3e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e3e8:	0202      	lsls	r2, r0, #8
 800e3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3ec:	6849      	ldr	r1, [r1, #4]
 800e3ee:	0849      	lsrs	r1, r1, #1
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	eb12 0804 	adds.w	r8, r2, r4
 800e3fa:	eb43 0905 	adc.w	r9, r3, r5
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	60bb      	str	r3, [r7, #8]
 800e406:	60fa      	str	r2, [r7, #12]
 800e408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f1 ff4e 	bl	80002b0 <__aeabi_uldivmod>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4613      	mov	r3, r2
 800e41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e422:	d308      	bcc.n	800e436 <UART_SetConfig+0x2c2>
 800e424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e42a:	d204      	bcs.n	800e436 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e432:	60da      	str	r2, [r3, #12]
 800e434:	e003      	b.n	800e43e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800e436:	2301      	movs	r3, #1
 800e438:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800e43c:	e070      	b.n	800e520 <UART_SetConfig+0x3ac>
 800e43e:	e06f      	b.n	800e520 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	69db      	ldr	r3, [r3, #28]
 800e444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e448:	d13c      	bne.n	800e4c4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e44a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e44c:	2200      	movs	r2, #0
 800e44e:	603b      	str	r3, [r7, #0]
 800e450:	607a      	str	r2, [r7, #4]
 800e452:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e456:	f7fc f9ab 	bl	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e45a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d05e      	beq.n	800e520 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e466:	4a39      	ldr	r2, [pc, #228]	; (800e54c <UART_SetConfig+0x3d8>)
 800e468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e46c:	461a      	mov	r2, r3
 800e46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e470:	fbb3 f3f2 	udiv	r3, r3, r2
 800e474:	005a      	lsls	r2, r3, #1
 800e476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	085b      	lsrs	r3, r3, #1
 800e47c:	441a      	add	r2, r3
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	fbb2 f3f3 	udiv	r3, r2, r3
 800e486:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48a:	2b0f      	cmp	r3, #15
 800e48c:	d916      	bls.n	800e4bc <UART_SetConfig+0x348>
 800e48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e494:	d212      	bcs.n	800e4bc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e498:	b29b      	uxth	r3, r3
 800e49a:	f023 030f 	bic.w	r3, r3, #15
 800e49e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a2:	085b      	lsrs	r3, r3, #1
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	f003 0307 	and.w	r3, r3, #7
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800e4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4b8:	60da      	str	r2, [r3, #12]
 800e4ba:	e031      	b.n	800e520 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e4c2:	e02d      	b.n	800e520 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	469a      	mov	sl, r3
 800e4ca:	4693      	mov	fp, r2
 800e4cc:	4650      	mov	r0, sl
 800e4ce:	4659      	mov	r1, fp
 800e4d0:	f7fc f96e 	bl	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e4d4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800e4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d021      	beq.n	800e520 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e0:	4a1a      	ldr	r2, [pc, #104]	; (800e54c <UART_SetConfig+0x3d8>)
 800e4e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	085b      	lsrs	r3, r3, #1
 800e4f4:	441a      	add	r2, r3
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e502:	2b0f      	cmp	r3, #15
 800e504:	d909      	bls.n	800e51a <UART_SetConfig+0x3a6>
 800e506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e50c:	d205      	bcs.n	800e51a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e510:	b29a      	uxth	r2, r3
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	60da      	str	r2, [r3, #12]
 800e518:	e002      	b.n	800e520 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	2201      	movs	r2, #1
 800e524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	2201      	movs	r2, #1
 800e52c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	2200      	movs	r2, #0
 800e534:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e538:	2200      	movs	r2, #0
 800e53a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e53c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e540:	4618      	mov	r0, r3
 800e542:	3750      	adds	r7, #80	; 0x50
 800e544:	46bd      	mov	sp, r7
 800e546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e54a:	bf00      	nop
 800e54c:	0801f76c 	.word	0x0801f76c

0800e550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e55c:	f003 0308 	and.w	r3, r3, #8
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00a      	beq.n	800e57a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	430a      	orrs	r2, r1
 800e578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00a      	beq.n	800e59c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	430a      	orrs	r2, r1
 800e59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a0:	f003 0302 	and.w	r3, r3, #2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00a      	beq.n	800e5be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	430a      	orrs	r2, r1
 800e5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c2:	f003 0304 	and.w	r3, r3, #4
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00a      	beq.n	800e5e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	430a      	orrs	r2, r1
 800e5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e4:	f003 0310 	and.w	r3, r3, #16
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00a      	beq.n	800e602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	430a      	orrs	r2, r1
 800e600:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e606:	f003 0320 	and.w	r3, r3, #32
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00a      	beq.n	800e624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	430a      	orrs	r2, r1
 800e622:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d01a      	beq.n	800e666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	430a      	orrs	r2, r1
 800e644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e64a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e64e:	d10a      	bne.n	800e666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	430a      	orrs	r2, r1
 800e664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00a      	beq.n	800e688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	430a      	orrs	r2, r1
 800e686:	605a      	str	r2, [r3, #4]
  }
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b098      	sub	sp, #96	; 0x60
 800e698:	af02      	add	r7, sp, #8
 800e69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6a4:	f7f5 fb2c 	bl	8003d00 <HAL_GetTick>
 800e6a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f003 0308 	and.w	r3, r3, #8
 800e6b4:	2b08      	cmp	r3, #8
 800e6b6:	d12f      	bne.n	800e718 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f88e 	bl	800e7e8 <UART_WaitOnFlagUntilTimeout>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d022      	beq.n	800e718 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	e853 3f00 	ldrex	r3, [r3]
 800e6de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6e6:	653b      	str	r3, [r7, #80]	; 0x50
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f0:	647b      	str	r3, [r7, #68]	; 0x44
 800e6f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6f8:	e841 2300 	strex	r3, r2, [r1]
 800e6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1e6      	bne.n	800e6d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2220      	movs	r2, #32
 800e708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e714:	2303      	movs	r3, #3
 800e716:	e063      	b.n	800e7e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 0304 	and.w	r3, r3, #4
 800e722:	2b04      	cmp	r3, #4
 800e724:	d149      	bne.n	800e7ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e726:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e72e:	2200      	movs	r2, #0
 800e730:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 f857 	bl	800e7e8 <UART_WaitOnFlagUntilTimeout>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d03c      	beq.n	800e7ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	623b      	str	r3, [r7, #32]
   return(result);
 800e74e:	6a3b      	ldr	r3, [r7, #32]
 800e750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e754:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e75e:	633b      	str	r3, [r7, #48]	; 0x30
 800e760:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e766:	e841 2300 	strex	r3, r2, [r1]
 800e76a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e6      	bne.n	800e740 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3308      	adds	r3, #8
 800e778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	e853 3f00 	ldrex	r3, [r3]
 800e780:	60fb      	str	r3, [r7, #12]
   return(result);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f023 0301 	bic.w	r3, r3, #1
 800e788:	64bb      	str	r3, [r7, #72]	; 0x48
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3308      	adds	r3, #8
 800e790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e792:	61fa      	str	r2, [r7, #28]
 800e794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e796:	69b9      	ldr	r1, [r7, #24]
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	617b      	str	r3, [r7, #20]
   return(result);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1e5      	bne.n	800e772 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e012      	b.n	800e7e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2220      	movs	r2, #32
 800e7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3758      	adds	r7, #88	; 0x58
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	603b      	str	r3, [r7, #0]
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7f8:	e049      	b.n	800e88e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e800:	d045      	beq.n	800e88e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e802:	f7f5 fa7d 	bl	8003d00 <HAL_GetTick>
 800e806:	4602      	mov	r2, r0
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	69ba      	ldr	r2, [r7, #24]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d302      	bcc.n	800e818 <UART_WaitOnFlagUntilTimeout+0x30>
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d101      	bne.n	800e81c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e818:	2303      	movs	r3, #3
 800e81a:	e048      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f003 0304 	and.w	r3, r3, #4
 800e826:	2b00      	cmp	r3, #0
 800e828:	d031      	beq.n	800e88e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	f003 0308 	and.w	r3, r3, #8
 800e834:	2b08      	cmp	r3, #8
 800e836:	d110      	bne.n	800e85a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2208      	movs	r2, #8
 800e83e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 f95b 	bl	800eafc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2208      	movs	r2, #8
 800e84a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e029      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	69db      	ldr	r3, [r3, #28]
 800e860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e868:	d111      	bne.n	800e88e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f941 	bl	800eafc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2220      	movs	r2, #32
 800e87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e88a:	2303      	movs	r3, #3
 800e88c:	e00f      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	69da      	ldr	r2, [r3, #28]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	4013      	ands	r3, r2
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	bf0c      	ite	eq
 800e89e:	2301      	moveq	r3, #1
 800e8a0:	2300      	movne	r3, #0
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d0a6      	beq.n	800e7fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b0a3      	sub	sp, #140	; 0x8c
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	88fa      	ldrh	r2, [r7, #6]
 800e8d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	88fa      	ldrh	r2, [r7, #6]
 800e8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ea:	d10e      	bne.n	800e90a <UART_Start_Receive_IT+0x52>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d105      	bne.n	800e900 <UART_Start_Receive_IT+0x48>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e8fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e8fe:	e02d      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	22ff      	movs	r2, #255	; 0xff
 800e904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e908:	e028      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10d      	bne.n	800e92e <UART_Start_Receive_IT+0x76>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <UART_Start_Receive_IT+0x6c>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	22ff      	movs	r2, #255	; 0xff
 800e91e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e922:	e01b      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	227f      	movs	r2, #127	; 0x7f
 800e928:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e92c:	e016      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e936:	d10d      	bne.n	800e954 <UART_Start_Receive_IT+0x9c>
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d104      	bne.n	800e94a <UART_Start_Receive_IT+0x92>
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	227f      	movs	r2, #127	; 0x7f
 800e944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e948:	e008      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	223f      	movs	r2, #63	; 0x3f
 800e94e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e952:	e003      	b.n	800e95c <UART_Start_Receive_IT+0xa4>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2222      	movs	r2, #34	; 0x22
 800e968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e976:	e853 3f00 	ldrex	r3, [r3]
 800e97a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e97c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3308      	adds	r3, #8
 800e98c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e990:	673a      	str	r2, [r7, #112]	; 0x70
 800e992:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e994:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e996:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e998:	e841 2300 	strex	r3, r2, [r1]
 800e99c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e99e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e3      	bne.n	800e96c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9ac:	d14f      	bne.n	800ea4e <UART_Start_Receive_IT+0x196>
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9b4:	88fa      	ldrh	r2, [r7, #6]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d349      	bcc.n	800ea4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9c2:	d107      	bne.n	800e9d4 <UART_Start_Receive_IT+0x11c>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d103      	bne.n	800e9d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4a47      	ldr	r2, [pc, #284]	; (800eaec <UART_Start_Receive_IT+0x234>)
 800e9d0:	675a      	str	r2, [r3, #116]	; 0x74
 800e9d2:	e002      	b.n	800e9da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	4a46      	ldr	r2, [pc, #280]	; (800eaf0 <UART_Start_Receive_IT+0x238>)
 800e9d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	691b      	ldr	r3, [r3, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d01a      	beq.n	800ea18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea04:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea06:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ea12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e4      	bne.n	800e9e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	e853 3f00 	ldrex	r3, [r3]
 800ea26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3308      	adds	r3, #8
 800ea36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ea38:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea40:	e841 2300 	strex	r3, r2, [r1]
 800ea44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1e5      	bne.n	800ea18 <UART_Start_Receive_IT+0x160>
 800ea4c:	e046      	b.n	800eadc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea56:	d107      	bne.n	800ea68 <UART_Start_Receive_IT+0x1b0>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d103      	bne.n	800ea68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4a24      	ldr	r2, [pc, #144]	; (800eaf4 <UART_Start_Receive_IT+0x23c>)
 800ea64:	675a      	str	r2, [r3, #116]	; 0x74
 800ea66:	e002      	b.n	800ea6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4a23      	ldr	r2, [pc, #140]	; (800eaf8 <UART_Start_Receive_IT+0x240>)
 800ea6c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d019      	beq.n	800eaaa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7e:	e853 3f00 	ldrex	r3, [r3]
 800ea82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ea8a:	677b      	str	r3, [r7, #116]	; 0x74
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	461a      	mov	r2, r3
 800ea92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34
 800ea96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea9c:	e841 2300 	strex	r3, r2, [r1]
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e6      	bne.n	800ea76 <UART_Start_Receive_IT+0x1be>
 800eaa8:	e018      	b.n	800eadc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	e853 3f00 	ldrex	r3, [r3]
 800eab6:	613b      	str	r3, [r7, #16]
   return(result);
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	f043 0320 	orr.w	r3, r3, #32
 800eabe:	67bb      	str	r3, [r7, #120]	; 0x78
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	461a      	mov	r2, r3
 800eac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eac8:	623b      	str	r3, [r7, #32]
 800eaca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eacc:	69f9      	ldr	r1, [r7, #28]
 800eace:	6a3a      	ldr	r2, [r7, #32]
 800ead0:	e841 2300 	strex	r3, r2, [r1]
 800ead4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1e6      	bne.n	800eaaa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	378c      	adds	r7, #140	; 0x8c
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	0800f345 	.word	0x0800f345
 800eaf0:	0800efd5 	.word	0x0800efd5
 800eaf4:	0800ee11 	.word	0x0800ee11
 800eaf8:	0800ec4d 	.word	0x0800ec4d

0800eafc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b095      	sub	sp, #84	; 0x54
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0c:	e853 3f00 	ldrex	r3, [r3]
 800eb10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb22:	643b      	str	r3, [r7, #64]	; 0x40
 800eb24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb2a:	e841 2300 	strex	r3, r2, [r1]
 800eb2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e6      	bne.n	800eb04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3308      	adds	r3, #8
 800eb3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3e:	6a3b      	ldr	r3, [r7, #32]
 800eb40:	e853 3f00 	ldrex	r3, [r3]
 800eb44:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb4c:	f023 0301 	bic.w	r3, r3, #1
 800eb50:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	3308      	adds	r3, #8
 800eb58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb62:	e841 2300 	strex	r3, r2, [r1]
 800eb66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d1e3      	bne.n	800eb36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d118      	bne.n	800eba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	e853 3f00 	ldrex	r3, [r3]
 800eb82:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	f023 0310 	bic.w	r3, r3, #16
 800eb8a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	461a      	mov	r2, r3
 800eb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb94:	61bb      	str	r3, [r7, #24]
 800eb96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb98:	6979      	ldr	r1, [r7, #20]
 800eb9a:	69ba      	ldr	r2, [r7, #24]
 800eb9c:	e841 2300 	strex	r3, r2, [r1]
 800eba0:	613b      	str	r3, [r7, #16]
   return(result);
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1e6      	bne.n	800eb76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2220      	movs	r2, #32
 800ebac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ebbc:	bf00      	nop
 800ebbe:	3754      	adds	r7, #84	; 0x54
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7ff faae 	bl	800e148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebec:	bf00      	nop
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	e853 3f00 	ldrex	r3, [r3]
 800ec08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	6979      	ldr	r1, [r7, #20]
 800ec20:	69ba      	ldr	r2, [r7, #24]
 800ec22:	e841 2300 	strex	r3, r2, [r1]
 800ec26:	613b      	str	r3, [r7, #16]
   return(result);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e6      	bne.n	800ebfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7ff fa79 	bl	800e134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec42:	bf00      	nop
 800ec44:	3720      	adds	r7, #32
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b09c      	sub	sp, #112	; 0x70
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec64:	2b22      	cmp	r3, #34	; 0x22
 800ec66:	f040 80c3 	bne.w	800edf0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ec74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ec78:	b2d9      	uxtb	r1, r3
 800ec7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec84:	400a      	ands	r2, r1
 800ec86:	b2d2      	uxtb	r2, r2
 800ec88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec8e:	1c5a      	adds	r2, r3, #1
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f040 80a6 	bne.w	800ee00 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecbc:	e853 3f00 	ldrex	r3, [r3]
 800ecc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ecc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ecd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ecd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecda:	e841 2300 	strex	r3, r2, [r1]
 800ecde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ece0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e6      	bne.n	800ecb4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3308      	adds	r3, #8
 800ecec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf0:	e853 3f00 	ldrex	r3, [r3]
 800ecf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf8:	f023 0301 	bic.w	r3, r3, #1
 800ecfc:	667b      	str	r3, [r7, #100]	; 0x64
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3308      	adds	r3, #8
 800ed04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed06:	647a      	str	r2, [r7, #68]	; 0x44
 800ed08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed0e:	e841 2300 	strex	r3, r2, [r1]
 800ed12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e5      	bne.n	800ece6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4a35      	ldr	r2, [pc, #212]	; (800ee08 <UART_RxISR_8BIT+0x1bc>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d024      	beq.n	800ed82 <UART_RxISR_8BIT+0x136>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a33      	ldr	r2, [pc, #204]	; (800ee0c <UART_RxISR_8BIT+0x1c0>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d01f      	beq.n	800ed82 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d018      	beq.n	800ed82 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed58:	e853 3f00 	ldrex	r3, [r3]
 800ed5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed5e:	6a3b      	ldr	r3, [r7, #32]
 800ed60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ed64:	663b      	str	r3, [r7, #96]	; 0x60
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ed70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed76:	e841 2300 	strex	r3, r2, [r1]
 800ed7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1e6      	bne.n	800ed50 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d12e      	bne.n	800ede8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f023 0310 	bic.w	r3, r3, #16
 800eda4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edae:	61fb      	str	r3, [r7, #28]
 800edb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb2:	69b9      	ldr	r1, [r7, #24]
 800edb4:	69fa      	ldr	r2, [r7, #28]
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	617b      	str	r3, [r7, #20]
   return(result);
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e6      	bne.n	800ed90 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	69db      	ldr	r3, [r3, #28]
 800edc8:	f003 0310 	and.w	r3, r3, #16
 800edcc:	2b10      	cmp	r3, #16
 800edce:	d103      	bne.n	800edd8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2210      	movs	r2, #16
 800edd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff f9bb 	bl	800e15c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ede6:	e00b      	b.n	800ee00 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7f4 fe53 	bl	8003a94 <HAL_UART_RxCpltCallback>
}
 800edee:	e007      	b.n	800ee00 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	699a      	ldr	r2, [r3, #24]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f042 0208 	orr.w	r2, r2, #8
 800edfe:	619a      	str	r2, [r3, #24]
}
 800ee00:	bf00      	nop
 800ee02:	3770      	adds	r7, #112	; 0x70
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	44002400 	.word	0x44002400
 800ee0c:	54002400 	.word	0x54002400

0800ee10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b09c      	sub	sp, #112	; 0x70
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee28:	2b22      	cmp	r3, #34	; 0x22
 800ee2a:	f040 80c3 	bne.w	800efb4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee3c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ee3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ee42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ee46:	4013      	ands	r3, r2
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee52:	1c9a      	adds	r2, r3, #2
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	3b01      	subs	r3, #1
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f040 80a6 	bne.w	800efc4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee80:	e853 3f00 	ldrex	r3, [r3]
 800ee84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ee86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee8c:	667b      	str	r3, [r7, #100]	; 0x64
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee96:	657b      	str	r3, [r7, #84]	; 0x54
 800ee98:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee9e:	e841 2300 	strex	r3, r2, [r1]
 800eea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1e6      	bne.n	800ee78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb4:	e853 3f00 	ldrex	r3, [r3]
 800eeb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebc:	f023 0301 	bic.w	r3, r3, #1
 800eec0:	663b      	str	r3, [r7, #96]	; 0x60
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	3308      	adds	r3, #8
 800eec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eeca:	643a      	str	r2, [r7, #64]	; 0x40
 800eecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eece:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eed2:	e841 2300 	strex	r3, r2, [r1]
 800eed6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1e5      	bne.n	800eeaa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2220      	movs	r2, #32
 800eee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a35      	ldr	r2, [pc, #212]	; (800efcc <UART_RxISR_16BIT+0x1bc>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d024      	beq.n	800ef46 <UART_RxISR_16BIT+0x136>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a33      	ldr	r2, [pc, #204]	; (800efd0 <UART_RxISR_16BIT+0x1c0>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d01f      	beq.n	800ef46 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d018      	beq.n	800ef46 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	6a3b      	ldr	r3, [r7, #32]
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef34:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e6      	bne.n	800ef14 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d12e      	bne.n	800efac <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	e853 3f00 	ldrex	r3, [r3]
 800ef60:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	f023 0310 	bic.w	r3, r3, #16
 800ef68:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef72:	61bb      	str	r3, [r7, #24]
 800ef74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef76:	6979      	ldr	r1, [r7, #20]
 800ef78:	69ba      	ldr	r2, [r7, #24]
 800ef7a:	e841 2300 	strex	r3, r2, [r1]
 800ef7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1e6      	bne.n	800ef54 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	f003 0310 	and.w	r3, r3, #16
 800ef90:	2b10      	cmp	r3, #16
 800ef92:	d103      	bne.n	800ef9c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2210      	movs	r2, #16
 800ef9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff f8d9 	bl	800e15c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efaa:	e00b      	b.n	800efc4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f4 fd71 	bl	8003a94 <HAL_UART_RxCpltCallback>
}
 800efb2:	e007      	b.n	800efc4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0208 	orr.w	r2, r2, #8
 800efc2:	619a      	str	r2, [r3, #24]
}
 800efc4:	bf00      	nop
 800efc6:	3770      	adds	r7, #112	; 0x70
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	44002400 	.word	0x44002400
 800efd0:	54002400 	.word	0x54002400

0800efd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b0ac      	sub	sp, #176	; 0xb0
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efe2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	69db      	ldr	r3, [r3, #28]
 800efec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	689b      	ldr	r3, [r3, #8]
 800f000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f00a:	2b22      	cmp	r3, #34	; 0x22
 800f00c:	f040 8187 	bne.w	800f31e <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f016:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f01a:	e12a      	b.n	800f272 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f022:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f026:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f02a:	b2d9      	uxtb	r1, r3
 800f02c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f030:	b2da      	uxtb	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f036:	400a      	ands	r2, r1
 800f038:	b2d2      	uxtb	r2, r2
 800f03a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f040:	1c5a      	adds	r2, r3, #1
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	3b01      	subs	r3, #1
 800f050:	b29a      	uxth	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	69db      	ldr	r3, [r3, #28]
 800f05e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d053      	beq.n	800f116 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	d011      	beq.n	800f09e <UART_RxISR_8BIT_FIFOEN+0xca>
 800f07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00b      	beq.n	800f09e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2201      	movs	r2, #1
 800f08c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f094:	f043 0201 	orr.w	r2, r3, #1
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d011      	beq.n	800f0ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0ae:	f003 0301 	and.w	r3, r3, #1
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0c4:	f043 0204 	orr.w	r2, r3, #4
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0d2:	f003 0304 	and.w	r3, r3, #4
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d011      	beq.n	800f0fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00b      	beq.n	800f0fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2204      	movs	r2, #4
 800f0ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0f4:	f043 0202 	orr.w	r2, r3, #2
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f104:	2b00      	cmp	r3, #0
 800f106:	d006      	beq.n	800f116 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7ff f81d 	bl	800e148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f040 80a7 	bne.w	800f272 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f12c:	e853 3f00 	ldrex	r3, [r3]
 800f130:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	461a      	mov	r2, r3
 800f142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f146:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f148:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f14c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f14e:	e841 2300 	strex	r3, r2, [r1]
 800f152:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f156:	2b00      	cmp	r3, #0
 800f158:	d1e4      	bne.n	800f124 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3308      	adds	r3, #8
 800f160:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f164:	e853 3f00 	ldrex	r3, [r3]
 800f168:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f16a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f170:	f023 0301 	bic.w	r3, r3, #1
 800f174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	3308      	adds	r3, #8
 800f17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f182:	66ba      	str	r2, [r7, #104]	; 0x68
 800f184:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f186:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f188:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f18a:	e841 2300 	strex	r3, r2, [r1]
 800f18e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1e1      	bne.n	800f15a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2220      	movs	r2, #32
 800f19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4a62      	ldr	r2, [pc, #392]	; (800f338 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d026      	beq.n	800f202 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a60      	ldr	r2, [pc, #384]	; (800f33c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d021      	beq.n	800f202 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d01a      	beq.n	800f202 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1d4:	e853 3f00 	ldrex	r3, [r3]
 800f1d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f1e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1ee:	657b      	str	r3, [r7, #84]	; 0x54
 800f1f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f1f6:	e841 2300 	strex	r3, r2, [r1]
 800f1fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1e4      	bne.n	800f1cc <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f206:	2b01      	cmp	r3, #1
 800f208:	d130      	bne.n	800f26c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f218:	e853 3f00 	ldrex	r3, [r3]
 800f21c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f220:	f023 0310 	bic.w	r3, r3, #16
 800f224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	461a      	mov	r2, r3
 800f22e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f232:	643b      	str	r3, [r7, #64]	; 0x40
 800f234:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f23a:	e841 2300 	strex	r3, r2, [r1]
 800f23e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e4      	bne.n	800f210 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	69db      	ldr	r3, [r3, #28]
 800f24c:	f003 0310 	and.w	r3, r3, #16
 800f250:	2b10      	cmp	r3, #16
 800f252:	d103      	bne.n	800f25c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2210      	movs	r2, #16
 800f25a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fe ff79 	bl	800e15c <HAL_UARTEx_RxEventCallback>
 800f26a:	e002      	b.n	800f272 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7f4 fc11 	bl	8003a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f272:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f276:	2b00      	cmp	r3, #0
 800f278:	d006      	beq.n	800f288 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800f27a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f27e:	f003 0320 	and.w	r3, r3, #32
 800f282:	2b00      	cmp	r3, #0
 800f284:	f47f aeca 	bne.w	800f01c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f28e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f296:	2b00      	cmp	r3, #0
 800f298:	d049      	beq.n	800f32e <UART_RxISR_8BIT_FIFOEN+0x35a>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f2a0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d242      	bcs.n	800f32e <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3308      	adds	r3, #8
 800f2ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b0:	6a3b      	ldr	r3, [r7, #32]
 800f2b2:	e853 3f00 	ldrex	r3, [r3]
 800f2b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f2be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f2cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2d4:	e841 2300 	strex	r3, r2, [r1]
 800f2d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1e3      	bne.n	800f2a8 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a17      	ldr	r2, [pc, #92]	; (800f340 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800f2e4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	e853 3f00 	ldrex	r3, [r3]
 800f2f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	f043 0320 	orr.w	r3, r3, #32
 800f2fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	461a      	mov	r2, r3
 800f304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f308:	61bb      	str	r3, [r7, #24]
 800f30a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30c:	6979      	ldr	r1, [r7, #20]
 800f30e:	69ba      	ldr	r2, [r7, #24]
 800f310:	e841 2300 	strex	r3, r2, [r1]
 800f314:	613b      	str	r3, [r7, #16]
   return(result);
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1e4      	bne.n	800f2e6 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f31c:	e007      	b.n	800f32e <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	699a      	ldr	r2, [r3, #24]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f042 0208 	orr.w	r2, r2, #8
 800f32c:	619a      	str	r2, [r3, #24]
}
 800f32e:	bf00      	nop
 800f330:	37b0      	adds	r7, #176	; 0xb0
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	44002400 	.word	0x44002400
 800f33c:	54002400 	.word	0x54002400
 800f340:	0800ec4d 	.word	0x0800ec4d

0800f344 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b0ae      	sub	sp, #184	; 0xb8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f352:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	69db      	ldr	r3, [r3, #28]
 800f35c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f37a:	2b22      	cmp	r3, #34	; 0x22
 800f37c:	f040 818b 	bne.w	800f696 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f386:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f38a:	e12e      	b.n	800f5ea <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f392:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f39a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f39e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f3a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b4:	1c9a      	adds	r2, r3, #2
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	69db      	ldr	r3, [r3, #28]
 800f3d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f3da:	f003 0307 	and.w	r3, r3, #7
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d053      	beq.n	800f48a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f3e6:	f003 0301 	and.w	r3, r3, #1
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d011      	beq.n	800f412 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00b      	beq.n	800f412 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2201      	movs	r2, #1
 800f400:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f408:	f043 0201 	orr.w	r2, r3, #1
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f416:	f003 0302 	and.w	r3, r3, #2
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d011      	beq.n	800f442 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f41e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f422:	f003 0301 	and.w	r3, r3, #1
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00b      	beq.n	800f442 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2202      	movs	r2, #2
 800f430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f438:	f043 0204 	orr.w	r2, r3, #4
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f446:	f003 0304 	and.w	r3, r3, #4
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d011      	beq.n	800f472 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f44e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00b      	beq.n	800f472 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2204      	movs	r2, #4
 800f460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f468:	f043 0202 	orr.w	r2, r3, #2
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d006      	beq.n	800f48a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7fe fe63 	bl	800e148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f490:	b29b      	uxth	r3, r3
 800f492:	2b00      	cmp	r3, #0
 800f494:	f040 80a9 	bne.w	800f5ea <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f49e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4a0:	e853 3f00 	ldrex	r3, [r3]
 800f4a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f4a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f4ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f4c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f4c6:	e841 2300 	strex	r3, r2, [r1]
 800f4ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f4cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1e2      	bne.n	800f498 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3308      	adds	r3, #8
 800f4d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4dc:	e853 3f00 	ldrex	r3, [r3]
 800f4e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f4e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4e8:	f023 0301 	bic.w	r3, r3, #1
 800f4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f4fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f4fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f502:	e841 2300 	strex	r3, r2, [r1]
 800f506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1e1      	bne.n	800f4d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2220      	movs	r2, #32
 800f512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4a62      	ldr	r2, [pc, #392]	; (800f6b0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d026      	beq.n	800f57a <UART_RxISR_16BIT_FIFOEN+0x236>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a60      	ldr	r2, [pc, #384]	; (800f6b4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d021      	beq.n	800f57a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f540:	2b00      	cmp	r3, #0
 800f542:	d01a      	beq.n	800f57a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f54c:	e853 3f00 	ldrex	r3, [r3]
 800f550:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f554:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	461a      	mov	r2, r3
 800f562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f566:	65bb      	str	r3, [r7, #88]	; 0x58
 800f568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f56c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f56e:	e841 2300 	strex	r3, r2, [r1]
 800f572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1e4      	bne.n	800f544 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d130      	bne.n	800f5e4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	e853 3f00 	ldrex	r3, [r3]
 800f594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f598:	f023 0310 	bic.w	r3, r3, #16
 800f59c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f5ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5b2:	e841 2300 	strex	r3, r2, [r1]
 800f5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1e4      	bne.n	800f588 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	69db      	ldr	r3, [r3, #28]
 800f5c4:	f003 0310 	and.w	r3, r3, #16
 800f5c8:	2b10      	cmp	r3, #16
 800f5ca:	d103      	bne.n	800f5d4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2210      	movs	r2, #16
 800f5d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5da:	4619      	mov	r1, r3
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7fe fdbd 	bl	800e15c <HAL_UARTEx_RxEventCallback>
 800f5e2:	e002      	b.n	800f5ea <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7f4 fa55 	bl	8003a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d006      	beq.n	800f600 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800f5f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f5f6:	f003 0320 	and.w	r3, r3, #32
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f47f aec6 	bne.w	800f38c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f606:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f60a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d049      	beq.n	800f6a6 <UART_RxISR_16BIT_FIFOEN+0x362>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f618:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d242      	bcs.n	800f6a6 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	3308      	adds	r3, #8
 800f626:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	e853 3f00 	ldrex	r3, [r3]
 800f62e:	623b      	str	r3, [r7, #32]
   return(result);
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3308      	adds	r3, #8
 800f640:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f644:	633a      	str	r2, [r7, #48]	; 0x30
 800f646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f64a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f64c:	e841 2300 	strex	r3, r2, [r1]
 800f650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	2b00      	cmp	r3, #0
 800f656:	d1e3      	bne.n	800f620 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a17      	ldr	r2, [pc, #92]	; (800f6b8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800f65c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	e853 3f00 	ldrex	r3, [r3]
 800f66a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f043 0320 	orr.w	r3, r3, #32
 800f672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f680:	61fb      	str	r3, [r7, #28]
 800f682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f684:	69b9      	ldr	r1, [r7, #24]
 800f686:	69fa      	ldr	r2, [r7, #28]
 800f688:	e841 2300 	strex	r3, r2, [r1]
 800f68c:	617b      	str	r3, [r7, #20]
   return(result);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e4      	bne.n	800f65e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f694:	e007      	b.n	800f6a6 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	699a      	ldr	r2, [r3, #24]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f042 0208 	orr.w	r2, r2, #8
 800f6a4:	619a      	str	r2, [r3, #24]
}
 800f6a6:	bf00      	nop
 800f6a8:	37b8      	adds	r7, #184	; 0xb8
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	44002400 	.word	0x44002400
 800f6b4:	54002400 	.word	0x54002400
 800f6b8:	0800ee11 	.word	0x0800ee11

0800f6bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f706:	2b01      	cmp	r3, #1
 800f708:	d101      	bne.n	800f70e <HAL_UARTEx_DisableFifoMode+0x16>
 800f70a:	2302      	movs	r3, #2
 800f70c:	e027      	b.n	800f75e <HAL_UARTEx_DisableFifoMode+0x66>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2201      	movs	r2, #1
 800f712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2224      	movs	r2, #36	; 0x24
 800f71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 0201 	bic.w	r2, r2, #1
 800f734:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f73c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2220      	movs	r2, #32
 800f750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3714      	adds	r7, #20
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr

0800f76a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d101      	bne.n	800f782 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f77e:	2302      	movs	r3, #2
 800f780:	e02d      	b.n	800f7de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2201      	movs	r2, #1
 800f786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2224      	movs	r2, #36	; 0x24
 800f78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f022 0201 	bic.w	r2, r2, #1
 800f7a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	430a      	orrs	r2, r1
 800f7bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 f850 	bl	800f864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d101      	bne.n	800f7fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	e02d      	b.n	800f85a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2201      	movs	r2, #1
 800f802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2224      	movs	r2, #36	; 0x24
 800f80a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f022 0201 	bic.w	r2, r2, #1
 800f824:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	683a      	ldr	r2, [r7, #0]
 800f836:	430a      	orrs	r2, r1
 800f838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f812 	bl	800f864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2220      	movs	r2, #32
 800f84c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
	...

0800f864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f870:	2b00      	cmp	r3, #0
 800f872:	d108      	bne.n	800f886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f884:	e031      	b.n	800f8ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f886:	2308      	movs	r3, #8
 800f888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f88a:	2308      	movs	r3, #8
 800f88c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	0e5b      	lsrs	r3, r3, #25
 800f896:	b2db      	uxtb	r3, r3
 800f898:	f003 0307 	and.w	r3, r3, #7
 800f89c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	0f5b      	lsrs	r3, r3, #29
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	f003 0307 	and.w	r3, r3, #7
 800f8ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ae:	7bbb      	ldrb	r3, [r7, #14]
 800f8b0:	7b3a      	ldrb	r2, [r7, #12]
 800f8b2:	4911      	ldr	r1, [pc, #68]	; (800f8f8 <UARTEx_SetNbDataToProcess+0x94>)
 800f8b4:	5c8a      	ldrb	r2, [r1, r2]
 800f8b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8ba:	7b3a      	ldrb	r2, [r7, #12]
 800f8bc:	490f      	ldr	r1, [pc, #60]	; (800f8fc <UARTEx_SetNbDataToProcess+0x98>)
 800f8be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
 800f8ce:	7b7a      	ldrb	r2, [r7, #13]
 800f8d0:	4909      	ldr	r1, [pc, #36]	; (800f8f8 <UARTEx_SetNbDataToProcess+0x94>)
 800f8d2:	5c8a      	ldrb	r2, [r1, r2]
 800f8d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8d8:	7b7a      	ldrb	r2, [r7, #13]
 800f8da:	4908      	ldr	r1, [pc, #32]	; (800f8fc <UARTEx_SetNbDataToProcess+0x98>)
 800f8dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8de:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8e2:	b29a      	uxth	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f8ea:	bf00      	nop
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	0801f784 	.word	0x0801f784
 800f8fc:	0801f78c 	.word	0x0801f78c

0800f900 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800f90e:	2301      	movs	r3, #1
 800f910:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2200      	movs	r2, #0
 800f91c:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	611a      	str	r2, [r3, #16]

  return ret;
 800f930:	697b      	ldr	r3, [r7, #20]
}
 800f932:	4618      	mov	r0, r3
 800f934:	371c      	adds	r7, #28
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr

0800f93e <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800f93e:	b480      	push	{r7}
 800f940:	b08b      	sub	sp, #44	; 0x2c
 800f942:	af00      	add	r7, sp, #0
 800f944:	60f8      	str	r0, [r7, #12]
 800f946:	60b9      	str	r1, [r7, #8]
 800f948:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800f94a:	2301      	movs	r3, #1
 800f94c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800f94e:	2300      	movs	r3, #0
 800f950:	623b      	str	r3, [r7, #32]
 800f952:	e042      	b.n	800f9da <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	3301      	adds	r3, #1
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	6892      	ldr	r2, [r2, #8]
 800f95e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f962:	fb01 f202 	mul.w	r2, r1, r2
 800f966:	1a9b      	subs	r3, r3, r2
 800f968:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	69ba      	ldr	r2, [r7, #24]
 800f970:	429a      	cmp	r2, r3
 800f972:	d02c      	beq.n	800f9ce <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d024      	beq.n	800f9c6 <qbufferWrite+0x88>
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d021      	beq.n	800f9c6 <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	691a      	ldr	r2, [r3, #16]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	68f9      	ldr	r1, [r7, #12]
 800f98c:	68c9      	ldr	r1, [r1, #12]
 800f98e:	fb01 f303 	mul.w	r3, r1, r3
 800f992:	4413      	add	r3, r2
 800f994:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800f996:	2300      	movs	r3, #0
 800f998:	61fb      	str	r3, [r7, #28]
 800f99a:	e00a      	b.n	800f9b2 <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	68ba      	ldr	r2, [r7, #8]
 800f9a0:	441a      	add	r2, r3
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	6979      	ldr	r1, [r7, #20]
 800f9a6:	440b      	add	r3, r1
 800f9a8:	7812      	ldrb	r2, [r2, #0]
 800f9aa:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	61fb      	str	r3, [r7, #28]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	68da      	ldr	r2, [r3, #12]
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d8ef      	bhi.n	800f99c <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	69ba      	ldr	r2, [r7, #24]
 800f9ca:	601a      	str	r2, [r3, #0]
 800f9cc:	e002      	b.n	800f9d4 <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f9d2:	e006      	b.n	800f9e2 <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	623b      	str	r3, [r7, #32]
 800f9da:	6a3b      	ldr	r3, [r7, #32]
 800f9dc:	687a      	ldr	r2, [r7, #4]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d8b8      	bhi.n	800f954 <qbufferWrite+0x16>
    }
  }

  return ret;
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	372c      	adds	r7, #44	; 0x2c
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b089      	sub	sp, #36	; 0x24
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800fa00:	2300      	movs	r3, #0
 800fa02:	61bb      	str	r3, [r7, #24]
 800fa04:	e041      	b.n	800fa8a <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d024      	beq.n	800fa58 <qbufferRead+0x68>
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d021      	beq.n	800fa58 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	691a      	ldr	r2, [r3, #16]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	68f9      	ldr	r1, [r7, #12]
 800fa1e:	68c9      	ldr	r1, [r1, #12]
 800fa20:	fb01 f303 	mul.w	r3, r1, r3
 800fa24:	4413      	add	r3, r2
 800fa26:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	e00a      	b.n	800fa44 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	693a      	ldr	r2, [r7, #16]
 800fa32:	441a      	add	r2, r3
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	68b9      	ldr	r1, [r7, #8]
 800fa38:	440b      	add	r3, r1
 800fa3a:	7812      	ldrb	r2, [r2, #0]
 800fa3c:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	3301      	adds	r3, #1
 800fa42:	617b      	str	r3, [r7, #20]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	68da      	ldr	r2, [r3, #12]
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d8ef      	bhi.n	800fa2e <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	4413      	add	r3, r2
 800fa56:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d00c      	beq.n	800fa7e <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	6892      	ldr	r2, [r2, #8]
 800fa6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa72:	fb01 f202 	mul.w	r2, r1, r2
 800fa76:	1a9a      	subs	r2, r3, r2
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	605a      	str	r2, [r3, #4]
 800fa7c:	e002      	b.n	800fa84 <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	61fb      	str	r3, [r7, #28]
      break;
 800fa82:	e006      	b.n	800fa92 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	3301      	adds	r3, #1
 800fa88:	61bb      	str	r3, [r7, #24]
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d8b9      	bhi.n	800fa06 <qbufferRead+0x16>
    }
  }

  return ret;
 800fa92:	69fb      	ldr	r3, [r7, #28]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3724      	adds	r7, #36	; 0x24
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	691a      	ldr	r2, [r3, #16]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6879      	ldr	r1, [r7, #4]
 800fab2:	68c9      	ldr	r1, [r1, #12]
 800fab4:	fb01 f303 	mul.w	r3, r1, r3
 800fab8:	4413      	add	r3, r2
}
 800faba:	4618      	mov	r0, r3
 800fabc:	370c      	adds	r7, #12
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr

0800fac6 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800fac6:	b480      	push	{r7}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	6892      	ldr	r2, [r2, #8]
 800fadc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fae0:	fb01 f202 	mul.w	r2, r1, r2
 800fae4:	1a9b      	subs	r3, r3, r2
 800fae6:	60fb      	str	r3, [r7, #12]

  return ret;
 800fae8:	68fb      	ldr	r3, [r7, #12]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3714      	adds	r7, #20
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr
	...

0800faf8 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 800fb04:	4a18      	ldr	r2, [pc, #96]	; (800fb68 <svCLI_Init+0x70>)
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 800fb0a:	4a18      	ldr	r2, [pc, #96]	; (800fb6c <svCLI_Init+0x74>)
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 800fb10:	4a17      	ldr	r2, [pc, #92]	; (800fb70 <svCLI_Init+0x78>)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 800fb16:	4b17      	ldr	r3, [pc, #92]	; (800fb74 <svCLI_Init+0x7c>)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800fb1c:	4b16      	ldr	r3, [pc, #88]	; (800fb78 <svCLI_Init+0x80>)
 800fb1e:	4a17      	ldr	r2, [pc, #92]	; (800fb7c <svCLI_Init+0x84>)
 800fb20:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800fb22:	4b17      	ldr	r3, [pc, #92]	; (800fb80 <svCLI_Init+0x88>)
 800fb24:	4a17      	ldr	r2, [pc, #92]	; (800fb84 <svCLI_Init+0x8c>)
 800fb26:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800fb28:	4b17      	ldr	r3, [pc, #92]	; (800fb88 <svCLI_Init+0x90>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00d      	beq.n	800fb4c <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800fb30:	4b16      	ldr	r3, [pc, #88]	; (800fb8c <svCLI_Init+0x94>)
 800fb32:	4a17      	ldr	r2, [pc, #92]	; (800fb90 <svCLI_Init+0x98>)
 800fb34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb38:	6018      	str	r0, [r3, #0]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	8019      	strh	r1, [r3, #0]
 800fb3e:	3302      	adds	r3, #2
 800fb40:	0c0a      	lsrs	r2, r1, #16
 800fb42:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800fb44:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <svCLI_Init+0x9c>)
 800fb46:	2206      	movs	r2, #6
 800fb48:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800fb4a:	e007      	b.n	800fb5c <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800fb4c:	4b0f      	ldr	r3, [pc, #60]	; (800fb8c <svCLI_Init+0x94>)
 800fb4e:	4a12      	ldr	r2, [pc, #72]	; (800fb98 <svCLI_Init+0xa0>)
 800fb50:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb52:	c303      	stmia	r3!, {r0, r1}
 800fb54:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800fb56:	4b0f      	ldr	r3, [pc, #60]	; (800fb94 <svCLI_Init+0x9c>)
 800fb58:	2209      	movs	r2, #9
 800fb5a:	601a      	str	r2, [r3, #0]
}
 800fb5c:	bf00      	nop
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	20004198 	.word	0x20004198
 800fb6c:	2000419c 	.word	0x2000419c
 800fb70:	200041a0 	.word	0x200041a0
 800fb74:	20003f84 	.word	0x20003f84
 800fb78:	20004190 	.word	0x20004190
 800fb7c:	0801c7d8 	.word	0x0801c7d8
 800fb80:	20004194 	.word	0x20004194
 800fb84:	0801c808 	.word	0x0801c808
 800fb88:	20000064 	.word	0x20000064
 800fb8c:	20000068 	.word	0x20000068
 800fb90:	0801cb30 	.word	0x0801cb30
 800fb94:	20000074 	.word	0x20000074
 800fb98:	0801cb38 	.word	0x0801cb38

0800fb9c <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800fb9c:	b40f      	push	{r0, r1, r2, r3}
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b084      	sub	sp, #16
 800fba2:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 800fba4:	f107 031c 	add.w	r3, r7, #28
 800fba8:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	69b9      	ldr	r1, [r7, #24]
 800fbae:	480f      	ldr	r0, [pc, #60]	; (800fbec <svCLI_Printf+0x50>)
 800fbb0:	f00b fe2c 	bl	801b80c <vsiprintf>
 800fbb4:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	60fb      	str	r3, [r7, #12]
 800fbba:	e00a      	b.n	800fbd2 <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 800fbbc:	4b0c      	ldr	r3, [pc, #48]	; (800fbf0 <svCLI_Printf+0x54>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	490a      	ldr	r1, [pc, #40]	; (800fbec <svCLI_Printf+0x50>)
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	440a      	add	r2, r1
 800fbc6:	7812      	ldrb	r2, [r2, #0]
 800fbc8:	4610      	mov	r0, r2
 800fbca:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	60fb      	str	r3, [r7, #12]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	dbf0      	blt.n	800fbbc <svCLI_Printf+0x20>
  }
  return len;
 800fbda:	68bb      	ldr	r3, [r7, #8]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbe6:	b004      	add	sp, #16
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	200041b0 	.word	0x200041b0
 800fbf0:	2000419c 	.word	0x2000419c

0800fbf4 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
  if (svPutChar) {
 800fbfa:	4b2d      	ldr	r3, [pc, #180]	; (800fcb0 <svCLI_ShowHelp+0xbc>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d04a      	beq.n	800fc98 <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 800fc02:	4b2c      	ldr	r3, [pc, #176]	; (800fcb4 <svCLI_ShowHelp+0xc0>)
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	4b2c      	ldr	r3, [pc, #176]	; (800fcb8 <svCLI_ShowHelp+0xc4>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d03e      	beq.n	800fc8c <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800fc0e:	2300      	movs	r3, #0
 800fc10:	60fb      	str	r3, [r7, #12]
 800fc12:	e006      	b.n	800fc22 <svCLI_ShowHelp+0x2e>
 800fc14:	4b26      	ldr	r3, [pc, #152]	; (800fcb0 <svCLI_ShowHelp+0xbc>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	203d      	movs	r0, #61	; 0x3d
 800fc1a:	4798      	blx	r3
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2b4f      	cmp	r3, #79	; 0x4f
 800fc26:	d9f5      	bls.n	800fc14 <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 800fc28:	4824      	ldr	r0, [pc, #144]	; (800fcbc <svCLI_ShowHelp+0xc8>)
 800fc2a:	f7ff ffb7 	bl	800fb9c <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800fc32:	4b20      	ldr	r3, [pc, #128]	; (800fcb4 <svCLI_ShowHelp+0xc0>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	60bb      	str	r3, [r7, #8]
 800fc38:	e012      	b.n	800fc60 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800fc3a:	6879      	ldr	r1, [r7, #4]
 800fc3c:	1c4b      	adds	r3, r1, #1
 800fc3e:	607b      	str	r3, [r7, #4]
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <svCLI_ShowHelp+0x5e>
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	e000      	b.n	800fc54 <svCLI_ShowHelp+0x60>
 800fc52:	4b1b      	ldr	r3, [pc, #108]	; (800fcc0 <svCLI_ShowHelp+0xcc>)
 800fc54:	481b      	ldr	r0, [pc, #108]	; (800fcc4 <svCLI_ShowHelp+0xd0>)
 800fc56:	f7ff ffa1 	bl	800fb9c <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	330c      	adds	r3, #12
 800fc5e:	60bb      	str	r3, [r7, #8]
 800fc60:	4b15      	ldr	r3, [pc, #84]	; (800fcb8 <svCLI_ShowHelp+0xc4>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d3e7      	bcc.n	800fc3a <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 800fc6a:	4817      	ldr	r0, [pc, #92]	; (800fcc8 <svCLI_ShowHelp+0xd4>)
 800fc6c:	f7ff ff96 	bl	800fb9c <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800fc70:	2300      	movs	r3, #0
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	e006      	b.n	800fc84 <svCLI_ShowHelp+0x90>
 800fc76:	4b0e      	ldr	r3, [pc, #56]	; (800fcb0 <svCLI_ShowHelp+0xbc>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	203d      	movs	r0, #61	; 0x3d
 800fc7c:	4798      	blx	r3
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	3301      	adds	r3, #1
 800fc82:	603b      	str	r3, [r7, #0]
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	2b4f      	cmp	r3, #79	; 0x4f
 800fc88:	d9f5      	bls.n	800fc76 <svCLI_ShowHelp+0x82>
 800fc8a:	e002      	b.n	800fc92 <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 800fc8c:	480f      	ldr	r0, [pc, #60]	; (800fccc <svCLI_ShowHelp+0xd8>)
 800fc8e:	f7ff ff85 	bl	800fb9c <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 800fc92:	480a      	ldr	r0, [pc, #40]	; (800fcbc <svCLI_ShowHelp+0xc8>)
 800fc94:	f7ff ff82 	bl	800fb9c <svCLI_Printf>
  }
  if (svCommit) {
 800fc98:	4b0d      	ldr	r3, [pc, #52]	; (800fcd0 <svCLI_ShowHelp+0xdc>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <svCLI_ShowHelp+0xb2>
    svCommit();
 800fca0:	4b0b      	ldr	r3, [pc, #44]	; (800fcd0 <svCLI_ShowHelp+0xdc>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4798      	blx	r3
  }
}
 800fca6:	bf00      	nop
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	2000419c 	.word	0x2000419c
 800fcb4:	20004190 	.word	0x20004190
 800fcb8:	20004194 	.word	0x20004194
 800fcbc:	0801cb44 	.word	0x0801cb44
 800fcc0:	0801cb48 	.word	0x0801cb48
 800fcc4:	0801cb4c 	.word	0x0801cb4c
 800fcc8:	0801cb6c 	.word	0x0801cb6c
 800fccc:	0801cb74 	.word	0x0801cb74
 800fcd0:	200041a0 	.word	0x200041a0

0800fcd4 <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 800fcd8:	2000      	movs	r0, #0
 800fcda:	f7f3 fec5 	bl	8003a68 <Uart_Available>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d101      	bne.n	800fce8 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 800fce4:	2301      	movs	r3, #1
 800fce6:	e000      	b.n	800fcea <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 800fce8:	2300      	movs	r3, #0
  }
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b085      	sub	sp, #20
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d003      	beq.n	800fd08 <_strlenOffspace+0x1a>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d104      	bne.n	800fd12 <_strlenOffspace+0x24>
    return 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	e017      	b.n	800fd3c <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	607b      	str	r3, [r7, #4]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	2b20      	cmp	r3, #32
 800fd18:	d0f8      	beq.n	800fd0c <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 800fd1a:	e008      	b.n	800fd2e <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	607a      	str	r2, [r7, #4]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b20      	cmp	r3, #32
 800fd26:	d007      	beq.n	800fd38 <_strlenOffspace+0x4a>
      nCount++;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1f2      	bne.n	800fd1c <_strlenOffspace+0x2e>
 800fd36:	e000      	b.n	800fd3a <_strlenOffspace+0x4c>
    }
    else
      break;
 800fd38:	bf00      	nop
  }
  return nCount;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <_toLower>:

static char _toLower(char c)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	2b40      	cmp	r3, #64	; 0x40
 800fd56:	d905      	bls.n	800fd64 <_toLower+0x1c>
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	2b5a      	cmp	r3, #90	; 0x5a
 800fd5c:	d802      	bhi.n	800fd64 <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	3320      	adds	r3, #32
 800fd62:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800fd64:	79fb      	ldrb	r3, [r7, #7]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <_isPrintable>:

static int _isPrintable(char c)
{
 800fd72:	b480      	push	{r7}
 800fd74:	b083      	sub	sp, #12
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	4603      	mov	r3, r0
 800fd7a:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	2b1f      	cmp	r3, #31
 800fd80:	d904      	bls.n	800fd8c <_isPrintable+0x1a>
 800fd82:	79fb      	ldrb	r3, [r7, #7]
 800fd84:	2b7e      	cmp	r3, #126	; 0x7e
 800fd86:	d801      	bhi.n	800fd8c <_isPrintable+0x1a>
    return 1;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e000      	b.n	800fd8e <_isPrintable+0x1c>
  return 0;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	370c      	adds	r7, #12
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <_isHex>:

static int _isHex(char c)
{
 800fd9a:	b480      	push	{r7}
 800fd9c:	b083      	sub	sp, #12
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	4603      	mov	r3, r0
 800fda2:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	2b2f      	cmp	r3, #47	; 0x2f
 800fda8:	d902      	bls.n	800fdb0 <_isHex+0x16>
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	2b39      	cmp	r3, #57	; 0x39
 800fdae:	d90b      	bls.n	800fdc8 <_isHex+0x2e>
 800fdb0:	79fb      	ldrb	r3, [r7, #7]
 800fdb2:	2b40      	cmp	r3, #64	; 0x40
 800fdb4:	d902      	bls.n	800fdbc <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 800fdb6:	79fb      	ldrb	r3, [r7, #7]
 800fdb8:	2b46      	cmp	r3, #70	; 0x46
 800fdba:	d905      	bls.n	800fdc8 <_isHex+0x2e>
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	2b60      	cmp	r3, #96	; 0x60
 800fdc0:	d904      	bls.n	800fdcc <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	2b66      	cmp	r3, #102	; 0x66
 800fdc6:	d801      	bhi.n	800fdcc <_isHex+0x32>
    return 1;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e000      	b.n	800fdce <_isHex+0x34>
  return 0;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <_fromHex>:

static int _fromHex(char c) 
{
 800fdda:	b480      	push	{r7}
 800fddc:	b085      	sub	sp, #20
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	4603      	mov	r3, r0
 800fde2:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800fde4:	2300      	movs	r3, #0
 800fde6:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	2b2f      	cmp	r3, #47	; 0x2f
 800fdec:	d906      	bls.n	800fdfc <_fromHex+0x22>
 800fdee:	79fb      	ldrb	r3, [r7, #7]
 800fdf0:	2b39      	cmp	r3, #57	; 0x39
 800fdf2:	d803      	bhi.n	800fdfc <_fromHex+0x22>
    ret = (c - '0');
 800fdf4:	79fb      	ldrb	r3, [r7, #7]
 800fdf6:	3b30      	subs	r3, #48	; 0x30
 800fdf8:	60fb      	str	r3, [r7, #12]
 800fdfa:	e012      	b.n	800fe22 <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 800fdfc:	79fb      	ldrb	r3, [r7, #7]
 800fdfe:	2b60      	cmp	r3, #96	; 0x60
 800fe00:	d906      	bls.n	800fe10 <_fromHex+0x36>
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	2b66      	cmp	r3, #102	; 0x66
 800fe06:	d803      	bhi.n	800fe10 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	3b57      	subs	r3, #87	; 0x57
 800fe0c:	60fb      	str	r3, [r7, #12]
 800fe0e:	e008      	b.n	800fe22 <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	2b40      	cmp	r3, #64	; 0x40
 800fe14:	d905      	bls.n	800fe22 <_fromHex+0x48>
 800fe16:	79fb      	ldrb	r3, [r7, #7]
 800fe18:	2b46      	cmp	r3, #70	; 0x46
 800fe1a:	d802      	bhi.n	800fe22 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	3b37      	subs	r3, #55	; 0x37
 800fe20:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800fe22:	68fb      	ldr	r3, [r7, #12]
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <_strNoCaseCmp+0x16>
    return 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	e026      	b.n	800fe94 <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	1c5a      	adds	r2, r3, #1
 800fe4a:	60fa      	str	r2, [r7, #12]
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7ff ff7a 	bl	800fd48 <_toLower>
 800fe54:	4603      	mov	r3, r0
 800fe56:	75fb      	strb	r3, [r7, #23]
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	60ba      	str	r2, [r7, #8]
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7ff ff71 	bl	800fd48 <_toLower>
 800fe66:	4603      	mov	r3, r0
 800fe68:	75bb      	strb	r3, [r7, #22]
 800fe6a:	7dfa      	ldrb	r2, [r7, #23]
 800fe6c:	7dbb      	ldrb	r3, [r7, #22]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d009      	beq.n	800fe86 <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 800fe72:	7dfb      	ldrb	r3, [r7, #23]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00c      	beq.n	800fe92 <_strNoCaseCmp+0x62>
 800fe78:	7dbb      	ldrb	r3, [r7, #22]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d009      	beq.n	800fe92 <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 800fe7e:	7dfa      	ldrb	r2, [r7, #23]
 800fe80:	7dbb      	ldrb	r3, [r7, #22]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	e006      	b.n	800fe94 <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	607b      	str	r3, [r7, #4]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1d9      	bne.n	800fe46 <_strNoCaseCmp+0x16>
  return 0;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3718      	adds	r7, #24
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 800fea8:	e007      	b.n	800feba <_svMemCpy+0x1e>
    *dst++=*src++;
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	1c53      	adds	r3, r2, #1
 800feae:	60bb      	str	r3, [r7, #8]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	1c59      	adds	r1, r3, #1
 800feb4:	60f9      	str	r1, [r7, #12]
 800feb6:	7812      	ldrb	r2, [r2, #0]
 800feb8:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	1e5a      	subs	r2, r3, #1
 800febe:	607a      	str	r2, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1f2      	bne.n	800feaa <_svMemCpy+0xe>
  }
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop
 800fec8:	3714      	adds	r7, #20
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
	...

0800fed4 <_svClearLine>:

static void _svClearLine(void)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
  svPutChar('\r');
 800feda:	4b16      	ldr	r3, [pc, #88]	; (800ff34 <_svClearLine+0x60>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	200d      	movs	r0, #13
 800fee0:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800fee2:	2300      	movs	r3, #0
 800fee4:	607b      	str	r3, [r7, #4]
 800fee6:	e006      	b.n	800fef6 <_svClearLine+0x22>
    svPutChar(' ');
 800fee8:	4b12      	ldr	r3, [pc, #72]	; (800ff34 <_svClearLine+0x60>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2020      	movs	r0, #32
 800feee:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	3301      	adds	r3, #1
 800fef4:	607b      	str	r3, [r7, #4]
 800fef6:	4b10      	ldr	r3, [pc, #64]	; (800ff38 <_svClearLine+0x64>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4a10      	ldr	r2, [pc, #64]	; (800ff3c <_svClearLine+0x68>)
 800fefc:	6812      	ldr	r2, [r2, #0]
 800fefe:	441a      	add	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d8f0      	bhi.n	800fee8 <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ff06:	2300      	movs	r3, #0
 800ff08:	603b      	str	r3, [r7, #0]
 800ff0a:	e006      	b.n	800ff1a <_svClearLine+0x46>
    svPutChar('\b');
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <_svClearLine+0x60>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2008      	movs	r0, #8
 800ff12:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	3301      	adds	r3, #1
 800ff18:	603b      	str	r3, [r7, #0]
 800ff1a:	4b07      	ldr	r3, [pc, #28]	; (800ff38 <_svClearLine+0x64>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4a07      	ldr	r2, [pc, #28]	; (800ff3c <_svClearLine+0x68>)
 800ff20:	6812      	ldr	r2, [r2, #0]
 800ff22:	441a      	add	r2, r3
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d8f0      	bhi.n	800ff0c <_svClearLine+0x38>
}
 800ff2a:	bf00      	nop
 800ff2c:	bf00      	nop
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	2000419c 	.word	0x2000419c
 800ff38:	2000418c 	.word	0x2000418c
 800ff3c:	20000074 	.word	0x20000074

0800ff40 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	4603      	mov	r3, r0
 800ff48:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	2b02      	cmp	r3, #2
 800ff4e:	d03f      	beq.n	800ffd0 <svCLIHandleHistory+0x90>
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	dc6f      	bgt.n	8010034 <svCLIHandleHistory+0xf4>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d002      	beq.n	800ff5e <svCLIHandleHistory+0x1e>
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d052      	beq.n	8010002 <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 800ff5c:	e06a      	b.n	8010034 <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 800ff5e:	4b38      	ldr	r3, [pc, #224]	; (8010040 <svCLIHandleHistory+0x100>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2b03      	cmp	r3, #3
 800ff64:	d11c      	bne.n	800ffa0 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 800ff66:	2301      	movs	r3, #1
 800ff68:	60fb      	str	r3, [r7, #12]
 800ff6a:	e00f      	b.n	800ff8c <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	01db      	lsls	r3, r3, #7
 800ff72:	4a34      	ldr	r2, [pc, #208]	; (8010044 <svCLIHandleHistory+0x104>)
 800ff74:	1898      	adds	r0, r3, r2
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	01db      	lsls	r3, r3, #7
 800ff7a:	4a32      	ldr	r2, [pc, #200]	; (8010044 <svCLIHandleHistory+0x104>)
 800ff7c:	4413      	add	r3, r2
 800ff7e:	2280      	movs	r2, #128	; 0x80
 800ff80:	4619      	mov	r1, r3
 800ff82:	f7ff ff8b 	bl	800fe9c <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	4b2c      	ldr	r3, [pc, #176]	; (8010040 <svCLIHandleHistory+0x100>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	dbea      	blt.n	800ff6c <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 800ff96:	4b2a      	ldr	r3, [pc, #168]	; (8010040 <svCLIHandleHistory+0x100>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	3b01      	subs	r3, #1
 800ff9c:	4a28      	ldr	r2, [pc, #160]	; (8010040 <svCLIHandleHistory+0x100>)
 800ff9e:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800ffa0:	4b27      	ldr	r3, [pc, #156]	; (8010040 <svCLIHandleHistory+0x100>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	01db      	lsls	r3, r3, #7
 800ffa6:	4a27      	ldr	r2, [pc, #156]	; (8010044 <svCLIHandleHistory+0x104>)
 800ffa8:	4413      	add	r3, r2
 800ffaa:	2280      	movs	r2, #128	; 0x80
 800ffac:	4926      	ldr	r1, [pc, #152]	; (8010048 <svCLIHandleHistory+0x108>)
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff ff74 	bl	800fe9c <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800ffb4:	4b22      	ldr	r3, [pc, #136]	; (8010040 <svCLIHandleHistory+0x100>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	dc04      	bgt.n	800ffc6 <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 800ffbc:	4b20      	ldr	r3, [pc, #128]	; (8010040 <svCLIHandleHistory+0x100>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	4a1f      	ldr	r2, [pc, #124]	; (8010040 <svCLIHandleHistory+0x100>)
 800ffc4:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 800ffc6:	4b1e      	ldr	r3, [pc, #120]	; (8010040 <svCLIHandleHistory+0x100>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a20      	ldr	r2, [pc, #128]	; (801004c <svCLIHandleHistory+0x10c>)
 800ffcc:	6013      	str	r3, [r2, #0]
      break;
 800ffce:	e032      	b.n	8010036 <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 800ffd0:	4b1e      	ldr	r3, [pc, #120]	; (801004c <svCLIHandleHistory+0x10c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	4a1d      	ldr	r2, [pc, #116]	; (801004c <svCLIHandleHistory+0x10c>)
 800ffd8:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 800ffda:	4b1c      	ldr	r3, [pc, #112]	; (801004c <svCLIHandleHistory+0x10c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	da04      	bge.n	800ffec <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 800ffe2:	4b17      	ldr	r3, [pc, #92]	; (8010040 <svCLIHandleHistory+0x100>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	4a18      	ldr	r2, [pc, #96]	; (801004c <svCLIHandleHistory+0x10c>)
 800ffea:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800ffec:	4b17      	ldr	r3, [pc, #92]	; (801004c <svCLIHandleHistory+0x10c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	01db      	lsls	r3, r3, #7
 800fff2:	4a14      	ldr	r2, [pc, #80]	; (8010044 <svCLIHandleHistory+0x104>)
 800fff4:	4413      	add	r3, r2
 800fff6:	2280      	movs	r2, #128	; 0x80
 800fff8:	4619      	mov	r1, r3
 800fffa:	4813      	ldr	r0, [pc, #76]	; (8010048 <svCLIHandleHistory+0x108>)
 800fffc:	f7ff ff4e 	bl	800fe9c <_svMemCpy>
      break;
 8010000:	e019      	b.n	8010036 <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 8010002:	4b12      	ldr	r3, [pc, #72]	; (801004c <svCLIHandleHistory+0x10c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	3301      	adds	r3, #1
 8010008:	4a10      	ldr	r2, [pc, #64]	; (801004c <svCLIHandleHistory+0x10c>)
 801000a:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 801000c:	4b0f      	ldr	r3, [pc, #60]	; (801004c <svCLIHandleHistory+0x10c>)
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	4b0b      	ldr	r3, [pc, #44]	; (8010040 <svCLIHandleHistory+0x100>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	429a      	cmp	r2, r3
 8010016:	db02      	blt.n	801001e <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 8010018:	4b0c      	ldr	r3, [pc, #48]	; (801004c <svCLIHandleHistory+0x10c>)
 801001a:	2200      	movs	r2, #0
 801001c:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 801001e:	4b0b      	ldr	r3, [pc, #44]	; (801004c <svCLIHandleHistory+0x10c>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	01db      	lsls	r3, r3, #7
 8010024:	4a07      	ldr	r2, [pc, #28]	; (8010044 <svCLIHandleHistory+0x104>)
 8010026:	4413      	add	r3, r2
 8010028:	2280      	movs	r2, #128	; 0x80
 801002a:	4619      	mov	r1, r3
 801002c:	4806      	ldr	r0, [pc, #24]	; (8010048 <svCLIHandleHistory+0x108>)
 801002e:	f7ff ff35 	bl	800fe9c <_svMemCpy>
      break;
 8010032:	e000      	b.n	8010036 <svCLIHandleHistory+0xf6>
      break;
 8010034:	bf00      	nop
  }
}
 8010036:	bf00      	nop
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	20004184 	.word	0x20004184
 8010044:	20004004 	.word	0x20004004
 8010048:	20003f84 	.word	0x20003f84
 801004c:	20004188 	.word	0x20004188

08010050 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 801005e:	e002      	b.n	8010066 <svCLI_Search+0x16>
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	3301      	adds	r3, #1
 8010064:	613b      	str	r3, [r7, #16]
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <svCLI_Search+0x26>
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b20      	cmp	r3, #32
 8010074:	d0f4      	beq.n	8010060 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8010076:	4b22      	ldr	r3, [pc, #136]	; (8010100 <svCLI_Search+0xb0>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	617b      	str	r3, [r7, #20]
 801007c:	e035      	b.n	80100ea <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4618      	mov	r0, r3
 8010084:	f7ff fe33 	bl	800fcee <_strlenOffspace>
 8010088:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 801008a:	6938      	ldr	r0, [r7, #16]
 801008c:	f7ff fe2f 	bl	800fcee <_strlenOffspace>
 8010090:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	693a      	ldr	r2, [r7, #16]
 8010096:	4413      	add	r3, r2
 8010098:	2200      	movs	r2, #0
 801009a:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 801009c:	68fa      	ldr	r2, [r7, #12]
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	db1f      	blt.n	80100e4 <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	68fa      	ldr	r2, [r7, #12]
 80100aa:	4619      	mov	r1, r3
 80100ac:	6938      	ldr	r0, [r7, #16]
 80100ae:	f7ff febf 	bl	800fe30 <_strNoCaseCmp>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d115      	bne.n	80100e4 <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3301      	adds	r3, #1
 80100bc:	693a      	ldr	r2, [r7, #16]
 80100be:	4413      	add	r3, r2
 80100c0:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 80100c2:	e002      	b.n	80100ca <svCLI_Search+0x7a>
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	3301      	adds	r3, #1
 80100c8:	613b      	str	r3, [r7, #16]
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d003      	beq.n	80100da <svCLI_Search+0x8a>
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	2b20      	cmp	r3, #32
 80100d8:	d0f4      	beq.n	80100c4 <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	693a      	ldr	r2, [r7, #16]
 80100de:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	e008      	b.n	80100f6 <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	330c      	adds	r3, #12
 80100e8:	617b      	str	r3, [r7, #20]
 80100ea:	4b06      	ldr	r3, [pc, #24]	; (8010104 <svCLI_Search+0xb4>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d3c4      	bcc.n	801007e <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3718      	adds	r7, #24
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	20004190 	.word	0x20004190
 8010104:	20004194 	.word	0x20004194

08010108 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08a      	sub	sp, #40	; 0x28
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	603b      	str	r3, [r7, #0]
  int first = 1;
 8010116:	2301      	movs	r3, #1
 8010118:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 801011a:	230a      	movs	r3, #10
 801011c:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 8010122:	e002      	b.n	801012a <svCLI_ParseNumber+0x22>
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3301      	adds	r3, #1
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b20      	cmp	r3, #32
 8010130:	d0f8      	beq.n	8010124 <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d14d      	bne.n	80101d6 <svCLI_ParseNumber+0xce>
      return 0;
 801013a:	2300      	movs	r3, #0
 801013c:	e05b      	b.n	80101f6 <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	2b00      	cmp	r3, #0
 8010142:	d011      	beq.n	8010168 <svCLI_ParseNumber+0x60>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b30      	cmp	r3, #48	; 0x30
 801014a:	d10d      	bne.n	8010168 <svCLI_ParseNumber+0x60>
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	3301      	adds	r3, #1
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	4618      	mov	r0, r3
 8010154:	f7ff fdf8 	bl	800fd48 <_toLower>
 8010158:	4603      	mov	r3, r0
 801015a:	2b78      	cmp	r3, #120	; 0x78
 801015c:	d104      	bne.n	8010168 <svCLI_ParseNumber+0x60>
        radix = 16;
 801015e:	2310      	movs	r3, #16
 8010160:	623b      	str	r3, [r7, #32]
        s += 2;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3302      	adds	r3, #2
 8010166:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	60fa      	str	r2, [r7, #12]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fe0e 	bl	800fd9a <_isHex>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d010      	beq.n	80101a6 <svCLI_ParseNumber+0x9e>
 8010184:	7dfb      	ldrb	r3, [r7, #23]
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff fe27 	bl	800fdda <_fromHex>
 801018c:	6138      	str	r0, [r7, #16]
 801018e:	693a      	ldr	r2, [r7, #16]
 8010190:	6a3b      	ldr	r3, [r7, #32]
 8010192:	429a      	cmp	r2, r3
 8010194:	da07      	bge.n	80101a6 <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	69fa      	ldr	r2, [r7, #28]
 801019a:	fb03 f202 	mul.w	r2, r3, r2
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	4413      	add	r3, r2
 80101a2:	61fb      	str	r3, [r7, #28]
 80101a4:	e017      	b.n	80101d6 <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d012      	beq.n	80101d2 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 80101b0:	e002      	b.n	80101b8 <svCLI_ParseNumber+0xb0>
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	3301      	adds	r3, #1
 80101b6:	61bb      	str	r3, [r7, #24]
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d004      	beq.n	80101ca <svCLI_ParseNumber+0xc2>
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	7dfa      	ldrb	r2, [r7, #23]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d1f3      	bne.n	80101b2 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d106      	bne.n	80101e0 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 80101d2:	2300      	movs	r3, #0
 80101d4:	e00f      	b.n	80101f6 <svCLI_ParseNumber+0xee>
    while (*s) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1af      	bne.n	801013e <svCLI_ParseNumber+0x36>
 80101de:	e000      	b.n	80101e2 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 80101e0:	bf00      	nop
      }
    }
    *val = result;
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	69fa      	ldr	r2, [r7, #28]
 80101e6:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <svCLI_ParseNumber+0xec>
      *res = s;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	601a      	str	r2, [r3, #0]
    }
    return 1;
 80101f4:	2301      	movs	r3, #1
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3728      	adds	r7, #40	; 0x28
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 8010200:	b590      	push	{r4, r7, lr}
 8010202:	b089      	sub	sp, #36	; 0x24
 8010204:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 8010206:	4b3a      	ldr	r3, [pc, #232]	; (80102f0 <svCLI_ParsenExecute+0xf0>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d120      	bne.n	8010250 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 801020e:	4939      	ldr	r1, [pc, #228]	; (80102f4 <svCLI_ParsenExecute+0xf4>)
 8010210:	4839      	ldr	r0, [pc, #228]	; (80102f8 <svCLI_ParsenExecute+0xf8>)
 8010212:	f7f0 f83b 	bl	800028c <strcmp>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d115      	bne.n	8010248 <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 801021c:	4b34      	ldr	r3, [pc, #208]	; (80102f0 <svCLI_ParsenExecute+0xf0>)
 801021e:	2201      	movs	r2, #1
 8010220:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 8010222:	4836      	ldr	r0, [pc, #216]	; (80102fc <svCLI_ParsenExecute+0xfc>)
 8010224:	f7ff fcba 	bl	800fb9c <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010228:	4b35      	ldr	r3, [pc, #212]	; (8010300 <svCLI_ParsenExecute+0x100>)
 801022a:	4a36      	ldr	r2, [pc, #216]	; (8010304 <svCLI_ParsenExecute+0x104>)
 801022c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010230:	6018      	str	r0, [r3, #0]
 8010232:	3304      	adds	r3, #4
 8010234:	8019      	strh	r1, [r3, #0]
 8010236:	3302      	adds	r3, #2
 8010238:	0c0a      	lsrs	r2, r1, #16
 801023a:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 801023c:	4b32      	ldr	r3, [pc, #200]	; (8010308 <svCLI_ParsenExecute+0x108>)
 801023e:	2206      	movs	r2, #6
 8010240:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 8010242:	f7ff fcd7 	bl	800fbf4 <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 8010246:	e04f      	b.n	80102e8 <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 8010248:	4830      	ldr	r0, [pc, #192]	; (801030c <svCLI_ParsenExecute+0x10c>)
 801024a:	f7ff fca7 	bl	800fb9c <svCLI_Printf>
    return;
 801024e:	e04b      	b.n	80102e8 <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 8010250:	4b2f      	ldr	r3, [pc, #188]	; (8010310 <svCLI_ParsenExecute+0x110>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	4b2f      	ldr	r3, [pc, #188]	; (8010314 <svCLI_ParsenExecute+0x114>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	429a      	cmp	r2, r3
 801025a:	d103      	bne.n	8010264 <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 801025c:	482e      	ldr	r0, [pc, #184]	; (8010318 <svCLI_ParsenExecute+0x118>)
 801025e:	f7ff fc9d 	bl	800fb9c <svCLI_Printf>
    return;
 8010262:	e041      	b.n	80102e8 <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 8010264:	4b24      	ldr	r3, [pc, #144]	; (80102f8 <svCLI_ParsenExecute+0xf8>)
 8010266:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 8010268:	f107 0310 	add.w	r3, r7, #16
 801026c:	4618      	mov	r0, r3
 801026e:	f7ff feef 	bl	8010050 <svCLI_Search>
 8010272:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d033      	beq.n	80102e2 <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 801027a:	2300      	movs	r3, #0
 801027c:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 801027e:	2300      	movs	r3, #0
 8010280:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 801028a:	4a24      	ldr	r2, [pc, #144]	; (801031c <svCLI_ParsenExecute+0x11c>)
 801028c:	1d3b      	adds	r3, r7, #4
 801028e:	6812      	ldr	r2, [r2, #0]
 8010290:	4611      	mov	r1, r2
 8010292:	8019      	strh	r1, [r3, #0]
 8010294:	3302      	adds	r3, #2
 8010296:	0c12      	lsrs	r2, r2, #16
 8010298:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 801029a:	6938      	ldr	r0, [r7, #16]
 801029c:	1d3b      	adds	r3, r7, #4
 801029e:	f107 0210 	add.w	r2, r7, #16
 80102a2:	f107 010c 	add.w	r1, r7, #12
 80102a6:	f7ff ff2f 	bl	8010108 <svCLI_ParseNumber>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d010      	beq.n	80102d2 <svCLI_ParsenExecute+0xd2>
      nCount++;
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	3301      	adds	r3, #1
 80102b4:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 80102b6:	6938      	ldr	r0, [r7, #16]
 80102b8:	1d3b      	adds	r3, r7, #4
 80102ba:	f107 0210 	add.w	r2, r7, #16
 80102be:	f107 0108 	add.w	r1, r7, #8
 80102c2:	f7ff ff21 	bl	8010108 <svCLI_ParseNumber>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <svCLI_ParsenExecute+0xd2>
        nCount++;
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	3301      	adds	r3, #1
 80102d0:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	689c      	ldr	r4, [r3, #8]
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	69f9      	ldr	r1, [r7, #28]
 80102dc:	6978      	ldr	r0, [r7, #20]
 80102de:	47a0      	blx	r4
 80102e0:	e002      	b.n	80102e8 <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 80102e2:	480f      	ldr	r0, [pc, #60]	; (8010320 <svCLI_ParsenExecute+0x120>)
 80102e4:	f7ff fc5a 	bl	800fb9c <svCLI_Printf>
  }
}
 80102e8:	3724      	adds	r7, #36	; 0x24
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd90      	pop	{r4, r7, pc}
 80102ee:	bf00      	nop
 80102f0:	20000064 	.word	0x20000064
 80102f4:	0801cb88 	.word	0x0801cb88
 80102f8:	20003f84 	.word	0x20003f84
 80102fc:	0801cb94 	.word	0x0801cb94
 8010300:	20000068 	.word	0x20000068
 8010304:	0801cb30 	.word	0x0801cb30
 8010308:	20000074 	.word	0x20000074
 801030c:	0801cba4 	.word	0x0801cba4
 8010310:	20004190 	.word	0x20004190
 8010314:	20004194 	.word	0x20004194
 8010318:	0801cbbc 	.word	0x0801cbbc
 801031c:	0801cbfc 	.word	0x0801cbfc
 8010320:	0801cbd4 	.word	0x0801cbd4

08010324 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	603b      	str	r3, [r7, #0]
 8010330:	4613      	mov	r3, r2
 8010332:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d005      	beq.n	8010346 <svCLI_SetBypassFtn+0x22>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d002      	beq.n	8010346 <svCLI_SetBypassFtn+0x22>
 8010340:	79fb      	ldrb	r3, [r7, #7]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d136      	bne.n	80103b4 <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 8010346:	4b28      	ldr	r3, [pc, #160]	; (80103e8 <svCLI_SetBypassFtn+0xc4>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d048      	beq.n	80103e0 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 801034e:	4b27      	ldr	r3, [pc, #156]	; (80103ec <svCLI_SetBypassFtn+0xc8>)
 8010350:	4a27      	ldr	r2, [pc, #156]	; (80103f0 <svCLI_SetBypassFtn+0xcc>)
 8010352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010356:	6018      	str	r0, [r3, #0]
 8010358:	3304      	adds	r3, #4
 801035a:	8019      	strh	r1, [r3, #0]
 801035c:	3302      	adds	r3, #2
 801035e:	0c0a      	lsrs	r2, r1, #16
 8010360:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 8010362:	4b24      	ldr	r3, [pc, #144]	; (80103f4 <svCLI_SetBypassFtn+0xd0>)
 8010364:	2206      	movs	r2, #6
 8010366:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 8010368:	4b1f      	ldr	r3, [pc, #124]	; (80103e8 <svCLI_SetBypassFtn+0xc4>)
 801036a:	2200      	movs	r2, #0
 801036c:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 801036e:	4b22      	ldr	r3, [pc, #136]	; (80103f8 <svCLI_SetBypassFtn+0xd4>)
 8010370:	2200      	movs	r2, #0
 8010372:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 8010374:	4b21      	ldr	r3, [pc, #132]	; (80103fc <svCLI_SetBypassFtn+0xd8>)
 8010376:	2200      	movs	r2, #0
 8010378:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 801037a:	4b21      	ldr	r3, [pc, #132]	; (8010400 <svCLI_SetBypassFtn+0xdc>)
 801037c:	2200      	movs	r2, #0
 801037e:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010380:	2300      	movs	r3, #0
 8010382:	617b      	str	r3, [r7, #20]
 8010384:	e007      	b.n	8010396 <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 8010386:	4a1f      	ldr	r2, [pc, #124]	; (8010404 <svCLI_SetBypassFtn+0xe0>)
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	4413      	add	r3, r2
 801038c:	2200      	movs	r2, #0
 801038e:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	3301      	adds	r3, #1
 8010394:	617b      	str	r3, [r7, #20]
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	2b7f      	cmp	r3, #127	; 0x7f
 801039a:	ddf4      	ble.n	8010386 <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 801039c:	4913      	ldr	r1, [pc, #76]	; (80103ec <svCLI_SetBypassFtn+0xc8>)
 801039e:	481a      	ldr	r0, [pc, #104]	; (8010408 <svCLI_SetBypassFtn+0xe4>)
 80103a0:	f7ff fbfc 	bl	800fb9c <svCLI_Printf>

    if (svCommit) {
 80103a4:	4b19      	ldr	r3, [pc, #100]	; (801040c <svCLI_SetBypassFtn+0xe8>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d01a      	beq.n	80103e2 <svCLI_SetBypassFtn+0xbe>
      svCommit();
 80103ac:	4b17      	ldr	r3, [pc, #92]	; (801040c <svCLI_SetBypassFtn+0xe8>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4798      	blx	r3
    if (svCommit) {
 80103b2:	e016      	b.n	80103e2 <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 80103b4:	2209      	movs	r2, #9
 80103b6:	68b9      	ldr	r1, [r7, #8]
 80103b8:	480c      	ldr	r0, [pc, #48]	; (80103ec <svCLI_SetBypassFtn+0xc8>)
 80103ba:	f00b fa63 	bl	801b884 <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 80103be:	480b      	ldr	r0, [pc, #44]	; (80103ec <svCLI_SetBypassFtn+0xc8>)
 80103c0:	f7ef ff6e 	bl	80002a0 <strlen>
 80103c4:	4603      	mov	r3, r0
 80103c6:	461a      	mov	r2, r3
 80103c8:	4b0a      	ldr	r3, [pc, #40]	; (80103f4 <svCLI_SetBypassFtn+0xd0>)
 80103ca:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 80103cc:	4a06      	ldr	r2, [pc, #24]	; (80103e8 <svCLI_SetBypassFtn+0xc4>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 80103d2:	4a09      	ldr	r2, [pc, #36]	; (80103f8 <svCLI_SetBypassFtn+0xd4>)
 80103d4:	79fb      	ldrb	r3, [r7, #7]
 80103d6:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 80103d8:	4a08      	ldr	r2, [pc, #32]	; (80103fc <svCLI_SetBypassFtn+0xd8>)
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	6013      	str	r3, [r2, #0]
 80103de:	e000      	b.n	80103e2 <svCLI_SetBypassFtn+0xbe>
      return;
 80103e0:	bf00      	nop
  }
}
 80103e2:	3718      	adds	r7, #24
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	200041a4 	.word	0x200041a4
 80103ec:	20000068 	.word	0x20000068
 80103f0:	0801cb30 	.word	0x0801cb30
 80103f4:	20000074 	.word	0x20000074
 80103f8:	200041a8 	.word	0x200041a8
 80103fc:	200041ac 	.word	0x200041ac
 8010400:	2000418c 	.word	0x2000418c
 8010404:	20003f84 	.word	0x20003f84
 8010408:	0801cc00 	.word	0x0801cc00
 801040c:	200041a0 	.word	0x200041a0

08010410 <svCLI_Handler>:

void svCLI_Handler(void)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 8010416:	4b92      	ldr	r3, [pc, #584]	; (8010660 <svCLI_Handler+0x250>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 8114 	beq.w	8010648 <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 8010420:	2300      	movs	r3, #0
 8010422:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 8010424:	4b8e      	ldr	r3, [pc, #568]	; (8010660 <svCLI_Handler+0x250>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4798      	blx	r3
 801042a:	4603      	mov	r3, r0
 801042c:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 8109 	beq.w	8010648 <svCLI_Handler+0x238>
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	2b0a      	cmp	r3, #10
 801043a:	f000 8105 	beq.w	8010648 <svCLI_Handler+0x238>
      if (szChar == '\r') {
 801043e:	79fb      	ldrb	r3, [r7, #7]
 8010440:	2b0d      	cmp	r3, #13
 8010442:	d154      	bne.n	80104ee <svCLI_Handler+0xde>
        sbInEsc = 0;
 8010444:	4b87      	ldr	r3, [pc, #540]	; (8010664 <svCLI_Handler+0x254>)
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 801044a:	4887      	ldr	r0, [pc, #540]	; (8010668 <svCLI_Handler+0x258>)
 801044c:	f7ff fba6 	bl	800fb9c <svCLI_Printf>
        if (scntCLIString > 0) {
 8010450:	4b86      	ldr	r3, [pc, #536]	; (801066c <svCLI_Handler+0x25c>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d031      	beq.n	80104bc <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010458:	4b84      	ldr	r3, [pc, #528]	; (801066c <svCLI_Handler+0x25c>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a84      	ldr	r2, [pc, #528]	; (8010670 <svCLI_Handler+0x260>)
 801045e:	2100      	movs	r1, #0
 8010460:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 8010462:	2000      	movs	r0, #0
 8010464:	f7ff fd6c 	bl	800ff40 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 8010468:	4b82      	ldr	r3, [pc, #520]	; (8010674 <svCLI_Handler+0x264>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d011      	beq.n	8010494 <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 8010470:	2301      	movs	r3, #1
 8010472:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 8010474:	4b7d      	ldr	r3, [pc, #500]	; (801066c <svCLI_Handler+0x25c>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a7d      	ldr	r2, [pc, #500]	; (8010670 <svCLI_Handler+0x260>)
 801047a:	210d      	movs	r1, #13
 801047c:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 801047e:	4b7b      	ldr	r3, [pc, #492]	; (801066c <svCLI_Handler+0x25c>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	3301      	adds	r3, #1
 8010484:	4a7a      	ldr	r2, [pc, #488]	; (8010670 <svCLI_Handler+0x260>)
 8010486:	2100      	movs	r1, #0
 8010488:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 801048a:	4b7a      	ldr	r3, [pc, #488]	; (8010674 <svCLI_Handler+0x264>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4878      	ldr	r0, [pc, #480]	; (8010670 <svCLI_Handler+0x260>)
 8010490:	4798      	blx	r3
 8010492:	e001      	b.n	8010498 <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 8010494:	f7ff feb4 	bl	8010200 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 8010498:	4b74      	ldr	r3, [pc, #464]	; (801066c <svCLI_Handler+0x25c>)
 801049a:	2200      	movs	r2, #0
 801049c:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 801049e:	2300      	movs	r3, #0
 80104a0:	60bb      	str	r3, [r7, #8]
 80104a2:	e007      	b.n	80104b4 <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 80104a4:	4a72      	ldr	r2, [pc, #456]	; (8010670 <svCLI_Handler+0x260>)
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	4413      	add	r3, r2
 80104aa:	2200      	movs	r2, #0
 80104ac:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	3301      	adds	r3, #1
 80104b2:	60bb      	str	r3, [r7, #8]
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	2b7f      	cmp	r3, #127	; 0x7f
 80104b8:	ddf4      	ble.n	80104a4 <svCLI_Handler+0x94>
 80104ba:	e010      	b.n	80104de <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 80104bc:	4b6e      	ldr	r3, [pc, #440]	; (8010678 <svCLI_Handler+0x268>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d00c      	beq.n	80104de <svCLI_Handler+0xce>
 80104c4:	4b6b      	ldr	r3, [pc, #428]	; (8010674 <svCLI_Handler+0x264>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d008      	beq.n	80104de <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 80104cc:	230a      	movs	r3, #10
 80104ce:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 80104d0:	4b68      	ldr	r3, [pc, #416]	; (8010674 <svCLI_Handler+0x264>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	1d3a      	adds	r2, r7, #4
 80104d6:	4610      	mov	r0, r2
 80104d8:	4798      	blx	r3
          bSkipPrompt = 1;
 80104da:	2301      	movs	r3, #1
 80104dc:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 80104de:	7bfb      	ldrb	r3, [r7, #15]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f040 80b1 	bne.w	8010648 <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 80104e6:	4865      	ldr	r0, [pc, #404]	; (801067c <svCLI_Handler+0x26c>)
 80104e8:	f7ff fb58 	bl	800fb9c <svCLI_Printf>
 80104ec:	e0ac      	b.n	8010648 <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 80104ee:	4b61      	ldr	r3, [pc, #388]	; (8010674 <svCLI_Handler+0x264>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d019      	beq.n	801052a <svCLI_Handler+0x11a>
 80104f6:	4b62      	ldr	r3, [pc, #392]	; (8010680 <svCLI_Handler+0x270>)
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	79fa      	ldrb	r2, [r7, #7]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d114      	bne.n	801052a <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 8010500:	4b5f      	ldr	r3, [pc, #380]	; (8010680 <svCLI_Handler+0x270>)
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	2b11      	cmp	r3, #17
 8010506:	d102      	bne.n	801050e <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 8010508:	485e      	ldr	r0, [pc, #376]	; (8010684 <svCLI_Handler+0x274>)
 801050a:	f7ff fb47 	bl	800fb9c <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 801050e:	4b59      	ldr	r3, [pc, #356]	; (8010674 <svCLI_Handler+0x264>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2000      	movs	r0, #0
 8010514:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 8010516:	2300      	movs	r3, #0
 8010518:	2200      	movs	r2, #0
 801051a:	2100      	movs	r1, #0
 801051c:	2000      	movs	r0, #0
 801051e:	f7ff ff01 	bl	8010324 <svCLI_SetBypassFtn>
        sbInEsc = 0;
 8010522:	4b50      	ldr	r3, [pc, #320]	; (8010664 <svCLI_Handler+0x254>)
 8010524:	2200      	movs	r2, #0
 8010526:	701a      	strb	r2, [r3, #0]
 8010528:	e08e      	b.n	8010648 <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 801052a:	4b52      	ldr	r3, [pc, #328]	; (8010674 <svCLI_Handler+0x264>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d014      	beq.n	801055c <svCLI_Handler+0x14c>
 8010532:	79fb      	ldrb	r3, [r7, #7]
 8010534:	2b1a      	cmp	r3, #26
 8010536:	d111      	bne.n	801055c <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 8010538:	2301      	movs	r3, #1
 801053a:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 801053c:	4b4b      	ldr	r3, [pc, #300]	; (801066c <svCLI_Handler+0x25c>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a4b      	ldr	r2, [pc, #300]	; (8010670 <svCLI_Handler+0x260>)
 8010542:	211a      	movs	r1, #26
 8010544:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 8010546:	4b49      	ldr	r3, [pc, #292]	; (801066c <svCLI_Handler+0x25c>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	3301      	adds	r3, #1
 801054c:	4a48      	ldr	r2, [pc, #288]	; (8010670 <svCLI_Handler+0x260>)
 801054e:	2100      	movs	r1, #0
 8010550:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 8010552:	4b48      	ldr	r3, [pc, #288]	; (8010674 <svCLI_Handler+0x264>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4846      	ldr	r0, [pc, #280]	; (8010670 <svCLI_Handler+0x260>)
 8010558:	4798      	blx	r3
 801055a:	e075      	b.n	8010648 <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 801055c:	79fb      	ldrb	r3, [r7, #7]
 801055e:	2b08      	cmp	r3, #8
 8010560:	d118      	bne.n	8010594 <svCLI_Handler+0x184>
          sbInEsc = 0;
 8010562:	4b40      	ldr	r3, [pc, #256]	; (8010664 <svCLI_Handler+0x254>)
 8010564:	2200      	movs	r2, #0
 8010566:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 8010568:	4b40      	ldr	r3, [pc, #256]	; (801066c <svCLI_Handler+0x25c>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d06b      	beq.n	8010648 <svCLI_Handler+0x238>
            _svClearLine();
 8010570:	f7ff fcb0 	bl	800fed4 <_svClearLine>
            scntCLIString--;
 8010574:	4b3d      	ldr	r3, [pc, #244]	; (801066c <svCLI_Handler+0x25c>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3b01      	subs	r3, #1
 801057a:	4a3c      	ldr	r2, [pc, #240]	; (801066c <svCLI_Handler+0x25c>)
 801057c:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 801057e:	4b3b      	ldr	r3, [pc, #236]	; (801066c <svCLI_Handler+0x25c>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	4a3b      	ldr	r2, [pc, #236]	; (8010670 <svCLI_Handler+0x260>)
 8010584:	2100      	movs	r1, #0
 8010586:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 8010588:	4a39      	ldr	r2, [pc, #228]	; (8010670 <svCLI_Handler+0x260>)
 801058a:	493c      	ldr	r1, [pc, #240]	; (801067c <svCLI_Handler+0x26c>)
 801058c:	483e      	ldr	r0, [pc, #248]	; (8010688 <svCLI_Handler+0x278>)
 801058e:	f7ff fb05 	bl	800fb9c <svCLI_Printf>
 8010592:	e059      	b.n	8010648 <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 8010594:	79fb      	ldrb	r3, [r7, #7]
 8010596:	2b5b      	cmp	r3, #91	; 0x5b
 8010598:	d103      	bne.n	80105a2 <svCLI_Handler+0x192>
          sbInEsc = 1;
 801059a:	4b32      	ldr	r3, [pc, #200]	; (8010664 <svCLI_Handler+0x254>)
 801059c:	2201      	movs	r2, #1
 801059e:	701a      	strb	r2, [r3, #0]
 80105a0:	e052      	b.n	8010648 <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 80105a2:	79fb      	ldrb	r3, [r7, #7]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff fbe4 	bl	800fd72 <_isPrintable>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d04b      	beq.n	8010648 <svCLI_Handler+0x238>
          if (sbInEsc) {
 80105b0:	4b2c      	ldr	r3, [pc, #176]	; (8010664 <svCLI_Handler+0x254>)
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d036      	beq.n	8010626 <svCLI_Handler+0x216>
            sbInEsc = 0;
 80105b8:	4b2a      	ldr	r3, [pc, #168]	; (8010664 <svCLI_Handler+0x254>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 80105be:	4b33      	ldr	r3, [pc, #204]	; (801068c <svCLI_Handler+0x27c>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dd27      	ble.n	8010616 <svCLI_Handler+0x206>
              switch (szChar) {
 80105c6:	79fb      	ldrb	r3, [r7, #7]
 80105c8:	2b41      	cmp	r3, #65	; 0x41
 80105ca:	d002      	beq.n	80105d2 <svCLI_Handler+0x1c2>
 80105cc:	2b42      	cmp	r3, #66	; 0x42
 80105ce:	d011      	beq.n	80105f4 <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 80105d0:	e021      	b.n	8010616 <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 80105d2:	2002      	movs	r0, #2
 80105d4:	f7ff fcb4 	bl	800ff40 <svCLIHandleHistory>
                  _svClearLine();
 80105d8:	f7ff fc7c 	bl	800fed4 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 80105dc:	4827      	ldr	r0, [pc, #156]	; (801067c <svCLI_Handler+0x26c>)
 80105de:	f7ff fadd 	bl	800fb9c <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 80105e2:	4923      	ldr	r1, [pc, #140]	; (8010670 <svCLI_Handler+0x260>)
 80105e4:	482a      	ldr	r0, [pc, #168]	; (8010690 <svCLI_Handler+0x280>)
 80105e6:	f7ff fad9 	bl	800fb9c <svCLI_Printf>
 80105ea:	4603      	mov	r3, r0
 80105ec:	461a      	mov	r2, r3
 80105ee:	4b1f      	ldr	r3, [pc, #124]	; (801066c <svCLI_Handler+0x25c>)
 80105f0:	601a      	str	r2, [r3, #0]
                  break;
 80105f2:	e010      	b.n	8010616 <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 80105f4:	2001      	movs	r0, #1
 80105f6:	f7ff fca3 	bl	800ff40 <svCLIHandleHistory>
                  _svClearLine();
 80105fa:	f7ff fc6b 	bl	800fed4 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 80105fe:	481f      	ldr	r0, [pc, #124]	; (801067c <svCLI_Handler+0x26c>)
 8010600:	f7ff facc 	bl	800fb9c <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010604:	491a      	ldr	r1, [pc, #104]	; (8010670 <svCLI_Handler+0x260>)
 8010606:	4822      	ldr	r0, [pc, #136]	; (8010690 <svCLI_Handler+0x280>)
 8010608:	f7ff fac8 	bl	800fb9c <svCLI_Printf>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	4b16      	ldr	r3, [pc, #88]	; (801066c <svCLI_Handler+0x25c>)
 8010612:	601a      	str	r2, [r3, #0]
                  break;
 8010614:	bf00      	nop
              }
            }
            if (svCommit) {
 8010616:	4b1f      	ldr	r3, [pc, #124]	; (8010694 <svCLI_Handler+0x284>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d01c      	beq.n	8010658 <svCLI_Handler+0x248>
              svCommit();
 801061e:	4b1d      	ldr	r3, [pc, #116]	; (8010694 <svCLI_Handler+0x284>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4798      	blx	r3
            }
            return;
 8010624:	e018      	b.n	8010658 <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 8010626:	4b11      	ldr	r3, [pc, #68]	; (801066c <svCLI_Handler+0x25c>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b7e      	cmp	r3, #126	; 0x7e
 801062c:	d80c      	bhi.n	8010648 <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 801062e:	4b1a      	ldr	r3, [pc, #104]	; (8010698 <svCLI_Handler+0x288>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	79fa      	ldrb	r2, [r7, #7]
 8010634:	4610      	mov	r0, r2
 8010636:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 8010638:	4b0c      	ldr	r3, [pc, #48]	; (801066c <svCLI_Handler+0x25c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	1c5a      	adds	r2, r3, #1
 801063e:	490b      	ldr	r1, [pc, #44]	; (801066c <svCLI_Handler+0x25c>)
 8010640:	600a      	str	r2, [r1, #0]
 8010642:	490b      	ldr	r1, [pc, #44]	; (8010670 <svCLI_Handler+0x260>)
 8010644:	79fa      	ldrb	r2, [r7, #7]
 8010646:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 8010648:	4b12      	ldr	r3, [pc, #72]	; (8010694 <svCLI_Handler+0x284>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d004      	beq.n	801065a <svCLI_Handler+0x24a>
    svCommit();
 8010650:	4b10      	ldr	r3, [pc, #64]	; (8010694 <svCLI_Handler+0x284>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4798      	blx	r3
 8010656:	e000      	b.n	801065a <svCLI_Handler+0x24a>
            return;
 8010658:	bf00      	nop
  }
}
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	20004198 	.word	0x20004198
 8010664:	200042b0 	.word	0x200042b0
 8010668:	0801cb44 	.word	0x0801cb44
 801066c:	2000418c 	.word	0x2000418c
 8010670:	20003f84 	.word	0x20003f84
 8010674:	200041a4 	.word	0x200041a4
 8010678:	200041ac 	.word	0x200041ac
 801067c:	20000068 	.word	0x20000068
 8010680:	200041a8 	.word	0x200041a8
 8010684:	0801cc18 	.word	0x0801cc18
 8010688:	0801cc1c 	.word	0x0801cc1c
 801068c:	20004184 	.word	0x20004184
 8010690:	0801cc24 	.word	0x0801cc24
 8010694:	200041a0 	.word	0x200041a0
 8010698:	2000419c 	.word	0x2000419c

0801069c <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 80106aa:	f7ff faa3 	bl	800fbf4 <svCLI_ShowHelp>
}
 80106ae:	bf00      	nop
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 80106b6:	b480      	push	{r7}
 80106b8:	b085      	sub	sp, #20
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d303      	bcc.n	80106da <svRingBuffer_GetCount+0x24>
	  return (h - t);
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	e009      	b.n	80106ee <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	68da      	ldr	r2, [r3, #12]
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	461a      	mov	r2, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	441a      	add	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	1ad3      	subs	r3, r2, r3
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3714      	adds	r7, #20
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 80106fa:	b480      	push	{r7}
 80106fc:	b083      	sub	sp, #12
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	609a      	str	r2, [r3, #8]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	689a      	ldr	r2, [r3, #8]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	619a      	str	r2, [r3, #24]
}
 801071e:	bf00      	nop
 8010720:	370c      	adds	r7, #12
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr

0801072a <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 801072a:	b480      	push	{r7}
 801072c:	b085      	sub	sp, #20
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	460b      	mov	r3, r1
 8010734:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	78fa      	ldrb	r2, [r7, #3]
 8010740:	701a      	strb	r2, [r3, #0]
	rb->head++;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	429a      	cmp	r2, r3
 8010756:	d109      	bne.n	801076c <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	619a      	str	r2, [r3, #24]
		nRet = -1;
 8010766:	f04f 33ff 	mov.w	r3, #4294967295
 801076a:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	429a      	cmp	r2, r3
 8010776:	d105      	bne.n	8010784 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2201      	movs	r2, #1
 801077c:	615a      	str	r2, [r3, #20]
		nRet = -2;
 801077e:	f06f 0301 	mvn.w	r3, #1
 8010782:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 8010784:	68fb      	ldr	r3, [r7, #12]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3714      	adds	r7, #20
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr

08010792 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 8010792:	b480      	push	{r7}
 8010794:	b085      	sub	sp, #20
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	689a      	ldr	r2, [r3, #8]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d103      	bne.n	80107c0 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	609a      	str	r2, [r3, #8]
	return byData;
 80107c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3714      	adds	r7, #20
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr

080107ce <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80107ce:	b480      	push	{r7}
 80107d0:	b083      	sub	sp, #12
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	4603      	mov	r3, r0
 80107d6:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80107d8:	88fb      	ldrh	r3, [r7, #6]
 80107da:	021b      	lsls	r3, r3, #8
 80107dc:	b21a      	sxth	r2, r3
 80107de:	88fb      	ldrh	r3, [r7, #6]
 80107e0:	0a1b      	lsrs	r3, r3, #8
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	b21b      	sxth	r3, r3
 80107e6:	4313      	orrs	r3, r2
 80107e8:	b21b      	sxth	r3, r3
 80107ea:	b29b      	uxth	r3, r3
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	061a      	lsls	r2, r3, #24
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	021b      	lsls	r3, r3, #8
 8010808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801080c:	431a      	orrs	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	0a1b      	lsrs	r3, r3, #8
 8010812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010816:	431a      	orrs	r2, r3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	0e1b      	lsrs	r3, r3, #24
 801081c:	4313      	orrs	r3, r2
}
 801081e:	4618      	mov	r0, r3
 8010820:	370c      	adds	r7, #12
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr

0801082a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801082a:	b480      	push	{r7}
 801082c:	b089      	sub	sp, #36	; 0x24
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010838:	2300      	movs	r3, #0
 801083a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801083c:	2300      	movs	r3, #0
 801083e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00d      	beq.n	801086a <lwip_standard_chksum+0x40>
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	dd0a      	ble.n	801086a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010854:	69fa      	ldr	r2, [r7, #28]
 8010856:	1c53      	adds	r3, r2, #1
 8010858:	61fb      	str	r3, [r7, #28]
 801085a:	f107 030e 	add.w	r3, r7, #14
 801085e:	3301      	adds	r3, #1
 8010860:	7812      	ldrb	r2, [r2, #0]
 8010862:	701a      	strb	r2, [r3, #0]
    len--;
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	3b01      	subs	r3, #1
 8010868:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801086e:	e00a      	b.n	8010886 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	1c9a      	adds	r2, r3, #2
 8010874:	61ba      	str	r2, [r7, #24]
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	461a      	mov	r2, r3
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	4413      	add	r3, r2
 801087e:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	3b02      	subs	r3, #2
 8010884:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2b01      	cmp	r3, #1
 801088a:	dcf1      	bgt.n	8010870 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	dd04      	ble.n	801089c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010892:	f107 030e 	add.w	r3, r7, #14
 8010896:	69ba      	ldr	r2, [r7, #24]
 8010898:	7812      	ldrb	r2, [r2, #0]
 801089a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801089c:	89fb      	ldrh	r3, [r7, #14]
 801089e:	461a      	mov	r2, r3
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	4413      	add	r3, r2
 80108a4:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	0c1a      	lsrs	r2, r3, #16
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	4413      	add	r3, r2
 80108b0:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	0c1a      	lsrs	r2, r3, #16
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	4413      	add	r3, r2
 80108bc:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d007      	beq.n	80108d4 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	021b      	lsls	r3, r3, #8
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	0a1b      	lsrs	r3, r3, #8
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	4313      	orrs	r3, r2
 80108d2:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	b29b      	uxth	r3, r3
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3724      	adds	r7, #36	; 0x24
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80108f0:	887b      	ldrh	r3, [r7, #2]
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ff98 	bl	801082a <lwip_standard_chksum>
 80108fa:	4603      	mov	r3, r0
 80108fc:	43db      	mvns	r3, r3
 80108fe:	b29b      	uxth	r3, r3
}
 8010900:	4618      	mov	r0, r3
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8010912:	f000 f8d5 	bl	8010ac0 <mem_init>
  memp_init();
 8010916:	f000 fbd7 	bl	80110c8 <memp_init>
  pbuf_init();
  netif_init();
 801091a:	f000 fcd5 	bl	80112c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801091e:	f007 fedb 	bl	80186d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010922:	f001 fdab 	bl	801247c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010926:	f007 fe4d 	bl	80185c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801092a:	bf00      	nop
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
	...

08010934 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801093e:	4b05      	ldr	r3, [pc, #20]	; (8010954 <ptr_to_mem+0x20>)
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	88fb      	ldrh	r3, [r7, #6]
 8010944:	4413      	add	r3, r2
}
 8010946:	4618      	mov	r0, r3
 8010948:	370c      	adds	r7, #12
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	200042cc 	.word	0x200042cc

08010958 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010960:	4b05      	ldr	r3, [pc, #20]	; (8010978 <mem_to_ptr+0x20>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	b29b      	uxth	r3, r3
}
 801096a:	4618      	mov	r0, r3
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop
 8010978:	200042cc 	.word	0x200042cc

0801097c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801097c:	b590      	push	{r4, r7, lr}
 801097e:	b085      	sub	sp, #20
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010984:	4b45      	ldr	r3, [pc, #276]	; (8010a9c <plug_holes+0x120>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	429a      	cmp	r2, r3
 801098c:	d206      	bcs.n	801099c <plug_holes+0x20>
 801098e:	4b44      	ldr	r3, [pc, #272]	; (8010aa0 <plug_holes+0x124>)
 8010990:	f240 12df 	movw	r2, #479	; 0x1df
 8010994:	4943      	ldr	r1, [pc, #268]	; (8010aa4 <plug_holes+0x128>)
 8010996:	4844      	ldr	r0, [pc, #272]	; (8010aa8 <plug_holes+0x12c>)
 8010998:	f00a fe94 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801099c:	4b43      	ldr	r3, [pc, #268]	; (8010aac <plug_holes+0x130>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	687a      	ldr	r2, [r7, #4]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d306      	bcc.n	80109b4 <plug_holes+0x38>
 80109a6:	4b3e      	ldr	r3, [pc, #248]	; (8010aa0 <plug_holes+0x124>)
 80109a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80109ac:	4940      	ldr	r1, [pc, #256]	; (8010ab0 <plug_holes+0x134>)
 80109ae:	483e      	ldr	r0, [pc, #248]	; (8010aa8 <plug_holes+0x12c>)
 80109b0:	f00a fe88 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	791b      	ldrb	r3, [r3, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d006      	beq.n	80109ca <plug_holes+0x4e>
 80109bc:	4b38      	ldr	r3, [pc, #224]	; (8010aa0 <plug_holes+0x124>)
 80109be:	f240 12e1 	movw	r2, #481	; 0x1e1
 80109c2:	493c      	ldr	r1, [pc, #240]	; (8010ab4 <plug_holes+0x138>)
 80109c4:	4838      	ldr	r0, [pc, #224]	; (8010aa8 <plug_holes+0x12c>)
 80109c6:	f00a fe7d 	bl	801b6c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80109d2:	d906      	bls.n	80109e2 <plug_holes+0x66>
 80109d4:	4b32      	ldr	r3, [pc, #200]	; (8010aa0 <plug_holes+0x124>)
 80109d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80109da:	4937      	ldr	r1, [pc, #220]	; (8010ab8 <plug_holes+0x13c>)
 80109dc:	4832      	ldr	r0, [pc, #200]	; (8010aa8 <plug_holes+0x12c>)
 80109de:	f00a fe71 	bl	801b6c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7ff ffa4 	bl	8010934 <ptr_to_mem>
 80109ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d024      	beq.n	8010a40 <plug_holes+0xc4>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	791b      	ldrb	r3, [r3, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d120      	bne.n	8010a40 <plug_holes+0xc4>
 80109fe:	4b2b      	ldr	r3, [pc, #172]	; (8010aac <plug_holes+0x130>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d01b      	beq.n	8010a40 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010a08:	4b2c      	ldr	r3, [pc, #176]	; (8010abc <plug_holes+0x140>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	68fa      	ldr	r2, [r7, #12]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d102      	bne.n	8010a18 <plug_holes+0x9c>
      lfree = mem;
 8010a12:	4a2a      	ldr	r2, [pc, #168]	; (8010abc <plug_holes+0x140>)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	881a      	ldrh	r2, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	881b      	ldrh	r3, [r3, #0]
 8010a24:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010a28:	d00a      	beq.n	8010a40 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	881b      	ldrh	r3, [r3, #0]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7ff ff80 	bl	8010934 <ptr_to_mem>
 8010a34:	4604      	mov	r4, r0
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7ff ff8e 	bl	8010958 <mem_to_ptr>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	885b      	ldrh	r3, [r3, #2]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7ff ff75 	bl	8010934 <ptr_to_mem>
 8010a4a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010a4c:	68ba      	ldr	r2, [r7, #8]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d01f      	beq.n	8010a94 <plug_holes+0x118>
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	791b      	ldrb	r3, [r3, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d11b      	bne.n	8010a94 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010a5c:	4b17      	ldr	r3, [pc, #92]	; (8010abc <plug_holes+0x140>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d102      	bne.n	8010a6c <plug_holes+0xf0>
      lfree = pmem;
 8010a66:	4a15      	ldr	r2, [pc, #84]	; (8010abc <plug_holes+0x140>)
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	881a      	ldrh	r2, [r3, #0]
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	881b      	ldrh	r3, [r3, #0]
 8010a78:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010a7c:	d00a      	beq.n	8010a94 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7ff ff56 	bl	8010934 <ptr_to_mem>
 8010a88:	4604      	mov	r4, r0
 8010a8a:	68b8      	ldr	r0, [r7, #8]
 8010a8c:	f7ff ff64 	bl	8010958 <mem_to_ptr>
 8010a90:	4603      	mov	r3, r0
 8010a92:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010a94:	bf00      	nop
 8010a96:	3714      	adds	r7, #20
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd90      	pop	{r4, r7, pc}
 8010a9c:	200042cc 	.word	0x200042cc
 8010aa0:	0801cc44 	.word	0x0801cc44
 8010aa4:	0801cc74 	.word	0x0801cc74
 8010aa8:	0801cc8c 	.word	0x0801cc8c
 8010aac:	200042d0 	.word	0x200042d0
 8010ab0:	0801ccb4 	.word	0x0801ccb4
 8010ab4:	0801ccd0 	.word	0x0801ccd0
 8010ab8:	0801ccec 	.word	0x0801ccec
 8010abc:	200042d4 	.word	0x200042d4

08010ac0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010ac6:	4b16      	ldr	r3, [pc, #88]	; (8010b20 <mem_init+0x60>)
 8010ac8:	4a16      	ldr	r2, [pc, #88]	; (8010b24 <mem_init+0x64>)
 8010aca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010acc:	4b14      	ldr	r3, [pc, #80]	; (8010b20 <mem_init+0x60>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010ad8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010ae6:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8010aea:	f7ff ff23 	bl	8010934 <ptr_to_mem>
 8010aee:	4603      	mov	r3, r0
 8010af0:	4a0d      	ldr	r2, [pc, #52]	; (8010b28 <mem_init+0x68>)
 8010af2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010af4:	4b0c      	ldr	r3, [pc, #48]	; (8010b28 <mem_init+0x68>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2201      	movs	r2, #1
 8010afa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010afc:	4b0a      	ldr	r3, [pc, #40]	; (8010b28 <mem_init+0x68>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010b04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010b06:	4b08      	ldr	r3, [pc, #32]	; (8010b28 <mem_init+0x68>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010b0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010b10:	4b03      	ldr	r3, [pc, #12]	; (8010b20 <mem_init+0x60>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a05      	ldr	r2, [pc, #20]	; (8010b2c <mem_init+0x6c>)
 8010b16:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010b18:	bf00      	nop
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	200042cc 	.word	0x200042cc
 8010b24:	20084000 	.word	0x20084000
 8010b28:	200042d0 	.word	0x200042d0
 8010b2c:	200042d4 	.word	0x200042d4

08010b30 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f7ff ff0d 	bl	8010958 <mem_to_ptr>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff fef4 	bl	8010934 <ptr_to_mem>
 8010b4c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	885b      	ldrh	r3, [r3, #2]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff feee 	bl	8010934 <ptr_to_mem>
 8010b58:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	881b      	ldrh	r3, [r3, #0]
 8010b5e:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010b62:	d818      	bhi.n	8010b96 <mem_link_valid+0x66>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	885b      	ldrh	r3, [r3, #2]
 8010b68:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010b6c:	d813      	bhi.n	8010b96 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010b72:	8afa      	ldrh	r2, [r7, #22]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d004      	beq.n	8010b82 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	881b      	ldrh	r3, [r3, #0]
 8010b7c:	8afa      	ldrh	r2, [r7, #22]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d109      	bne.n	8010b96 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010b82:	4b08      	ldr	r3, [pc, #32]	; (8010ba4 <mem_link_valid+0x74>)
 8010b84:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010b86:	693a      	ldr	r2, [r7, #16]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d006      	beq.n	8010b9a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	885b      	ldrh	r3, [r3, #2]
 8010b90:	8afa      	ldrh	r2, [r7, #22]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d001      	beq.n	8010b9a <mem_link_valid+0x6a>
    return 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	e000      	b.n	8010b9c <mem_link_valid+0x6c>
  }
  return 1;
 8010b9a:	2301      	movs	r3, #1
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	200042d0 	.word	0x200042d0

08010ba8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d04c      	beq.n	8010c50 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f003 0303 	and.w	r3, r3, #3
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d007      	beq.n	8010bd0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010bc0:	4b25      	ldr	r3, [pc, #148]	; (8010c58 <mem_free+0xb0>)
 8010bc2:	f240 2273 	movw	r2, #627	; 0x273
 8010bc6:	4925      	ldr	r1, [pc, #148]	; (8010c5c <mem_free+0xb4>)
 8010bc8:	4825      	ldr	r0, [pc, #148]	; (8010c60 <mem_free+0xb8>)
 8010bca:	f00a fd7b 	bl	801b6c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010bce:	e040      	b.n	8010c52 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	3b08      	subs	r3, #8
 8010bd4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010bd6:	4b23      	ldr	r3, [pc, #140]	; (8010c64 <mem_free+0xbc>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68fa      	ldr	r2, [r7, #12]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d306      	bcc.n	8010bee <mem_free+0x46>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f103 020c 	add.w	r2, r3, #12
 8010be6:	4b20      	ldr	r3, [pc, #128]	; (8010c68 <mem_free+0xc0>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d907      	bls.n	8010bfe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010bee:	4b1a      	ldr	r3, [pc, #104]	; (8010c58 <mem_free+0xb0>)
 8010bf0:	f240 227f 	movw	r2, #639	; 0x27f
 8010bf4:	491d      	ldr	r1, [pc, #116]	; (8010c6c <mem_free+0xc4>)
 8010bf6:	481a      	ldr	r0, [pc, #104]	; (8010c60 <mem_free+0xb8>)
 8010bf8:	f00a fd64 	bl	801b6c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010bfc:	e029      	b.n	8010c52 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	791b      	ldrb	r3, [r3, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d107      	bne.n	8010c16 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010c06:	4b14      	ldr	r3, [pc, #80]	; (8010c58 <mem_free+0xb0>)
 8010c08:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010c0c:	4918      	ldr	r1, [pc, #96]	; (8010c70 <mem_free+0xc8>)
 8010c0e:	4814      	ldr	r0, [pc, #80]	; (8010c60 <mem_free+0xb8>)
 8010c10:	f00a fd58 	bl	801b6c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010c14:	e01d      	b.n	8010c52 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7ff ff8a 	bl	8010b30 <mem_link_valid>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d107      	bne.n	8010c32 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010c22:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <mem_free+0xb0>)
 8010c24:	f240 2295 	movw	r2, #661	; 0x295
 8010c28:	4912      	ldr	r1, [pc, #72]	; (8010c74 <mem_free+0xcc>)
 8010c2a:	480d      	ldr	r0, [pc, #52]	; (8010c60 <mem_free+0xb8>)
 8010c2c:	f00a fd4a 	bl	801b6c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010c30:	e00f      	b.n	8010c52 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2200      	movs	r2, #0
 8010c36:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010c38:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <mem_free+0xd0>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d202      	bcs.n	8010c48 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010c42:	4a0d      	ldr	r2, [pc, #52]	; (8010c78 <mem_free+0xd0>)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f7ff fe97 	bl	801097c <plug_holes>
 8010c4e:	e000      	b.n	8010c52 <mem_free+0xaa>
    return;
 8010c50:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	0801cc44 	.word	0x0801cc44
 8010c5c:	0801cd18 	.word	0x0801cd18
 8010c60:	0801cc8c 	.word	0x0801cc8c
 8010c64:	200042cc 	.word	0x200042cc
 8010c68:	200042d0 	.word	0x200042d0
 8010c6c:	0801cd3c 	.word	0x0801cd3c
 8010c70:	0801cd58 	.word	0x0801cd58
 8010c74:	0801cd80 	.word	0x0801cd80
 8010c78:	200042d4 	.word	0x200042d4

08010c7c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b088      	sub	sp, #32
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	460b      	mov	r3, r1
 8010c86:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010c88:	887b      	ldrh	r3, [r7, #2]
 8010c8a:	3303      	adds	r3, #3
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	f023 0303 	bic.w	r3, r3, #3
 8010c92:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010c94:	8bfb      	ldrh	r3, [r7, #30]
 8010c96:	2b0b      	cmp	r3, #11
 8010c98:	d801      	bhi.n	8010c9e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010c9a:	230c      	movs	r3, #12
 8010c9c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010c9e:	8bfb      	ldrh	r3, [r7, #30]
 8010ca0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010ca4:	d803      	bhi.n	8010cae <mem_trim+0x32>
 8010ca6:	8bfa      	ldrh	r2, [r7, #30]
 8010ca8:	887b      	ldrh	r3, [r7, #2]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d201      	bcs.n	8010cb2 <mem_trim+0x36>
    return NULL;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e0cc      	b.n	8010e4c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010cb2:	4b68      	ldr	r3, [pc, #416]	; (8010e54 <mem_trim+0x1d8>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d304      	bcc.n	8010cc6 <mem_trim+0x4a>
 8010cbc:	4b66      	ldr	r3, [pc, #408]	; (8010e58 <mem_trim+0x1dc>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d306      	bcc.n	8010cd4 <mem_trim+0x58>
 8010cc6:	4b65      	ldr	r3, [pc, #404]	; (8010e5c <mem_trim+0x1e0>)
 8010cc8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010ccc:	4964      	ldr	r1, [pc, #400]	; (8010e60 <mem_trim+0x1e4>)
 8010cce:	4865      	ldr	r0, [pc, #404]	; (8010e64 <mem_trim+0x1e8>)
 8010cd0:	f00a fcf8 	bl	801b6c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010cd4:	4b5f      	ldr	r3, [pc, #380]	; (8010e54 <mem_trim+0x1d8>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d304      	bcc.n	8010ce8 <mem_trim+0x6c>
 8010cde:	4b5e      	ldr	r3, [pc, #376]	; (8010e58 <mem_trim+0x1dc>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d301      	bcc.n	8010cec <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	e0af      	b.n	8010e4c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3b08      	subs	r3, #8
 8010cf0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010cf2:	69b8      	ldr	r0, [r7, #24]
 8010cf4:	f7ff fe30 	bl	8010958 <mem_to_ptr>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	881a      	ldrh	r2, [r3, #0]
 8010d00:	8afb      	ldrh	r3, [r7, #22]
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	3b08      	subs	r3, #8
 8010d08:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010d0a:	8bfa      	ldrh	r2, [r7, #30]
 8010d0c:	8abb      	ldrh	r3, [r7, #20]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d906      	bls.n	8010d20 <mem_trim+0xa4>
 8010d12:	4b52      	ldr	r3, [pc, #328]	; (8010e5c <mem_trim+0x1e0>)
 8010d14:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010d18:	4953      	ldr	r1, [pc, #332]	; (8010e68 <mem_trim+0x1ec>)
 8010d1a:	4852      	ldr	r0, [pc, #328]	; (8010e64 <mem_trim+0x1e8>)
 8010d1c:	f00a fcd2 	bl	801b6c4 <iprintf>
  if (newsize > size) {
 8010d20:	8bfa      	ldrh	r2, [r7, #30]
 8010d22:	8abb      	ldrh	r3, [r7, #20]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d901      	bls.n	8010d2c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e08f      	b.n	8010e4c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8010d2c:	8bfa      	ldrh	r2, [r7, #30]
 8010d2e:	8abb      	ldrh	r3, [r7, #20]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d101      	bne.n	8010d38 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	e089      	b.n	8010e4c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff fdf9 	bl	8010934 <ptr_to_mem>
 8010d42:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	791b      	ldrb	r3, [r3, #4]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d13f      	bne.n	8010dcc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	881b      	ldrh	r3, [r3, #0]
 8010d50:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010d54:	d106      	bne.n	8010d64 <mem_trim+0xe8>
 8010d56:	4b41      	ldr	r3, [pc, #260]	; (8010e5c <mem_trim+0x1e0>)
 8010d58:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010d5c:	4943      	ldr	r1, [pc, #268]	; (8010e6c <mem_trim+0x1f0>)
 8010d5e:	4841      	ldr	r0, [pc, #260]	; (8010e64 <mem_trim+0x1e8>)
 8010d60:	f00a fcb0 	bl	801b6c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	881b      	ldrh	r3, [r3, #0]
 8010d68:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010d6a:	8afa      	ldrh	r2, [r7, #22]
 8010d6c:	8bfb      	ldrh	r3, [r7, #30]
 8010d6e:	4413      	add	r3, r2
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	3308      	adds	r3, #8
 8010d74:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010d76:	4b3e      	ldr	r3, [pc, #248]	; (8010e70 <mem_trim+0x1f4>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	693a      	ldr	r2, [r7, #16]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d106      	bne.n	8010d8e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8010d80:	89fb      	ldrh	r3, [r7, #14]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff fdd6 	bl	8010934 <ptr_to_mem>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	4a39      	ldr	r2, [pc, #228]	; (8010e70 <mem_trim+0x1f4>)
 8010d8c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010d8e:	89fb      	ldrh	r3, [r7, #14]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff fdcf 	bl	8010934 <ptr_to_mem>
 8010d96:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	89ba      	ldrh	r2, [r7, #12]
 8010da2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	8afa      	ldrh	r2, [r7, #22]
 8010da8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	89fa      	ldrh	r2, [r7, #14]
 8010dae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010db8:	d047      	beq.n	8010e4a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff fdb8 	bl	8010934 <ptr_to_mem>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	89fb      	ldrh	r3, [r7, #14]
 8010dc8:	8053      	strh	r3, [r2, #2]
 8010dca:	e03e      	b.n	8010e4a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010dcc:	8bfb      	ldrh	r3, [r7, #30]
 8010dce:	f103 0214 	add.w	r2, r3, #20
 8010dd2:	8abb      	ldrh	r3, [r7, #20]
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d838      	bhi.n	8010e4a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010dd8:	8afa      	ldrh	r2, [r7, #22]
 8010dda:	8bfb      	ldrh	r3, [r7, #30]
 8010ddc:	4413      	add	r3, r2
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	3308      	adds	r3, #8
 8010de2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010dec:	d106      	bne.n	8010dfc <mem_trim+0x180>
 8010dee:	4b1b      	ldr	r3, [pc, #108]	; (8010e5c <mem_trim+0x1e0>)
 8010df0:	f240 3216 	movw	r2, #790	; 0x316
 8010df4:	491d      	ldr	r1, [pc, #116]	; (8010e6c <mem_trim+0x1f0>)
 8010df6:	481b      	ldr	r0, [pc, #108]	; (8010e64 <mem_trim+0x1e8>)
 8010df8:	f00a fc64 	bl	801b6c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010dfc:	89fb      	ldrh	r3, [r7, #14]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff fd98 	bl	8010934 <ptr_to_mem>
 8010e04:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010e06:	4b1a      	ldr	r3, [pc, #104]	; (8010e70 <mem_trim+0x1f4>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	693a      	ldr	r2, [r7, #16]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d202      	bcs.n	8010e16 <mem_trim+0x19a>
      lfree = mem2;
 8010e10:	4a17      	ldr	r2, [pc, #92]	; (8010e70 <mem_trim+0x1f4>)
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	881a      	ldrh	r2, [r3, #0]
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	8afa      	ldrh	r2, [r7, #22]
 8010e28:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	89fa      	ldrh	r2, [r7, #14]
 8010e2e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010e38:	d007      	beq.n	8010e4a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	881b      	ldrh	r3, [r3, #0]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff fd78 	bl	8010934 <ptr_to_mem>
 8010e44:	4602      	mov	r2, r0
 8010e46:	89fb      	ldrh	r3, [r7, #14]
 8010e48:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8010e4a:	687b      	ldr	r3, [r7, #4]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3720      	adds	r7, #32
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	200042cc 	.word	0x200042cc
 8010e58:	200042d0 	.word	0x200042d0
 8010e5c:	0801cc44 	.word	0x0801cc44
 8010e60:	0801cdb4 	.word	0x0801cdb4
 8010e64:	0801cc8c 	.word	0x0801cc8c
 8010e68:	0801cdcc 	.word	0x0801cdcc
 8010e6c:	0801cdec 	.word	0x0801cdec
 8010e70:	200042d4 	.word	0x200042d4

08010e74 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b088      	sub	sp, #32
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010e7e:	88fb      	ldrh	r3, [r7, #6]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d101      	bne.n	8010e88 <mem_malloc+0x14>
    return NULL;
 8010e84:	2300      	movs	r3, #0
 8010e86:	e0d9      	b.n	801103c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010e88:	88fb      	ldrh	r3, [r7, #6]
 8010e8a:	3303      	adds	r3, #3
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	f023 0303 	bic.w	r3, r3, #3
 8010e92:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010e94:	8bbb      	ldrh	r3, [r7, #28]
 8010e96:	2b0b      	cmp	r3, #11
 8010e98:	d801      	bhi.n	8010e9e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010e9a:	230c      	movs	r3, #12
 8010e9c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010e9e:	8bbb      	ldrh	r3, [r7, #28]
 8010ea0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010ea4:	d803      	bhi.n	8010eae <mem_malloc+0x3a>
 8010ea6:	8bba      	ldrh	r2, [r7, #28]
 8010ea8:	88fb      	ldrh	r3, [r7, #6]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d201      	bcs.n	8010eb2 <mem_malloc+0x3e>
    return NULL;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	e0c4      	b.n	801103c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010eb2:	4b64      	ldr	r3, [pc, #400]	; (8011044 <mem_malloc+0x1d0>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7ff fd4e 	bl	8010958 <mem_to_ptr>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	83fb      	strh	r3, [r7, #30]
 8010ec0:	e0b4      	b.n	801102c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010ec2:	8bfb      	ldrh	r3, [r7, #30]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7ff fd35 	bl	8010934 <ptr_to_mem>
 8010eca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	791b      	ldrb	r3, [r3, #4]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f040 80a4 	bne.w	801101e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	461a      	mov	r2, r3
 8010edc:	8bfb      	ldrh	r3, [r7, #30]
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	f1a3 0208 	sub.w	r2, r3, #8
 8010ee4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	f0c0 8099 	bcc.w	801101e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	881b      	ldrh	r3, [r3, #0]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	8bfb      	ldrh	r3, [r7, #30]
 8010ef4:	1ad3      	subs	r3, r2, r3
 8010ef6:	f1a3 0208 	sub.w	r2, r3, #8
 8010efa:	8bbb      	ldrh	r3, [r7, #28]
 8010efc:	3314      	adds	r3, #20
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d333      	bcc.n	8010f6a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010f02:	8bfa      	ldrh	r2, [r7, #30]
 8010f04:	8bbb      	ldrh	r3, [r7, #28]
 8010f06:	4413      	add	r3, r2
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	3308      	adds	r3, #8
 8010f0c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010f0e:	8a7b      	ldrh	r3, [r7, #18]
 8010f10:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010f14:	d106      	bne.n	8010f24 <mem_malloc+0xb0>
 8010f16:	4b4c      	ldr	r3, [pc, #304]	; (8011048 <mem_malloc+0x1d4>)
 8010f18:	f240 3287 	movw	r2, #903	; 0x387
 8010f1c:	494b      	ldr	r1, [pc, #300]	; (801104c <mem_malloc+0x1d8>)
 8010f1e:	484c      	ldr	r0, [pc, #304]	; (8011050 <mem_malloc+0x1dc>)
 8010f20:	f00a fbd0 	bl	801b6c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010f24:	8a7b      	ldrh	r3, [r7, #18]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fd04 	bl	8010934 <ptr_to_mem>
 8010f2c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	881a      	ldrh	r2, [r3, #0]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	8bfa      	ldrh	r2, [r7, #30]
 8010f40:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	8a7a      	ldrh	r2, [r7, #18]
 8010f46:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010f56:	d00b      	beq.n	8010f70 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7ff fce9 	bl	8010934 <ptr_to_mem>
 8010f62:	4602      	mov	r2, r0
 8010f64:	8a7b      	ldrh	r3, [r7, #18]
 8010f66:	8053      	strh	r3, [r2, #2]
 8010f68:	e002      	b.n	8010f70 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010f70:	4b34      	ldr	r3, [pc, #208]	; (8011044 <mem_malloc+0x1d0>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	697a      	ldr	r2, [r7, #20]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d127      	bne.n	8010fca <mem_malloc+0x156>
          struct mem *cur = lfree;
 8010f7a:	4b32      	ldr	r3, [pc, #200]	; (8011044 <mem_malloc+0x1d0>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010f80:	e005      	b.n	8010f8e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff fcd4 	bl	8010934 <ptr_to_mem>
 8010f8c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	791b      	ldrb	r3, [r3, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d004      	beq.n	8010fa0 <mem_malloc+0x12c>
 8010f96:	4b2f      	ldr	r3, [pc, #188]	; (8011054 <mem_malloc+0x1e0>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d1f0      	bne.n	8010f82 <mem_malloc+0x10e>
          }
          lfree = cur;
 8010fa0:	4a28      	ldr	r2, [pc, #160]	; (8011044 <mem_malloc+0x1d0>)
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010fa6:	4b27      	ldr	r3, [pc, #156]	; (8011044 <mem_malloc+0x1d0>)
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	4b2a      	ldr	r3, [pc, #168]	; (8011054 <mem_malloc+0x1e0>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d00b      	beq.n	8010fca <mem_malloc+0x156>
 8010fb2:	4b24      	ldr	r3, [pc, #144]	; (8011044 <mem_malloc+0x1d0>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	791b      	ldrb	r3, [r3, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <mem_malloc+0x156>
 8010fbc:	4b22      	ldr	r3, [pc, #136]	; (8011048 <mem_malloc+0x1d4>)
 8010fbe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010fc2:	4925      	ldr	r1, [pc, #148]	; (8011058 <mem_malloc+0x1e4>)
 8010fc4:	4822      	ldr	r0, [pc, #136]	; (8011050 <mem_malloc+0x1dc>)
 8010fc6:	f00a fb7d 	bl	801b6c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010fca:	8bba      	ldrh	r2, [r7, #28]
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	4413      	add	r3, r2
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	4a20      	ldr	r2, [pc, #128]	; (8011054 <mem_malloc+0x1e0>)
 8010fd4:	6812      	ldr	r2, [r2, #0]
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d906      	bls.n	8010fe8 <mem_malloc+0x174>
 8010fda:	4b1b      	ldr	r3, [pc, #108]	; (8011048 <mem_malloc+0x1d4>)
 8010fdc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010fe0:	491e      	ldr	r1, [pc, #120]	; (801105c <mem_malloc+0x1e8>)
 8010fe2:	481b      	ldr	r0, [pc, #108]	; (8011050 <mem_malloc+0x1dc>)
 8010fe4:	f00a fb6e 	bl	801b6c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	f003 0303 	and.w	r3, r3, #3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d006      	beq.n	8011000 <mem_malloc+0x18c>
 8010ff2:	4b15      	ldr	r3, [pc, #84]	; (8011048 <mem_malloc+0x1d4>)
 8010ff4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010ff8:	4919      	ldr	r1, [pc, #100]	; (8011060 <mem_malloc+0x1ec>)
 8010ffa:	4815      	ldr	r0, [pc, #84]	; (8011050 <mem_malloc+0x1dc>)
 8010ffc:	f00a fb62 	bl	801b6c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	f003 0303 	and.w	r3, r3, #3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d006      	beq.n	8011018 <mem_malloc+0x1a4>
 801100a:	4b0f      	ldr	r3, [pc, #60]	; (8011048 <mem_malloc+0x1d4>)
 801100c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011010:	4914      	ldr	r1, [pc, #80]	; (8011064 <mem_malloc+0x1f0>)
 8011012:	480f      	ldr	r0, [pc, #60]	; (8011050 <mem_malloc+0x1dc>)
 8011014:	f00a fb56 	bl	801b6c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	3308      	adds	r3, #8
 801101c:	e00e      	b.n	801103c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801101e:	8bfb      	ldrh	r3, [r7, #30]
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff fc87 	bl	8010934 <ptr_to_mem>
 8011026:	4603      	mov	r3, r0
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801102c:	8bfa      	ldrh	r2, [r7, #30]
 801102e:	8bbb      	ldrh	r3, [r7, #28]
 8011030:	f5c3 5360 	rsb	r3, r3, #14336	; 0x3800
 8011034:	429a      	cmp	r2, r3
 8011036:	f4ff af44 	bcc.w	8010ec2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801103a:	2300      	movs	r3, #0
}
 801103c:	4618      	mov	r0, r3
 801103e:	3720      	adds	r7, #32
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	200042d4 	.word	0x200042d4
 8011048:	0801cc44 	.word	0x0801cc44
 801104c:	0801cdec 	.word	0x0801cdec
 8011050:	0801cc8c 	.word	0x0801cc8c
 8011054:	200042d0 	.word	0x200042d0
 8011058:	0801ce00 	.word	0x0801ce00
 801105c:	0801ce1c 	.word	0x0801ce1c
 8011060:	0801ce4c 	.word	0x0801ce4c
 8011064:	0801ce7c 	.word	0x0801ce7c

08011068 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	2200      	movs	r2, #0
 8011076:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	3303      	adds	r3, #3
 801107e:	f023 0303 	bic.w	r3, r3, #3
 8011082:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011084:	2300      	movs	r3, #0
 8011086:	60fb      	str	r3, [r7, #12]
 8011088:	e011      	b.n	80110ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	689b      	ldr	r3, [r3, #8]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	461a      	mov	r2, r3
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	4413      	add	r3, r2
 80110a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	3301      	adds	r3, #1
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	885b      	ldrh	r3, [r3, #2]
 80110b2:	461a      	mov	r2, r3
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	4293      	cmp	r3, r2
 80110b8:	dbe7      	blt.n	801108a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80110ba:	bf00      	nop
 80110bc:	bf00      	nop
 80110be:	3714      	adds	r7, #20
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80110ce:	2300      	movs	r3, #0
 80110d0:	80fb      	strh	r3, [r7, #6]
 80110d2:	e009      	b.n	80110e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80110d4:	88fb      	ldrh	r3, [r7, #6]
 80110d6:	4a08      	ldr	r2, [pc, #32]	; (80110f8 <memp_init+0x30>)
 80110d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff ffc3 	bl	8011068 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80110e2:	88fb      	ldrh	r3, [r7, #6]
 80110e4:	3301      	adds	r3, #1
 80110e6:	80fb      	strh	r3, [r7, #6]
 80110e8:	88fb      	ldrh	r3, [r7, #6]
 80110ea:	2b08      	cmp	r3, #8
 80110ec:	d9f2      	bls.n	80110d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80110ee:	bf00      	nop
 80110f0:	bf00      	nop
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	0801f800 	.word	0x0801f800

080110fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d012      	beq.n	8011138 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	689b      	ldr	r3, [r3, #8]
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	6812      	ldr	r2, [r2, #0]
 801111a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f003 0303 	and.w	r3, r3, #3
 8011122:	2b00      	cmp	r3, #0
 8011124:	d006      	beq.n	8011134 <do_memp_malloc_pool+0x38>
 8011126:	4b07      	ldr	r3, [pc, #28]	; (8011144 <do_memp_malloc_pool+0x48>)
 8011128:	f44f 728c 	mov.w	r2, #280	; 0x118
 801112c:	4906      	ldr	r1, [pc, #24]	; (8011148 <do_memp_malloc_pool+0x4c>)
 801112e:	4807      	ldr	r0, [pc, #28]	; (801114c <do_memp_malloc_pool+0x50>)
 8011130:	f00a fac8 	bl	801b6c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	e000      	b.n	801113a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	0801cea0 	.word	0x0801cea0
 8011148:	0801ced0 	.word	0x0801ced0
 801114c:	0801cef4 	.word	0x0801cef4

08011150 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d106      	bne.n	801116c <memp_malloc_pool+0x1c>
 801115e:	4b0a      	ldr	r3, [pc, #40]	; (8011188 <memp_malloc_pool+0x38>)
 8011160:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011164:	4909      	ldr	r1, [pc, #36]	; (801118c <memp_malloc_pool+0x3c>)
 8011166:	480a      	ldr	r0, [pc, #40]	; (8011190 <memp_malloc_pool+0x40>)
 8011168:	f00a faac 	bl	801b6c4 <iprintf>
  if (desc == NULL) {
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <memp_malloc_pool+0x26>
    return NULL;
 8011172:	2300      	movs	r3, #0
 8011174:	e003      	b.n	801117e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f7ff ffc0 	bl	80110fc <do_memp_malloc_pool>
 801117c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801117e:	4618      	mov	r0, r3
 8011180:	3708      	adds	r7, #8
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	0801cea0 	.word	0x0801cea0
 801118c:	0801cf1c 	.word	0x0801cf1c
 8011190:	0801cef4 	.word	0x0801cef4

08011194 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	4603      	mov	r3, r0
 801119c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	2b08      	cmp	r3, #8
 80111a2:	d908      	bls.n	80111b6 <memp_malloc+0x22>
 80111a4:	4b0a      	ldr	r3, [pc, #40]	; (80111d0 <memp_malloc+0x3c>)
 80111a6:	f240 1257 	movw	r2, #343	; 0x157
 80111aa:	490a      	ldr	r1, [pc, #40]	; (80111d4 <memp_malloc+0x40>)
 80111ac:	480a      	ldr	r0, [pc, #40]	; (80111d8 <memp_malloc+0x44>)
 80111ae:	f00a fa89 	bl	801b6c4 <iprintf>
 80111b2:	2300      	movs	r3, #0
 80111b4:	e008      	b.n	80111c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80111b6:	79fb      	ldrb	r3, [r7, #7]
 80111b8:	4a08      	ldr	r2, [pc, #32]	; (80111dc <memp_malloc+0x48>)
 80111ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff ff9c 	bl	80110fc <do_memp_malloc_pool>
 80111c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80111c6:	68fb      	ldr	r3, [r7, #12]
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3710      	adds	r7, #16
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	0801cea0 	.word	0x0801cea0
 80111d4:	0801cf30 	.word	0x0801cf30
 80111d8:	0801cef4 	.word	0x0801cef4
 80111dc:	0801f800 	.word	0x0801f800

080111e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	f003 0303 	and.w	r3, r3, #3
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d006      	beq.n	8011202 <do_memp_free_pool+0x22>
 80111f4:	4b0a      	ldr	r3, [pc, #40]	; (8011220 <do_memp_free_pool+0x40>)
 80111f6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80111fa:	490a      	ldr	r1, [pc, #40]	; (8011224 <do_memp_free_pool+0x44>)
 80111fc:	480a      	ldr	r0, [pc, #40]	; (8011228 <do_memp_free_pool+0x48>)
 80111fe:	f00a fa61 	bl	801b6c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	689b      	ldr	r3, [r3, #8]
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8011218:	bf00      	nop
 801121a:	3710      	adds	r7, #16
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	0801cea0 	.word	0x0801cea0
 8011224:	0801cf50 	.word	0x0801cf50
 8011228:	0801cef4 	.word	0x0801cef4

0801122c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d106      	bne.n	801124a <memp_free_pool+0x1e>
 801123c:	4b0a      	ldr	r3, [pc, #40]	; (8011268 <memp_free_pool+0x3c>)
 801123e:	f240 1295 	movw	r2, #405	; 0x195
 8011242:	490a      	ldr	r1, [pc, #40]	; (801126c <memp_free_pool+0x40>)
 8011244:	480a      	ldr	r0, [pc, #40]	; (8011270 <memp_free_pool+0x44>)
 8011246:	f00a fa3d 	bl	801b6c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d007      	beq.n	8011260 <memp_free_pool+0x34>
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d004      	beq.n	8011260 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011256:	6839      	ldr	r1, [r7, #0]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff ffc1 	bl	80111e0 <do_memp_free_pool>
 801125e:	e000      	b.n	8011262 <memp_free_pool+0x36>
    return;
 8011260:	bf00      	nop
}
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	0801cea0 	.word	0x0801cea0
 801126c:	0801cf1c 	.word	0x0801cf1c
 8011270:	0801cef4 	.word	0x0801cef4

08011274 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	4603      	mov	r3, r0
 801127c:	6039      	str	r1, [r7, #0]
 801127e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011280:	79fb      	ldrb	r3, [r7, #7]
 8011282:	2b08      	cmp	r3, #8
 8011284:	d907      	bls.n	8011296 <memp_free+0x22>
 8011286:	4b0c      	ldr	r3, [pc, #48]	; (80112b8 <memp_free+0x44>)
 8011288:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801128c:	490b      	ldr	r1, [pc, #44]	; (80112bc <memp_free+0x48>)
 801128e:	480c      	ldr	r0, [pc, #48]	; (80112c0 <memp_free+0x4c>)
 8011290:	f00a fa18 	bl	801b6c4 <iprintf>
 8011294:	e00c      	b.n	80112b0 <memp_free+0x3c>

  if (mem == NULL) {
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d008      	beq.n	80112ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801129c:	79fb      	ldrb	r3, [r7, #7]
 801129e:	4a09      	ldr	r2, [pc, #36]	; (80112c4 <memp_free+0x50>)
 80112a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112a4:	6839      	ldr	r1, [r7, #0]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7ff ff9a 	bl	80111e0 <do_memp_free_pool>
 80112ac:	e000      	b.n	80112b0 <memp_free+0x3c>
    return;
 80112ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	0801cea0 	.word	0x0801cea0
 80112bc:	0801cf70 	.word	0x0801cf70
 80112c0:	0801cef4 	.word	0x0801cef4
 80112c4:	0801f800 	.word	0x0801f800

080112c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80112c8:	b480      	push	{r7}
 80112ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80112cc:	bf00      	nop
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
	...

080112d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
 80112e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d108      	bne.n	80112fe <netif_add+0x26>
 80112ec:	4b57      	ldr	r3, [pc, #348]	; (801144c <netif_add+0x174>)
 80112ee:	f240 1227 	movw	r2, #295	; 0x127
 80112f2:	4957      	ldr	r1, [pc, #348]	; (8011450 <netif_add+0x178>)
 80112f4:	4857      	ldr	r0, [pc, #348]	; (8011454 <netif_add+0x17c>)
 80112f6:	f00a f9e5 	bl	801b6c4 <iprintf>
 80112fa:	2300      	movs	r3, #0
 80112fc:	e0a2      	b.n	8011444 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80112fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011300:	2b00      	cmp	r3, #0
 8011302:	d108      	bne.n	8011316 <netif_add+0x3e>
 8011304:	4b51      	ldr	r3, [pc, #324]	; (801144c <netif_add+0x174>)
 8011306:	f44f 7294 	mov.w	r2, #296	; 0x128
 801130a:	4953      	ldr	r1, [pc, #332]	; (8011458 <netif_add+0x180>)
 801130c:	4851      	ldr	r0, [pc, #324]	; (8011454 <netif_add+0x17c>)
 801130e:	f00a f9d9 	bl	801b6c4 <iprintf>
 8011312:	2300      	movs	r3, #0
 8011314:	e096      	b.n	8011444 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d101      	bne.n	8011320 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801131c:	4b4f      	ldr	r3, [pc, #316]	; (801145c <netif_add+0x184>)
 801131e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d101      	bne.n	801132a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011326:	4b4d      	ldr	r3, [pc, #308]	; (801145c <netif_add+0x184>)
 8011328:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011330:	4b4a      	ldr	r3, [pc, #296]	; (801145c <netif_add+0x184>)
 8011332:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2200      	movs	r2, #0
 8011338:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2200      	movs	r2, #0
 801133e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	4a45      	ldr	r2, [pc, #276]	; (8011460 <netif_add+0x188>)
 801134a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2200      	movs	r2, #0
 8011350:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2200      	movs	r2, #0
 8011356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2200      	movs	r2, #0
 801135e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6a3a      	ldr	r2, [r7, #32]
 8011364:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011366:	4b3f      	ldr	r3, [pc, #252]	; (8011464 <netif_add+0x18c>)
 8011368:	781a      	ldrb	r2, [r3, #0]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011374:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	68b9      	ldr	r1, [r7, #8]
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f000 f913 	bl	80115a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	4798      	blx	r3
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <netif_add+0xba>
    return NULL;
 801138e:	2300      	movs	r3, #0
 8011390:	e058      	b.n	8011444 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011398:	2bff      	cmp	r3, #255	; 0xff
 801139a:	d103      	bne.n	80113a4 <netif_add+0xcc>
        netif->num = 0;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2200      	movs	r2, #0
 80113a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80113a4:	2300      	movs	r3, #0
 80113a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80113a8:	4b2f      	ldr	r3, [pc, #188]	; (8011468 <netif_add+0x190>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	617b      	str	r3, [r7, #20]
 80113ae:	e02b      	b.n	8011408 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80113b0:	697a      	ldr	r2, [r7, #20]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d106      	bne.n	80113c6 <netif_add+0xee>
 80113b8:	4b24      	ldr	r3, [pc, #144]	; (801144c <netif_add+0x174>)
 80113ba:	f240 128b 	movw	r2, #395	; 0x18b
 80113be:	492b      	ldr	r1, [pc, #172]	; (801146c <netif_add+0x194>)
 80113c0:	4824      	ldr	r0, [pc, #144]	; (8011454 <netif_add+0x17c>)
 80113c2:	f00a f97f 	bl	801b6c4 <iprintf>
        num_netifs++;
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	3301      	adds	r3, #1
 80113ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	2bff      	cmp	r3, #255	; 0xff
 80113d0:	dd06      	ble.n	80113e0 <netif_add+0x108>
 80113d2:	4b1e      	ldr	r3, [pc, #120]	; (801144c <netif_add+0x174>)
 80113d4:	f240 128d 	movw	r2, #397	; 0x18d
 80113d8:	4925      	ldr	r1, [pc, #148]	; (8011470 <netif_add+0x198>)
 80113da:	481e      	ldr	r0, [pc, #120]	; (8011454 <netif_add+0x17c>)
 80113dc:	f00a f972 	bl	801b6c4 <iprintf>
        if (netif2->num == netif->num) {
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d108      	bne.n	8011402 <netif_add+0x12a>
          netif->num++;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113f6:	3301      	adds	r3, #1
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011400:	e005      	b.n	801140e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	617b      	str	r3, [r7, #20]
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1d0      	bne.n	80113b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1be      	bne.n	8011392 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801141a:	2bfe      	cmp	r3, #254	; 0xfe
 801141c:	d103      	bne.n	8011426 <netif_add+0x14e>
    netif_num = 0;
 801141e:	4b11      	ldr	r3, [pc, #68]	; (8011464 <netif_add+0x18c>)
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
 8011424:	e006      	b.n	8011434 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801142c:	3301      	adds	r3, #1
 801142e:	b2da      	uxtb	r2, r3
 8011430:	4b0c      	ldr	r3, [pc, #48]	; (8011464 <netif_add+0x18c>)
 8011432:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011434:	4b0c      	ldr	r3, [pc, #48]	; (8011468 <netif_add+0x190>)
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801143c:	4a0a      	ldr	r2, [pc, #40]	; (8011468 <netif_add+0x190>)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011442:	68fb      	ldr	r3, [r7, #12]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3718      	adds	r7, #24
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	0801cf8c 	.word	0x0801cf8c
 8011450:	0801d020 	.word	0x0801d020
 8011454:	0801cfdc 	.word	0x0801cfdc
 8011458:	0801d03c 	.word	0x0801d03c
 801145c:	0801f864 	.word	0x0801f864
 8011460:	08011883 	.word	0x08011883
 8011464:	2000afd8 	.word	0x2000afd8
 8011468:	2000afd0 	.word	0x2000afd0
 801146c:	0801d060 	.word	0x0801d060
 8011470:	0801d074 	.word	0x0801d074

08011474 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801147e:	6839      	ldr	r1, [r7, #0]
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f002 fd73 	bl	8013f6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011486:	6839      	ldr	r1, [r7, #0]
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f007 faaf 	bl	80189ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801148e:	bf00      	nop
 8011490:	3708      	adds	r7, #8
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
	...

08011498 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d106      	bne.n	80114b8 <netif_do_set_ipaddr+0x20>
 80114aa:	4b1d      	ldr	r3, [pc, #116]	; (8011520 <netif_do_set_ipaddr+0x88>)
 80114ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 80114b0:	491c      	ldr	r1, [pc, #112]	; (8011524 <netif_do_set_ipaddr+0x8c>)
 80114b2:	481d      	ldr	r0, [pc, #116]	; (8011528 <netif_do_set_ipaddr+0x90>)
 80114b4:	f00a f906 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d106      	bne.n	80114cc <netif_do_set_ipaddr+0x34>
 80114be:	4b18      	ldr	r3, [pc, #96]	; (8011520 <netif_do_set_ipaddr+0x88>)
 80114c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80114c4:	4917      	ldr	r1, [pc, #92]	; (8011524 <netif_do_set_ipaddr+0x8c>)
 80114c6:	4818      	ldr	r0, [pc, #96]	; (8011528 <netif_do_set_ipaddr+0x90>)
 80114c8:	f00a f8fc 	bl	801b6c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	3304      	adds	r3, #4
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d01c      	beq.n	8011514 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	3304      	adds	r3, #4
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80114ea:	f107 0314 	add.w	r3, r7, #20
 80114ee:	4619      	mov	r1, r3
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff ffbf 	bl	8011474 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d002      	beq.n	8011502 <netif_do_set_ipaddr+0x6a>
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	e000      	b.n	8011504 <netif_do_set_ipaddr+0x6c>
 8011502:	2300      	movs	r3, #0
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011508:	2101      	movs	r1, #1
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 f8d2 	bl	80116b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011510:	2301      	movs	r3, #1
 8011512:	e000      	b.n	8011516 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011514:	2300      	movs	r3, #0
}
 8011516:	4618      	mov	r0, r3
 8011518:	3718      	adds	r7, #24
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	0801cf8c 	.word	0x0801cf8c
 8011524:	0801d0a4 	.word	0x0801d0a4
 8011528:	0801cfdc 	.word	0x0801cfdc

0801152c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	3308      	adds	r3, #8
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	429a      	cmp	r2, r3
 8011544:	d00a      	beq.n	801155c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <netif_do_set_netmask+0x26>
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	e000      	b.n	8011554 <netif_do_set_netmask+0x28>
 8011552:	2300      	movs	r3, #0
 8011554:	68fa      	ldr	r2, [r7, #12]
 8011556:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011558:	2301      	movs	r3, #1
 801155a:	e000      	b.n	801155e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801155c:	2300      	movs	r3, #0
}
 801155e:	4618      	mov	r0, r3
 8011560:	3714      	adds	r7, #20
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801156a:	b480      	push	{r7}
 801156c:	b085      	sub	sp, #20
 801156e:	af00      	add	r7, sp, #0
 8011570:	60f8      	str	r0, [r7, #12]
 8011572:	60b9      	str	r1, [r7, #8]
 8011574:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	330c      	adds	r3, #12
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	429a      	cmp	r2, r3
 8011582:	d00a      	beq.n	801159a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d002      	beq.n	8011590 <netif_do_set_gw+0x26>
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	e000      	b.n	8011592 <netif_do_set_gw+0x28>
 8011590:	2300      	movs	r3, #0
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011596:	2301      	movs	r3, #1
 8011598:	e000      	b.n	801159c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801159a:	2300      	movs	r3, #0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3714      	adds	r7, #20
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b088      	sub	sp, #32
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	607a      	str	r2, [r7, #4]
 80115b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80115ba:	2300      	movs	r3, #0
 80115bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d101      	bne.n	80115c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80115c4:	4b1c      	ldr	r3, [pc, #112]	; (8011638 <netif_set_addr+0x90>)
 80115c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d101      	bne.n	80115d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80115ce:	4b1a      	ldr	r3, [pc, #104]	; (8011638 <netif_set_addr+0x90>)
 80115d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80115d8:	4b17      	ldr	r3, [pc, #92]	; (8011638 <netif_set_addr+0x90>)
 80115da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <netif_set_addr+0x42>
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d101      	bne.n	80115ee <netif_set_addr+0x46>
 80115ea:	2301      	movs	r3, #1
 80115ec:	e000      	b.n	80115f0 <netif_set_addr+0x48>
 80115ee:	2300      	movs	r3, #0
 80115f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d006      	beq.n	8011606 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80115f8:	f107 0310 	add.w	r3, r7, #16
 80115fc:	461a      	mov	r2, r3
 80115fe:	68b9      	ldr	r1, [r7, #8]
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f7ff ff49 	bl	8011498 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011606:	69fa      	ldr	r2, [r7, #28]
 8011608:	6879      	ldr	r1, [r7, #4]
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	f7ff ff8e 	bl	801152c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011610:	69ba      	ldr	r2, [r7, #24]
 8011612:	6839      	ldr	r1, [r7, #0]
 8011614:	68f8      	ldr	r0, [r7, #12]
 8011616:	f7ff ffa8 	bl	801156a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d106      	bne.n	801162e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011620:	f107 0310 	add.w	r3, r7, #16
 8011624:	461a      	mov	r2, r3
 8011626:	68b9      	ldr	r1, [r7, #8]
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f7ff ff35 	bl	8011498 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801162e:	bf00      	nop
 8011630:	3720      	adds	r7, #32
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
 8011636:	bf00      	nop
 8011638:	0801f864 	.word	0x0801f864

0801163c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011644:	4a04      	ldr	r2, [pc, #16]	; (8011658 <netif_set_default+0x1c>)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801164a:	bf00      	nop
 801164c:	370c      	adds	r7, #12
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	2000afd4 	.word	0x2000afd4

0801165c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d107      	bne.n	801167a <netif_set_up+0x1e>
 801166a:	4b0f      	ldr	r3, [pc, #60]	; (80116a8 <netif_set_up+0x4c>)
 801166c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011670:	490e      	ldr	r1, [pc, #56]	; (80116ac <netif_set_up+0x50>)
 8011672:	480f      	ldr	r0, [pc, #60]	; (80116b0 <netif_set_up+0x54>)
 8011674:	f00a f826 	bl	801b6c4 <iprintf>
 8011678:	e013      	b.n	80116a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011680:	f003 0301 	and.w	r3, r3, #1
 8011684:	2b00      	cmp	r3, #0
 8011686:	d10c      	bne.n	80116a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801168e:	f043 0301 	orr.w	r3, r3, #1
 8011692:	b2da      	uxtb	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801169a:	2103      	movs	r1, #3
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f000 f809 	bl	80116b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	0801cf8c 	.word	0x0801cf8c
 80116ac:	0801d114 	.word	0x0801d114
 80116b0:	0801cfdc 	.word	0x0801cfdc

080116b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	460b      	mov	r3, r1
 80116be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d106      	bne.n	80116d4 <netif_issue_reports+0x20>
 80116c6:	4b18      	ldr	r3, [pc, #96]	; (8011728 <netif_issue_reports+0x74>)
 80116c8:	f240 326d 	movw	r2, #877	; 0x36d
 80116cc:	4917      	ldr	r1, [pc, #92]	; (801172c <netif_issue_reports+0x78>)
 80116ce:	4818      	ldr	r0, [pc, #96]	; (8011730 <netif_issue_reports+0x7c>)
 80116d0:	f009 fff8 	bl	801b6c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116da:	f003 0304 	and.w	r3, r3, #4
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d01e      	beq.n	8011720 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d017      	beq.n	8011720 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80116f0:	78fb      	ldrb	r3, [r7, #3]
 80116f2:	f003 0301 	and.w	r3, r3, #1
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d013      	beq.n	8011722 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	3304      	adds	r3, #4
 80116fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00e      	beq.n	8011722 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801170a:	f003 0308 	and.w	r3, r3, #8
 801170e:	2b00      	cmp	r3, #0
 8011710:	d007      	beq.n	8011722 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	3304      	adds	r3, #4
 8011716:	4619      	mov	r1, r3
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f008 f8d1 	bl	80198c0 <etharp_request>
 801171e:	e000      	b.n	8011722 <netif_issue_reports+0x6e>
    return;
 8011720:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	0801cf8c 	.word	0x0801cf8c
 801172c:	0801d130 	.word	0x0801d130
 8011730:	0801cfdc 	.word	0x0801cfdc

08011734 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d107      	bne.n	8011752 <netif_set_down+0x1e>
 8011742:	4b12      	ldr	r3, [pc, #72]	; (801178c <netif_set_down+0x58>)
 8011744:	f240 329b 	movw	r2, #923	; 0x39b
 8011748:	4911      	ldr	r1, [pc, #68]	; (8011790 <netif_set_down+0x5c>)
 801174a:	4812      	ldr	r0, [pc, #72]	; (8011794 <netif_set_down+0x60>)
 801174c:	f009 ffba 	bl	801b6c4 <iprintf>
 8011750:	e019      	b.n	8011786 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	2b00      	cmp	r3, #0
 801175e:	d012      	beq.n	8011786 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011766:	f023 0301 	bic.w	r3, r3, #1
 801176a:	b2da      	uxtb	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011778:	f003 0308 	and.w	r3, r3, #8
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f007 fc5b 	bl	801903c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011786:	3708      	adds	r7, #8
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}
 801178c:	0801cf8c 	.word	0x0801cf8c
 8011790:	0801d154 	.word	0x0801d154
 8011794:	0801cfdc 	.word	0x0801cfdc

08011798 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d107      	bne.n	80117b6 <netif_set_link_up+0x1e>
 80117a6:	4b13      	ldr	r3, [pc, #76]	; (80117f4 <netif_set_link_up+0x5c>)
 80117a8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80117ac:	4912      	ldr	r1, [pc, #72]	; (80117f8 <netif_set_link_up+0x60>)
 80117ae:	4813      	ldr	r0, [pc, #76]	; (80117fc <netif_set_link_up+0x64>)
 80117b0:	f009 ff88 	bl	801b6c4 <iprintf>
 80117b4:	e01b      	b.n	80117ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d114      	bne.n	80117ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117ca:	f043 0304 	orr.w	r3, r3, #4
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80117d6:	2103      	movs	r1, #3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff ff6b 	bl	80116b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	69db      	ldr	r3, [r3, #28]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d003      	beq.n	80117ee <netif_set_link_up+0x56>
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	69db      	ldr	r3, [r3, #28]
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	0801cf8c 	.word	0x0801cf8c
 80117f8:	0801d174 	.word	0x0801d174
 80117fc:	0801cfdc 	.word	0x0801cfdc

08011800 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d107      	bne.n	801181e <netif_set_link_down+0x1e>
 801180e:	4b11      	ldr	r3, [pc, #68]	; (8011854 <netif_set_link_down+0x54>)
 8011810:	f240 4206 	movw	r2, #1030	; 0x406
 8011814:	4910      	ldr	r1, [pc, #64]	; (8011858 <netif_set_link_down+0x58>)
 8011816:	4811      	ldr	r0, [pc, #68]	; (801185c <netif_set_link_down+0x5c>)
 8011818:	f009 ff54 	bl	801b6c4 <iprintf>
 801181c:	e017      	b.n	801184e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011824:	f003 0304 	and.w	r3, r3, #4
 8011828:	2b00      	cmp	r3, #0
 801182a:	d010      	beq.n	801184e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011832:	f023 0304 	bic.w	r3, r3, #4
 8011836:	b2da      	uxtb	r2, r3
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	69db      	ldr	r3, [r3, #28]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d003      	beq.n	801184e <netif_set_link_down+0x4e>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	69db      	ldr	r3, [r3, #28]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	0801cf8c 	.word	0x0801cf8c
 8011858:	0801d198 	.word	0x0801d198
 801185c:	0801cfdc 	.word	0x0801cfdc

08011860 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011860:	b480      	push	{r7}
 8011862:	b083      	sub	sp, #12
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	61da      	str	r2, [r3, #28]
  }
}
 8011876:	bf00      	nop
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr

08011882 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011882:	b480      	push	{r7}
 8011884:	b085      	sub	sp, #20
 8011886:	af00      	add	r7, sp, #0
 8011888:	60f8      	str	r0, [r7, #12]
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801188e:	f06f 030b 	mvn.w	r3, #11
}
 8011892:	4618      	mov	r0, r3
 8011894:	3714      	adds	r7, #20
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
	...

080118a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b085      	sub	sp, #20
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80118aa:	79fb      	ldrb	r3, [r7, #7]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d013      	beq.n	80118d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80118b0:	4b0d      	ldr	r3, [pc, #52]	; (80118e8 <netif_get_by_index+0x48>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	60fb      	str	r3, [r7, #12]
 80118b6:	e00c      	b.n	80118d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118be:	3301      	adds	r3, #1
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	79fa      	ldrb	r2, [r7, #7]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d101      	bne.n	80118cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	e006      	b.n	80118da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	60fb      	str	r3, [r7, #12]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1ef      	bne.n	80118b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80118d8:	2300      	movs	r3, #0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3714      	adds	r7, #20
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	2000afd0 	.word	0x2000afd0

080118ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80118f2:	4b0c      	ldr	r3, [pc, #48]	; (8011924 <pbuf_free_ooseq+0x38>)
 80118f4:	2200      	movs	r2, #0
 80118f6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80118f8:	4b0b      	ldr	r3, [pc, #44]	; (8011928 <pbuf_free_ooseq+0x3c>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	607b      	str	r3, [r7, #4]
 80118fe:	e00a      	b.n	8011916 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011904:	2b00      	cmp	r3, #0
 8011906:	d003      	beq.n	8011910 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f002 fb6d 	bl	8013fe8 <tcp_free_ooseq>
      return;
 801190e:	e005      	b.n	801191c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	607b      	str	r3, [r7, #4]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1f1      	bne.n	8011900 <pbuf_free_ooseq+0x14>
    }
  }
}
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	2000afd9 	.word	0x2000afd9
 8011928:	2000afe8 	.word	0x2000afe8

0801192c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801192c:	b480      	push	{r7}
 801192e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8011930:	4b03      	ldr	r3, [pc, #12]	; (8011940 <pbuf_pool_is_empty+0x14>)
 8011932:	2201      	movs	r2, #1
 8011934:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011936:	bf00      	nop
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	2000afd9 	.word	0x2000afd9

08011944 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011944:	b480      	push	{r7}
 8011946:	b085      	sub	sp, #20
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	4611      	mov	r1, r2
 8011950:	461a      	mov	r2, r3
 8011952:	460b      	mov	r3, r1
 8011954:	80fb      	strh	r3, [r7, #6]
 8011956:	4613      	mov	r3, r2
 8011958:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2200      	movs	r2, #0
 801195e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	68ba      	ldr	r2, [r7, #8]
 8011964:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	88fa      	ldrh	r2, [r7, #6]
 801196a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	88ba      	ldrh	r2, [r7, #4]
 8011970:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011972:	8b3b      	ldrh	r3, [r7, #24]
 8011974:	b2da      	uxtb	r2, r3
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	7f3a      	ldrb	r2, [r7, #28]
 801197e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2201      	movs	r2, #1
 8011984:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	73da      	strb	r2, [r3, #15]
}
 801198c:	bf00      	nop
 801198e:	3714      	adds	r7, #20
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr

08011998 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b08c      	sub	sp, #48	; 0x30
 801199c:	af02      	add	r7, sp, #8
 801199e:	4603      	mov	r3, r0
 80119a0:	71fb      	strb	r3, [r7, #7]
 80119a2:	460b      	mov	r3, r1
 80119a4:	80bb      	strh	r3, [r7, #4]
 80119a6:	4613      	mov	r3, r2
 80119a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80119ae:	887b      	ldrh	r3, [r7, #2]
 80119b0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80119b4:	d07f      	beq.n	8011ab6 <pbuf_alloc+0x11e>
 80119b6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80119ba:	f300 80c8 	bgt.w	8011b4e <pbuf_alloc+0x1b6>
 80119be:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80119c2:	d010      	beq.n	80119e6 <pbuf_alloc+0x4e>
 80119c4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80119c8:	f300 80c1 	bgt.w	8011b4e <pbuf_alloc+0x1b6>
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d002      	beq.n	80119d6 <pbuf_alloc+0x3e>
 80119d0:	2b41      	cmp	r3, #65	; 0x41
 80119d2:	f040 80bc 	bne.w	8011b4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80119d6:	887a      	ldrh	r2, [r7, #2]
 80119d8:	88bb      	ldrh	r3, [r7, #4]
 80119da:	4619      	mov	r1, r3
 80119dc:	2000      	movs	r0, #0
 80119de:	f000 f8d1 	bl	8011b84 <pbuf_alloc_reference>
 80119e2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80119e4:	e0bd      	b.n	8011b62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80119e6:	2300      	movs	r3, #0
 80119e8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80119ea:	2300      	movs	r3, #0
 80119ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80119ee:	88bb      	ldrh	r3, [r7, #4]
 80119f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80119f2:	2008      	movs	r0, #8
 80119f4:	f7ff fbce 	bl	8011194 <memp_malloc>
 80119f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d109      	bne.n	8011a14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011a00:	f7ff ff94 	bl	801192c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d002      	beq.n	8011a10 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a0c:	f000 faa8 	bl	8011f60 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	e0a7      	b.n	8011b64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a16:	3303      	adds	r3, #3
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	f023 0303 	bic.w	r3, r3, #3
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	8b7a      	ldrh	r2, [r7, #26]
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	bf28      	it	cs
 8011a2c:	4613      	movcs	r3, r2
 8011a2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a32:	3310      	adds	r3, #16
 8011a34:	693a      	ldr	r2, [r7, #16]
 8011a36:	4413      	add	r3, r2
 8011a38:	3303      	adds	r3, #3
 8011a3a:	f023 0303 	bic.w	r3, r3, #3
 8011a3e:	4618      	mov	r0, r3
 8011a40:	89f9      	ldrh	r1, [r7, #14]
 8011a42:	8b7a      	ldrh	r2, [r7, #26]
 8011a44:	2300      	movs	r3, #0
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	887b      	ldrh	r3, [r7, #2]
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4601      	mov	r1, r0
 8011a50:	6938      	ldr	r0, [r7, #16]
 8011a52:	f7ff ff77 	bl	8011944 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f003 0303 	and.w	r3, r3, #3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d006      	beq.n	8011a70 <pbuf_alloc+0xd8>
 8011a62:	4b42      	ldr	r3, [pc, #264]	; (8011b6c <pbuf_alloc+0x1d4>)
 8011a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a68:	4941      	ldr	r1, [pc, #260]	; (8011b70 <pbuf_alloc+0x1d8>)
 8011a6a:	4842      	ldr	r0, [pc, #264]	; (8011b74 <pbuf_alloc+0x1dc>)
 8011a6c:	f009 fe2a 	bl	801b6c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011a70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a72:	3303      	adds	r3, #3
 8011a74:	f023 0303 	bic.w	r3, r3, #3
 8011a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011a7c:	d106      	bne.n	8011a8c <pbuf_alloc+0xf4>
 8011a7e:	4b3b      	ldr	r3, [pc, #236]	; (8011b6c <pbuf_alloc+0x1d4>)
 8011a80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011a84:	493c      	ldr	r1, [pc, #240]	; (8011b78 <pbuf_alloc+0x1e0>)
 8011a86:	483b      	ldr	r0, [pc, #236]	; (8011b74 <pbuf_alloc+0x1dc>)
 8011a88:	f009 fe1c 	bl	801b6c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d102      	bne.n	8011a98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	627b      	str	r3, [r7, #36]	; 0x24
 8011a96:	e002      	b.n	8011a9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	693a      	ldr	r2, [r7, #16]
 8011a9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011aa2:	8b7a      	ldrh	r2, [r7, #26]
 8011aa4:	89fb      	ldrh	r3, [r7, #14]
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011aae:	8b7b      	ldrh	r3, [r7, #26]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d19e      	bne.n	80119f2 <pbuf_alloc+0x5a>
      break;
 8011ab4:	e055      	b.n	8011b62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ab8:	3303      	adds	r3, #3
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	f023 0303 	bic.w	r3, r3, #3
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	88bb      	ldrh	r3, [r7, #4]
 8011ac4:	3303      	adds	r3, #3
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	f023 0303 	bic.w	r3, r3, #3
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	4413      	add	r3, r2
 8011ad0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011ad2:	8b3b      	ldrh	r3, [r7, #24]
 8011ad4:	3310      	adds	r3, #16
 8011ad6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011ad8:	8b3a      	ldrh	r2, [r7, #24]
 8011ada:	88bb      	ldrh	r3, [r7, #4]
 8011adc:	3303      	adds	r3, #3
 8011ade:	f023 0303 	bic.w	r3, r3, #3
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d306      	bcc.n	8011af4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011ae6:	8afa      	ldrh	r2, [r7, #22]
 8011ae8:	88bb      	ldrh	r3, [r7, #4]
 8011aea:	3303      	adds	r3, #3
 8011aec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d201      	bcs.n	8011af8 <pbuf_alloc+0x160>
        return NULL;
 8011af4:	2300      	movs	r3, #0
 8011af6:	e035      	b.n	8011b64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011af8:	8afb      	ldrh	r3, [r7, #22]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7ff f9ba 	bl	8010e74 <mem_malloc>
 8011b00:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d101      	bne.n	8011b0c <pbuf_alloc+0x174>
        return NULL;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	e02b      	b.n	8011b64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b0e:	3310      	adds	r3, #16
 8011b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b12:	4413      	add	r3, r2
 8011b14:	3303      	adds	r3, #3
 8011b16:	f023 0303 	bic.w	r3, r3, #3
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	88b9      	ldrh	r1, [r7, #4]
 8011b1e:	88ba      	ldrh	r2, [r7, #4]
 8011b20:	2300      	movs	r3, #0
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	887b      	ldrh	r3, [r7, #2]
 8011b26:	9300      	str	r3, [sp, #0]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	4601      	mov	r1, r0
 8011b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b2e:	f7ff ff09 	bl	8011944 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	f003 0303 	and.w	r3, r3, #3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d010      	beq.n	8011b60 <pbuf_alloc+0x1c8>
 8011b3e:	4b0b      	ldr	r3, [pc, #44]	; (8011b6c <pbuf_alloc+0x1d4>)
 8011b40:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011b44:	490d      	ldr	r1, [pc, #52]	; (8011b7c <pbuf_alloc+0x1e4>)
 8011b46:	480b      	ldr	r0, [pc, #44]	; (8011b74 <pbuf_alloc+0x1dc>)
 8011b48:	f009 fdbc 	bl	801b6c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011b4c:	e008      	b.n	8011b60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011b4e:	4b07      	ldr	r3, [pc, #28]	; (8011b6c <pbuf_alloc+0x1d4>)
 8011b50:	f240 1227 	movw	r2, #295	; 0x127
 8011b54:	490a      	ldr	r1, [pc, #40]	; (8011b80 <pbuf_alloc+0x1e8>)
 8011b56:	4807      	ldr	r0, [pc, #28]	; (8011b74 <pbuf_alloc+0x1dc>)
 8011b58:	f009 fdb4 	bl	801b6c4 <iprintf>
      return NULL;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e001      	b.n	8011b64 <pbuf_alloc+0x1cc>
      break;
 8011b60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3728      	adds	r7, #40	; 0x28
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	0801d1bc 	.word	0x0801d1bc
 8011b70:	0801d1ec 	.word	0x0801d1ec
 8011b74:	0801d21c 	.word	0x0801d21c
 8011b78:	0801d244 	.word	0x0801d244
 8011b7c:	0801d278 	.word	0x0801d278
 8011b80:	0801d2a4 	.word	0x0801d2a4

08011b84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af02      	add	r7, sp, #8
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	807b      	strh	r3, [r7, #2]
 8011b90:	4613      	mov	r3, r2
 8011b92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011b94:	883b      	ldrh	r3, [r7, #0]
 8011b96:	2b41      	cmp	r3, #65	; 0x41
 8011b98:	d009      	beq.n	8011bae <pbuf_alloc_reference+0x2a>
 8011b9a:	883b      	ldrh	r3, [r7, #0]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d006      	beq.n	8011bae <pbuf_alloc_reference+0x2a>
 8011ba0:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <pbuf_alloc_reference+0x5c>)
 8011ba2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011ba6:	490f      	ldr	r1, [pc, #60]	; (8011be4 <pbuf_alloc_reference+0x60>)
 8011ba8:	480f      	ldr	r0, [pc, #60]	; (8011be8 <pbuf_alloc_reference+0x64>)
 8011baa:	f009 fd8b 	bl	801b6c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011bae:	2007      	movs	r0, #7
 8011bb0:	f7ff faf0 	bl	8011194 <memp_malloc>
 8011bb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	e00b      	b.n	8011bd8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011bc0:	8879      	ldrh	r1, [r7, #2]
 8011bc2:	887a      	ldrh	r2, [r7, #2]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	9301      	str	r3, [sp, #4]
 8011bc8:	883b      	ldrh	r3, [r7, #0]
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	460b      	mov	r3, r1
 8011bce:	6879      	ldr	r1, [r7, #4]
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f7ff feb7 	bl	8011944 <pbuf_init_alloced_pbuf>
  return p;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3710      	adds	r7, #16
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	0801d1bc 	.word	0x0801d1bc
 8011be4:	0801d2c0 	.word	0x0801d2c0
 8011be8:	0801d21c 	.word	0x0801d21c

08011bec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b088      	sub	sp, #32
 8011bf0:	af02      	add	r7, sp, #8
 8011bf2:	607b      	str	r3, [r7, #4]
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	73fb      	strb	r3, [r7, #15]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	81bb      	strh	r3, [r7, #12]
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
 8011c02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011c04:	8a7b      	ldrh	r3, [r7, #18]
 8011c06:	3303      	adds	r3, #3
 8011c08:	f023 0203 	bic.w	r2, r3, #3
 8011c0c:	89bb      	ldrh	r3, [r7, #12]
 8011c0e:	441a      	add	r2, r3
 8011c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d901      	bls.n	8011c1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011c16:	2300      	movs	r3, #0
 8011c18:	e018      	b.n	8011c4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011c1a:	6a3b      	ldr	r3, [r7, #32]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d007      	beq.n	8011c30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011c20:	8a7b      	ldrh	r3, [r7, #18]
 8011c22:	3303      	adds	r3, #3
 8011c24:	f023 0303 	bic.w	r3, r3, #3
 8011c28:	6a3a      	ldr	r2, [r7, #32]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	617b      	str	r3, [r7, #20]
 8011c2e:	e001      	b.n	8011c34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011c30:	2300      	movs	r3, #0
 8011c32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	89b9      	ldrh	r1, [r7, #12]
 8011c38:	89ba      	ldrh	r2, [r7, #12]
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	9301      	str	r3, [sp, #4]
 8011c3e:	897b      	ldrh	r3, [r7, #10]
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	460b      	mov	r3, r1
 8011c44:	6979      	ldr	r1, [r7, #20]
 8011c46:	f7ff fe7d 	bl	8011944 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011c4a:	687b      	ldr	r3, [r7, #4]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <pbuf_realloc+0x20>
 8011c66:	4b3a      	ldr	r3, [pc, #232]	; (8011d50 <pbuf_realloc+0xfc>)
 8011c68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011c6c:	4939      	ldr	r1, [pc, #228]	; (8011d54 <pbuf_realloc+0x100>)
 8011c6e:	483a      	ldr	r0, [pc, #232]	; (8011d58 <pbuf_realloc+0x104>)
 8011c70:	f009 fd28 	bl	801b6c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	891b      	ldrh	r3, [r3, #8]
 8011c78:	887a      	ldrh	r2, [r7, #2]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d263      	bcs.n	8011d46 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	891a      	ldrh	r2, [r3, #8]
 8011c82:	887b      	ldrh	r3, [r7, #2]
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011c88:	887b      	ldrh	r3, [r7, #2]
 8011c8a:	817b      	strh	r3, [r7, #10]
  q = p;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011c90:	e018      	b.n	8011cc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	895b      	ldrh	r3, [r3, #10]
 8011c96:	897a      	ldrh	r2, [r7, #10]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	891a      	ldrh	r2, [r3, #8]
 8011ca0:	893b      	ldrh	r3, [r7, #8]
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d106      	bne.n	8011cc4 <pbuf_realloc+0x70>
 8011cb6:	4b26      	ldr	r3, [pc, #152]	; (8011d50 <pbuf_realloc+0xfc>)
 8011cb8:	f240 12af 	movw	r2, #431	; 0x1af
 8011cbc:	4927      	ldr	r1, [pc, #156]	; (8011d5c <pbuf_realloc+0x108>)
 8011cbe:	4826      	ldr	r0, [pc, #152]	; (8011d58 <pbuf_realloc+0x104>)
 8011cc0:	f009 fd00 	bl	801b6c4 <iprintf>
  while (rem_len > q->len) {
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	895b      	ldrh	r3, [r3, #10]
 8011cc8:	897a      	ldrh	r2, [r7, #10]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d8e1      	bhi.n	8011c92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7b1b      	ldrb	r3, [r3, #12]
 8011cd2:	f003 030f 	and.w	r3, r3, #15
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d121      	bne.n	8011d1e <pbuf_realloc+0xca>
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	895b      	ldrh	r3, [r3, #10]
 8011cde:	897a      	ldrh	r2, [r7, #10]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d01c      	beq.n	8011d1e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	7b5b      	ldrb	r3, [r3, #13]
 8011ce8:	f003 0302 	and.w	r3, r3, #2
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d116      	bne.n	8011d1e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	897b      	ldrh	r3, [r7, #10]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	4619      	mov	r1, r3
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7fe ffba 	bl	8010c7c <mem_trim>
 8011d08:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d106      	bne.n	8011d1e <pbuf_realloc+0xca>
 8011d10:	4b0f      	ldr	r3, [pc, #60]	; (8011d50 <pbuf_realloc+0xfc>)
 8011d12:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011d16:	4912      	ldr	r1, [pc, #72]	; (8011d60 <pbuf_realloc+0x10c>)
 8011d18:	480f      	ldr	r0, [pc, #60]	; (8011d58 <pbuf_realloc+0x104>)
 8011d1a:	f009 fcd3 	bl	801b6c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	897a      	ldrh	r2, [r7, #10]
 8011d22:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	895a      	ldrh	r2, [r3, #10]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d004      	beq.n	8011d3e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f000 f911 	bl	8011f60 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	601a      	str	r2, [r3, #0]
 8011d44:	e000      	b.n	8011d48 <pbuf_realloc+0xf4>
    return;
 8011d46:	bf00      	nop

}
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	0801d1bc 	.word	0x0801d1bc
 8011d54:	0801d2d4 	.word	0x0801d2d4
 8011d58:	0801d21c 	.word	0x0801d21c
 8011d5c:	0801d2ec 	.word	0x0801d2ec
 8011d60:	0801d304 	.word	0x0801d304

08011d64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b086      	sub	sp, #24
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	4613      	mov	r3, r2
 8011d70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d106      	bne.n	8011d86 <pbuf_add_header_impl+0x22>
 8011d78:	4b2b      	ldr	r3, [pc, #172]	; (8011e28 <pbuf_add_header_impl+0xc4>)
 8011d7a:	f240 12df 	movw	r2, #479	; 0x1df
 8011d7e:	492b      	ldr	r1, [pc, #172]	; (8011e2c <pbuf_add_header_impl+0xc8>)
 8011d80:	482b      	ldr	r0, [pc, #172]	; (8011e30 <pbuf_add_header_impl+0xcc>)
 8011d82:	f009 fc9f 	bl	801b6c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d003      	beq.n	8011d94 <pbuf_add_header_impl+0x30>
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d92:	d301      	bcc.n	8011d98 <pbuf_add_header_impl+0x34>
    return 1;
 8011d94:	2301      	movs	r3, #1
 8011d96:	e043      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <pbuf_add_header_impl+0x3e>
    return 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	e03e      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	891a      	ldrh	r2, [r3, #8]
 8011daa:	8a7b      	ldrh	r3, [r7, #18]
 8011dac:	4413      	add	r3, r2
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	8a7a      	ldrh	r2, [r7, #18]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d901      	bls.n	8011dba <pbuf_add_header_impl+0x56>
    return 1;
 8011db6:	2301      	movs	r3, #1
 8011db8:	e032      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	7b1b      	ldrb	r3, [r3, #12]
 8011dbe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011dc0:	8a3b      	ldrh	r3, [r7, #16]
 8011dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00c      	beq.n	8011de4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	685a      	ldr	r2, [r3, #4]
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	425b      	negs	r3, r3
 8011dd2:	4413      	add	r3, r2
 8011dd4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	3310      	adds	r3, #16
 8011dda:	697a      	ldr	r2, [r7, #20]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d20d      	bcs.n	8011dfc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011de0:	2301      	movs	r3, #1
 8011de2:	e01d      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011de4:	79fb      	ldrb	r3, [r7, #7]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d006      	beq.n	8011df8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	685a      	ldr	r2, [r3, #4]
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	425b      	negs	r3, r3
 8011df2:	4413      	add	r3, r2
 8011df4:	617b      	str	r3, [r7, #20]
 8011df6:	e001      	b.n	8011dfc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e011      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	697a      	ldr	r2, [r7, #20]
 8011e00:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	895a      	ldrh	r2, [r3, #10]
 8011e06:	8a7b      	ldrh	r3, [r7, #18]
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	891a      	ldrh	r2, [r3, #8]
 8011e14:	8a7b      	ldrh	r3, [r7, #18]
 8011e16:	4413      	add	r3, r2
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	811a      	strh	r2, [r3, #8]


  return 0;
 8011e1e:	2300      	movs	r3, #0
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3718      	adds	r7, #24
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	0801d1bc 	.word	0x0801d1bc
 8011e2c:	0801d320 	.word	0x0801d320
 8011e30:	0801d21c 	.word	0x0801d21c

08011e34 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011e3e:	2200      	movs	r2, #0
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f7ff ff8e 	bl	8011d64 <pbuf_add_header_impl>
 8011e48:	4603      	mov	r3, r0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3708      	adds	r7, #8
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
	...

08011e54 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d106      	bne.n	8011e72 <pbuf_remove_header+0x1e>
 8011e64:	4b20      	ldr	r3, [pc, #128]	; (8011ee8 <pbuf_remove_header+0x94>)
 8011e66:	f240 224b 	movw	r2, #587	; 0x24b
 8011e6a:	4920      	ldr	r1, [pc, #128]	; (8011eec <pbuf_remove_header+0x98>)
 8011e6c:	4820      	ldr	r0, [pc, #128]	; (8011ef0 <pbuf_remove_header+0x9c>)
 8011e6e:	f009 fc29 	bl	801b6c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d003      	beq.n	8011e80 <pbuf_remove_header+0x2c>
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e7e:	d301      	bcc.n	8011e84 <pbuf_remove_header+0x30>
    return 1;
 8011e80:	2301      	movs	r3, #1
 8011e82:	e02c      	b.n	8011ede <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d101      	bne.n	8011e8e <pbuf_remove_header+0x3a>
    return 0;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	e027      	b.n	8011ede <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	895b      	ldrh	r3, [r3, #10]
 8011e96:	89fa      	ldrh	r2, [r7, #14]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d908      	bls.n	8011eae <pbuf_remove_header+0x5a>
 8011e9c:	4b12      	ldr	r3, [pc, #72]	; (8011ee8 <pbuf_remove_header+0x94>)
 8011e9e:	f240 2255 	movw	r2, #597	; 0x255
 8011ea2:	4914      	ldr	r1, [pc, #80]	; (8011ef4 <pbuf_remove_header+0xa0>)
 8011ea4:	4812      	ldr	r0, [pc, #72]	; (8011ef0 <pbuf_remove_header+0x9c>)
 8011ea6:	f009 fc0d 	bl	801b6c4 <iprintf>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e017      	b.n	8011ede <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	685a      	ldr	r2, [r3, #4]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	441a      	add	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	895a      	ldrh	r2, [r3, #10]
 8011ec4:	89fb      	ldrh	r3, [r7, #14]
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	891a      	ldrh	r2, [r3, #8]
 8011ed2:	89fb      	ldrh	r3, [r7, #14]
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011edc:	2300      	movs	r3, #0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	0801d1bc 	.word	0x0801d1bc
 8011eec:	0801d320 	.word	0x0801d320
 8011ef0:	0801d21c 	.word	0x0801d21c
 8011ef4:	0801d32c 	.word	0x0801d32c

08011ef8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	807b      	strh	r3, [r7, #2]
 8011f04:	4613      	mov	r3, r2
 8011f06:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011f08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da08      	bge.n	8011f22 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011f10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f14:	425b      	negs	r3, r3
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff ff9b 	bl	8011e54 <pbuf_remove_header>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	e007      	b.n	8011f32 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011f22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f26:	787a      	ldrb	r2, [r7, #1]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7ff ff1a 	bl	8011d64 <pbuf_add_header_impl>
 8011f30:	4603      	mov	r3, r0
  }
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011f3a:	b580      	push	{r7, lr}
 8011f3c:	b082      	sub	sp, #8
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	460b      	mov	r3, r1
 8011f44:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011f46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff ffd2 	bl	8011ef8 <pbuf_header_impl>
 8011f54:	4603      	mov	r3, r0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
	...

08011f60 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b086      	sub	sp, #24
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10b      	bne.n	8011f86 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <pbuf_free+0x22>
 8011f74:	4b38      	ldr	r3, [pc, #224]	; (8012058 <pbuf_free+0xf8>)
 8011f76:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011f7a:	4938      	ldr	r1, [pc, #224]	; (801205c <pbuf_free+0xfc>)
 8011f7c:	4838      	ldr	r0, [pc, #224]	; (8012060 <pbuf_free+0x100>)
 8011f7e:	f009 fba1 	bl	801b6c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	e063      	b.n	801204e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011f86:	2300      	movs	r3, #0
 8011f88:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011f8a:	e05c      	b.n	8012046 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	7b9b      	ldrb	r3, [r3, #14]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d106      	bne.n	8011fa2 <pbuf_free+0x42>
 8011f94:	4b30      	ldr	r3, [pc, #192]	; (8012058 <pbuf_free+0xf8>)
 8011f96:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011f9a:	4932      	ldr	r1, [pc, #200]	; (8012064 <pbuf_free+0x104>)
 8011f9c:	4830      	ldr	r0, [pc, #192]	; (8012060 <pbuf_free+0x100>)
 8011f9e:	f009 fb91 	bl	801b6c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	7b9b      	ldrb	r3, [r3, #14]
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	b2da      	uxtb	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	739a      	strb	r2, [r3, #14]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	7b9b      	ldrb	r3, [r3, #14]
 8011fb2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011fb4:	7dbb      	ldrb	r3, [r7, #22]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d143      	bne.n	8012042 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	7b1b      	ldrb	r3, [r3, #12]
 8011fc4:	f003 030f 	and.w	r3, r3, #15
 8011fc8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	7b5b      	ldrb	r3, [r3, #13]
 8011fce:	f003 0302 	and.w	r3, r3, #2
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d011      	beq.n	8011ffa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <pbuf_free+0x90>
 8011fe2:	4b1d      	ldr	r3, [pc, #116]	; (8012058 <pbuf_free+0xf8>)
 8011fe4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011fe8:	491f      	ldr	r1, [pc, #124]	; (8012068 <pbuf_free+0x108>)
 8011fea:	481d      	ldr	r0, [pc, #116]	; (8012060 <pbuf_free+0x100>)
 8011fec:	f009 fb6a 	bl	801b6c4 <iprintf>
        pc->custom_free_function(p);
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	691b      	ldr	r3, [r3, #16]
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	4798      	blx	r3
 8011ff8:	e01d      	b.n	8012036 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	2b02      	cmp	r3, #2
 8011ffe:	d104      	bne.n	801200a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8012000:	6879      	ldr	r1, [r7, #4]
 8012002:	2008      	movs	r0, #8
 8012004:	f7ff f936 	bl	8011274 <memp_free>
 8012008:	e015      	b.n	8012036 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801200a:	7bfb      	ldrb	r3, [r7, #15]
 801200c:	2b01      	cmp	r3, #1
 801200e:	d104      	bne.n	801201a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8012010:	6879      	ldr	r1, [r7, #4]
 8012012:	2007      	movs	r0, #7
 8012014:	f7ff f92e 	bl	8011274 <memp_free>
 8012018:	e00d      	b.n	8012036 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801201a:	7bfb      	ldrb	r3, [r7, #15]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d103      	bne.n	8012028 <pbuf_free+0xc8>
          mem_free(p);
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7fe fdc1 	bl	8010ba8 <mem_free>
 8012026:	e006      	b.n	8012036 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012028:	4b0b      	ldr	r3, [pc, #44]	; (8012058 <pbuf_free+0xf8>)
 801202a:	f240 320f 	movw	r2, #783	; 0x30f
 801202e:	490f      	ldr	r1, [pc, #60]	; (801206c <pbuf_free+0x10c>)
 8012030:	480b      	ldr	r0, [pc, #44]	; (8012060 <pbuf_free+0x100>)
 8012032:	f009 fb47 	bl	801b6c4 <iprintf>
        }
      }
      count++;
 8012036:	7dfb      	ldrb	r3, [r7, #23]
 8012038:	3301      	adds	r3, #1
 801203a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	607b      	str	r3, [r7, #4]
 8012040:	e001      	b.n	8012046 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d19f      	bne.n	8011f8c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801204c:	7dfb      	ldrb	r3, [r7, #23]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3718      	adds	r7, #24
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	0801d1bc 	.word	0x0801d1bc
 801205c:	0801d320 	.word	0x0801d320
 8012060:	0801d21c 	.word	0x0801d21c
 8012064:	0801d34c 	.word	0x0801d34c
 8012068:	0801d364 	.word	0x0801d364
 801206c:	0801d388 	.word	0x0801d388

08012070 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012078:	2300      	movs	r3, #0
 801207a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801207c:	e005      	b.n	801208a <pbuf_clen+0x1a>
    ++len;
 801207e:	89fb      	ldrh	r3, [r7, #14]
 8012080:	3301      	adds	r3, #1
 8012082:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1f6      	bne.n	801207e <pbuf_clen+0xe>
  }
  return len;
 8012090:	89fb      	ldrh	r3, [r7, #14]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3714      	adds	r7, #20
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
	...

080120a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d010      	beq.n	80120d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	7b9b      	ldrb	r3, [r3, #14]
 80120b2:	3301      	adds	r3, #1
 80120b4:	b2da      	uxtb	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	7b9b      	ldrb	r3, [r3, #14]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d106      	bne.n	80120d0 <pbuf_ref+0x30>
 80120c2:	4b05      	ldr	r3, [pc, #20]	; (80120d8 <pbuf_ref+0x38>)
 80120c4:	f240 3242 	movw	r2, #834	; 0x342
 80120c8:	4904      	ldr	r1, [pc, #16]	; (80120dc <pbuf_ref+0x3c>)
 80120ca:	4805      	ldr	r0, [pc, #20]	; (80120e0 <pbuf_ref+0x40>)
 80120cc:	f009 fafa 	bl	801b6c4 <iprintf>
  }
}
 80120d0:	bf00      	nop
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	0801d1bc 	.word	0x0801d1bc
 80120dc:	0801d39c 	.word	0x0801d39c
 80120e0:	0801d21c 	.word	0x0801d21c

080120e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d002      	beq.n	80120fa <pbuf_cat+0x16>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d107      	bne.n	801210a <pbuf_cat+0x26>
 80120fa:	4b20      	ldr	r3, [pc, #128]	; (801217c <pbuf_cat+0x98>)
 80120fc:	f240 3259 	movw	r2, #857	; 0x359
 8012100:	491f      	ldr	r1, [pc, #124]	; (8012180 <pbuf_cat+0x9c>)
 8012102:	4820      	ldr	r0, [pc, #128]	; (8012184 <pbuf_cat+0xa0>)
 8012104:	f009 fade 	bl	801b6c4 <iprintf>
 8012108:	e034      	b.n	8012174 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	60fb      	str	r3, [r7, #12]
 801210e:	e00a      	b.n	8012126 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	891a      	ldrh	r2, [r3, #8]
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	891b      	ldrh	r3, [r3, #8]
 8012118:	4413      	add	r3, r2
 801211a:	b29a      	uxth	r2, r3
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	60fb      	str	r3, [r7, #12]
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1f0      	bne.n	8012110 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	891a      	ldrh	r2, [r3, #8]
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	895b      	ldrh	r3, [r3, #10]
 8012136:	429a      	cmp	r2, r3
 8012138:	d006      	beq.n	8012148 <pbuf_cat+0x64>
 801213a:	4b10      	ldr	r3, [pc, #64]	; (801217c <pbuf_cat+0x98>)
 801213c:	f240 3262 	movw	r2, #866	; 0x362
 8012140:	4911      	ldr	r1, [pc, #68]	; (8012188 <pbuf_cat+0xa4>)
 8012142:	4810      	ldr	r0, [pc, #64]	; (8012184 <pbuf_cat+0xa0>)
 8012144:	f009 fabe 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <pbuf_cat+0x7a>
 8012150:	4b0a      	ldr	r3, [pc, #40]	; (801217c <pbuf_cat+0x98>)
 8012152:	f240 3263 	movw	r2, #867	; 0x363
 8012156:	490d      	ldr	r1, [pc, #52]	; (801218c <pbuf_cat+0xa8>)
 8012158:	480a      	ldr	r0, [pc, #40]	; (8012184 <pbuf_cat+0xa0>)
 801215a:	f009 fab3 	bl	801b6c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	891a      	ldrh	r2, [r3, #8]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	891b      	ldrh	r3, [r3, #8]
 8012166:	4413      	add	r3, r2
 8012168:	b29a      	uxth	r2, r3
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	683a      	ldr	r2, [r7, #0]
 8012172:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012174:	3710      	adds	r7, #16
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	0801d1bc 	.word	0x0801d1bc
 8012180:	0801d3b0 	.word	0x0801d3b0
 8012184:	0801d21c 	.word	0x0801d21c
 8012188:	0801d3e8 	.word	0x0801d3e8
 801218c:	0801d418 	.word	0x0801d418

08012190 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b086      	sub	sp, #24
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801219a:	2300      	movs	r3, #0
 801219c:	617b      	str	r3, [r7, #20]
 801219e:	2300      	movs	r3, #0
 80121a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d008      	beq.n	80121ba <pbuf_copy+0x2a>
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d005      	beq.n	80121ba <pbuf_copy+0x2a>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	891a      	ldrh	r2, [r3, #8]
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	891b      	ldrh	r3, [r3, #8]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d209      	bcs.n	80121ce <pbuf_copy+0x3e>
 80121ba:	4b57      	ldr	r3, [pc, #348]	; (8012318 <pbuf_copy+0x188>)
 80121bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80121c0:	4956      	ldr	r1, [pc, #344]	; (801231c <pbuf_copy+0x18c>)
 80121c2:	4857      	ldr	r0, [pc, #348]	; (8012320 <pbuf_copy+0x190>)
 80121c4:	f009 fa7e 	bl	801b6c4 <iprintf>
 80121c8:	f06f 030f 	mvn.w	r3, #15
 80121cc:	e09f      	b.n	801230e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	895b      	ldrh	r3, [r3, #10]
 80121d2:	461a      	mov	r2, r3
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	1ad2      	subs	r2, r2, r3
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	895b      	ldrh	r3, [r3, #10]
 80121dc:	4619      	mov	r1, r3
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	1acb      	subs	r3, r1, r3
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d306      	bcc.n	80121f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	895b      	ldrh	r3, [r3, #10]
 80121ea:	461a      	mov	r2, r3
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	60fb      	str	r3, [r7, #12]
 80121f2:	e005      	b.n	8012200 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	895b      	ldrh	r3, [r3, #10]
 80121f8:	461a      	mov	r2, r3
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	685a      	ldr	r2, [r3, #4]
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	18d0      	adds	r0, r2, r3
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	685a      	ldr	r2, [r3, #4]
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	4413      	add	r3, r2
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	4619      	mov	r1, r3
 8012214:	f009 fbc7 	bl	801b9a6 <memcpy>
    offset_to += len;
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	4413      	add	r3, r2
 801221e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012220:	693a      	ldr	r2, [r7, #16]
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	4413      	add	r3, r2
 8012226:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	895b      	ldrh	r3, [r3, #10]
 801222c:	461a      	mov	r2, r3
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	4293      	cmp	r3, r2
 8012232:	d906      	bls.n	8012242 <pbuf_copy+0xb2>
 8012234:	4b38      	ldr	r3, [pc, #224]	; (8012318 <pbuf_copy+0x188>)
 8012236:	f240 32d9 	movw	r2, #985	; 0x3d9
 801223a:	493a      	ldr	r1, [pc, #232]	; (8012324 <pbuf_copy+0x194>)
 801223c:	4838      	ldr	r0, [pc, #224]	; (8012320 <pbuf_copy+0x190>)
 801223e:	f009 fa41 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	895b      	ldrh	r3, [r3, #10]
 8012246:	461a      	mov	r2, r3
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	4293      	cmp	r3, r2
 801224c:	d906      	bls.n	801225c <pbuf_copy+0xcc>
 801224e:	4b32      	ldr	r3, [pc, #200]	; (8012318 <pbuf_copy+0x188>)
 8012250:	f240 32da 	movw	r2, #986	; 0x3da
 8012254:	4934      	ldr	r1, [pc, #208]	; (8012328 <pbuf_copy+0x198>)
 8012256:	4832      	ldr	r0, [pc, #200]	; (8012320 <pbuf_copy+0x190>)
 8012258:	f009 fa34 	bl	801b6c4 <iprintf>
    if (offset_from >= p_from->len) {
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	895b      	ldrh	r3, [r3, #10]
 8012260:	461a      	mov	r2, r3
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	4293      	cmp	r3, r2
 8012266:	d304      	bcc.n	8012272 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012268:	2300      	movs	r3, #0
 801226a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	895b      	ldrh	r3, [r3, #10]
 8012276:	461a      	mov	r2, r3
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	4293      	cmp	r3, r2
 801227c:	d114      	bne.n	80122a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801227e:	2300      	movs	r3, #0
 8012280:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10c      	bne.n	80122a8 <pbuf_copy+0x118>
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d009      	beq.n	80122a8 <pbuf_copy+0x118>
 8012294:	4b20      	ldr	r3, [pc, #128]	; (8012318 <pbuf_copy+0x188>)
 8012296:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801229a:	4924      	ldr	r1, [pc, #144]	; (801232c <pbuf_copy+0x19c>)
 801229c:	4820      	ldr	r0, [pc, #128]	; (8012320 <pbuf_copy+0x190>)
 801229e:	f009 fa11 	bl	801b6c4 <iprintf>
 80122a2:	f06f 030f 	mvn.w	r3, #15
 80122a6:	e032      	b.n	801230e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d013      	beq.n	80122d6 <pbuf_copy+0x146>
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	895a      	ldrh	r2, [r3, #10]
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	891b      	ldrh	r3, [r3, #8]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d10d      	bne.n	80122d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d009      	beq.n	80122d6 <pbuf_copy+0x146>
 80122c2:	4b15      	ldr	r3, [pc, #84]	; (8012318 <pbuf_copy+0x188>)
 80122c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80122c8:	4919      	ldr	r1, [pc, #100]	; (8012330 <pbuf_copy+0x1a0>)
 80122ca:	4815      	ldr	r0, [pc, #84]	; (8012320 <pbuf_copy+0x190>)
 80122cc:	f009 f9fa 	bl	801b6c4 <iprintf>
 80122d0:	f06f 0305 	mvn.w	r3, #5
 80122d4:	e01b      	b.n	801230e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d013      	beq.n	8012304 <pbuf_copy+0x174>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	895a      	ldrh	r2, [r3, #10]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d10d      	bne.n	8012304 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <pbuf_copy+0x174>
 80122f0:	4b09      	ldr	r3, [pc, #36]	; (8012318 <pbuf_copy+0x188>)
 80122f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80122f6:	490e      	ldr	r1, [pc, #56]	; (8012330 <pbuf_copy+0x1a0>)
 80122f8:	4809      	ldr	r0, [pc, #36]	; (8012320 <pbuf_copy+0x190>)
 80122fa:	f009 f9e3 	bl	801b6c4 <iprintf>
 80122fe:	f06f 0305 	mvn.w	r3, #5
 8012302:	e004      	b.n	801230e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	f47f af61 	bne.w	80121ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	0801d1bc 	.word	0x0801d1bc
 801231c:	0801d464 	.word	0x0801d464
 8012320:	0801d21c 	.word	0x0801d21c
 8012324:	0801d494 	.word	0x0801d494
 8012328:	0801d4ac 	.word	0x0801d4ac
 801232c:	0801d4c8 	.word	0x0801d4c8
 8012330:	0801d4d8 	.word	0x0801d4d8

08012334 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b088      	sub	sp, #32
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	4611      	mov	r1, r2
 8012340:	461a      	mov	r2, r3
 8012342:	460b      	mov	r3, r1
 8012344:	80fb      	strh	r3, [r7, #6]
 8012346:	4613      	mov	r3, r2
 8012348:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801234e:	2300      	movs	r3, #0
 8012350:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d108      	bne.n	801236a <pbuf_copy_partial+0x36>
 8012358:	4b2b      	ldr	r3, [pc, #172]	; (8012408 <pbuf_copy_partial+0xd4>)
 801235a:	f240 420a 	movw	r2, #1034	; 0x40a
 801235e:	492b      	ldr	r1, [pc, #172]	; (801240c <pbuf_copy_partial+0xd8>)
 8012360:	482b      	ldr	r0, [pc, #172]	; (8012410 <pbuf_copy_partial+0xdc>)
 8012362:	f009 f9af 	bl	801b6c4 <iprintf>
 8012366:	2300      	movs	r3, #0
 8012368:	e04a      	b.n	8012400 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d108      	bne.n	8012382 <pbuf_copy_partial+0x4e>
 8012370:	4b25      	ldr	r3, [pc, #148]	; (8012408 <pbuf_copy_partial+0xd4>)
 8012372:	f240 420b 	movw	r2, #1035	; 0x40b
 8012376:	4927      	ldr	r1, [pc, #156]	; (8012414 <pbuf_copy_partial+0xe0>)
 8012378:	4825      	ldr	r0, [pc, #148]	; (8012410 <pbuf_copy_partial+0xdc>)
 801237a:	f009 f9a3 	bl	801b6c4 <iprintf>
 801237e:	2300      	movs	r3, #0
 8012380:	e03e      	b.n	8012400 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	61fb      	str	r3, [r7, #28]
 8012386:	e034      	b.n	80123f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012388:	88bb      	ldrh	r3, [r7, #4]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d00a      	beq.n	80123a4 <pbuf_copy_partial+0x70>
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	895b      	ldrh	r3, [r3, #10]
 8012392:	88ba      	ldrh	r2, [r7, #4]
 8012394:	429a      	cmp	r2, r3
 8012396:	d305      	bcc.n	80123a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	895b      	ldrh	r3, [r3, #10]
 801239c:	88ba      	ldrh	r2, [r7, #4]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	80bb      	strh	r3, [r7, #4]
 80123a2:	e023      	b.n	80123ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	895a      	ldrh	r2, [r3, #10]
 80123a8:	88bb      	ldrh	r3, [r7, #4]
 80123aa:	1ad3      	subs	r3, r2, r3
 80123ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80123ae:	8b3a      	ldrh	r2, [r7, #24]
 80123b0:	88fb      	ldrh	r3, [r7, #6]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d901      	bls.n	80123ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80123b6:	88fb      	ldrh	r3, [r7, #6]
 80123b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80123ba:	8b7b      	ldrh	r3, [r7, #26]
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	18d0      	adds	r0, r2, r3
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	685a      	ldr	r2, [r3, #4]
 80123c4:	88bb      	ldrh	r3, [r7, #4]
 80123c6:	4413      	add	r3, r2
 80123c8:	8b3a      	ldrh	r2, [r7, #24]
 80123ca:	4619      	mov	r1, r3
 80123cc:	f009 faeb 	bl	801b9a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80123d0:	8afa      	ldrh	r2, [r7, #22]
 80123d2:	8b3b      	ldrh	r3, [r7, #24]
 80123d4:	4413      	add	r3, r2
 80123d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80123d8:	8b7a      	ldrh	r2, [r7, #26]
 80123da:	8b3b      	ldrh	r3, [r7, #24]
 80123dc:	4413      	add	r3, r2
 80123de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80123e0:	88fa      	ldrh	r2, [r7, #6]
 80123e2:	8b3b      	ldrh	r3, [r7, #24]
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80123e8:	2300      	movs	r3, #0
 80123ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	61fb      	str	r3, [r7, #28]
 80123f2:	88fb      	ldrh	r3, [r7, #6]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <pbuf_copy_partial+0xca>
 80123f8:	69fb      	ldr	r3, [r7, #28]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1c4      	bne.n	8012388 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80123fe:	8afb      	ldrh	r3, [r7, #22]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3720      	adds	r7, #32
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	0801d1bc 	.word	0x0801d1bc
 801240c:	0801d504 	.word	0x0801d504
 8012410:	0801d21c 	.word	0x0801d21c
 8012414:	0801d524 	.word	0x0801d524

08012418 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	603a      	str	r2, [r7, #0]
 8012422:	71fb      	strb	r3, [r7, #7]
 8012424:	460b      	mov	r3, r1
 8012426:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	8919      	ldrh	r1, [r3, #8]
 801242c:	88ba      	ldrh	r2, [r7, #4]
 801242e:	79fb      	ldrb	r3, [r7, #7]
 8012430:	4618      	mov	r0, r3
 8012432:	f7ff fab1 	bl	8011998 <pbuf_alloc>
 8012436:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d101      	bne.n	8012442 <pbuf_clone+0x2a>
    return NULL;
 801243e:	2300      	movs	r3, #0
 8012440:	e011      	b.n	8012466 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012442:	6839      	ldr	r1, [r7, #0]
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7ff fea3 	bl	8012190 <pbuf_copy>
 801244a:	4603      	mov	r3, r0
 801244c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801244e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d006      	beq.n	8012464 <pbuf_clone+0x4c>
 8012456:	4b06      	ldr	r3, [pc, #24]	; (8012470 <pbuf_clone+0x58>)
 8012458:	f240 5224 	movw	r2, #1316	; 0x524
 801245c:	4905      	ldr	r1, [pc, #20]	; (8012474 <pbuf_clone+0x5c>)
 801245e:	4806      	ldr	r0, [pc, #24]	; (8012478 <pbuf_clone+0x60>)
 8012460:	f009 f930 	bl	801b6c4 <iprintf>
  return q;
 8012464:	68fb      	ldr	r3, [r7, #12]
}
 8012466:	4618      	mov	r0, r3
 8012468:	3710      	adds	r7, #16
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	0801d1bc 	.word	0x0801d1bc
 8012474:	0801d630 	.word	0x0801d630
 8012478:	0801d21c 	.word	0x0801d21c

0801247c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012480:	f009 f820 	bl	801b4c4 <rand>
 8012484:	4603      	mov	r3, r0
 8012486:	b29b      	uxth	r3, r3
 8012488:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801248c:	b29b      	uxth	r3, r3
 801248e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012492:	b29a      	uxth	r2, r3
 8012494:	4b01      	ldr	r3, [pc, #4]	; (801249c <tcp_init+0x20>)
 8012496:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012498:	bf00      	nop
 801249a:	bd80      	pop	{r7, pc}
 801249c:	20000078 	.word	0x20000078

080124a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	7d1b      	ldrb	r3, [r3, #20]
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	d105      	bne.n	80124bc <tcp_free+0x1c>
 80124b0:	4b06      	ldr	r3, [pc, #24]	; (80124cc <tcp_free+0x2c>)
 80124b2:	22d4      	movs	r2, #212	; 0xd4
 80124b4:	4906      	ldr	r1, [pc, #24]	; (80124d0 <tcp_free+0x30>)
 80124b6:	4807      	ldr	r0, [pc, #28]	; (80124d4 <tcp_free+0x34>)
 80124b8:	f009 f904 	bl	801b6c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80124bc:	6879      	ldr	r1, [r7, #4]
 80124be:	2001      	movs	r0, #1
 80124c0:	f7fe fed8 	bl	8011274 <memp_free>
}
 80124c4:	bf00      	nop
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	0801d6bc 	.word	0x0801d6bc
 80124d0:	0801d6ec 	.word	0x0801d6ec
 80124d4:	0801d700 	.word	0x0801d700

080124d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	7d1b      	ldrb	r3, [r3, #20]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d105      	bne.n	80124f4 <tcp_free_listen+0x1c>
 80124e8:	4b06      	ldr	r3, [pc, #24]	; (8012504 <tcp_free_listen+0x2c>)
 80124ea:	22df      	movs	r2, #223	; 0xdf
 80124ec:	4906      	ldr	r1, [pc, #24]	; (8012508 <tcp_free_listen+0x30>)
 80124ee:	4807      	ldr	r0, [pc, #28]	; (801250c <tcp_free_listen+0x34>)
 80124f0:	f009 f8e8 	bl	801b6c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80124f4:	6879      	ldr	r1, [r7, #4]
 80124f6:	2002      	movs	r0, #2
 80124f8:	f7fe febc 	bl	8011274 <memp_free>
}
 80124fc:	bf00      	nop
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	0801d6bc 	.word	0x0801d6bc
 8012508:	0801d728 	.word	0x0801d728
 801250c:	0801d700 	.word	0x0801d700

08012510 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012514:	f001 f802 	bl	801351c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012518:	4b07      	ldr	r3, [pc, #28]	; (8012538 <tcp_tmr+0x28>)
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	3301      	adds	r3, #1
 801251e:	b2da      	uxtb	r2, r3
 8012520:	4b05      	ldr	r3, [pc, #20]	; (8012538 <tcp_tmr+0x28>)
 8012522:	701a      	strb	r2, [r3, #0]
 8012524:	4b04      	ldr	r3, [pc, #16]	; (8012538 <tcp_tmr+0x28>)
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	f003 0301 	and.w	r3, r3, #1
 801252c:	2b00      	cmp	r3, #0
 801252e:	d001      	beq.n	8012534 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012530:	f000 fcb4 	bl	8012e9c <tcp_slowtmr>
  }
}
 8012534:	bf00      	nop
 8012536:	bd80      	pop	{r7, pc}
 8012538:	2000aff1 	.word	0x2000aff1

0801253c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d105      	bne.n	8012558 <tcp_remove_listener+0x1c>
 801254c:	4b0d      	ldr	r3, [pc, #52]	; (8012584 <tcp_remove_listener+0x48>)
 801254e:	22ff      	movs	r2, #255	; 0xff
 8012550:	490d      	ldr	r1, [pc, #52]	; (8012588 <tcp_remove_listener+0x4c>)
 8012552:	480e      	ldr	r0, [pc, #56]	; (801258c <tcp_remove_listener+0x50>)
 8012554:	f009 f8b6 	bl	801b6c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	60fb      	str	r3, [r7, #12]
 801255c:	e00a      	b.n	8012574 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	429a      	cmp	r2, r3
 8012566:	d102      	bne.n	801256e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	2200      	movs	r2, #0
 801256c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	60fb      	str	r3, [r7, #12]
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1f1      	bne.n	801255e <tcp_remove_listener+0x22>
    }
  }
}
 801257a:	bf00      	nop
 801257c:	bf00      	nop
 801257e:	3710      	adds	r7, #16
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}
 8012584:	0801d6bc 	.word	0x0801d6bc
 8012588:	0801d744 	.word	0x0801d744
 801258c:	0801d700 	.word	0x0801d700

08012590 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d106      	bne.n	80125ac <tcp_listen_closed+0x1c>
 801259e:	4b14      	ldr	r3, [pc, #80]	; (80125f0 <tcp_listen_closed+0x60>)
 80125a0:	f240 1211 	movw	r2, #273	; 0x111
 80125a4:	4913      	ldr	r1, [pc, #76]	; (80125f4 <tcp_listen_closed+0x64>)
 80125a6:	4814      	ldr	r0, [pc, #80]	; (80125f8 <tcp_listen_closed+0x68>)
 80125a8:	f009 f88c 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	7d1b      	ldrb	r3, [r3, #20]
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	d006      	beq.n	80125c2 <tcp_listen_closed+0x32>
 80125b4:	4b0e      	ldr	r3, [pc, #56]	; (80125f0 <tcp_listen_closed+0x60>)
 80125b6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80125ba:	4910      	ldr	r1, [pc, #64]	; (80125fc <tcp_listen_closed+0x6c>)
 80125bc:	480e      	ldr	r0, [pc, #56]	; (80125f8 <tcp_listen_closed+0x68>)
 80125be:	f009 f881 	bl	801b6c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80125c2:	2301      	movs	r3, #1
 80125c4:	60fb      	str	r3, [r7, #12]
 80125c6:	e00b      	b.n	80125e0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80125c8:	4a0d      	ldr	r2, [pc, #52]	; (8012600 <tcp_listen_closed+0x70>)
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	6879      	ldr	r1, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7ff ffb1 	bl	801253c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	3301      	adds	r3, #1
 80125de:	60fb      	str	r3, [r7, #12]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	2b03      	cmp	r3, #3
 80125e4:	d9f0      	bls.n	80125c8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80125e6:	bf00      	nop
 80125e8:	bf00      	nop
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	0801d6bc 	.word	0x0801d6bc
 80125f4:	0801d76c 	.word	0x0801d76c
 80125f8:	0801d700 	.word	0x0801d700
 80125fc:	0801d778 	.word	0x0801d778
 8012600:	0801f83c 	.word	0x0801f83c

08012604 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012604:	b5b0      	push	{r4, r5, r7, lr}
 8012606:	b088      	sub	sp, #32
 8012608:	af04      	add	r7, sp, #16
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	460b      	mov	r3, r1
 801260e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d106      	bne.n	8012624 <tcp_close_shutdown+0x20>
 8012616:	4b63      	ldr	r3, [pc, #396]	; (80127a4 <tcp_close_shutdown+0x1a0>)
 8012618:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801261c:	4962      	ldr	r1, [pc, #392]	; (80127a8 <tcp_close_shutdown+0x1a4>)
 801261e:	4863      	ldr	r0, [pc, #396]	; (80127ac <tcp_close_shutdown+0x1a8>)
 8012620:	f009 f850 	bl	801b6c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012624:	78fb      	ldrb	r3, [r7, #3]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d067      	beq.n	80126fa <tcp_close_shutdown+0xf6>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	7d1b      	ldrb	r3, [r3, #20]
 801262e:	2b04      	cmp	r3, #4
 8012630:	d003      	beq.n	801263a <tcp_close_shutdown+0x36>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	7d1b      	ldrb	r3, [r3, #20]
 8012636:	2b07      	cmp	r3, #7
 8012638:	d15f      	bne.n	80126fa <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801263e:	2b00      	cmp	r3, #0
 8012640:	d105      	bne.n	801264e <tcp_close_shutdown+0x4a>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012646:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801264a:	4293      	cmp	r3, r2
 801264c:	d055      	beq.n	80126fa <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	8b5b      	ldrh	r3, [r3, #26]
 8012652:	f003 0310 	and.w	r3, r3, #16
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <tcp_close_shutdown+0x64>
 801265a:	4b52      	ldr	r3, [pc, #328]	; (80127a4 <tcp_close_shutdown+0x1a0>)
 801265c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012660:	4953      	ldr	r1, [pc, #332]	; (80127b0 <tcp_close_shutdown+0x1ac>)
 8012662:	4852      	ldr	r0, [pc, #328]	; (80127ac <tcp_close_shutdown+0x1a8>)
 8012664:	f009 f82e 	bl	801b6c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012670:	687d      	ldr	r5, [r7, #4]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3304      	adds	r3, #4
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	8ad2      	ldrh	r2, [r2, #22]
 801267a:	6879      	ldr	r1, [r7, #4]
 801267c:	8b09      	ldrh	r1, [r1, #24]
 801267e:	9102      	str	r1, [sp, #8]
 8012680:	9201      	str	r2, [sp, #4]
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	462b      	mov	r3, r5
 8012686:	4622      	mov	r2, r4
 8012688:	4601      	mov	r1, r0
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f005 fd18 	bl	80180c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f001 faf5 	bl	8013c80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012696:	4b47      	ldr	r3, [pc, #284]	; (80127b4 <tcp_close_shutdown+0x1b0>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	429a      	cmp	r2, r3
 801269e:	d105      	bne.n	80126ac <tcp_close_shutdown+0xa8>
 80126a0:	4b44      	ldr	r3, [pc, #272]	; (80127b4 <tcp_close_shutdown+0x1b0>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	68db      	ldr	r3, [r3, #12]
 80126a6:	4a43      	ldr	r2, [pc, #268]	; (80127b4 <tcp_close_shutdown+0x1b0>)
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	e013      	b.n	80126d4 <tcp_close_shutdown+0xd0>
 80126ac:	4b41      	ldr	r3, [pc, #260]	; (80127b4 <tcp_close_shutdown+0x1b0>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	60fb      	str	r3, [r7, #12]
 80126b2:	e00c      	b.n	80126ce <tcp_close_shutdown+0xca>
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d104      	bne.n	80126c8 <tcp_close_shutdown+0xc4>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	68da      	ldr	r2, [r3, #12]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	60da      	str	r2, [r3, #12]
 80126c6:	e005      	b.n	80126d4 <tcp_close_shutdown+0xd0>
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	60fb      	str	r3, [r7, #12]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1ef      	bne.n	80126b4 <tcp_close_shutdown+0xb0>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	60da      	str	r2, [r3, #12]
 80126da:	4b37      	ldr	r3, [pc, #220]	; (80127b8 <tcp_close_shutdown+0x1b4>)
 80126dc:	2201      	movs	r2, #1
 80126de:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80126e0:	4b36      	ldr	r3, [pc, #216]	; (80127bc <tcp_close_shutdown+0x1b8>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d102      	bne.n	80126f0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80126ea:	f003 ff8d 	bl	8016608 <tcp_trigger_input_pcb_close>
 80126ee:	e002      	b.n	80126f6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff fed5 	bl	80124a0 <tcp_free>
      }
      return ERR_OK;
 80126f6:	2300      	movs	r3, #0
 80126f8:	e050      	b.n	801279c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	7d1b      	ldrb	r3, [r3, #20]
 80126fe:	2b02      	cmp	r3, #2
 8012700:	d03b      	beq.n	801277a <tcp_close_shutdown+0x176>
 8012702:	2b02      	cmp	r3, #2
 8012704:	dc44      	bgt.n	8012790 <tcp_close_shutdown+0x18c>
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <tcp_close_shutdown+0x10c>
 801270a:	2b01      	cmp	r3, #1
 801270c:	d02a      	beq.n	8012764 <tcp_close_shutdown+0x160>
 801270e:	e03f      	b.n	8012790 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	8adb      	ldrh	r3, [r3, #22]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d021      	beq.n	801275c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012718:	4b29      	ldr	r3, [pc, #164]	; (80127c0 <tcp_close_shutdown+0x1bc>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	429a      	cmp	r2, r3
 8012720:	d105      	bne.n	801272e <tcp_close_shutdown+0x12a>
 8012722:	4b27      	ldr	r3, [pc, #156]	; (80127c0 <tcp_close_shutdown+0x1bc>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	4a25      	ldr	r2, [pc, #148]	; (80127c0 <tcp_close_shutdown+0x1bc>)
 801272a:	6013      	str	r3, [r2, #0]
 801272c:	e013      	b.n	8012756 <tcp_close_shutdown+0x152>
 801272e:	4b24      	ldr	r3, [pc, #144]	; (80127c0 <tcp_close_shutdown+0x1bc>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	60bb      	str	r3, [r7, #8]
 8012734:	e00c      	b.n	8012750 <tcp_close_shutdown+0x14c>
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	429a      	cmp	r2, r3
 801273e:	d104      	bne.n	801274a <tcp_close_shutdown+0x146>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	68da      	ldr	r2, [r3, #12]
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	60da      	str	r2, [r3, #12]
 8012748:	e005      	b.n	8012756 <tcp_close_shutdown+0x152>
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	60bb      	str	r3, [r7, #8]
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1ef      	bne.n	8012736 <tcp_close_shutdown+0x132>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2200      	movs	r2, #0
 801275a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7ff fe9f 	bl	80124a0 <tcp_free>
      break;
 8012762:	e01a      	b.n	801279a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff ff13 	bl	8012590 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801276a:	6879      	ldr	r1, [r7, #4]
 801276c:	4815      	ldr	r0, [pc, #84]	; (80127c4 <tcp_close_shutdown+0x1c0>)
 801276e:	f001 fad7 	bl	8013d20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7ff feb0 	bl	80124d8 <tcp_free_listen>
      break;
 8012778:	e00f      	b.n	801279a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801277a:	6879      	ldr	r1, [r7, #4]
 801277c:	480d      	ldr	r0, [pc, #52]	; (80127b4 <tcp_close_shutdown+0x1b0>)
 801277e:	f001 facf 	bl	8013d20 <tcp_pcb_remove>
 8012782:	4b0d      	ldr	r3, [pc, #52]	; (80127b8 <tcp_close_shutdown+0x1b4>)
 8012784:	2201      	movs	r2, #1
 8012786:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7ff fe89 	bl	80124a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801278e:	e004      	b.n	801279a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f819 	bl	80127c8 <tcp_close_shutdown_fin>
 8012796:	4603      	mov	r3, r0
 8012798:	e000      	b.n	801279c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801279a:	2300      	movs	r3, #0
}
 801279c:	4618      	mov	r0, r3
 801279e:	3710      	adds	r7, #16
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bdb0      	pop	{r4, r5, r7, pc}
 80127a4:	0801d6bc 	.word	0x0801d6bc
 80127a8:	0801d790 	.word	0x0801d790
 80127ac:	0801d700 	.word	0x0801d700
 80127b0:	0801d7b0 	.word	0x0801d7b0
 80127b4:	2000afe8 	.word	0x2000afe8
 80127b8:	2000aff0 	.word	0x2000aff0
 80127bc:	2000b028 	.word	0x2000b028
 80127c0:	2000afe0 	.word	0x2000afe0
 80127c4:	2000afe4 	.word	0x2000afe4

080127c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d106      	bne.n	80127e4 <tcp_close_shutdown_fin+0x1c>
 80127d6:	4b2e      	ldr	r3, [pc, #184]	; (8012890 <tcp_close_shutdown_fin+0xc8>)
 80127d8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80127dc:	492d      	ldr	r1, [pc, #180]	; (8012894 <tcp_close_shutdown_fin+0xcc>)
 80127de:	482e      	ldr	r0, [pc, #184]	; (8012898 <tcp_close_shutdown_fin+0xd0>)
 80127e0:	f008 ff70 	bl	801b6c4 <iprintf>

  switch (pcb->state) {
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	7d1b      	ldrb	r3, [r3, #20]
 80127e8:	2b07      	cmp	r3, #7
 80127ea:	d020      	beq.n	801282e <tcp_close_shutdown_fin+0x66>
 80127ec:	2b07      	cmp	r3, #7
 80127ee:	dc2b      	bgt.n	8012848 <tcp_close_shutdown_fin+0x80>
 80127f0:	2b03      	cmp	r3, #3
 80127f2:	d002      	beq.n	80127fa <tcp_close_shutdown_fin+0x32>
 80127f4:	2b04      	cmp	r3, #4
 80127f6:	d00d      	beq.n	8012814 <tcp_close_shutdown_fin+0x4c>
 80127f8:	e026      	b.n	8012848 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f004 fd6e 	bl	80172dc <tcp_send_fin>
 8012800:	4603      	mov	r3, r0
 8012802:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d11f      	bne.n	801284c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2205      	movs	r2, #5
 8012810:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012812:	e01b      	b.n	801284c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f004 fd61 	bl	80172dc <tcp_send_fin>
 801281a:	4603      	mov	r3, r0
 801281c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d114      	bne.n	8012850 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2205      	movs	r2, #5
 801282a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801282c:	e010      	b.n	8012850 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f004 fd54 	bl	80172dc <tcp_send_fin>
 8012834:	4603      	mov	r3, r0
 8012836:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d109      	bne.n	8012854 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2209      	movs	r2, #9
 8012844:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012846:	e005      	b.n	8012854 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012848:	2300      	movs	r3, #0
 801284a:	e01c      	b.n	8012886 <tcp_close_shutdown_fin+0xbe>
      break;
 801284c:	bf00      	nop
 801284e:	e002      	b.n	8012856 <tcp_close_shutdown_fin+0x8e>
      break;
 8012850:	bf00      	nop
 8012852:	e000      	b.n	8012856 <tcp_close_shutdown_fin+0x8e>
      break;
 8012854:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d103      	bne.n	8012866 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f004 fe7a 	bl	8017558 <tcp_output>
 8012864:	e00d      	b.n	8012882 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801286e:	d108      	bne.n	8012882 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	8b5b      	ldrh	r3, [r3, #26]
 8012874:	f043 0308 	orr.w	r3, r3, #8
 8012878:	b29a      	uxth	r2, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801287e:	2300      	movs	r3, #0
 8012880:	e001      	b.n	8012886 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	0801d6bc 	.word	0x0801d6bc
 8012894:	0801d76c 	.word	0x0801d76c
 8012898:	0801d700 	.word	0x0801d700

0801289c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d109      	bne.n	80128be <tcp_close+0x22>
 80128aa:	4b0f      	ldr	r3, [pc, #60]	; (80128e8 <tcp_close+0x4c>)
 80128ac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80128b0:	490e      	ldr	r1, [pc, #56]	; (80128ec <tcp_close+0x50>)
 80128b2:	480f      	ldr	r0, [pc, #60]	; (80128f0 <tcp_close+0x54>)
 80128b4:	f008 ff06 	bl	801b6c4 <iprintf>
 80128b8:	f06f 030f 	mvn.w	r3, #15
 80128bc:	e00f      	b.n	80128de <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	7d1b      	ldrb	r3, [r3, #20]
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	d006      	beq.n	80128d4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	8b5b      	ldrh	r3, [r3, #26]
 80128ca:	f043 0310 	orr.w	r3, r3, #16
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80128d4:	2101      	movs	r1, #1
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7ff fe94 	bl	8012604 <tcp_close_shutdown>
 80128dc:	4603      	mov	r3, r0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	0801d6bc 	.word	0x0801d6bc
 80128ec:	0801d7cc 	.word	0x0801d7cc
 80128f0:	0801d700 	.word	0x0801d700

080128f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b08e      	sub	sp, #56	; 0x38
 80128f8:	af04      	add	r7, sp, #16
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d107      	bne.n	8012914 <tcp_abandon+0x20>
 8012904:	4b52      	ldr	r3, [pc, #328]	; (8012a50 <tcp_abandon+0x15c>)
 8012906:	f240 223d 	movw	r2, #573	; 0x23d
 801290a:	4952      	ldr	r1, [pc, #328]	; (8012a54 <tcp_abandon+0x160>)
 801290c:	4852      	ldr	r0, [pc, #328]	; (8012a58 <tcp_abandon+0x164>)
 801290e:	f008 fed9 	bl	801b6c4 <iprintf>
 8012912:	e099      	b.n	8012a48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	7d1b      	ldrb	r3, [r3, #20]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d106      	bne.n	801292a <tcp_abandon+0x36>
 801291c:	4b4c      	ldr	r3, [pc, #304]	; (8012a50 <tcp_abandon+0x15c>)
 801291e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012922:	494e      	ldr	r1, [pc, #312]	; (8012a5c <tcp_abandon+0x168>)
 8012924:	484c      	ldr	r0, [pc, #304]	; (8012a58 <tcp_abandon+0x164>)
 8012926:	f008 fecd 	bl	801b6c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	7d1b      	ldrb	r3, [r3, #20]
 801292e:	2b0a      	cmp	r3, #10
 8012930:	d107      	bne.n	8012942 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012932:	6879      	ldr	r1, [r7, #4]
 8012934:	484a      	ldr	r0, [pc, #296]	; (8012a60 <tcp_abandon+0x16c>)
 8012936:	f001 f9f3 	bl	8013d20 <tcp_pcb_remove>
    tcp_free(pcb);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7ff fdb0 	bl	80124a0 <tcp_free>
 8012940:	e082      	b.n	8012a48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012942:	2300      	movs	r3, #0
 8012944:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801294e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012954:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801295c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	691b      	ldr	r3, [r3, #16]
 8012962:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	7d1b      	ldrb	r3, [r3, #20]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d126      	bne.n	80129ba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8adb      	ldrh	r3, [r3, #22]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d02e      	beq.n	80129d2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012974:	4b3b      	ldr	r3, [pc, #236]	; (8012a64 <tcp_abandon+0x170>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	429a      	cmp	r2, r3
 801297c:	d105      	bne.n	801298a <tcp_abandon+0x96>
 801297e:	4b39      	ldr	r3, [pc, #228]	; (8012a64 <tcp_abandon+0x170>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	4a37      	ldr	r2, [pc, #220]	; (8012a64 <tcp_abandon+0x170>)
 8012986:	6013      	str	r3, [r2, #0]
 8012988:	e013      	b.n	80129b2 <tcp_abandon+0xbe>
 801298a:	4b36      	ldr	r3, [pc, #216]	; (8012a64 <tcp_abandon+0x170>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	61fb      	str	r3, [r7, #28]
 8012990:	e00c      	b.n	80129ac <tcp_abandon+0xb8>
 8012992:	69fb      	ldr	r3, [r7, #28]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	429a      	cmp	r2, r3
 801299a:	d104      	bne.n	80129a6 <tcp_abandon+0xb2>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68da      	ldr	r2, [r3, #12]
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	60da      	str	r2, [r3, #12]
 80129a4:	e005      	b.n	80129b2 <tcp_abandon+0xbe>
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	61fb      	str	r3, [r7, #28]
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1ef      	bne.n	8012992 <tcp_abandon+0x9e>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2200      	movs	r2, #0
 80129b6:	60da      	str	r2, [r3, #12]
 80129b8:	e00b      	b.n	80129d2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	8adb      	ldrh	r3, [r3, #22]
 80129c2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80129c4:	6879      	ldr	r1, [r7, #4]
 80129c6:	4828      	ldr	r0, [pc, #160]	; (8012a68 <tcp_abandon+0x174>)
 80129c8:	f001 f9aa 	bl	8013d20 <tcp_pcb_remove>
 80129cc:	4b27      	ldr	r3, [pc, #156]	; (8012a6c <tcp_abandon+0x178>)
 80129ce:	2201      	movs	r2, #1
 80129d0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d004      	beq.n	80129e4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129de:	4618      	mov	r0, r3
 80129e0:	f000 fe7e 	bl	80136e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d004      	beq.n	80129f6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f0:	4618      	mov	r0, r3
 80129f2:	f000 fe75 	bl	80136e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d004      	beq.n	8012a08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a02:	4618      	mov	r0, r3
 8012a04:	f000 fe6c 	bl	80136e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d00e      	beq.n	8012a2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012a0e:	6879      	ldr	r1, [r7, #4]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3304      	adds	r3, #4
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	8b12      	ldrh	r2, [r2, #24]
 8012a18:	9202      	str	r2, [sp, #8]
 8012a1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012a1c:	9201      	str	r2, [sp, #4]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	460b      	mov	r3, r1
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	69b9      	ldr	r1, [r7, #24]
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f005 fb4a 	bl	80180c0 <tcp_rst>
    }
    last_state = pcb->state;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	7d1b      	ldrb	r3, [r3, #20]
 8012a30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7ff fd34 	bl	80124a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d004      	beq.n	8012a48 <tcp_abandon+0x154>
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	f06f 010c 	mvn.w	r1, #12
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	4798      	blx	r3
  }
}
 8012a48:	3728      	adds	r7, #40	; 0x28
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	0801d6bc 	.word	0x0801d6bc
 8012a54:	0801d800 	.word	0x0801d800
 8012a58:	0801d700 	.word	0x0801d700
 8012a5c:	0801d81c 	.word	0x0801d81c
 8012a60:	2000afec 	.word	0x2000afec
 8012a64:	2000afe0 	.word	0x2000afe0
 8012a68:	2000afe8 	.word	0x2000afe8
 8012a6c:	2000aff0 	.word	0x2000aff0

08012a70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012a78:	2101      	movs	r1, #1
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff ff3a 	bl	80128f4 <tcp_abandon>
}
 8012a80:	bf00      	nop
 8012a82:	3708      	adds	r7, #8
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d106      	bne.n	8012aa4 <tcp_update_rcv_ann_wnd+0x1c>
 8012a96:	4b25      	ldr	r3, [pc, #148]	; (8012b2c <tcp_update_rcv_ann_wnd+0xa4>)
 8012a98:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012a9c:	4924      	ldr	r1, [pc, #144]	; (8012b30 <tcp_update_rcv_ann_wnd+0xa8>)
 8012a9e:	4825      	ldr	r0, [pc, #148]	; (8012b34 <tcp_update_rcv_ann_wnd+0xac>)
 8012aa0:	f008 fe10 	bl	801b6c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012aac:	4413      	add	r3, r2
 8012aae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012ab8:	f640 3168 	movw	r1, #2920	; 0xb68
 8012abc:	428a      	cmp	r2, r1
 8012abe:	bf28      	it	cs
 8012ac0:	460a      	movcs	r2, r1
 8012ac2:	b292      	uxth	r2, r2
 8012ac4:	4413      	add	r3, r2
 8012ac6:	68fa      	ldr	r2, [r7, #12]
 8012ac8:	1ad3      	subs	r3, r2, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	db08      	blt.n	8012ae0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ada:	68fa      	ldr	r2, [r7, #12]
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	e020      	b.n	8012b22 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	dd03      	ble.n	8012af6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2200      	movs	r2, #0
 8012af2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012af4:	e014      	b.n	8012b20 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b08:	d306      	bcc.n	8012b18 <tcp_update_rcv_ann_wnd+0x90>
 8012b0a:	4b08      	ldr	r3, [pc, #32]	; (8012b2c <tcp_update_rcv_ann_wnd+0xa4>)
 8012b0c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012b10:	4909      	ldr	r1, [pc, #36]	; (8012b38 <tcp_update_rcv_ann_wnd+0xb0>)
 8012b12:	4808      	ldr	r0, [pc, #32]	; (8012b34 <tcp_update_rcv_ann_wnd+0xac>)
 8012b14:	f008 fdd6 	bl	801b6c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012b20:	2300      	movs	r3, #0
  }
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3710      	adds	r7, #16
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	0801d6bc 	.word	0x0801d6bc
 8012b30:	0801d918 	.word	0x0801d918
 8012b34:	0801d700 	.word	0x0801d700
 8012b38:	0801d93c 	.word	0x0801d93c

08012b3c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	460b      	mov	r3, r1
 8012b46:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d107      	bne.n	8012b5e <tcp_recved+0x22>
 8012b4e:	4b20      	ldr	r3, [pc, #128]	; (8012bd0 <tcp_recved+0x94>)
 8012b50:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012b54:	491f      	ldr	r1, [pc, #124]	; (8012bd4 <tcp_recved+0x98>)
 8012b56:	4820      	ldr	r0, [pc, #128]	; (8012bd8 <tcp_recved+0x9c>)
 8012b58:	f008 fdb4 	bl	801b6c4 <iprintf>
 8012b5c:	e034      	b.n	8012bc8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	7d1b      	ldrb	r3, [r3, #20]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d106      	bne.n	8012b74 <tcp_recved+0x38>
 8012b66:	4b1a      	ldr	r3, [pc, #104]	; (8012bd0 <tcp_recved+0x94>)
 8012b68:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012b6c:	491b      	ldr	r1, [pc, #108]	; (8012bdc <tcp_recved+0xa0>)
 8012b6e:	481a      	ldr	r0, [pc, #104]	; (8012bd8 <tcp_recved+0x9c>)
 8012b70:	f008 fda8 	bl	801b6c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b78:	887b      	ldrh	r3, [r7, #2]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012b7e:	89fb      	ldrh	r3, [r7, #14]
 8012b80:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d804      	bhi.n	8012b92 <tcp_recved+0x56>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b8c:	89fa      	ldrh	r2, [r7, #14]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d204      	bcs.n	8012b9c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012b98:	851a      	strh	r2, [r3, #40]	; 0x28
 8012b9a:	e002      	b.n	8012ba2 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	89fa      	ldrh	r2, [r7, #14]
 8012ba0:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f7ff ff70 	bl	8012a88 <tcp_update_rcv_ann_wnd>
 8012ba8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	d909      	bls.n	8012bc8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	8b5b      	ldrh	r3, [r3, #26]
 8012bb8:	f043 0302 	orr.w	r3, r3, #2
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f004 fcc8 	bl	8017558 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	0801d6bc 	.word	0x0801d6bc
 8012bd4:	0801d958 	.word	0x0801d958
 8012bd8:	0801d700 	.word	0x0801d700
 8012bdc:	0801d970 	.word	0x0801d970

08012be0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012bea:	4b1e      	ldr	r3, [pc, #120]	; (8012c64 <tcp_new_port+0x84>)
 8012bec:	881b      	ldrh	r3, [r3, #0]
 8012bee:	3301      	adds	r3, #1
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	4b1c      	ldr	r3, [pc, #112]	; (8012c64 <tcp_new_port+0x84>)
 8012bf4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012bf6:	4b1b      	ldr	r3, [pc, #108]	; (8012c64 <tcp_new_port+0x84>)
 8012bf8:	881b      	ldrh	r3, [r3, #0]
 8012bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d103      	bne.n	8012c0a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012c02:	4b18      	ldr	r3, [pc, #96]	; (8012c64 <tcp_new_port+0x84>)
 8012c04:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012c08:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	71fb      	strb	r3, [r7, #7]
 8012c0e:	e01e      	b.n	8012c4e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012c10:	79fb      	ldrb	r3, [r7, #7]
 8012c12:	4a15      	ldr	r2, [pc, #84]	; (8012c68 <tcp_new_port+0x88>)
 8012c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	e011      	b.n	8012c42 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	8ada      	ldrh	r2, [r3, #22]
 8012c22:	4b10      	ldr	r3, [pc, #64]	; (8012c64 <tcp_new_port+0x84>)
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d108      	bne.n	8012c3c <tcp_new_port+0x5c>
        n++;
 8012c2a:	88bb      	ldrh	r3, [r7, #4]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012c30:	88bb      	ldrh	r3, [r7, #4]
 8012c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c36:	d3d8      	bcc.n	8012bea <tcp_new_port+0xa>
          return 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	e00d      	b.n	8012c58 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	603b      	str	r3, [r7, #0]
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1ea      	bne.n	8012c1e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012c48:	79fb      	ldrb	r3, [r7, #7]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	71fb      	strb	r3, [r7, #7]
 8012c4e:	79fb      	ldrb	r3, [r7, #7]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d9dd      	bls.n	8012c10 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012c54:	4b03      	ldr	r3, [pc, #12]	; (8012c64 <tcp_new_port+0x84>)
 8012c56:	881b      	ldrh	r3, [r3, #0]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	20000078 	.word	0x20000078
 8012c68:	0801f83c 	.word	0x0801f83c

08012c6c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b08a      	sub	sp, #40	; 0x28
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	603b      	str	r3, [r7, #0]
 8012c78:	4613      	mov	r3, r2
 8012c7a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d109      	bne.n	8012c9a <tcp_connect+0x2e>
 8012c86:	4b7d      	ldr	r3, [pc, #500]	; (8012e7c <tcp_connect+0x210>)
 8012c88:	f240 4235 	movw	r2, #1077	; 0x435
 8012c8c:	497c      	ldr	r1, [pc, #496]	; (8012e80 <tcp_connect+0x214>)
 8012c8e:	487d      	ldr	r0, [pc, #500]	; (8012e84 <tcp_connect+0x218>)
 8012c90:	f008 fd18 	bl	801b6c4 <iprintf>
 8012c94:	f06f 030f 	mvn.w	r3, #15
 8012c98:	e0ec      	b.n	8012e74 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d109      	bne.n	8012cb4 <tcp_connect+0x48>
 8012ca0:	4b76      	ldr	r3, [pc, #472]	; (8012e7c <tcp_connect+0x210>)
 8012ca2:	f240 4236 	movw	r2, #1078	; 0x436
 8012ca6:	4978      	ldr	r1, [pc, #480]	; (8012e88 <tcp_connect+0x21c>)
 8012ca8:	4876      	ldr	r0, [pc, #472]	; (8012e84 <tcp_connect+0x218>)
 8012caa:	f008 fd0b 	bl	801b6c4 <iprintf>
 8012cae:	f06f 030f 	mvn.w	r3, #15
 8012cb2:	e0df      	b.n	8012e74 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	7d1b      	ldrb	r3, [r3, #20]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d009      	beq.n	8012cd0 <tcp_connect+0x64>
 8012cbc:	4b6f      	ldr	r3, [pc, #444]	; (8012e7c <tcp_connect+0x210>)
 8012cbe:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8012cc2:	4972      	ldr	r1, [pc, #456]	; (8012e8c <tcp_connect+0x220>)
 8012cc4:	486f      	ldr	r0, [pc, #444]	; (8012e84 <tcp_connect+0x218>)
 8012cc6:	f008 fcfd 	bl	801b6c4 <iprintf>
 8012cca:	f06f 0309 	mvn.w	r3, #9
 8012cce:	e0d1      	b.n	8012e74 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d002      	beq.n	8012cdc <tcp_connect+0x70>
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	e000      	b.n	8012cde <tcp_connect+0x72>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	88fa      	ldrh	r2, [r7, #6]
 8012ce6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	7a1b      	ldrb	r3, [r3, #8]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d006      	beq.n	8012cfe <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	7a1b      	ldrb	r3, [r3, #8]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fe fdd3 	bl	80118a0 <netif_get_by_index>
 8012cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8012cfc:	e005      	b.n	8012d0a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	3304      	adds	r3, #4
 8012d02:	4618      	mov	r0, r3
 8012d04:	f006 ff98 	bl	8019c38 <ip4_route>
 8012d08:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d102      	bne.n	8012d16 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012d10:	f06f 0303 	mvn.w	r3, #3
 8012d14:	e0ae      	b.n	8012e74 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d003      	beq.n	8012d24 <tcp_connect+0xb8>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d111      	bne.n	8012d48 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8012d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <tcp_connect+0xc4>
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	3304      	adds	r3, #4
 8012d2e:	e000      	b.n	8012d32 <tcp_connect+0xc6>
 8012d30:	2300      	movs	r3, #0
 8012d32:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d102      	bne.n	8012d40 <tcp_connect+0xd4>
      return ERR_RTE;
 8012d3a:	f06f 0303 	mvn.w	r3, #3
 8012d3e:	e099      	b.n	8012e74 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	8adb      	ldrh	r3, [r3, #22]
 8012d4c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	8adb      	ldrh	r3, [r3, #22]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d10c      	bne.n	8012d70 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8012d56:	f7ff ff43 	bl	8012be0 <tcp_new_port>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	8adb      	ldrh	r3, [r3, #22]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d102      	bne.n	8012d70 <tcp_connect+0x104>
      return ERR_BUF;
 8012d6a:	f06f 0301 	mvn.w	r3, #1
 8012d6e:	e081      	b.n	8012e74 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f001 f869 	bl	8013e48 <tcp_next_iss>
 8012d76:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	697a      	ldr	r2, [r7, #20]
 8012d82:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	1e5a      	subs	r2, r3, #1
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	1e5a      	subs	r2, r3, #1
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	1e5a      	subs	r2, r3, #1
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012dba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012dc4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	3304      	adds	r3, #4
 8012dce:	461a      	mov	r2, r3
 8012dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dd2:	f001 f85f 	bl	8013e94 <tcp_eff_send_mss_netif>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	461a      	mov	r2, r3
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2201      	movs	r2, #1
 8012de2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	683a      	ldr	r2, [r7, #0]
 8012dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012dee:	2102      	movs	r1, #2
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f004 fac3 	bl	801737c <tcp_enqueue_flags>
 8012df6:	4603      	mov	r3, r0
 8012df8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012dfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d136      	bne.n	8012e70 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2202      	movs	r2, #2
 8012e06:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012e08:	8b7b      	ldrh	r3, [r7, #26]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d021      	beq.n	8012e52 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012e0e:	4b20      	ldr	r3, [pc, #128]	; (8012e90 <tcp_connect+0x224>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d105      	bne.n	8012e24 <tcp_connect+0x1b8>
 8012e18:	4b1d      	ldr	r3, [pc, #116]	; (8012e90 <tcp_connect+0x224>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	4a1c      	ldr	r2, [pc, #112]	; (8012e90 <tcp_connect+0x224>)
 8012e20:	6013      	str	r3, [r2, #0]
 8012e22:	e013      	b.n	8012e4c <tcp_connect+0x1e0>
 8012e24:	4b1a      	ldr	r3, [pc, #104]	; (8012e90 <tcp_connect+0x224>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	623b      	str	r3, [r7, #32]
 8012e2a:	e00c      	b.n	8012e46 <tcp_connect+0x1da>
 8012e2c:	6a3b      	ldr	r3, [r7, #32]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	68fa      	ldr	r2, [r7, #12]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d104      	bne.n	8012e40 <tcp_connect+0x1d4>
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	68da      	ldr	r2, [r3, #12]
 8012e3a:	6a3b      	ldr	r3, [r7, #32]
 8012e3c:	60da      	str	r2, [r3, #12]
 8012e3e:	e005      	b.n	8012e4c <tcp_connect+0x1e0>
 8012e40:	6a3b      	ldr	r3, [r7, #32]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	623b      	str	r3, [r7, #32]
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d1ef      	bne.n	8012e2c <tcp_connect+0x1c0>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012e52:	4b10      	ldr	r3, [pc, #64]	; (8012e94 <tcp_connect+0x228>)
 8012e54:	681a      	ldr	r2, [r3, #0]
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	60da      	str	r2, [r3, #12]
 8012e5a:	4a0e      	ldr	r2, [pc, #56]	; (8012e94 <tcp_connect+0x228>)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	f005 faf0 	bl	8018444 <tcp_timer_needed>
 8012e64:	4b0c      	ldr	r3, [pc, #48]	; (8012e98 <tcp_connect+0x22c>)
 8012e66:	2201      	movs	r2, #1
 8012e68:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012e6a:	68f8      	ldr	r0, [r7, #12]
 8012e6c:	f004 fb74 	bl	8017558 <tcp_output>
  }
  return ret;
 8012e70:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3728      	adds	r7, #40	; 0x28
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	0801d6bc 	.word	0x0801d6bc
 8012e80:	0801d998 	.word	0x0801d998
 8012e84:	0801d700 	.word	0x0801d700
 8012e88:	0801d9b4 	.word	0x0801d9b4
 8012e8c:	0801d9d0 	.word	0x0801d9d0
 8012e90:	2000afe0 	.word	0x2000afe0
 8012e94:	2000afe8 	.word	0x2000afe8
 8012e98:	2000aff0 	.word	0x2000aff0

08012e9c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012e9c:	b5b0      	push	{r4, r5, r7, lr}
 8012e9e:	b090      	sub	sp, #64	; 0x40
 8012ea0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012ea8:	4b94      	ldr	r3, [pc, #592]	; (80130fc <tcp_slowtmr+0x260>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	3301      	adds	r3, #1
 8012eae:	4a93      	ldr	r2, [pc, #588]	; (80130fc <tcp_slowtmr+0x260>)
 8012eb0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012eb2:	4b93      	ldr	r3, [pc, #588]	; (8013100 <tcp_slowtmr+0x264>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	4b91      	ldr	r3, [pc, #580]	; (8013100 <tcp_slowtmr+0x264>)
 8012ebc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012ec2:	4b90      	ldr	r3, [pc, #576]	; (8013104 <tcp_slowtmr+0x268>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012ec8:	e29f      	b.n	801340a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ecc:	7d1b      	ldrb	r3, [r3, #20]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d106      	bne.n	8012ee0 <tcp_slowtmr+0x44>
 8012ed2:	4b8d      	ldr	r3, [pc, #564]	; (8013108 <tcp_slowtmr+0x26c>)
 8012ed4:	f240 42be 	movw	r2, #1214	; 0x4be
 8012ed8:	498c      	ldr	r1, [pc, #560]	; (801310c <tcp_slowtmr+0x270>)
 8012eda:	488d      	ldr	r0, [pc, #564]	; (8013110 <tcp_slowtmr+0x274>)
 8012edc:	f008 fbf2 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee2:	7d1b      	ldrb	r3, [r3, #20]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d106      	bne.n	8012ef6 <tcp_slowtmr+0x5a>
 8012ee8:	4b87      	ldr	r3, [pc, #540]	; (8013108 <tcp_slowtmr+0x26c>)
 8012eea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012eee:	4989      	ldr	r1, [pc, #548]	; (8013114 <tcp_slowtmr+0x278>)
 8012ef0:	4887      	ldr	r0, [pc, #540]	; (8013110 <tcp_slowtmr+0x274>)
 8012ef2:	f008 fbe7 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef8:	7d1b      	ldrb	r3, [r3, #20]
 8012efa:	2b0a      	cmp	r3, #10
 8012efc:	d106      	bne.n	8012f0c <tcp_slowtmr+0x70>
 8012efe:	4b82      	ldr	r3, [pc, #520]	; (8013108 <tcp_slowtmr+0x26c>)
 8012f00:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012f04:	4984      	ldr	r1, [pc, #528]	; (8013118 <tcp_slowtmr+0x27c>)
 8012f06:	4882      	ldr	r0, [pc, #520]	; (8013110 <tcp_slowtmr+0x274>)
 8012f08:	f008 fbdc 	bl	801b6c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0e:	7f9a      	ldrb	r2, [r3, #30]
 8012f10:	4b7b      	ldr	r3, [pc, #492]	; (8013100 <tcp_slowtmr+0x264>)
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d105      	bne.n	8012f24 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012f22:	e272      	b.n	801340a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012f24:	4b76      	ldr	r3, [pc, #472]	; (8013100 <tcp_slowtmr+0x264>)
 8012f26:	781a      	ldrb	r2, [r3, #0]
 8012f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3a:	7d1b      	ldrb	r3, [r3, #20]
 8012f3c:	2b02      	cmp	r3, #2
 8012f3e:	d10a      	bne.n	8012f56 <tcp_slowtmr+0xba>
 8012f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f46:	2b05      	cmp	r3, #5
 8012f48:	d905      	bls.n	8012f56 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f4e:	3301      	adds	r3, #1
 8012f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f54:	e11e      	b.n	8013194 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f5c:	2b0b      	cmp	r3, #11
 8012f5e:	d905      	bls.n	8012f6c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f64:	3301      	adds	r3, #1
 8012f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f6a:	e113      	b.n	8013194 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d075      	beq.n	8013062 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d006      	beq.n	8012f8c <tcp_slowtmr+0xf0>
 8012f7e:	4b62      	ldr	r3, [pc, #392]	; (8013108 <tcp_slowtmr+0x26c>)
 8012f80:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012f84:	4965      	ldr	r1, [pc, #404]	; (801311c <tcp_slowtmr+0x280>)
 8012f86:	4862      	ldr	r0, [pc, #392]	; (8013110 <tcp_slowtmr+0x274>)
 8012f88:	f008 fb9c 	bl	801b6c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d106      	bne.n	8012fa2 <tcp_slowtmr+0x106>
 8012f94:	4b5c      	ldr	r3, [pc, #368]	; (8013108 <tcp_slowtmr+0x26c>)
 8012f96:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012f9a:	4961      	ldr	r1, [pc, #388]	; (8013120 <tcp_slowtmr+0x284>)
 8012f9c:	485c      	ldr	r0, [pc, #368]	; (8013110 <tcp_slowtmr+0x274>)
 8012f9e:	f008 fb91 	bl	801b6c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012fa8:	2b0b      	cmp	r3, #11
 8012faa:	d905      	bls.n	8012fb8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012fb6:	e0ed      	b.n	8013194 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	4a58      	ldr	r2, [pc, #352]	; (8013124 <tcp_slowtmr+0x288>)
 8012fc2:	5cd3      	ldrb	r3, [r2, r3]
 8012fc4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fcc:	7c7a      	ldrb	r2, [r7, #17]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d907      	bls.n	8012fe2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fd8:	3301      	adds	r3, #1
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fe8:	7c7a      	ldrb	r2, [r7, #17]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	f200 80d2 	bhi.w	8013194 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d108      	bne.n	8013010 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013000:	f005 f952 	bl	80182a8 <tcp_zero_window_probe>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d014      	beq.n	8013034 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801300a:	2300      	movs	r3, #0
 801300c:	623b      	str	r3, [r7, #32]
 801300e:	e011      	b.n	8013034 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013016:	4619      	mov	r1, r3
 8013018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801301a:	f004 f817 	bl	801704c <tcp_split_unsent_seg>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d107      	bne.n	8013034 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013026:	f004 fa97 	bl	8017558 <tcp_output>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d101      	bne.n	8013034 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013030:	2300      	movs	r3, #0
 8013032:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013034:	6a3b      	ldr	r3, [r7, #32]
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80ac 	beq.w	8013194 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303e:	2200      	movs	r2, #0
 8013040:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013046:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801304a:	2b06      	cmp	r3, #6
 801304c:	f200 80a2 	bhi.w	8013194 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013056:	3301      	adds	r3, #1
 8013058:	b2da      	uxtb	r2, r3
 801305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013060:	e098      	b.n	8013194 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013064:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013068:	2b00      	cmp	r3, #0
 801306a:	db0f      	blt.n	801308c <tcp_slowtmr+0x1f0>
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013072:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013076:	4293      	cmp	r3, r2
 8013078:	d008      	beq.n	801308c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013080:	b29b      	uxth	r3, r3
 8013082:	3301      	adds	r3, #1
 8013084:	b29b      	uxth	r3, r3
 8013086:	b21a      	sxth	r2, r3
 8013088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013094:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013098:	429a      	cmp	r2, r3
 801309a:	db7b      	blt.n	8013194 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801309c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801309e:	f004 fd4f 	bl	8017b40 <tcp_rexmit_rto_prepare>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d007      	beq.n	80130b8 <tcp_slowtmr+0x21c>
 80130a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d171      	bne.n	8013194 <tcp_slowtmr+0x2f8>
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d06d      	beq.n	8013194 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80130b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ba:	7d1b      	ldrb	r3, [r3, #20]
 80130bc:	2b02      	cmp	r3, #2
 80130be:	d03a      	beq.n	8013136 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80130c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130c6:	2b0c      	cmp	r3, #12
 80130c8:	bf28      	it	cs
 80130ca:	230c      	movcs	r3, #12
 80130cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80130ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130d4:	10db      	asrs	r3, r3, #3
 80130d6:	b21b      	sxth	r3, r3
 80130d8:	461a      	mov	r2, r3
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130e0:	4413      	add	r3, r2
 80130e2:	7efa      	ldrb	r2, [r7, #27]
 80130e4:	4910      	ldr	r1, [pc, #64]	; (8013128 <tcp_slowtmr+0x28c>)
 80130e6:	5c8a      	ldrb	r2, [r1, r2]
 80130e8:	4093      	lsls	r3, r2
 80130ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80130f2:	4293      	cmp	r3, r2
 80130f4:	dc1a      	bgt.n	801312c <tcp_slowtmr+0x290>
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	b21a      	sxth	r2, r3
 80130fa:	e019      	b.n	8013130 <tcp_slowtmr+0x294>
 80130fc:	2000afdc 	.word	0x2000afdc
 8013100:	2000aff2 	.word	0x2000aff2
 8013104:	2000afe8 	.word	0x2000afe8
 8013108:	0801d6bc 	.word	0x0801d6bc
 801310c:	0801da00 	.word	0x0801da00
 8013110:	0801d700 	.word	0x0801d700
 8013114:	0801da2c 	.word	0x0801da2c
 8013118:	0801da58 	.word	0x0801da58
 801311c:	0801da88 	.word	0x0801da88
 8013120:	0801dabc 	.word	0x0801dabc
 8013124:	0801f834 	.word	0x0801f834
 8013128:	0801f824 	.word	0x0801f824
 801312c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013138:	2200      	movs	r2, #0
 801313a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013144:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013148:	4293      	cmp	r3, r2
 801314a:	bf28      	it	cs
 801314c:	4613      	movcs	r3, r2
 801314e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013150:	8a7b      	ldrh	r3, [r7, #18]
 8013152:	085b      	lsrs	r3, r3, #1
 8013154:	b29a      	uxth	r2, r3
 8013156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013158:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013166:	005b      	lsls	r3, r3, #1
 8013168:	b29b      	uxth	r3, r3
 801316a:	429a      	cmp	r2, r3
 801316c:	d206      	bcs.n	801317c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	b29a      	uxth	r2, r3
 8013176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013178:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013188:	2200      	movs	r2, #0
 801318a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801318e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013190:	f004 fd46 	bl	8017c20 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	7d1b      	ldrb	r3, [r3, #20]
 8013198:	2b06      	cmp	r3, #6
 801319a:	d111      	bne.n	80131c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319e:	8b5b      	ldrh	r3, [r3, #26]
 80131a0:	f003 0310 	and.w	r3, r3, #16
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d00b      	beq.n	80131c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131a8:	4b9d      	ldr	r3, [pc, #628]	; (8013420 <tcp_slowtmr+0x584>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	6a1b      	ldr	r3, [r3, #32]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	2b28      	cmp	r3, #40	; 0x28
 80131b4:	d904      	bls.n	80131c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80131b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131ba:	3301      	adds	r3, #1
 80131bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	7a5b      	ldrb	r3, [r3, #9]
 80131c4:	f003 0308 	and.w	r3, r3, #8
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d04c      	beq.n	8013266 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80131cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80131d0:	2b04      	cmp	r3, #4
 80131d2:	d003      	beq.n	80131dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80131d8:	2b07      	cmp	r3, #7
 80131da:	d144      	bne.n	8013266 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131dc:	4b90      	ldr	r3, [pc, #576]	; (8013420 <tcp_slowtmr+0x584>)
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	6a1b      	ldr	r3, [r3, #32]
 80131e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80131e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80131ec:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80131f0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80131f4:	498b      	ldr	r1, [pc, #556]	; (8013424 <tcp_slowtmr+0x588>)
 80131f6:	fba1 1303 	umull	r1, r3, r1, r3
 80131fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d90a      	bls.n	8013216 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013204:	3301      	adds	r3, #1
 8013206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801320a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801320e:	3301      	adds	r3, #1
 8013210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013214:	e027      	b.n	8013266 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013216:	4b82      	ldr	r3, [pc, #520]	; (8013420 <tcp_slowtmr+0x584>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321c:	6a1b      	ldr	r3, [r3, #32]
 801321e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013222:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013228:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801322c:	4618      	mov	r0, r3
 801322e:	4b7e      	ldr	r3, [pc, #504]	; (8013428 <tcp_slowtmr+0x58c>)
 8013230:	fb00 f303 	mul.w	r3, r0, r3
 8013234:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013236:	497b      	ldr	r1, [pc, #492]	; (8013424 <tcp_slowtmr+0x588>)
 8013238:	fba1 1303 	umull	r1, r3, r1, r3
 801323c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801323e:	429a      	cmp	r2, r3
 8013240:	d911      	bls.n	8013266 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013244:	f004 fff0 	bl	8018228 <tcp_keepalive>
 8013248:	4603      	mov	r3, r0
 801324a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801324e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013252:	2b00      	cmp	r3, #0
 8013254:	d107      	bne.n	8013266 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801325c:	3301      	adds	r3, #1
 801325e:	b2da      	uxtb	r2, r3
 8013260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013262:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801326a:	2b00      	cmp	r3, #0
 801326c:	d011      	beq.n	8013292 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801326e:	4b6c      	ldr	r3, [pc, #432]	; (8013420 <tcp_slowtmr+0x584>)
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013274:	6a1b      	ldr	r3, [r3, #32]
 8013276:	1ad2      	subs	r2, r2, r3
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801327e:	4619      	mov	r1, r3
 8013280:	460b      	mov	r3, r1
 8013282:	005b      	lsls	r3, r3, #1
 8013284:	440b      	add	r3, r1
 8013286:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013288:	429a      	cmp	r2, r3
 801328a:	d302      	bcc.n	8013292 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801328c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801328e:	f000 feab 	bl	8013fe8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	7d1b      	ldrb	r3, [r3, #20]
 8013296:	2b03      	cmp	r3, #3
 8013298:	d10b      	bne.n	80132b2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801329a:	4b61      	ldr	r3, [pc, #388]	; (8013420 <tcp_slowtmr+0x584>)
 801329c:	681a      	ldr	r2, [r3, #0]
 801329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a0:	6a1b      	ldr	r3, [r3, #32]
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	2b28      	cmp	r3, #40	; 0x28
 80132a6:	d904      	bls.n	80132b2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80132a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132ac:	3301      	adds	r3, #1
 80132ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	7d1b      	ldrb	r3, [r3, #20]
 80132b6:	2b09      	cmp	r3, #9
 80132b8:	d10b      	bne.n	80132d2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80132ba:	4b59      	ldr	r3, [pc, #356]	; (8013420 <tcp_slowtmr+0x584>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c0:	6a1b      	ldr	r3, [r3, #32]
 80132c2:	1ad3      	subs	r3, r2, r3
 80132c4:	2bf0      	cmp	r3, #240	; 0xf0
 80132c6:	d904      	bls.n	80132d2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80132c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132cc:	3301      	adds	r3, #1
 80132ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80132d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d060      	beq.n	801339c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80132da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80132e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132e4:	f000 fccc 	bl	8013c80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80132e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d010      	beq.n	8013310 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80132ee:	4b4f      	ldr	r3, [pc, #316]	; (801342c <tcp_slowtmr+0x590>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d106      	bne.n	8013306 <tcp_slowtmr+0x46a>
 80132f8:	4b4d      	ldr	r3, [pc, #308]	; (8013430 <tcp_slowtmr+0x594>)
 80132fa:	f240 526d 	movw	r2, #1389	; 0x56d
 80132fe:	494d      	ldr	r1, [pc, #308]	; (8013434 <tcp_slowtmr+0x598>)
 8013300:	484d      	ldr	r0, [pc, #308]	; (8013438 <tcp_slowtmr+0x59c>)
 8013302:	f008 f9df 	bl	801b6c4 <iprintf>
        prev->next = pcb->next;
 8013306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013308:	68da      	ldr	r2, [r3, #12]
 801330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801330c:	60da      	str	r2, [r3, #12]
 801330e:	e00f      	b.n	8013330 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013310:	4b46      	ldr	r3, [pc, #280]	; (801342c <tcp_slowtmr+0x590>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013316:	429a      	cmp	r2, r3
 8013318:	d006      	beq.n	8013328 <tcp_slowtmr+0x48c>
 801331a:	4b45      	ldr	r3, [pc, #276]	; (8013430 <tcp_slowtmr+0x594>)
 801331c:	f240 5271 	movw	r2, #1393	; 0x571
 8013320:	4946      	ldr	r1, [pc, #280]	; (801343c <tcp_slowtmr+0x5a0>)
 8013322:	4845      	ldr	r0, [pc, #276]	; (8013438 <tcp_slowtmr+0x59c>)
 8013324:	f008 f9ce 	bl	801b6c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	4a3f      	ldr	r2, [pc, #252]	; (801342c <tcp_slowtmr+0x590>)
 801332e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013334:	2b00      	cmp	r3, #0
 8013336:	d013      	beq.n	8013360 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013340:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013344:	3304      	adds	r3, #4
 8013346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013348:	8ad2      	ldrh	r2, [r2, #22]
 801334a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801334c:	8b09      	ldrh	r1, [r1, #24]
 801334e:	9102      	str	r1, [sp, #8]
 8013350:	9201      	str	r2, [sp, #4]
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	462b      	mov	r3, r5
 8013356:	4622      	mov	r2, r4
 8013358:	4601      	mov	r1, r0
 801335a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801335c:	f004 feb0 	bl	80180c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	691b      	ldr	r3, [r3, #16]
 8013364:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	7d1b      	ldrb	r3, [r3, #20]
 801336a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801336e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013372:	68db      	ldr	r3, [r3, #12]
 8013374:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013376:	6838      	ldr	r0, [r7, #0]
 8013378:	f7ff f892 	bl	80124a0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801337c:	4b30      	ldr	r3, [pc, #192]	; (8013440 <tcp_slowtmr+0x5a4>)
 801337e:	2200      	movs	r2, #0
 8013380:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d004      	beq.n	8013392 <tcp_slowtmr+0x4f6>
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f06f 010c 	mvn.w	r1, #12
 801338e:	68b8      	ldr	r0, [r7, #8]
 8013390:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013392:	4b2b      	ldr	r3, [pc, #172]	; (8013440 <tcp_slowtmr+0x5a4>)
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d037      	beq.n	801340a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801339a:	e590      	b.n	8012ebe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80133a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80133a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a8:	7f1b      	ldrb	r3, [r3, #28]
 80133aa:	3301      	adds	r3, #1
 80133ac:	b2da      	uxtb	r2, r3
 80133ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	7f1a      	ldrb	r2, [r3, #28]
 80133b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b8:	7f5b      	ldrb	r3, [r3, #29]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d325      	bcc.n	801340a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	2200      	movs	r2, #0
 80133c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80133c4:	4b1e      	ldr	r3, [pc, #120]	; (8013440 <tcp_slowtmr+0x5a4>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80133ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d00b      	beq.n	80133ec <tcp_slowtmr+0x550>
 80133d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133dc:	6912      	ldr	r2, [r2, #16]
 80133de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80133e0:	4610      	mov	r0, r2
 80133e2:	4798      	blx	r3
 80133e4:	4603      	mov	r3, r0
 80133e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80133ea:	e002      	b.n	80133f2 <tcp_slowtmr+0x556>
 80133ec:	2300      	movs	r3, #0
 80133ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80133f2:	4b13      	ldr	r3, [pc, #76]	; (8013440 <tcp_slowtmr+0x5a4>)
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d000      	beq.n	80133fc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80133fa:	e560      	b.n	8012ebe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80133fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013400:	2b00      	cmp	r3, #0
 8013402:	d102      	bne.n	801340a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013406:	f004 f8a7 	bl	8017558 <tcp_output>
  while (pcb != NULL) {
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	2b00      	cmp	r3, #0
 801340e:	f47f ad5c 	bne.w	8012eca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013412:	2300      	movs	r3, #0
 8013414:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013416:	4b0b      	ldr	r3, [pc, #44]	; (8013444 <tcp_slowtmr+0x5a8>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801341c:	e067      	b.n	80134ee <tcp_slowtmr+0x652>
 801341e:	bf00      	nop
 8013420:	2000afdc 	.word	0x2000afdc
 8013424:	10624dd3 	.word	0x10624dd3
 8013428:	000124f8 	.word	0x000124f8
 801342c:	2000afe8 	.word	0x2000afe8
 8013430:	0801d6bc 	.word	0x0801d6bc
 8013434:	0801daf4 	.word	0x0801daf4
 8013438:	0801d700 	.word	0x0801d700
 801343c:	0801db20 	.word	0x0801db20
 8013440:	2000aff0 	.word	0x2000aff0
 8013444:	2000afec 	.word	0x2000afec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344a:	7d1b      	ldrb	r3, [r3, #20]
 801344c:	2b0a      	cmp	r3, #10
 801344e:	d006      	beq.n	801345e <tcp_slowtmr+0x5c2>
 8013450:	4b2b      	ldr	r3, [pc, #172]	; (8013500 <tcp_slowtmr+0x664>)
 8013452:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013456:	492b      	ldr	r1, [pc, #172]	; (8013504 <tcp_slowtmr+0x668>)
 8013458:	482b      	ldr	r0, [pc, #172]	; (8013508 <tcp_slowtmr+0x66c>)
 801345a:	f008 f933 	bl	801b6c4 <iprintf>
    pcb_remove = 0;
 801345e:	2300      	movs	r3, #0
 8013460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013464:	4b29      	ldr	r3, [pc, #164]	; (801350c <tcp_slowtmr+0x670>)
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346a:	6a1b      	ldr	r3, [r3, #32]
 801346c:	1ad3      	subs	r3, r2, r3
 801346e:	2bf0      	cmp	r3, #240	; 0xf0
 8013470:	d904      	bls.n	801347c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013476:	3301      	adds	r3, #1
 8013478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801347c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013480:	2b00      	cmp	r3, #0
 8013482:	d02f      	beq.n	80134e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013486:	f000 fbfb 	bl	8013c80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	2b00      	cmp	r3, #0
 801348e:	d010      	beq.n	80134b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013490:	4b1f      	ldr	r3, [pc, #124]	; (8013510 <tcp_slowtmr+0x674>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013496:	429a      	cmp	r2, r3
 8013498:	d106      	bne.n	80134a8 <tcp_slowtmr+0x60c>
 801349a:	4b19      	ldr	r3, [pc, #100]	; (8013500 <tcp_slowtmr+0x664>)
 801349c:	f240 52af 	movw	r2, #1455	; 0x5af
 80134a0:	491c      	ldr	r1, [pc, #112]	; (8013514 <tcp_slowtmr+0x678>)
 80134a2:	4819      	ldr	r0, [pc, #100]	; (8013508 <tcp_slowtmr+0x66c>)
 80134a4:	f008 f90e 	bl	801b6c4 <iprintf>
        prev->next = pcb->next;
 80134a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134aa:	68da      	ldr	r2, [r3, #12]
 80134ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ae:	60da      	str	r2, [r3, #12]
 80134b0:	e00f      	b.n	80134d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80134b2:	4b17      	ldr	r3, [pc, #92]	; (8013510 <tcp_slowtmr+0x674>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d006      	beq.n	80134ca <tcp_slowtmr+0x62e>
 80134bc:	4b10      	ldr	r3, [pc, #64]	; (8013500 <tcp_slowtmr+0x664>)
 80134be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80134c2:	4915      	ldr	r1, [pc, #84]	; (8013518 <tcp_slowtmr+0x67c>)
 80134c4:	4810      	ldr	r0, [pc, #64]	; (8013508 <tcp_slowtmr+0x66c>)
 80134c6:	f008 f8fd 	bl	801b6c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80134ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	4a10      	ldr	r2, [pc, #64]	; (8013510 <tcp_slowtmr+0x674>)
 80134d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80134d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80134d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80134dc:	69f8      	ldr	r0, [r7, #28]
 80134de:	f7fe ffdf 	bl	80124a0 <tcp_free>
 80134e2:	e004      	b.n	80134ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80134e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80134e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80134ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d1a9      	bne.n	8013448 <tcp_slowtmr+0x5ac>
    }
  }
}
 80134f4:	bf00      	nop
 80134f6:	bf00      	nop
 80134f8:	3730      	adds	r7, #48	; 0x30
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bdb0      	pop	{r4, r5, r7, pc}
 80134fe:	bf00      	nop
 8013500:	0801d6bc 	.word	0x0801d6bc
 8013504:	0801db4c 	.word	0x0801db4c
 8013508:	0801d700 	.word	0x0801d700
 801350c:	2000afdc 	.word	0x2000afdc
 8013510:	2000afec 	.word	0x2000afec
 8013514:	0801db7c 	.word	0x0801db7c
 8013518:	0801dba4 	.word	0x0801dba4

0801351c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013522:	4b2d      	ldr	r3, [pc, #180]	; (80135d8 <tcp_fasttmr+0xbc>)
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	3301      	adds	r3, #1
 8013528:	b2da      	uxtb	r2, r3
 801352a:	4b2b      	ldr	r3, [pc, #172]	; (80135d8 <tcp_fasttmr+0xbc>)
 801352c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801352e:	4b2b      	ldr	r3, [pc, #172]	; (80135dc <tcp_fasttmr+0xc0>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013534:	e048      	b.n	80135c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	7f9a      	ldrb	r2, [r3, #30]
 801353a:	4b27      	ldr	r3, [pc, #156]	; (80135d8 <tcp_fasttmr+0xbc>)
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	429a      	cmp	r2, r3
 8013540:	d03f      	beq.n	80135c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013542:	4b25      	ldr	r3, [pc, #148]	; (80135d8 <tcp_fasttmr+0xbc>)
 8013544:	781a      	ldrb	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	8b5b      	ldrh	r3, [r3, #26]
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	d010      	beq.n	8013578 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	8b5b      	ldrh	r3, [r3, #26]
 801355a:	f043 0302 	orr.w	r3, r3, #2
 801355e:	b29a      	uxth	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f003 fff7 	bl	8017558 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	8b5b      	ldrh	r3, [r3, #26]
 801356e:	f023 0303 	bic.w	r3, r3, #3
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	8b5b      	ldrh	r3, [r3, #26]
 801357c:	f003 0308 	and.w	r3, r3, #8
 8013580:	2b00      	cmp	r3, #0
 8013582:	d009      	beq.n	8013598 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	8b5b      	ldrh	r3, [r3, #26]
 8013588:	f023 0308 	bic.w	r3, r3, #8
 801358c:	b29a      	uxth	r2, r3
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff f918 	bl	80127c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00a      	beq.n	80135bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80135a6:	4b0e      	ldr	r3, [pc, #56]	; (80135e0 <tcp_fasttmr+0xc4>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f000 f819 	bl	80135e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80135b2:	4b0b      	ldr	r3, [pc, #44]	; (80135e0 <tcp_fasttmr+0xc4>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d000      	beq.n	80135bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80135ba:	e7b8      	b.n	801352e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	607b      	str	r3, [r7, #4]
 80135c0:	e002      	b.n	80135c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d1b3      	bne.n	8013536 <tcp_fasttmr+0x1a>
    }
  }
}
 80135ce:	bf00      	nop
 80135d0:	bf00      	nop
 80135d2:	3708      	adds	r7, #8
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}
 80135d8:	2000aff2 	.word	0x2000aff2
 80135dc:	2000afe8 	.word	0x2000afe8
 80135e0:	2000aff0 	.word	0x2000aff0

080135e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80135e4:	b590      	push	{r4, r7, lr}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d109      	bne.n	8013606 <tcp_process_refused_data+0x22>
 80135f2:	4b38      	ldr	r3, [pc, #224]	; (80136d4 <tcp_process_refused_data+0xf0>)
 80135f4:	f240 6209 	movw	r2, #1545	; 0x609
 80135f8:	4937      	ldr	r1, [pc, #220]	; (80136d8 <tcp_process_refused_data+0xf4>)
 80135fa:	4838      	ldr	r0, [pc, #224]	; (80136dc <tcp_process_refused_data+0xf8>)
 80135fc:	f008 f862 	bl	801b6c4 <iprintf>
 8013600:	f06f 030f 	mvn.w	r3, #15
 8013604:	e061      	b.n	80136ca <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801360a:	7b5b      	ldrb	r3, [r3, #13]
 801360c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013612:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013620:	2b00      	cmp	r3, #0
 8013622:	d00b      	beq.n	801363c <tcp_process_refused_data+0x58>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6918      	ldr	r0, [r3, #16]
 801362e:	2300      	movs	r3, #0
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	6879      	ldr	r1, [r7, #4]
 8013634:	47a0      	blx	r4
 8013636:	4603      	mov	r3, r0
 8013638:	73fb      	strb	r3, [r7, #15]
 801363a:	e007      	b.n	801364c <tcp_process_refused_data+0x68>
 801363c:	2300      	movs	r3, #0
 801363e:	68ba      	ldr	r2, [r7, #8]
 8013640:	6879      	ldr	r1, [r7, #4]
 8013642:	2000      	movs	r0, #0
 8013644:	f000 f8c4 	bl	80137d0 <tcp_recv_null>
 8013648:	4603      	mov	r3, r0
 801364a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801364c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d12b      	bne.n	80136ac <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013654:	7bbb      	ldrb	r3, [r7, #14]
 8013656:	f003 0320 	and.w	r3, r3, #32
 801365a:	2b00      	cmp	r3, #0
 801365c:	d034      	beq.n	80136c8 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013662:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013666:	4293      	cmp	r3, r2
 8013668:	d005      	beq.n	8013676 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801366e:	3301      	adds	r3, #1
 8013670:	b29a      	uxth	r2, r3
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00b      	beq.n	8013698 <tcp_process_refused_data+0xb4>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6918      	ldr	r0, [r3, #16]
 801368a:	2300      	movs	r3, #0
 801368c:	2200      	movs	r2, #0
 801368e:	6879      	ldr	r1, [r7, #4]
 8013690:	47a0      	blx	r4
 8013692:	4603      	mov	r3, r0
 8013694:	73fb      	strb	r3, [r7, #15]
 8013696:	e001      	b.n	801369c <tcp_process_refused_data+0xb8>
 8013698:	2300      	movs	r3, #0
 801369a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801369c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136a0:	f113 0f0d 	cmn.w	r3, #13
 80136a4:	d110      	bne.n	80136c8 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80136a6:	f06f 030c 	mvn.w	r3, #12
 80136aa:	e00e      	b.n	80136ca <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80136ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136b0:	f113 0f0d 	cmn.w	r3, #13
 80136b4:	d102      	bne.n	80136bc <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80136b6:	f06f 030c 	mvn.w	r3, #12
 80136ba:	e006      	b.n	80136ca <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80136c2:	f06f 0304 	mvn.w	r3, #4
 80136c6:	e000      	b.n	80136ca <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd90      	pop	{r4, r7, pc}
 80136d2:	bf00      	nop
 80136d4:	0801d6bc 	.word	0x0801d6bc
 80136d8:	0801dbcc 	.word	0x0801dbcc
 80136dc:	0801d700 	.word	0x0801d700

080136e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80136e8:	e007      	b.n	80136fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f000 f80a 	bl	801370a <tcp_seg_free>
    seg = next;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d1f4      	bne.n	80136ea <tcp_segs_free+0xa>
  }
}
 8013700:	bf00      	nop
 8013702:	bf00      	nop
 8013704:	3710      	adds	r7, #16
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801370a:	b580      	push	{r7, lr}
 801370c:	b082      	sub	sp, #8
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d00c      	beq.n	8013732 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d004      	beq.n	801372a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	4618      	mov	r0, r3
 8013726:	f7fe fc1b 	bl	8011f60 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801372a:	6879      	ldr	r1, [r7, #4]
 801372c:	2003      	movs	r0, #3
 801372e:	f7fd fda1 	bl	8011274 <memp_free>
  }
}
 8013732:	bf00      	nop
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
	...

0801373c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d107      	bne.n	801375e <tcp_setprio+0x22>
 801374e:	4b07      	ldr	r3, [pc, #28]	; (801376c <tcp_setprio+0x30>)
 8013750:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8013754:	4906      	ldr	r1, [pc, #24]	; (8013770 <tcp_setprio+0x34>)
 8013756:	4807      	ldr	r0, [pc, #28]	; (8013774 <tcp_setprio+0x38>)
 8013758:	f007 ffb4 	bl	801b6c4 <iprintf>
 801375c:	e002      	b.n	8013764 <tcp_setprio+0x28>

  pcb->prio = prio;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	78fa      	ldrb	r2, [r7, #3]
 8013762:	755a      	strb	r2, [r3, #21]
}
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	0801d6bc 	.word	0x0801d6bc
 8013770:	0801dbf4 	.word	0x0801dbf4
 8013774:	0801d700 	.word	0x0801d700

08013778 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d106      	bne.n	8013794 <tcp_seg_copy+0x1c>
 8013786:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <tcp_seg_copy+0x4c>)
 8013788:	f240 6282 	movw	r2, #1666	; 0x682
 801378c:	490e      	ldr	r1, [pc, #56]	; (80137c8 <tcp_seg_copy+0x50>)
 801378e:	480f      	ldr	r0, [pc, #60]	; (80137cc <tcp_seg_copy+0x54>)
 8013790:	f007 ff98 	bl	801b6c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013794:	2003      	movs	r0, #3
 8013796:	f7fd fcfd 	bl	8011194 <memp_malloc>
 801379a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d101      	bne.n	80137a6 <tcp_seg_copy+0x2e>
    return NULL;
 80137a2:	2300      	movs	r3, #0
 80137a4:	e00a      	b.n	80137bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80137a6:	2210      	movs	r2, #16
 80137a8:	6879      	ldr	r1, [r7, #4]
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f008 f8fb 	bl	801b9a6 <memcpy>
  pbuf_ref(cseg->p);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fe fc73 	bl	80120a0 <pbuf_ref>
  return cseg;
 80137ba:	68fb      	ldr	r3, [r7, #12]
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3710      	adds	r7, #16
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	0801d6bc 	.word	0x0801d6bc
 80137c8:	0801dc10 	.word	0x0801dc10
 80137cc:	0801d700 	.word	0x0801d700

080137d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
 80137dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d109      	bne.n	80137f8 <tcp_recv_null+0x28>
 80137e4:	4b12      	ldr	r3, [pc, #72]	; (8013830 <tcp_recv_null+0x60>)
 80137e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80137ea:	4912      	ldr	r1, [pc, #72]	; (8013834 <tcp_recv_null+0x64>)
 80137ec:	4812      	ldr	r0, [pc, #72]	; (8013838 <tcp_recv_null+0x68>)
 80137ee:	f007 ff69 	bl	801b6c4 <iprintf>
 80137f2:	f06f 030f 	mvn.w	r3, #15
 80137f6:	e016      	b.n	8013826 <tcp_recv_null+0x56>

  if (p != NULL) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d009      	beq.n	8013812 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	891b      	ldrh	r3, [r3, #8]
 8013802:	4619      	mov	r1, r3
 8013804:	68b8      	ldr	r0, [r7, #8]
 8013806:	f7ff f999 	bl	8012b3c <tcp_recved>
    pbuf_free(p);
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f7fe fba8 	bl	8011f60 <pbuf_free>
 8013810:	e008      	b.n	8013824 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d104      	bne.n	8013824 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801381a:	68b8      	ldr	r0, [r7, #8]
 801381c:	f7ff f83e 	bl	801289c <tcp_close>
 8013820:	4603      	mov	r3, r0
 8013822:	e000      	b.n	8013826 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013824:	2300      	movs	r3, #0
}
 8013826:	4618      	mov	r0, r3
 8013828:	3710      	adds	r7, #16
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	0801d6bc 	.word	0x0801d6bc
 8013834:	0801dc2c 	.word	0x0801dc2c
 8013838:	0801d700 	.word	0x0801d700

0801383c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	4603      	mov	r3, r0
 8013844:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801384a:	2b00      	cmp	r3, #0
 801384c:	db01      	blt.n	8013852 <tcp_kill_prio+0x16>
 801384e:	79fb      	ldrb	r3, [r7, #7]
 8013850:	e000      	b.n	8013854 <tcp_kill_prio+0x18>
 8013852:	237f      	movs	r3, #127	; 0x7f
 8013854:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013856:	7afb      	ldrb	r3, [r7, #11]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d034      	beq.n	80138c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801385c:	7afb      	ldrb	r3, [r7, #11]
 801385e:	3b01      	subs	r3, #1
 8013860:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013866:	2300      	movs	r3, #0
 8013868:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801386a:	4b19      	ldr	r3, [pc, #100]	; (80138d0 <tcp_kill_prio+0x94>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	617b      	str	r3, [r7, #20]
 8013870:	e01f      	b.n	80138b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	7d5b      	ldrb	r3, [r3, #21]
 8013876:	7afa      	ldrb	r2, [r7, #11]
 8013878:	429a      	cmp	r2, r3
 801387a:	d80c      	bhi.n	8013896 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013880:	7afa      	ldrb	r2, [r7, #11]
 8013882:	429a      	cmp	r2, r3
 8013884:	d112      	bne.n	80138ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013886:	4b13      	ldr	r3, [pc, #76]	; (80138d4 <tcp_kill_prio+0x98>)
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	6a1b      	ldr	r3, [r3, #32]
 801388e:	1ad3      	subs	r3, r2, r3
 8013890:	68fa      	ldr	r2, [r7, #12]
 8013892:	429a      	cmp	r2, r3
 8013894:	d80a      	bhi.n	80138ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013896:	4b0f      	ldr	r3, [pc, #60]	; (80138d4 <tcp_kill_prio+0x98>)
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	6a1b      	ldr	r3, [r3, #32]
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	7d5b      	ldrb	r3, [r3, #21]
 80138aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	617b      	str	r3, [r7, #20]
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d1dc      	bne.n	8013872 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d004      	beq.n	80138c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80138be:	6938      	ldr	r0, [r7, #16]
 80138c0:	f7ff f8d6 	bl	8012a70 <tcp_abort>
 80138c4:	e000      	b.n	80138c8 <tcp_kill_prio+0x8c>
    return;
 80138c6:	bf00      	nop
  }
}
 80138c8:	3718      	adds	r7, #24
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
 80138ce:	bf00      	nop
 80138d0:	2000afe8 	.word	0x2000afe8
 80138d4:	2000afdc 	.word	0x2000afdc

080138d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b086      	sub	sp, #24
 80138dc:	af00      	add	r7, sp, #0
 80138de:	4603      	mov	r3, r0
 80138e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	2b08      	cmp	r3, #8
 80138e6:	d009      	beq.n	80138fc <tcp_kill_state+0x24>
 80138e8:	79fb      	ldrb	r3, [r7, #7]
 80138ea:	2b09      	cmp	r3, #9
 80138ec:	d006      	beq.n	80138fc <tcp_kill_state+0x24>
 80138ee:	4b1a      	ldr	r3, [pc, #104]	; (8013958 <tcp_kill_state+0x80>)
 80138f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80138f4:	4919      	ldr	r1, [pc, #100]	; (801395c <tcp_kill_state+0x84>)
 80138f6:	481a      	ldr	r0, [pc, #104]	; (8013960 <tcp_kill_state+0x88>)
 80138f8:	f007 fee4 	bl	801b6c4 <iprintf>

  inactivity = 0;
 80138fc:	2300      	movs	r3, #0
 80138fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013900:	2300      	movs	r3, #0
 8013902:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013904:	4b17      	ldr	r3, [pc, #92]	; (8013964 <tcp_kill_state+0x8c>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	617b      	str	r3, [r7, #20]
 801390a:	e017      	b.n	801393c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	7d1b      	ldrb	r3, [r3, #20]
 8013910:	79fa      	ldrb	r2, [r7, #7]
 8013912:	429a      	cmp	r2, r3
 8013914:	d10f      	bne.n	8013936 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013916:	4b14      	ldr	r3, [pc, #80]	; (8013968 <tcp_kill_state+0x90>)
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	6a1b      	ldr	r3, [r3, #32]
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	68fa      	ldr	r2, [r7, #12]
 8013922:	429a      	cmp	r2, r3
 8013924:	d807      	bhi.n	8013936 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013926:	4b10      	ldr	r3, [pc, #64]	; (8013968 <tcp_kill_state+0x90>)
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	6a1b      	ldr	r3, [r3, #32]
 801392e:	1ad3      	subs	r3, r2, r3
 8013930:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	617b      	str	r3, [r7, #20]
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d1e4      	bne.n	801390c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d003      	beq.n	8013950 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013948:	2100      	movs	r1, #0
 801394a:	6938      	ldr	r0, [r7, #16]
 801394c:	f7fe ffd2 	bl	80128f4 <tcp_abandon>
  }
}
 8013950:	bf00      	nop
 8013952:	3718      	adds	r7, #24
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	0801d6bc 	.word	0x0801d6bc
 801395c:	0801dc48 	.word	0x0801dc48
 8013960:	0801d700 	.word	0x0801d700
 8013964:	2000afe8 	.word	0x2000afe8
 8013968:	2000afdc 	.word	0x2000afdc

0801396c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013976:	2300      	movs	r3, #0
 8013978:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801397a:	4b12      	ldr	r3, [pc, #72]	; (80139c4 <tcp_kill_timewait+0x58>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	60fb      	str	r3, [r7, #12]
 8013980:	e012      	b.n	80139a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013982:	4b11      	ldr	r3, [pc, #68]	; (80139c8 <tcp_kill_timewait+0x5c>)
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	6a1b      	ldr	r3, [r3, #32]
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	429a      	cmp	r2, r3
 8013990:	d807      	bhi.n	80139a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013992:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <tcp_kill_timewait+0x5c>)
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6a1b      	ldr	r3, [r3, #32]
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	68db      	ldr	r3, [r3, #12]
 80139a6:	60fb      	str	r3, [r7, #12]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d1e9      	bne.n	8013982 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d002      	beq.n	80139ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139b4:	68b8      	ldr	r0, [r7, #8]
 80139b6:	f7ff f85b 	bl	8012a70 <tcp_abort>
  }
}
 80139ba:	bf00      	nop
 80139bc:	3710      	adds	r7, #16
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	2000afec 	.word	0x2000afec
 80139c8:	2000afdc 	.word	0x2000afdc

080139cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80139d2:	4b10      	ldr	r3, [pc, #64]	; (8013a14 <tcp_handle_closepend+0x48>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80139d8:	e014      	b.n	8013a04 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	8b5b      	ldrh	r3, [r3, #26]
 80139e4:	f003 0308 	and.w	r3, r3, #8
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d009      	beq.n	8013a00 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	8b5b      	ldrh	r3, [r3, #26]
 80139f0:	f023 0308 	bic.w	r3, r3, #8
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7fe fee4 	bl	80127c8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d1e7      	bne.n	80139da <tcp_handle_closepend+0xe>
  }
}
 8013a0a:	bf00      	nop
 8013a0c:	bf00      	nop
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}
 8013a14:	2000afe8 	.word	0x2000afe8

08013a18 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	4603      	mov	r3, r0
 8013a20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a22:	2001      	movs	r0, #1
 8013a24:	f7fd fbb6 	bl	8011194 <memp_malloc>
 8013a28:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d126      	bne.n	8013a7e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013a30:	f7ff ffcc 	bl	80139cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013a34:	f7ff ff9a 	bl	801396c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a38:	2001      	movs	r0, #1
 8013a3a:	f7fd fbab 	bl	8011194 <memp_malloc>
 8013a3e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d11b      	bne.n	8013a7e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013a46:	2009      	movs	r0, #9
 8013a48:	f7ff ff46 	bl	80138d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	f7fd fba1 	bl	8011194 <memp_malloc>
 8013a52:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d111      	bne.n	8013a7e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013a5a:	2008      	movs	r0, #8
 8013a5c:	f7ff ff3c 	bl	80138d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a60:	2001      	movs	r0, #1
 8013a62:	f7fd fb97 	bl	8011194 <memp_malloc>
 8013a66:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d107      	bne.n	8013a7e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013a6e:	79fb      	ldrb	r3, [r7, #7]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7ff fee3 	bl	801383c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a76:	2001      	movs	r0, #1
 8013a78:	f7fd fb8c 	bl	8011194 <memp_malloc>
 8013a7c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d03f      	beq.n	8013b04 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013a84:	229c      	movs	r2, #156	; 0x9c
 8013a86:	2100      	movs	r1, #0
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f007 fef3 	bl	801b874 <memset>
    pcb->prio = prio;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	79fa      	ldrb	r2, [r7, #7]
 8013a92:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013a9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	22ff      	movs	r2, #255	; 0xff
 8013ab2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013aba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2206      	movs	r2, #6
 8013ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	2206      	movs	r2, #6
 8013ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ad0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013ada:	4b0d      	ldr	r3, [pc, #52]	; (8013b10 <tcp_alloc+0xf8>)
 8013adc:	681a      	ldr	r2, [r3, #0]
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013ae2:	4b0c      	ldr	r3, [pc, #48]	; (8013b14 <tcp_alloc+0xfc>)
 8013ae4:	781a      	ldrb	r2, [r3, #0]
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013af0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	4a08      	ldr	r2, [pc, #32]	; (8013b18 <tcp_alloc+0x100>)
 8013af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	4a07      	ldr	r2, [pc, #28]	; (8013b1c <tcp_alloc+0x104>)
 8013b00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013b04:	68fb      	ldr	r3, [r7, #12]
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3710      	adds	r7, #16
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	2000afdc 	.word	0x2000afdc
 8013b14:	2000aff2 	.word	0x2000aff2
 8013b18:	080137d1 	.word	0x080137d1
 8013b1c:	006ddd00 	.word	0x006ddd00

08013b20 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013b24:	2040      	movs	r0, #64	; 0x40
 8013b26:	f7ff ff77 	bl	8013a18 <tcp_alloc>
 8013b2a:	4603      	mov	r3, r0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d002      	beq.n	8013b46 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	683a      	ldr	r2, [r7, #0]
 8013b44:	611a      	str	r2, [r3, #16]
  }
}
 8013b46:	bf00      	nop
 8013b48:	370c      	adds	r7, #12
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr
	...

08013b54 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00e      	beq.n	8013b82 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	7d1b      	ldrb	r3, [r3, #20]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d106      	bne.n	8013b7a <tcp_recv+0x26>
 8013b6c:	4b07      	ldr	r3, [pc, #28]	; (8013b8c <tcp_recv+0x38>)
 8013b6e:	f240 72df 	movw	r2, #2015	; 0x7df
 8013b72:	4907      	ldr	r1, [pc, #28]	; (8013b90 <tcp_recv+0x3c>)
 8013b74:	4807      	ldr	r0, [pc, #28]	; (8013b94 <tcp_recv+0x40>)
 8013b76:	f007 fda5 	bl	801b6c4 <iprintf>
    pcb->recv = recv;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	683a      	ldr	r2, [r7, #0]
 8013b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013b82:	bf00      	nop
 8013b84:	3708      	adds	r7, #8
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	bf00      	nop
 8013b8c:	0801d6bc 	.word	0x0801d6bc
 8013b90:	0801dc58 	.word	0x0801dc58
 8013b94:	0801d700 	.word	0x0801d700

08013b98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d00e      	beq.n	8013bc6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	7d1b      	ldrb	r3, [r3, #20]
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d106      	bne.n	8013bbe <tcp_sent+0x26>
 8013bb0:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <tcp_sent+0x38>)
 8013bb2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013bb6:	4907      	ldr	r1, [pc, #28]	; (8013bd4 <tcp_sent+0x3c>)
 8013bb8:	4807      	ldr	r0, [pc, #28]	; (8013bd8 <tcp_sent+0x40>)
 8013bba:	f007 fd83 	bl	801b6c4 <iprintf>
    pcb->sent = sent;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	683a      	ldr	r2, [r7, #0]
 8013bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013bc6:	bf00      	nop
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	0801d6bc 	.word	0x0801d6bc
 8013bd4:	0801dc80 	.word	0x0801dc80
 8013bd8:	0801d700 	.word	0x0801d700

08013bdc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d00e      	beq.n	8013c0a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	7d1b      	ldrb	r3, [r3, #20]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d106      	bne.n	8013c02 <tcp_err+0x26>
 8013bf4:	4b07      	ldr	r3, [pc, #28]	; (8013c14 <tcp_err+0x38>)
 8013bf6:	f640 020d 	movw	r2, #2061	; 0x80d
 8013bfa:	4907      	ldr	r1, [pc, #28]	; (8013c18 <tcp_err+0x3c>)
 8013bfc:	4807      	ldr	r0, [pc, #28]	; (8013c1c <tcp_err+0x40>)
 8013bfe:	f007 fd61 	bl	801b6c4 <iprintf>
    pcb->errf = err;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	683a      	ldr	r2, [r7, #0]
 8013c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013c0a:	bf00      	nop
 8013c0c:	3708      	adds	r7, #8
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}
 8013c12:	bf00      	nop
 8013c14:	0801d6bc 	.word	0x0801d6bc
 8013c18:	0801dca8 	.word	0x0801dca8
 8013c1c:	0801d700 	.word	0x0801d700

08013c20 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	60b9      	str	r1, [r7, #8]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d107      	bne.n	8013c44 <tcp_poll+0x24>
 8013c34:	4b0e      	ldr	r3, [pc, #56]	; (8013c70 <tcp_poll+0x50>)
 8013c36:	f640 023d 	movw	r2, #2109	; 0x83d
 8013c3a:	490e      	ldr	r1, [pc, #56]	; (8013c74 <tcp_poll+0x54>)
 8013c3c:	480e      	ldr	r0, [pc, #56]	; (8013c78 <tcp_poll+0x58>)
 8013c3e:	f007 fd41 	bl	801b6c4 <iprintf>
 8013c42:	e011      	b.n	8013c68 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	7d1b      	ldrb	r3, [r3, #20]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d106      	bne.n	8013c5a <tcp_poll+0x3a>
 8013c4c:	4b08      	ldr	r3, [pc, #32]	; (8013c70 <tcp_poll+0x50>)
 8013c4e:	f640 023e 	movw	r2, #2110	; 0x83e
 8013c52:	490a      	ldr	r1, [pc, #40]	; (8013c7c <tcp_poll+0x5c>)
 8013c54:	4808      	ldr	r0, [pc, #32]	; (8013c78 <tcp_poll+0x58>)
 8013c56:	f007 fd35 	bl	801b6c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	68ba      	ldr	r2, [r7, #8]
 8013c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	79fa      	ldrb	r2, [r7, #7]
 8013c66:	775a      	strb	r2, [r3, #29]
}
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	0801d6bc 	.word	0x0801d6bc
 8013c74:	0801dcd0 	.word	0x0801dcd0
 8013c78:	0801d700 	.word	0x0801d700
 8013c7c:	0801dce8 	.word	0x0801dce8

08013c80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d107      	bne.n	8013c9e <tcp_pcb_purge+0x1e>
 8013c8e:	4b21      	ldr	r3, [pc, #132]	; (8013d14 <tcp_pcb_purge+0x94>)
 8013c90:	f640 0251 	movw	r2, #2129	; 0x851
 8013c94:	4920      	ldr	r1, [pc, #128]	; (8013d18 <tcp_pcb_purge+0x98>)
 8013c96:	4821      	ldr	r0, [pc, #132]	; (8013d1c <tcp_pcb_purge+0x9c>)
 8013c98:	f007 fd14 	bl	801b6c4 <iprintf>
 8013c9c:	e037      	b.n	8013d0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	7d1b      	ldrb	r3, [r3, #20]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d033      	beq.n	8013d0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013caa:	2b0a      	cmp	r3, #10
 8013cac:	d02f      	beq.n	8013d0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d02b      	beq.n	8013d0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d007      	beq.n	8013cce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fe f94c 	bl	8011f60 <pbuf_free>
      pcb->refused_data = NULL;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d002      	beq.n	8013cdc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 f986 	bl	8013fe8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ce2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff fcf9 	bl	80136e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff fcf4 	bl	80136e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	66da      	str	r2, [r3, #108]	; 0x6c
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	0801d6bc 	.word	0x0801d6bc
 8013d18:	0801dd08 	.word	0x0801dd08
 8013d1c:	0801d700 	.word	0x0801d700

08013d20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d106      	bne.n	8013d3e <tcp_pcb_remove+0x1e>
 8013d30:	4b3e      	ldr	r3, [pc, #248]	; (8013e2c <tcp_pcb_remove+0x10c>)
 8013d32:	f640 0283 	movw	r2, #2179	; 0x883
 8013d36:	493e      	ldr	r1, [pc, #248]	; (8013e30 <tcp_pcb_remove+0x110>)
 8013d38:	483e      	ldr	r0, [pc, #248]	; (8013e34 <tcp_pcb_remove+0x114>)
 8013d3a:	f007 fcc3 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d106      	bne.n	8013d52 <tcp_pcb_remove+0x32>
 8013d44:	4b39      	ldr	r3, [pc, #228]	; (8013e2c <tcp_pcb_remove+0x10c>)
 8013d46:	f640 0284 	movw	r2, #2180	; 0x884
 8013d4a:	493b      	ldr	r1, [pc, #236]	; (8013e38 <tcp_pcb_remove+0x118>)
 8013d4c:	4839      	ldr	r0, [pc, #228]	; (8013e34 <tcp_pcb_remove+0x114>)
 8013d4e:	f007 fcb9 	bl	801b6c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	683a      	ldr	r2, [r7, #0]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d105      	bne.n	8013d68 <tcp_pcb_remove+0x48>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	68da      	ldr	r2, [r3, #12]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	e013      	b.n	8013d90 <tcp_pcb_remove+0x70>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	60fb      	str	r3, [r7, #12]
 8013d6e:	e00c      	b.n	8013d8a <tcp_pcb_remove+0x6a>
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	683a      	ldr	r2, [r7, #0]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d104      	bne.n	8013d84 <tcp_pcb_remove+0x64>
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	68da      	ldr	r2, [r3, #12]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	60da      	str	r2, [r3, #12]
 8013d82:	e005      	b.n	8013d90 <tcp_pcb_remove+0x70>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	68db      	ldr	r3, [r3, #12]
 8013d88:	60fb      	str	r3, [r7, #12]
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d1ef      	bne.n	8013d70 <tcp_pcb_remove+0x50>
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	2200      	movs	r2, #0
 8013d94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013d96:	6838      	ldr	r0, [r7, #0]
 8013d98:	f7ff ff72 	bl	8013c80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	7d1b      	ldrb	r3, [r3, #20]
 8013da0:	2b0a      	cmp	r3, #10
 8013da2:	d013      	beq.n	8013dcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	d00f      	beq.n	8013dcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	8b5b      	ldrh	r3, [r3, #26]
 8013db0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d009      	beq.n	8013dcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	8b5b      	ldrh	r3, [r3, #26]
 8013dbc:	f043 0302 	orr.w	r3, r3, #2
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013dc6:	6838      	ldr	r0, [r7, #0]
 8013dc8:	f003 fbc6 	bl	8017558 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	7d1b      	ldrb	r3, [r3, #20]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d020      	beq.n	8013e16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d006      	beq.n	8013dea <tcp_pcb_remove+0xca>
 8013ddc:	4b13      	ldr	r3, [pc, #76]	; (8013e2c <tcp_pcb_remove+0x10c>)
 8013dde:	f640 0293 	movw	r2, #2195	; 0x893
 8013de2:	4916      	ldr	r1, [pc, #88]	; (8013e3c <tcp_pcb_remove+0x11c>)
 8013de4:	4813      	ldr	r0, [pc, #76]	; (8013e34 <tcp_pcb_remove+0x114>)
 8013de6:	f007 fc6d 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d006      	beq.n	8013e00 <tcp_pcb_remove+0xe0>
 8013df2:	4b0e      	ldr	r3, [pc, #56]	; (8013e2c <tcp_pcb_remove+0x10c>)
 8013df4:	f640 0294 	movw	r2, #2196	; 0x894
 8013df8:	4911      	ldr	r1, [pc, #68]	; (8013e40 <tcp_pcb_remove+0x120>)
 8013dfa:	480e      	ldr	r0, [pc, #56]	; (8013e34 <tcp_pcb_remove+0x114>)
 8013dfc:	f007 fc62 	bl	801b6c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <tcp_pcb_remove+0xf6>
 8013e08:	4b08      	ldr	r3, [pc, #32]	; (8013e2c <tcp_pcb_remove+0x10c>)
 8013e0a:	f640 0296 	movw	r2, #2198	; 0x896
 8013e0e:	490d      	ldr	r1, [pc, #52]	; (8013e44 <tcp_pcb_remove+0x124>)
 8013e10:	4808      	ldr	r0, [pc, #32]	; (8013e34 <tcp_pcb_remove+0x114>)
 8013e12:	f007 fc57 	bl	801b6c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013e22:	bf00      	nop
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	0801d6bc 	.word	0x0801d6bc
 8013e30:	0801dd24 	.word	0x0801dd24
 8013e34:	0801d700 	.word	0x0801d700
 8013e38:	0801dd40 	.word	0x0801dd40
 8013e3c:	0801dd60 	.word	0x0801dd60
 8013e40:	0801dd78 	.word	0x0801dd78
 8013e44:	0801dd94 	.word	0x0801dd94

08013e48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d106      	bne.n	8013e64 <tcp_next_iss+0x1c>
 8013e56:	4b0a      	ldr	r3, [pc, #40]	; (8013e80 <tcp_next_iss+0x38>)
 8013e58:	f640 02af 	movw	r2, #2223	; 0x8af
 8013e5c:	4909      	ldr	r1, [pc, #36]	; (8013e84 <tcp_next_iss+0x3c>)
 8013e5e:	480a      	ldr	r0, [pc, #40]	; (8013e88 <tcp_next_iss+0x40>)
 8013e60:	f007 fc30 	bl	801b6c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013e64:	4b09      	ldr	r3, [pc, #36]	; (8013e8c <tcp_next_iss+0x44>)
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	4b09      	ldr	r3, [pc, #36]	; (8013e90 <tcp_next_iss+0x48>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	4a07      	ldr	r2, [pc, #28]	; (8013e8c <tcp_next_iss+0x44>)
 8013e70:	6013      	str	r3, [r2, #0]
  return iss;
 8013e72:	4b06      	ldr	r3, [pc, #24]	; (8013e8c <tcp_next_iss+0x44>)
 8013e74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3708      	adds	r7, #8
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	0801d6bc 	.word	0x0801d6bc
 8013e84:	0801ddac 	.word	0x0801ddac
 8013e88:	0801d700 	.word	0x0801d700
 8013e8c:	2000007c 	.word	0x2000007c
 8013e90:	2000afdc 	.word	0x2000afdc

08013e94 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b086      	sub	sp, #24
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	60b9      	str	r1, [r7, #8]
 8013e9e:	607a      	str	r2, [r7, #4]
 8013ea0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d106      	bne.n	8013eb6 <tcp_eff_send_mss_netif+0x22>
 8013ea8:	4b14      	ldr	r3, [pc, #80]	; (8013efc <tcp_eff_send_mss_netif+0x68>)
 8013eaa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013eae:	4914      	ldr	r1, [pc, #80]	; (8013f00 <tcp_eff_send_mss_netif+0x6c>)
 8013eb0:	4814      	ldr	r0, [pc, #80]	; (8013f04 <tcp_eff_send_mss_netif+0x70>)
 8013eb2:	f007 fc07 	bl	801b6c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d101      	bne.n	8013ec0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013ebc:	89fb      	ldrh	r3, [r7, #14]
 8013ebe:	e019      	b.n	8013ef4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ec4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013ec6:	8afb      	ldrh	r3, [r7, #22]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d012      	beq.n	8013ef2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013ecc:	2328      	movs	r3, #40	; 0x28
 8013ece:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013ed0:	8afa      	ldrh	r2, [r7, #22]
 8013ed2:	8abb      	ldrh	r3, [r7, #20]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d904      	bls.n	8013ee2 <tcp_eff_send_mss_netif+0x4e>
 8013ed8:	8afa      	ldrh	r2, [r7, #22]
 8013eda:	8abb      	ldrh	r3, [r7, #20]
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	e000      	b.n	8013ee4 <tcp_eff_send_mss_netif+0x50>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013ee6:	8a7a      	ldrh	r2, [r7, #18]
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
 8013eea:	4293      	cmp	r3, r2
 8013eec:	bf28      	it	cs
 8013eee:	4613      	movcs	r3, r2
 8013ef0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3718      	adds	r7, #24
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	0801d6bc 	.word	0x0801d6bc
 8013f00:	0801ddc8 	.word	0x0801ddc8
 8013f04:	0801d700 	.word	0x0801d700

08013f08 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d119      	bne.n	8013f50 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013f1c:	4b10      	ldr	r3, [pc, #64]	; (8013f60 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013f1e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013f22:	4910      	ldr	r1, [pc, #64]	; (8013f64 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013f24:	4810      	ldr	r0, [pc, #64]	; (8013f68 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013f26:	f007 fbcd 	bl	801b6c4 <iprintf>

  while (pcb != NULL) {
 8013f2a:	e011      	b.n	8013f50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d108      	bne.n	8013f4a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f7fe fd96 	bl	8012a70 <tcp_abort>
      pcb = next;
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	e002      	b.n	8013f50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1ea      	bne.n	8013f2c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013f56:	bf00      	nop
 8013f58:	bf00      	nop
 8013f5a:	3710      	adds	r7, #16
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	0801d6bc 	.word	0x0801d6bc
 8013f64:	0801ddf0 	.word	0x0801ddf0
 8013f68:	0801d700 	.word	0x0801d700

08013f6c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d02a      	beq.n	8013fd2 <tcp_netif_ip_addr_changed+0x66>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d026      	beq.n	8013fd2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013f84:	4b15      	ldr	r3, [pc, #84]	; (8013fdc <tcp_netif_ip_addr_changed+0x70>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	4619      	mov	r1, r3
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7ff ffbc 	bl	8013f08 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013f90:	4b13      	ldr	r3, [pc, #76]	; (8013fe0 <tcp_netif_ip_addr_changed+0x74>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4619      	mov	r1, r3
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7ff ffb6 	bl	8013f08 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d017      	beq.n	8013fd2 <tcp_netif_ip_addr_changed+0x66>
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d013      	beq.n	8013fd2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013faa:	4b0e      	ldr	r3, [pc, #56]	; (8013fe4 <tcp_netif_ip_addr_changed+0x78>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	60fb      	str	r3, [r7, #12]
 8013fb0:	e00c      	b.n	8013fcc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d103      	bne.n	8013fc6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d1ef      	bne.n	8013fb2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013fd2:	bf00      	nop
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	2000afe8 	.word	0x2000afe8
 8013fe0:	2000afe0 	.word	0x2000afe0
 8013fe4:	2000afe4 	.word	0x2000afe4

08013fe8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d007      	beq.n	8014008 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7ff fb6f 	bl	80136e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014008:	bf00      	nop
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014010:	b590      	push	{r4, r7, lr}
 8014012:	b08d      	sub	sp, #52	; 0x34
 8014014:	af04      	add	r7, sp, #16
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d105      	bne.n	801402c <tcp_input+0x1c>
 8014020:	4b9b      	ldr	r3, [pc, #620]	; (8014290 <tcp_input+0x280>)
 8014022:	2283      	movs	r2, #131	; 0x83
 8014024:	499b      	ldr	r1, [pc, #620]	; (8014294 <tcp_input+0x284>)
 8014026:	489c      	ldr	r0, [pc, #624]	; (8014298 <tcp_input+0x288>)
 8014028:	f007 fb4c 	bl	801b6c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	4a9a      	ldr	r2, [pc, #616]	; (801429c <tcp_input+0x28c>)
 8014032:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	895b      	ldrh	r3, [r3, #10]
 8014038:	2b13      	cmp	r3, #19
 801403a:	f240 83d1 	bls.w	80147e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801403e:	4b98      	ldr	r3, [pc, #608]	; (80142a0 <tcp_input+0x290>)
 8014040:	695b      	ldr	r3, [r3, #20]
 8014042:	4a97      	ldr	r2, [pc, #604]	; (80142a0 <tcp_input+0x290>)
 8014044:	6812      	ldr	r2, [r2, #0]
 8014046:	4611      	mov	r1, r2
 8014048:	4618      	mov	r0, r3
 801404a:	f006 f88b 	bl	801a164 <ip4_addr_isbroadcast_u32>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	f040 83c7 	bne.w	80147e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014056:	4b92      	ldr	r3, [pc, #584]	; (80142a0 <tcp_input+0x290>)
 8014058:	695b      	ldr	r3, [r3, #20]
 801405a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801405e:	2be0      	cmp	r3, #224	; 0xe0
 8014060:	f000 83c0 	beq.w	80147e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014064:	4b8d      	ldr	r3, [pc, #564]	; (801429c <tcp_input+0x28c>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	899b      	ldrh	r3, [r3, #12]
 801406a:	b29b      	uxth	r3, r3
 801406c:	4618      	mov	r0, r3
 801406e:	f7fc fbae 	bl	80107ce <lwip_htons>
 8014072:	4603      	mov	r3, r0
 8014074:	0b1b      	lsrs	r3, r3, #12
 8014076:	b29b      	uxth	r3, r3
 8014078:	b2db      	uxtb	r3, r3
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801407e:	7cbb      	ldrb	r3, [r7, #18]
 8014080:	2b13      	cmp	r3, #19
 8014082:	f240 83b1 	bls.w	80147e8 <tcp_input+0x7d8>
 8014086:	7cbb      	ldrb	r3, [r7, #18]
 8014088:	b29a      	uxth	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	891b      	ldrh	r3, [r3, #8]
 801408e:	429a      	cmp	r2, r3
 8014090:	f200 83aa 	bhi.w	80147e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014094:	7cbb      	ldrb	r3, [r7, #18]
 8014096:	b29b      	uxth	r3, r3
 8014098:	3b14      	subs	r3, #20
 801409a:	b29a      	uxth	r2, r3
 801409c:	4b81      	ldr	r3, [pc, #516]	; (80142a4 <tcp_input+0x294>)
 801409e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80140a0:	4b81      	ldr	r3, [pc, #516]	; (80142a8 <tcp_input+0x298>)
 80140a2:	2200      	movs	r2, #0
 80140a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	895a      	ldrh	r2, [r3, #10]
 80140aa:	7cbb      	ldrb	r3, [r7, #18]
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d309      	bcc.n	80140c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80140b2:	4b7c      	ldr	r3, [pc, #496]	; (80142a4 <tcp_input+0x294>)
 80140b4:	881a      	ldrh	r2, [r3, #0]
 80140b6:	4b7d      	ldr	r3, [pc, #500]	; (80142ac <tcp_input+0x29c>)
 80140b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80140ba:	7cbb      	ldrb	r3, [r7, #18]
 80140bc:	4619      	mov	r1, r3
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f7fd fec8 	bl	8011e54 <pbuf_remove_header>
 80140c4:	e04e      	b.n	8014164 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d105      	bne.n	80140da <tcp_input+0xca>
 80140ce:	4b70      	ldr	r3, [pc, #448]	; (8014290 <tcp_input+0x280>)
 80140d0:	22c2      	movs	r2, #194	; 0xc2
 80140d2:	4977      	ldr	r1, [pc, #476]	; (80142b0 <tcp_input+0x2a0>)
 80140d4:	4870      	ldr	r0, [pc, #448]	; (8014298 <tcp_input+0x288>)
 80140d6:	f007 faf5 	bl	801b6c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80140da:	2114      	movs	r1, #20
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f7fd feb9 	bl	8011e54 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	895a      	ldrh	r2, [r3, #10]
 80140e6:	4b71      	ldr	r3, [pc, #452]	; (80142ac <tcp_input+0x29c>)
 80140e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80140ea:	4b6e      	ldr	r3, [pc, #440]	; (80142a4 <tcp_input+0x294>)
 80140ec:	881a      	ldrh	r2, [r3, #0]
 80140ee:	4b6f      	ldr	r3, [pc, #444]	; (80142ac <tcp_input+0x29c>)
 80140f0:	881b      	ldrh	r3, [r3, #0]
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80140f6:	4b6d      	ldr	r3, [pc, #436]	; (80142ac <tcp_input+0x29c>)
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	4619      	mov	r1, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7fd fea9 	bl	8011e54 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	895b      	ldrh	r3, [r3, #10]
 8014108:	8a3a      	ldrh	r2, [r7, #16]
 801410a:	429a      	cmp	r2, r3
 801410c:	f200 836e 	bhi.w	80147ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	4a64      	ldr	r2, [pc, #400]	; (80142a8 <tcp_input+0x298>)
 8014118:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	8a3a      	ldrh	r2, [r7, #16]
 8014120:	4611      	mov	r1, r2
 8014122:	4618      	mov	r0, r3
 8014124:	f7fd fe96 	bl	8011e54 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	891a      	ldrh	r2, [r3, #8]
 801412c:	8a3b      	ldrh	r3, [r7, #16]
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	b29a      	uxth	r2, r3
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	895b      	ldrh	r3, [r3, #10]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d005      	beq.n	801414a <tcp_input+0x13a>
 801413e:	4b54      	ldr	r3, [pc, #336]	; (8014290 <tcp_input+0x280>)
 8014140:	22df      	movs	r2, #223	; 0xdf
 8014142:	495c      	ldr	r1, [pc, #368]	; (80142b4 <tcp_input+0x2a4>)
 8014144:	4854      	ldr	r0, [pc, #336]	; (8014298 <tcp_input+0x288>)
 8014146:	f007 fabd 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	891a      	ldrh	r2, [r3, #8]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	891b      	ldrh	r3, [r3, #8]
 8014154:	429a      	cmp	r2, r3
 8014156:	d005      	beq.n	8014164 <tcp_input+0x154>
 8014158:	4b4d      	ldr	r3, [pc, #308]	; (8014290 <tcp_input+0x280>)
 801415a:	22e0      	movs	r2, #224	; 0xe0
 801415c:	4956      	ldr	r1, [pc, #344]	; (80142b8 <tcp_input+0x2a8>)
 801415e:	484e      	ldr	r0, [pc, #312]	; (8014298 <tcp_input+0x288>)
 8014160:	f007 fab0 	bl	801b6c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014164:	4b4d      	ldr	r3, [pc, #308]	; (801429c <tcp_input+0x28c>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	b29b      	uxth	r3, r3
 801416c:	4a4b      	ldr	r2, [pc, #300]	; (801429c <tcp_input+0x28c>)
 801416e:	6814      	ldr	r4, [r2, #0]
 8014170:	4618      	mov	r0, r3
 8014172:	f7fc fb2c 	bl	80107ce <lwip_htons>
 8014176:	4603      	mov	r3, r0
 8014178:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801417a:	4b48      	ldr	r3, [pc, #288]	; (801429c <tcp_input+0x28c>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	885b      	ldrh	r3, [r3, #2]
 8014180:	b29b      	uxth	r3, r3
 8014182:	4a46      	ldr	r2, [pc, #280]	; (801429c <tcp_input+0x28c>)
 8014184:	6814      	ldr	r4, [r2, #0]
 8014186:	4618      	mov	r0, r3
 8014188:	f7fc fb21 	bl	80107ce <lwip_htons>
 801418c:	4603      	mov	r3, r0
 801418e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014190:	4b42      	ldr	r3, [pc, #264]	; (801429c <tcp_input+0x28c>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	4a41      	ldr	r2, [pc, #260]	; (801429c <tcp_input+0x28c>)
 8014198:	6814      	ldr	r4, [r2, #0]
 801419a:	4618      	mov	r0, r3
 801419c:	f7fc fb2c 	bl	80107f8 <lwip_htonl>
 80141a0:	4603      	mov	r3, r0
 80141a2:	6063      	str	r3, [r4, #4]
 80141a4:	6863      	ldr	r3, [r4, #4]
 80141a6:	4a45      	ldr	r2, [pc, #276]	; (80142bc <tcp_input+0x2ac>)
 80141a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80141aa:	4b3c      	ldr	r3, [pc, #240]	; (801429c <tcp_input+0x28c>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	689b      	ldr	r3, [r3, #8]
 80141b0:	4a3a      	ldr	r2, [pc, #232]	; (801429c <tcp_input+0x28c>)
 80141b2:	6814      	ldr	r4, [r2, #0]
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7fc fb1f 	bl	80107f8 <lwip_htonl>
 80141ba:	4603      	mov	r3, r0
 80141bc:	60a3      	str	r3, [r4, #8]
 80141be:	68a3      	ldr	r3, [r4, #8]
 80141c0:	4a3f      	ldr	r2, [pc, #252]	; (80142c0 <tcp_input+0x2b0>)
 80141c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80141c4:	4b35      	ldr	r3, [pc, #212]	; (801429c <tcp_input+0x28c>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	89db      	ldrh	r3, [r3, #14]
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	4a33      	ldr	r2, [pc, #204]	; (801429c <tcp_input+0x28c>)
 80141ce:	6814      	ldr	r4, [r2, #0]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7fc fafc 	bl	80107ce <lwip_htons>
 80141d6:	4603      	mov	r3, r0
 80141d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80141da:	4b30      	ldr	r3, [pc, #192]	; (801429c <tcp_input+0x28c>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	899b      	ldrh	r3, [r3, #12]
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7fc faf3 	bl	80107ce <lwip_htons>
 80141e8:	4603      	mov	r3, r0
 80141ea:	b2db      	uxtb	r3, r3
 80141ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80141f0:	b2da      	uxtb	r2, r3
 80141f2:	4b34      	ldr	r3, [pc, #208]	; (80142c4 <tcp_input+0x2b4>)
 80141f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	891a      	ldrh	r2, [r3, #8]
 80141fa:	4b33      	ldr	r3, [pc, #204]	; (80142c8 <tcp_input+0x2b8>)
 80141fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80141fe:	4b31      	ldr	r3, [pc, #196]	; (80142c4 <tcp_input+0x2b4>)
 8014200:	781b      	ldrb	r3, [r3, #0]
 8014202:	f003 0303 	and.w	r3, r3, #3
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00c      	beq.n	8014224 <tcp_input+0x214>
    tcplen++;
 801420a:	4b2f      	ldr	r3, [pc, #188]	; (80142c8 <tcp_input+0x2b8>)
 801420c:	881b      	ldrh	r3, [r3, #0]
 801420e:	3301      	adds	r3, #1
 8014210:	b29a      	uxth	r2, r3
 8014212:	4b2d      	ldr	r3, [pc, #180]	; (80142c8 <tcp_input+0x2b8>)
 8014214:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	891a      	ldrh	r2, [r3, #8]
 801421a:	4b2b      	ldr	r3, [pc, #172]	; (80142c8 <tcp_input+0x2b8>)
 801421c:	881b      	ldrh	r3, [r3, #0]
 801421e:	429a      	cmp	r2, r3
 8014220:	f200 82e6 	bhi.w	80147f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014224:	2300      	movs	r3, #0
 8014226:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014228:	4b28      	ldr	r3, [pc, #160]	; (80142cc <tcp_input+0x2bc>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	61fb      	str	r3, [r7, #28]
 801422e:	e09d      	b.n	801436c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014230:	69fb      	ldr	r3, [r7, #28]
 8014232:	7d1b      	ldrb	r3, [r3, #20]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d105      	bne.n	8014244 <tcp_input+0x234>
 8014238:	4b15      	ldr	r3, [pc, #84]	; (8014290 <tcp_input+0x280>)
 801423a:	22fb      	movs	r2, #251	; 0xfb
 801423c:	4924      	ldr	r1, [pc, #144]	; (80142d0 <tcp_input+0x2c0>)
 801423e:	4816      	ldr	r0, [pc, #88]	; (8014298 <tcp_input+0x288>)
 8014240:	f007 fa40 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	7d1b      	ldrb	r3, [r3, #20]
 8014248:	2b0a      	cmp	r3, #10
 801424a:	d105      	bne.n	8014258 <tcp_input+0x248>
 801424c:	4b10      	ldr	r3, [pc, #64]	; (8014290 <tcp_input+0x280>)
 801424e:	22fc      	movs	r2, #252	; 0xfc
 8014250:	4920      	ldr	r1, [pc, #128]	; (80142d4 <tcp_input+0x2c4>)
 8014252:	4811      	ldr	r0, [pc, #68]	; (8014298 <tcp_input+0x288>)
 8014254:	f007 fa36 	bl	801b6c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014258:	69fb      	ldr	r3, [r7, #28]
 801425a:	7d1b      	ldrb	r3, [r3, #20]
 801425c:	2b01      	cmp	r3, #1
 801425e:	d105      	bne.n	801426c <tcp_input+0x25c>
 8014260:	4b0b      	ldr	r3, [pc, #44]	; (8014290 <tcp_input+0x280>)
 8014262:	22fd      	movs	r2, #253	; 0xfd
 8014264:	491c      	ldr	r1, [pc, #112]	; (80142d8 <tcp_input+0x2c8>)
 8014266:	480c      	ldr	r0, [pc, #48]	; (8014298 <tcp_input+0x288>)
 8014268:	f007 fa2c 	bl	801b6c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	7a1b      	ldrb	r3, [r3, #8]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d033      	beq.n	80142dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	7a1a      	ldrb	r2, [r3, #8]
 8014278:	4b09      	ldr	r3, [pc, #36]	; (80142a0 <tcp_input+0x290>)
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014280:	3301      	adds	r3, #1
 8014282:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014284:	429a      	cmp	r2, r3
 8014286:	d029      	beq.n	80142dc <tcp_input+0x2cc>
      prev = pcb;
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	61bb      	str	r3, [r7, #24]
      continue;
 801428c:	e06b      	b.n	8014366 <tcp_input+0x356>
 801428e:	bf00      	nop
 8014290:	0801de24 	.word	0x0801de24
 8014294:	0801de58 	.word	0x0801de58
 8014298:	0801de70 	.word	0x0801de70
 801429c:	2000b004 	.word	0x2000b004
 80142a0:	200042b4 	.word	0x200042b4
 80142a4:	2000b008 	.word	0x2000b008
 80142a8:	2000b00c 	.word	0x2000b00c
 80142ac:	2000b00a 	.word	0x2000b00a
 80142b0:	0801de98 	.word	0x0801de98
 80142b4:	0801dea8 	.word	0x0801dea8
 80142b8:	0801deb4 	.word	0x0801deb4
 80142bc:	2000b014 	.word	0x2000b014
 80142c0:	2000b018 	.word	0x2000b018
 80142c4:	2000b020 	.word	0x2000b020
 80142c8:	2000b01e 	.word	0x2000b01e
 80142cc:	2000afe8 	.word	0x2000afe8
 80142d0:	0801ded4 	.word	0x0801ded4
 80142d4:	0801defc 	.word	0x0801defc
 80142d8:	0801df28 	.word	0x0801df28
    }

    if (pcb->remote_port == tcphdr->src &&
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	8b1a      	ldrh	r2, [r3, #24]
 80142e0:	4b72      	ldr	r3, [pc, #456]	; (80144ac <tcp_input+0x49c>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d13a      	bne.n	8014362 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	8ada      	ldrh	r2, [r3, #22]
 80142f0:	4b6e      	ldr	r3, [pc, #440]	; (80144ac <tcp_input+0x49c>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	885b      	ldrh	r3, [r3, #2]
 80142f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d132      	bne.n	8014362 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	685a      	ldr	r2, [r3, #4]
 8014300:	4b6b      	ldr	r3, [pc, #428]	; (80144b0 <tcp_input+0x4a0>)
 8014302:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014304:	429a      	cmp	r2, r3
 8014306:	d12c      	bne.n	8014362 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	4b68      	ldr	r3, [pc, #416]	; (80144b0 <tcp_input+0x4a0>)
 801430e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014310:	429a      	cmp	r2, r3
 8014312:	d126      	bne.n	8014362 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	69fa      	ldr	r2, [r7, #28]
 801431a:	429a      	cmp	r2, r3
 801431c:	d106      	bne.n	801432c <tcp_input+0x31c>
 801431e:	4b65      	ldr	r3, [pc, #404]	; (80144b4 <tcp_input+0x4a4>)
 8014320:	f240 120d 	movw	r2, #269	; 0x10d
 8014324:	4964      	ldr	r1, [pc, #400]	; (80144b8 <tcp_input+0x4a8>)
 8014326:	4865      	ldr	r0, [pc, #404]	; (80144bc <tcp_input+0x4ac>)
 8014328:	f007 f9cc 	bl	801b6c4 <iprintf>
      if (prev != NULL) {
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d00a      	beq.n	8014348 <tcp_input+0x338>
        prev->next = pcb->next;
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	68da      	ldr	r2, [r3, #12]
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801433a:	4b61      	ldr	r3, [pc, #388]	; (80144c0 <tcp_input+0x4b0>)
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014342:	4a5f      	ldr	r2, [pc, #380]	; (80144c0 <tcp_input+0x4b0>)
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014348:	69fb      	ldr	r3, [r7, #28]
 801434a:	68db      	ldr	r3, [r3, #12]
 801434c:	69fa      	ldr	r2, [r7, #28]
 801434e:	429a      	cmp	r2, r3
 8014350:	d111      	bne.n	8014376 <tcp_input+0x366>
 8014352:	4b58      	ldr	r3, [pc, #352]	; (80144b4 <tcp_input+0x4a4>)
 8014354:	f240 1215 	movw	r2, #277	; 0x115
 8014358:	495a      	ldr	r1, [pc, #360]	; (80144c4 <tcp_input+0x4b4>)
 801435a:	4858      	ldr	r0, [pc, #352]	; (80144bc <tcp_input+0x4ac>)
 801435c:	f007 f9b2 	bl	801b6c4 <iprintf>
      break;
 8014360:	e009      	b.n	8014376 <tcp_input+0x366>
    }
    prev = pcb;
 8014362:	69fb      	ldr	r3, [r7, #28]
 8014364:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014366:	69fb      	ldr	r3, [r7, #28]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	61fb      	str	r3, [r7, #28]
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	2b00      	cmp	r3, #0
 8014370:	f47f af5e 	bne.w	8014230 <tcp_input+0x220>
 8014374:	e000      	b.n	8014378 <tcp_input+0x368>
      break;
 8014376:	bf00      	nop
  }

  if (pcb == NULL) {
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	2b00      	cmp	r3, #0
 801437c:	f040 80aa 	bne.w	80144d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014380:	4b51      	ldr	r3, [pc, #324]	; (80144c8 <tcp_input+0x4b8>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	61fb      	str	r3, [r7, #28]
 8014386:	e03f      	b.n	8014408 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014388:	69fb      	ldr	r3, [r7, #28]
 801438a:	7d1b      	ldrb	r3, [r3, #20]
 801438c:	2b0a      	cmp	r3, #10
 801438e:	d006      	beq.n	801439e <tcp_input+0x38e>
 8014390:	4b48      	ldr	r3, [pc, #288]	; (80144b4 <tcp_input+0x4a4>)
 8014392:	f240 121f 	movw	r2, #287	; 0x11f
 8014396:	494d      	ldr	r1, [pc, #308]	; (80144cc <tcp_input+0x4bc>)
 8014398:	4848      	ldr	r0, [pc, #288]	; (80144bc <tcp_input+0x4ac>)
 801439a:	f007 f993 	bl	801b6c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	7a1b      	ldrb	r3, [r3, #8]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d009      	beq.n	80143ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80143a6:	69fb      	ldr	r3, [r7, #28]
 80143a8:	7a1a      	ldrb	r2, [r3, #8]
 80143aa:	4b41      	ldr	r3, [pc, #260]	; (80144b0 <tcp_input+0x4a0>)
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143b2:	3301      	adds	r3, #1
 80143b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d122      	bne.n	8014400 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80143ba:	69fb      	ldr	r3, [r7, #28]
 80143bc:	8b1a      	ldrh	r2, [r3, #24]
 80143be:	4b3b      	ldr	r3, [pc, #236]	; (80144ac <tcp_input+0x49c>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	881b      	ldrh	r3, [r3, #0]
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d11b      	bne.n	8014402 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	8ada      	ldrh	r2, [r3, #22]
 80143ce:	4b37      	ldr	r3, [pc, #220]	; (80144ac <tcp_input+0x49c>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	885b      	ldrh	r3, [r3, #2]
 80143d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d113      	bne.n	8014402 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	685a      	ldr	r2, [r3, #4]
 80143de:	4b34      	ldr	r3, [pc, #208]	; (80144b0 <tcp_input+0x4a0>)
 80143e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d10d      	bne.n	8014402 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80143e6:	69fb      	ldr	r3, [r7, #28]
 80143e8:	681a      	ldr	r2, [r3, #0]
 80143ea:	4b31      	ldr	r3, [pc, #196]	; (80144b0 <tcp_input+0x4a0>)
 80143ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d107      	bne.n	8014402 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80143f2:	69f8      	ldr	r0, [r7, #28]
 80143f4:	f000 fb56 	bl	8014aa4 <tcp_timewait_input>
        }
        pbuf_free(p);
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f7fd fdb1 	bl	8011f60 <pbuf_free>
        return;
 80143fe:	e1fd      	b.n	80147fc <tcp_input+0x7ec>
        continue;
 8014400:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	68db      	ldr	r3, [r3, #12]
 8014406:	61fb      	str	r3, [r7, #28]
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d1bc      	bne.n	8014388 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801440e:	2300      	movs	r3, #0
 8014410:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014412:	4b2f      	ldr	r3, [pc, #188]	; (80144d0 <tcp_input+0x4c0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	617b      	str	r3, [r7, #20]
 8014418:	e02a      	b.n	8014470 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	7a1b      	ldrb	r3, [r3, #8]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d00c      	beq.n	801443c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	7a1a      	ldrb	r2, [r3, #8]
 8014426:	4b22      	ldr	r3, [pc, #136]	; (80144b0 <tcp_input+0x4a0>)
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801442e:	3301      	adds	r3, #1
 8014430:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014432:	429a      	cmp	r2, r3
 8014434:	d002      	beq.n	801443c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	61bb      	str	r3, [r7, #24]
        continue;
 801443a:	e016      	b.n	801446a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	8ada      	ldrh	r2, [r3, #22]
 8014440:	4b1a      	ldr	r3, [pc, #104]	; (80144ac <tcp_input+0x49c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	885b      	ldrh	r3, [r3, #2]
 8014446:	b29b      	uxth	r3, r3
 8014448:	429a      	cmp	r2, r3
 801444a:	d10c      	bne.n	8014466 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	4b17      	ldr	r3, [pc, #92]	; (80144b0 <tcp_input+0x4a0>)
 8014452:	695b      	ldr	r3, [r3, #20]
 8014454:	429a      	cmp	r2, r3
 8014456:	d00f      	beq.n	8014478 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d00d      	beq.n	801447a <tcp_input+0x46a>
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d009      	beq.n	801447a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	617b      	str	r3, [r7, #20]
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d1d1      	bne.n	801441a <tcp_input+0x40a>
 8014476:	e000      	b.n	801447a <tcp_input+0x46a>
            break;
 8014478:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d029      	beq.n	80144d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00a      	beq.n	801449c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	68da      	ldr	r2, [r3, #12]
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801448e:	4b10      	ldr	r3, [pc, #64]	; (80144d0 <tcp_input+0x4c0>)
 8014490:	681a      	ldr	r2, [r3, #0]
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014496:	4a0e      	ldr	r2, [pc, #56]	; (80144d0 <tcp_input+0x4c0>)
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801449c:	6978      	ldr	r0, [r7, #20]
 801449e:	f000 fa03 	bl	80148a8 <tcp_listen_input>
      }
      pbuf_free(p);
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7fd fd5c 	bl	8011f60 <pbuf_free>
      return;
 80144a8:	e1a8      	b.n	80147fc <tcp_input+0x7ec>
 80144aa:	bf00      	nop
 80144ac:	2000b004 	.word	0x2000b004
 80144b0:	200042b4 	.word	0x200042b4
 80144b4:	0801de24 	.word	0x0801de24
 80144b8:	0801df50 	.word	0x0801df50
 80144bc:	0801de70 	.word	0x0801de70
 80144c0:	2000afe8 	.word	0x2000afe8
 80144c4:	0801df7c 	.word	0x0801df7c
 80144c8:	2000afec 	.word	0x2000afec
 80144cc:	0801dfa8 	.word	0x0801dfa8
 80144d0:	2000afe4 	.word	0x2000afe4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f000 8158 	beq.w	801478c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80144dc:	4b95      	ldr	r3, [pc, #596]	; (8014734 <tcp_input+0x724>)
 80144de:	2200      	movs	r2, #0
 80144e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	891a      	ldrh	r2, [r3, #8]
 80144e6:	4b93      	ldr	r3, [pc, #588]	; (8014734 <tcp_input+0x724>)
 80144e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80144ea:	4a92      	ldr	r2, [pc, #584]	; (8014734 <tcp_input+0x724>)
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80144f0:	4b91      	ldr	r3, [pc, #580]	; (8014738 <tcp_input+0x728>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a8f      	ldr	r2, [pc, #572]	; (8014734 <tcp_input+0x724>)
 80144f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80144f8:	4b90      	ldr	r3, [pc, #576]	; (801473c <tcp_input+0x72c>)
 80144fa:	2200      	movs	r2, #0
 80144fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80144fe:	4b90      	ldr	r3, [pc, #576]	; (8014740 <tcp_input+0x730>)
 8014500:	2200      	movs	r2, #0
 8014502:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014504:	4b8f      	ldr	r3, [pc, #572]	; (8014744 <tcp_input+0x734>)
 8014506:	2200      	movs	r2, #0
 8014508:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801450a:	4b8f      	ldr	r3, [pc, #572]	; (8014748 <tcp_input+0x738>)
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	f003 0308 	and.w	r3, r3, #8
 8014512:	2b00      	cmp	r3, #0
 8014514:	d006      	beq.n	8014524 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	7b5b      	ldrb	r3, [r3, #13]
 801451a:	f043 0301 	orr.w	r3, r3, #1
 801451e:	b2da      	uxtb	r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014524:	69fb      	ldr	r3, [r7, #28]
 8014526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014528:	2b00      	cmp	r3, #0
 801452a:	d017      	beq.n	801455c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801452c:	69f8      	ldr	r0, [r7, #28]
 801452e:	f7ff f859 	bl	80135e4 <tcp_process_refused_data>
 8014532:	4603      	mov	r3, r0
 8014534:	f113 0f0d 	cmn.w	r3, #13
 8014538:	d007      	beq.n	801454a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801453a:	69fb      	ldr	r3, [r7, #28]
 801453c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00c      	beq.n	801455c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014542:	4b82      	ldr	r3, [pc, #520]	; (801474c <tcp_input+0x73c>)
 8014544:	881b      	ldrh	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d008      	beq.n	801455c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801454a:	69fb      	ldr	r3, [r7, #28]
 801454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801454e:	2b00      	cmp	r3, #0
 8014550:	f040 80e4 	bne.w	801471c <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014554:	69f8      	ldr	r0, [r7, #28]
 8014556:	f003 fe05 	bl	8018164 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801455a:	e0df      	b.n	801471c <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801455c:	4a7c      	ldr	r2, [pc, #496]	; (8014750 <tcp_input+0x740>)
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014562:	69f8      	ldr	r0, [r7, #28]
 8014564:	f000 fb18 	bl	8014b98 <tcp_process>
 8014568:	4603      	mov	r3, r0
 801456a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801456c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014570:	f113 0f0d 	cmn.w	r3, #13
 8014574:	f000 80d4 	beq.w	8014720 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8014578:	4b71      	ldr	r3, [pc, #452]	; (8014740 <tcp_input+0x730>)
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	f003 0308 	and.w	r3, r3, #8
 8014580:	2b00      	cmp	r3, #0
 8014582:	d015      	beq.n	80145b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801458a:	2b00      	cmp	r3, #0
 801458c:	d008      	beq.n	80145a0 <tcp_input+0x590>
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014594:	69fa      	ldr	r2, [r7, #28]
 8014596:	6912      	ldr	r2, [r2, #16]
 8014598:	f06f 010d 	mvn.w	r1, #13
 801459c:	4610      	mov	r0, r2
 801459e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80145a0:	69f9      	ldr	r1, [r7, #28]
 80145a2:	486c      	ldr	r0, [pc, #432]	; (8014754 <tcp_input+0x744>)
 80145a4:	f7ff fbbc 	bl	8013d20 <tcp_pcb_remove>
        tcp_free(pcb);
 80145a8:	69f8      	ldr	r0, [r7, #28]
 80145aa:	f7fd ff79 	bl	80124a0 <tcp_free>
 80145ae:	e0da      	b.n	8014766 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80145b0:	2300      	movs	r3, #0
 80145b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80145b4:	4b63      	ldr	r3, [pc, #396]	; (8014744 <tcp_input+0x734>)
 80145b6:	881b      	ldrh	r3, [r3, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d01d      	beq.n	80145f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80145bc:	4b61      	ldr	r3, [pc, #388]	; (8014744 <tcp_input+0x734>)
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80145c2:	69fb      	ldr	r3, [r7, #28]
 80145c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d00a      	beq.n	80145e2 <tcp_input+0x5d2>
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145d2:	69fa      	ldr	r2, [r7, #28]
 80145d4:	6910      	ldr	r0, [r2, #16]
 80145d6:	89fa      	ldrh	r2, [r7, #14]
 80145d8:	69f9      	ldr	r1, [r7, #28]
 80145da:	4798      	blx	r3
 80145dc:	4603      	mov	r3, r0
 80145de:	74fb      	strb	r3, [r7, #19]
 80145e0:	e001      	b.n	80145e6 <tcp_input+0x5d6>
 80145e2:	2300      	movs	r3, #0
 80145e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80145e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145ea:	f113 0f0d 	cmn.w	r3, #13
 80145ee:	f000 8099 	beq.w	8014724 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 80145f2:	4b54      	ldr	r3, [pc, #336]	; (8014744 <tcp_input+0x734>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80145f8:	69f8      	ldr	r0, [r7, #28]
 80145fa:	f000 f915 	bl	8014828 <tcp_input_delayed_close>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	f040 8091 	bne.w	8014728 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014606:	4b4d      	ldr	r3, [pc, #308]	; (801473c <tcp_input+0x72c>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d041      	beq.n	8014692 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014612:	2b00      	cmp	r3, #0
 8014614:	d006      	beq.n	8014624 <tcp_input+0x614>
 8014616:	4b50      	ldr	r3, [pc, #320]	; (8014758 <tcp_input+0x748>)
 8014618:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801461c:	494f      	ldr	r1, [pc, #316]	; (801475c <tcp_input+0x74c>)
 801461e:	4850      	ldr	r0, [pc, #320]	; (8014760 <tcp_input+0x750>)
 8014620:	f007 f850 	bl	801b6c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	8b5b      	ldrh	r3, [r3, #26]
 8014628:	f003 0310 	and.w	r3, r3, #16
 801462c:	2b00      	cmp	r3, #0
 801462e:	d008      	beq.n	8014642 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014630:	4b42      	ldr	r3, [pc, #264]	; (801473c <tcp_input+0x72c>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4618      	mov	r0, r3
 8014636:	f7fd fc93 	bl	8011f60 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801463a:	69f8      	ldr	r0, [r7, #28]
 801463c:	f7fe fa18 	bl	8012a70 <tcp_abort>
            goto aborted;
 8014640:	e091      	b.n	8014766 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014642:	69fb      	ldr	r3, [r7, #28]
 8014644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014648:	2b00      	cmp	r3, #0
 801464a:	d00c      	beq.n	8014666 <tcp_input+0x656>
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	6918      	ldr	r0, [r3, #16]
 8014656:	4b39      	ldr	r3, [pc, #228]	; (801473c <tcp_input+0x72c>)
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	2300      	movs	r3, #0
 801465c:	69f9      	ldr	r1, [r7, #28]
 801465e:	47a0      	blx	r4
 8014660:	4603      	mov	r3, r0
 8014662:	74fb      	strb	r3, [r7, #19]
 8014664:	e008      	b.n	8014678 <tcp_input+0x668>
 8014666:	4b35      	ldr	r3, [pc, #212]	; (801473c <tcp_input+0x72c>)
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	2300      	movs	r3, #0
 801466c:	69f9      	ldr	r1, [r7, #28]
 801466e:	2000      	movs	r0, #0
 8014670:	f7ff f8ae 	bl	80137d0 <tcp_recv_null>
 8014674:	4603      	mov	r3, r0
 8014676:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014678:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801467c:	f113 0f0d 	cmn.w	r3, #13
 8014680:	d054      	beq.n	801472c <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014682:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d003      	beq.n	8014692 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801468a:	4b2c      	ldr	r3, [pc, #176]	; (801473c <tcp_input+0x72c>)
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014692:	4b2b      	ldr	r3, [pc, #172]	; (8014740 <tcp_input+0x730>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	f003 0320 	and.w	r3, r3, #32
 801469a:	2b00      	cmp	r3, #0
 801469c:	d031      	beq.n	8014702 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d009      	beq.n	80146ba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146aa:	7b5a      	ldrb	r2, [r3, #13]
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146b0:	f042 0220 	orr.w	r2, r2, #32
 80146b4:	b2d2      	uxtb	r2, r2
 80146b6:	735a      	strb	r2, [r3, #13]
 80146b8:	e023      	b.n	8014702 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146be:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80146c2:	4293      	cmp	r3, r2
 80146c4:	d005      	beq.n	80146d2 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80146c6:	69fb      	ldr	r3, [r7, #28]
 80146c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146ca:	3301      	adds	r3, #1
 80146cc:	b29a      	uxth	r2, r3
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d00b      	beq.n	80146f4 <tcp_input+0x6e4>
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	6918      	ldr	r0, [r3, #16]
 80146e6:	2300      	movs	r3, #0
 80146e8:	2200      	movs	r2, #0
 80146ea:	69f9      	ldr	r1, [r7, #28]
 80146ec:	47a0      	blx	r4
 80146ee:	4603      	mov	r3, r0
 80146f0:	74fb      	strb	r3, [r7, #19]
 80146f2:	e001      	b.n	80146f8 <tcp_input+0x6e8>
 80146f4:	2300      	movs	r3, #0
 80146f6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80146f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146fc:	f113 0f0d 	cmn.w	r3, #13
 8014700:	d016      	beq.n	8014730 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014702:	4b13      	ldr	r3, [pc, #76]	; (8014750 <tcp_input+0x740>)
 8014704:	2200      	movs	r2, #0
 8014706:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014708:	69f8      	ldr	r0, [r7, #28]
 801470a:	f000 f88d 	bl	8014828 <tcp_input_delayed_close>
 801470e:	4603      	mov	r3, r0
 8014710:	2b00      	cmp	r3, #0
 8014712:	d127      	bne.n	8014764 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014714:	69f8      	ldr	r0, [r7, #28]
 8014716:	f002 ff1f 	bl	8017558 <tcp_output>
 801471a:	e024      	b.n	8014766 <tcp_input+0x756>
        goto aborted;
 801471c:	bf00      	nop
 801471e:	e022      	b.n	8014766 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014720:	bf00      	nop
 8014722:	e020      	b.n	8014766 <tcp_input+0x756>
              goto aborted;
 8014724:	bf00      	nop
 8014726:	e01e      	b.n	8014766 <tcp_input+0x756>
          goto aborted;
 8014728:	bf00      	nop
 801472a:	e01c      	b.n	8014766 <tcp_input+0x756>
            goto aborted;
 801472c:	bf00      	nop
 801472e:	e01a      	b.n	8014766 <tcp_input+0x756>
              goto aborted;
 8014730:	bf00      	nop
 8014732:	e018      	b.n	8014766 <tcp_input+0x756>
 8014734:	2000aff4 	.word	0x2000aff4
 8014738:	2000b004 	.word	0x2000b004
 801473c:	2000b024 	.word	0x2000b024
 8014740:	2000b021 	.word	0x2000b021
 8014744:	2000b01c 	.word	0x2000b01c
 8014748:	2000b020 	.word	0x2000b020
 801474c:	2000b01e 	.word	0x2000b01e
 8014750:	2000b028 	.word	0x2000b028
 8014754:	2000afe8 	.word	0x2000afe8
 8014758:	0801de24 	.word	0x0801de24
 801475c:	0801dfd8 	.word	0x0801dfd8
 8014760:	0801de70 	.word	0x0801de70
          goto aborted;
 8014764:	bf00      	nop
    tcp_input_pcb = NULL;
 8014766:	4b27      	ldr	r3, [pc, #156]	; (8014804 <tcp_input+0x7f4>)
 8014768:	2200      	movs	r2, #0
 801476a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801476c:	4b26      	ldr	r3, [pc, #152]	; (8014808 <tcp_input+0x7f8>)
 801476e:	2200      	movs	r2, #0
 8014770:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014772:	4b26      	ldr	r3, [pc, #152]	; (801480c <tcp_input+0x7fc>)
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d03f      	beq.n	80147fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801477a:	4b24      	ldr	r3, [pc, #144]	; (801480c <tcp_input+0x7fc>)
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	4618      	mov	r0, r3
 8014780:	f7fd fbee 	bl	8011f60 <pbuf_free>
      inseg.p = NULL;
 8014784:	4b21      	ldr	r3, [pc, #132]	; (801480c <tcp_input+0x7fc>)
 8014786:	2200      	movs	r2, #0
 8014788:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801478a:	e036      	b.n	80147fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801478c:	4b20      	ldr	r3, [pc, #128]	; (8014810 <tcp_input+0x800>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	899b      	ldrh	r3, [r3, #12]
 8014792:	b29b      	uxth	r3, r3
 8014794:	4618      	mov	r0, r3
 8014796:	f7fc f81a 	bl	80107ce <lwip_htons>
 801479a:	4603      	mov	r3, r0
 801479c:	b2db      	uxtb	r3, r3
 801479e:	f003 0304 	and.w	r3, r3, #4
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d118      	bne.n	80147d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147a6:	4b1b      	ldr	r3, [pc, #108]	; (8014814 <tcp_input+0x804>)
 80147a8:	6819      	ldr	r1, [r3, #0]
 80147aa:	4b1b      	ldr	r3, [pc, #108]	; (8014818 <tcp_input+0x808>)
 80147ac:	881b      	ldrh	r3, [r3, #0]
 80147ae:	461a      	mov	r2, r3
 80147b0:	4b1a      	ldr	r3, [pc, #104]	; (801481c <tcp_input+0x80c>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80147b6:	4b16      	ldr	r3, [pc, #88]	; (8014810 <tcp_input+0x800>)
 80147b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147ba:	885b      	ldrh	r3, [r3, #2]
 80147bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80147be:	4a14      	ldr	r2, [pc, #80]	; (8014810 <tcp_input+0x800>)
 80147c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147c2:	8812      	ldrh	r2, [r2, #0]
 80147c4:	b292      	uxth	r2, r2
 80147c6:	9202      	str	r2, [sp, #8]
 80147c8:	9301      	str	r3, [sp, #4]
 80147ca:	4b15      	ldr	r3, [pc, #84]	; (8014820 <tcp_input+0x810>)
 80147cc:	9300      	str	r3, [sp, #0]
 80147ce:	4b15      	ldr	r3, [pc, #84]	; (8014824 <tcp_input+0x814>)
 80147d0:	4602      	mov	r2, r0
 80147d2:	2000      	movs	r0, #0
 80147d4:	f003 fc74 	bl	80180c0 <tcp_rst>
    pbuf_free(p);
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f7fd fbc1 	bl	8011f60 <pbuf_free>
  return;
 80147de:	e00c      	b.n	80147fa <tcp_input+0x7ea>
    goto dropped;
 80147e0:	bf00      	nop
 80147e2:	e006      	b.n	80147f2 <tcp_input+0x7e2>
    goto dropped;
 80147e4:	bf00      	nop
 80147e6:	e004      	b.n	80147f2 <tcp_input+0x7e2>
    goto dropped;
 80147e8:	bf00      	nop
 80147ea:	e002      	b.n	80147f2 <tcp_input+0x7e2>
      goto dropped;
 80147ec:	bf00      	nop
 80147ee:	e000      	b.n	80147f2 <tcp_input+0x7e2>
      goto dropped;
 80147f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7fd fbb4 	bl	8011f60 <pbuf_free>
 80147f8:	e000      	b.n	80147fc <tcp_input+0x7ec>
  return;
 80147fa:	bf00      	nop
}
 80147fc:	3724      	adds	r7, #36	; 0x24
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd90      	pop	{r4, r7, pc}
 8014802:	bf00      	nop
 8014804:	2000b028 	.word	0x2000b028
 8014808:	2000b024 	.word	0x2000b024
 801480c:	2000aff4 	.word	0x2000aff4
 8014810:	2000b004 	.word	0x2000b004
 8014814:	2000b018 	.word	0x2000b018
 8014818:	2000b01e 	.word	0x2000b01e
 801481c:	2000b014 	.word	0x2000b014
 8014820:	200042c4 	.word	0x200042c4
 8014824:	200042c8 	.word	0x200042c8

08014828 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d106      	bne.n	8014844 <tcp_input_delayed_close+0x1c>
 8014836:	4b17      	ldr	r3, [pc, #92]	; (8014894 <tcp_input_delayed_close+0x6c>)
 8014838:	f240 225a 	movw	r2, #602	; 0x25a
 801483c:	4916      	ldr	r1, [pc, #88]	; (8014898 <tcp_input_delayed_close+0x70>)
 801483e:	4817      	ldr	r0, [pc, #92]	; (801489c <tcp_input_delayed_close+0x74>)
 8014840:	f006 ff40 	bl	801b6c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014844:	4b16      	ldr	r3, [pc, #88]	; (80148a0 <tcp_input_delayed_close+0x78>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	f003 0310 	and.w	r3, r3, #16
 801484c:	2b00      	cmp	r3, #0
 801484e:	d01c      	beq.n	801488a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	8b5b      	ldrh	r3, [r3, #26]
 8014854:	f003 0310 	and.w	r3, r3, #16
 8014858:	2b00      	cmp	r3, #0
 801485a:	d10d      	bne.n	8014878 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014862:	2b00      	cmp	r3, #0
 8014864:	d008      	beq.n	8014878 <tcp_input_delayed_close+0x50>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	6912      	ldr	r2, [r2, #16]
 8014870:	f06f 010e 	mvn.w	r1, #14
 8014874:	4610      	mov	r0, r2
 8014876:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014878:	6879      	ldr	r1, [r7, #4]
 801487a:	480a      	ldr	r0, [pc, #40]	; (80148a4 <tcp_input_delayed_close+0x7c>)
 801487c:	f7ff fa50 	bl	8013d20 <tcp_pcb_remove>
    tcp_free(pcb);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f7fd fe0d 	bl	80124a0 <tcp_free>
    return 1;
 8014886:	2301      	movs	r3, #1
 8014888:	e000      	b.n	801488c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	0801de24 	.word	0x0801de24
 8014898:	0801dff4 	.word	0x0801dff4
 801489c:	0801de70 	.word	0x0801de70
 80148a0:	2000b021 	.word	0x2000b021
 80148a4:	2000afe8 	.word	0x2000afe8

080148a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80148a8:	b590      	push	{r4, r7, lr}
 80148aa:	b08b      	sub	sp, #44	; 0x2c
 80148ac:	af04      	add	r7, sp, #16
 80148ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80148b0:	4b6f      	ldr	r3, [pc, #444]	; (8014a70 <tcp_listen_input+0x1c8>)
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	f003 0304 	and.w	r3, r3, #4
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	f040 80d2 	bne.w	8014a62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d106      	bne.n	80148d2 <tcp_listen_input+0x2a>
 80148c4:	4b6b      	ldr	r3, [pc, #428]	; (8014a74 <tcp_listen_input+0x1cc>)
 80148c6:	f240 2281 	movw	r2, #641	; 0x281
 80148ca:	496b      	ldr	r1, [pc, #428]	; (8014a78 <tcp_listen_input+0x1d0>)
 80148cc:	486b      	ldr	r0, [pc, #428]	; (8014a7c <tcp_listen_input+0x1d4>)
 80148ce:	f006 fef9 	bl	801b6c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80148d2:	4b67      	ldr	r3, [pc, #412]	; (8014a70 <tcp_listen_input+0x1c8>)
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	f003 0310 	and.w	r3, r3, #16
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d019      	beq.n	8014912 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148de:	4b68      	ldr	r3, [pc, #416]	; (8014a80 <tcp_listen_input+0x1d8>)
 80148e0:	6819      	ldr	r1, [r3, #0]
 80148e2:	4b68      	ldr	r3, [pc, #416]	; (8014a84 <tcp_listen_input+0x1dc>)
 80148e4:	881b      	ldrh	r3, [r3, #0]
 80148e6:	461a      	mov	r2, r3
 80148e8:	4b67      	ldr	r3, [pc, #412]	; (8014a88 <tcp_listen_input+0x1e0>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148ee:	4b67      	ldr	r3, [pc, #412]	; (8014a8c <tcp_listen_input+0x1e4>)
 80148f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148f2:	885b      	ldrh	r3, [r3, #2]
 80148f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148f6:	4a65      	ldr	r2, [pc, #404]	; (8014a8c <tcp_listen_input+0x1e4>)
 80148f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148fa:	8812      	ldrh	r2, [r2, #0]
 80148fc:	b292      	uxth	r2, r2
 80148fe:	9202      	str	r2, [sp, #8]
 8014900:	9301      	str	r3, [sp, #4]
 8014902:	4b63      	ldr	r3, [pc, #396]	; (8014a90 <tcp_listen_input+0x1e8>)
 8014904:	9300      	str	r3, [sp, #0]
 8014906:	4b63      	ldr	r3, [pc, #396]	; (8014a94 <tcp_listen_input+0x1ec>)
 8014908:	4602      	mov	r2, r0
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f003 fbd8 	bl	80180c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014910:	e0a9      	b.n	8014a66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014912:	4b57      	ldr	r3, [pc, #348]	; (8014a70 <tcp_listen_input+0x1c8>)
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	f003 0302 	and.w	r3, r3, #2
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 80a3 	beq.w	8014a66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	7d5b      	ldrb	r3, [r3, #21]
 8014924:	4618      	mov	r0, r3
 8014926:	f7ff f877 	bl	8013a18 <tcp_alloc>
 801492a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d111      	bne.n	8014956 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	699b      	ldr	r3, [r3, #24]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d00a      	beq.n	8014950 <tcp_listen_input+0xa8>
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	699b      	ldr	r3, [r3, #24]
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	6910      	ldr	r0, [r2, #16]
 8014942:	f04f 32ff 	mov.w	r2, #4294967295
 8014946:	2100      	movs	r1, #0
 8014948:	4798      	blx	r3
 801494a:	4603      	mov	r3, r0
 801494c:	73bb      	strb	r3, [r7, #14]
      return;
 801494e:	e08b      	b.n	8014a68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014950:	23f0      	movs	r3, #240	; 0xf0
 8014952:	73bb      	strb	r3, [r7, #14]
      return;
 8014954:	e088      	b.n	8014a68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014956:	4b50      	ldr	r3, [pc, #320]	; (8014a98 <tcp_listen_input+0x1f0>)
 8014958:	695a      	ldr	r2, [r3, #20]
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801495e:	4b4e      	ldr	r3, [pc, #312]	; (8014a98 <tcp_listen_input+0x1f0>)
 8014960:	691a      	ldr	r2, [r3, #16]
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8ada      	ldrh	r2, [r3, #22]
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801496e:	4b47      	ldr	r3, [pc, #284]	; (8014a8c <tcp_listen_input+0x1e4>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	881b      	ldrh	r3, [r3, #0]
 8014974:	b29a      	uxth	r2, r3
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	2203      	movs	r2, #3
 801497e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014980:	4b41      	ldr	r3, [pc, #260]	; (8014a88 <tcp_listen_input+0x1e0>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	1c5a      	adds	r2, r3, #1
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014992:	6978      	ldr	r0, [r7, #20]
 8014994:	f7ff fa58 	bl	8013e48 <tcp_next_iss>
 8014998:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	693a      	ldr	r2, [r7, #16]
 801499e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	693a      	ldr	r2, [r7, #16]
 80149a4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80149a6:	697b      	ldr	r3, [r7, #20]
 80149a8:	693a      	ldr	r2, [r7, #16]
 80149aa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	693a      	ldr	r2, [r7, #16]
 80149b0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80149b2:	4b35      	ldr	r3, [pc, #212]	; (8014a88 <tcp_listen_input+0x1e0>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	1e5a      	subs	r2, r3, #1
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	691a      	ldr	r2, [r3, #16]
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	7a5b      	ldrb	r3, [r3, #9]
 80149ce:	f003 030c 	and.w	r3, r3, #12
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	7a1a      	ldrb	r2, [r3, #8]
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80149e0:	4b2e      	ldr	r3, [pc, #184]	; (8014a9c <tcp_listen_input+0x1f4>)
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	60da      	str	r2, [r3, #12]
 80149e8:	4a2c      	ldr	r2, [pc, #176]	; (8014a9c <tcp_listen_input+0x1f4>)
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	f003 fd29 	bl	8018444 <tcp_timer_needed>
 80149f2:	4b2b      	ldr	r3, [pc, #172]	; (8014aa0 <tcp_listen_input+0x1f8>)
 80149f4:	2201      	movs	r2, #1
 80149f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80149f8:	6978      	ldr	r0, [r7, #20]
 80149fa:	f001 fd8f 	bl	801651c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80149fe:	4b23      	ldr	r3, [pc, #140]	; (8014a8c <tcp_listen_input+0x1e4>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	89db      	ldrh	r3, [r3, #14]
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	4618      	mov	r0, r3
 8014a22:	f005 f909 	bl	8019c38 <ip4_route>
 8014a26:	4601      	mov	r1, r0
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	4620      	mov	r0, r4
 8014a30:	f7ff fa30 	bl	8013e94 <tcp_eff_send_mss_netif>
 8014a34:	4603      	mov	r3, r0
 8014a36:	461a      	mov	r2, r3
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014a3c:	2112      	movs	r1, #18
 8014a3e:	6978      	ldr	r0, [r7, #20]
 8014a40:	f002 fc9c 	bl	801737c <tcp_enqueue_flags>
 8014a44:	4603      	mov	r3, r0
 8014a46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d004      	beq.n	8014a5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014a50:	2100      	movs	r1, #0
 8014a52:	6978      	ldr	r0, [r7, #20]
 8014a54:	f7fd ff4e 	bl	80128f4 <tcp_abandon>
      return;
 8014a58:	e006      	b.n	8014a68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014a5a:	6978      	ldr	r0, [r7, #20]
 8014a5c:	f002 fd7c 	bl	8017558 <tcp_output>
  return;
 8014a60:	e001      	b.n	8014a66 <tcp_listen_input+0x1be>
    return;
 8014a62:	bf00      	nop
 8014a64:	e000      	b.n	8014a68 <tcp_listen_input+0x1c0>
  return;
 8014a66:	bf00      	nop
}
 8014a68:	371c      	adds	r7, #28
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd90      	pop	{r4, r7, pc}
 8014a6e:	bf00      	nop
 8014a70:	2000b020 	.word	0x2000b020
 8014a74:	0801de24 	.word	0x0801de24
 8014a78:	0801e01c 	.word	0x0801e01c
 8014a7c:	0801de70 	.word	0x0801de70
 8014a80:	2000b018 	.word	0x2000b018
 8014a84:	2000b01e 	.word	0x2000b01e
 8014a88:	2000b014 	.word	0x2000b014
 8014a8c:	2000b004 	.word	0x2000b004
 8014a90:	200042c4 	.word	0x200042c4
 8014a94:	200042c8 	.word	0x200042c8
 8014a98:	200042b4 	.word	0x200042b4
 8014a9c:	2000afe8 	.word	0x2000afe8
 8014aa0:	2000aff0 	.word	0x2000aff0

08014aa4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b086      	sub	sp, #24
 8014aa8:	af04      	add	r7, sp, #16
 8014aaa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014aac:	4b2f      	ldr	r3, [pc, #188]	; (8014b6c <tcp_timewait_input+0xc8>)
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	f003 0304 	and.w	r3, r3, #4
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d153      	bne.n	8014b60 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d106      	bne.n	8014acc <tcp_timewait_input+0x28>
 8014abe:	4b2c      	ldr	r3, [pc, #176]	; (8014b70 <tcp_timewait_input+0xcc>)
 8014ac0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014ac4:	492b      	ldr	r1, [pc, #172]	; (8014b74 <tcp_timewait_input+0xd0>)
 8014ac6:	482c      	ldr	r0, [pc, #176]	; (8014b78 <tcp_timewait_input+0xd4>)
 8014ac8:	f006 fdfc 	bl	801b6c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014acc:	4b27      	ldr	r3, [pc, #156]	; (8014b6c <tcp_timewait_input+0xc8>)
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	f003 0302 	and.w	r3, r3, #2
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d02a      	beq.n	8014b2e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014ad8:	4b28      	ldr	r3, [pc, #160]	; (8014b7c <tcp_timewait_input+0xd8>)
 8014ada:	681a      	ldr	r2, [r3, #0]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ae0:	1ad3      	subs	r3, r2, r3
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	db2d      	blt.n	8014b42 <tcp_timewait_input+0x9e>
 8014ae6:	4b25      	ldr	r3, [pc, #148]	; (8014b7c <tcp_timewait_input+0xd8>)
 8014ae8:	681a      	ldr	r2, [r3, #0]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aee:	6879      	ldr	r1, [r7, #4]
 8014af0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014af2:	440b      	add	r3, r1
 8014af4:	1ad3      	subs	r3, r2, r3
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	dc23      	bgt.n	8014b42 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014afa:	4b21      	ldr	r3, [pc, #132]	; (8014b80 <tcp_timewait_input+0xdc>)
 8014afc:	6819      	ldr	r1, [r3, #0]
 8014afe:	4b21      	ldr	r3, [pc, #132]	; (8014b84 <tcp_timewait_input+0xe0>)
 8014b00:	881b      	ldrh	r3, [r3, #0]
 8014b02:	461a      	mov	r2, r3
 8014b04:	4b1d      	ldr	r3, [pc, #116]	; (8014b7c <tcp_timewait_input+0xd8>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b0a:	4b1f      	ldr	r3, [pc, #124]	; (8014b88 <tcp_timewait_input+0xe4>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b0e:	885b      	ldrh	r3, [r3, #2]
 8014b10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b12:	4a1d      	ldr	r2, [pc, #116]	; (8014b88 <tcp_timewait_input+0xe4>)
 8014b14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b16:	8812      	ldrh	r2, [r2, #0]
 8014b18:	b292      	uxth	r2, r2
 8014b1a:	9202      	str	r2, [sp, #8]
 8014b1c:	9301      	str	r3, [sp, #4]
 8014b1e:	4b1b      	ldr	r3, [pc, #108]	; (8014b8c <tcp_timewait_input+0xe8>)
 8014b20:	9300      	str	r3, [sp, #0]
 8014b22:	4b1b      	ldr	r3, [pc, #108]	; (8014b90 <tcp_timewait_input+0xec>)
 8014b24:	4602      	mov	r2, r0
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f003 faca 	bl	80180c0 <tcp_rst>
      return;
 8014b2c:	e01b      	b.n	8014b66 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014b2e:	4b0f      	ldr	r3, [pc, #60]	; (8014b6c <tcp_timewait_input+0xc8>)
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	f003 0301 	and.w	r3, r3, #1
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d003      	beq.n	8014b42 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014b3a:	4b16      	ldr	r3, [pc, #88]	; (8014b94 <tcp_timewait_input+0xf0>)
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014b42:	4b10      	ldr	r3, [pc, #64]	; (8014b84 <tcp_timewait_input+0xe0>)
 8014b44:	881b      	ldrh	r3, [r3, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00c      	beq.n	8014b64 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	8b5b      	ldrh	r3, [r3, #26]
 8014b4e:	f043 0302 	orr.w	r3, r3, #2
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f002 fcfd 	bl	8017558 <tcp_output>
  }
  return;
 8014b5e:	e001      	b.n	8014b64 <tcp_timewait_input+0xc0>
    return;
 8014b60:	bf00      	nop
 8014b62:	e000      	b.n	8014b66 <tcp_timewait_input+0xc2>
  return;
 8014b64:	bf00      	nop
}
 8014b66:	3708      	adds	r7, #8
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	2000b020 	.word	0x2000b020
 8014b70:	0801de24 	.word	0x0801de24
 8014b74:	0801e03c 	.word	0x0801e03c
 8014b78:	0801de70 	.word	0x0801de70
 8014b7c:	2000b014 	.word	0x2000b014
 8014b80:	2000b018 	.word	0x2000b018
 8014b84:	2000b01e 	.word	0x2000b01e
 8014b88:	2000b004 	.word	0x2000b004
 8014b8c:	200042c4 	.word	0x200042c4
 8014b90:	200042c8 	.word	0x200042c8
 8014b94:	2000afdc 	.word	0x2000afdc

08014b98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014b98:	b590      	push	{r4, r7, lr}
 8014b9a:	b08d      	sub	sp, #52	; 0x34
 8014b9c:	af04      	add	r7, sp, #16
 8014b9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d106      	bne.n	8014bbc <tcp_process+0x24>
 8014bae:	4b9d      	ldr	r3, [pc, #628]	; (8014e24 <tcp_process+0x28c>)
 8014bb0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014bb4:	499c      	ldr	r1, [pc, #624]	; (8014e28 <tcp_process+0x290>)
 8014bb6:	489d      	ldr	r0, [pc, #628]	; (8014e2c <tcp_process+0x294>)
 8014bb8:	f006 fd84 	bl	801b6c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014bbc:	4b9c      	ldr	r3, [pc, #624]	; (8014e30 <tcp_process+0x298>)
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	f003 0304 	and.w	r3, r3, #4
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d04e      	beq.n	8014c66 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	7d1b      	ldrb	r3, [r3, #20]
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d108      	bne.n	8014be2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014bd4:	4b97      	ldr	r3, [pc, #604]	; (8014e34 <tcp_process+0x29c>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d123      	bne.n	8014c24 <tcp_process+0x8c>
        acceptable = 1;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	76fb      	strb	r3, [r7, #27]
 8014be0:	e020      	b.n	8014c24 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014be6:	4b94      	ldr	r3, [pc, #592]	; (8014e38 <tcp_process+0x2a0>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d102      	bne.n	8014bf4 <tcp_process+0x5c>
        acceptable = 1;
 8014bee:	2301      	movs	r3, #1
 8014bf0:	76fb      	strb	r3, [r7, #27]
 8014bf2:	e017      	b.n	8014c24 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014bf4:	4b90      	ldr	r3, [pc, #576]	; (8014e38 <tcp_process+0x2a0>)
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	db10      	blt.n	8014c24 <tcp_process+0x8c>
 8014c02:	4b8d      	ldr	r3, [pc, #564]	; (8014e38 <tcp_process+0x2a0>)
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c0a:	6879      	ldr	r1, [r7, #4]
 8014c0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c0e:	440b      	add	r3, r1
 8014c10:	1ad3      	subs	r3, r2, r3
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	dc06      	bgt.n	8014c24 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	8b5b      	ldrh	r3, [r3, #26]
 8014c1a:	f043 0302 	orr.w	r3, r3, #2
 8014c1e:	b29a      	uxth	r2, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014c24:	7efb      	ldrb	r3, [r7, #27]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d01b      	beq.n	8014c62 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	7d1b      	ldrb	r3, [r3, #20]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d106      	bne.n	8014c40 <tcp_process+0xa8>
 8014c32:	4b7c      	ldr	r3, [pc, #496]	; (8014e24 <tcp_process+0x28c>)
 8014c34:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014c38:	4980      	ldr	r1, [pc, #512]	; (8014e3c <tcp_process+0x2a4>)
 8014c3a:	487c      	ldr	r0, [pc, #496]	; (8014e2c <tcp_process+0x294>)
 8014c3c:	f006 fd42 	bl	801b6c4 <iprintf>
      recv_flags |= TF_RESET;
 8014c40:	4b7f      	ldr	r3, [pc, #508]	; (8014e40 <tcp_process+0x2a8>)
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	f043 0308 	orr.w	r3, r3, #8
 8014c48:	b2da      	uxtb	r2, r3
 8014c4a:	4b7d      	ldr	r3, [pc, #500]	; (8014e40 <tcp_process+0x2a8>)
 8014c4c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	8b5b      	ldrh	r3, [r3, #26]
 8014c52:	f023 0301 	bic.w	r3, r3, #1
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014c5c:	f06f 030d 	mvn.w	r3, #13
 8014c60:	e37a      	b.n	8015358 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014c62:	2300      	movs	r3, #0
 8014c64:	e378      	b.n	8015358 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014c66:	4b72      	ldr	r3, [pc, #456]	; (8014e30 <tcp_process+0x298>)
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	f003 0302 	and.w	r3, r3, #2
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d010      	beq.n	8014c94 <tcp_process+0xfc>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	7d1b      	ldrb	r3, [r3, #20]
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	d00c      	beq.n	8014c94 <tcp_process+0xfc>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	7d1b      	ldrb	r3, [r3, #20]
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d008      	beq.n	8014c94 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	8b5b      	ldrh	r3, [r3, #26]
 8014c86:	f043 0302 	orr.w	r3, r3, #2
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014c90:	2300      	movs	r3, #0
 8014c92:	e361      	b.n	8015358 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b5b      	ldrh	r3, [r3, #26]
 8014c98:	f003 0310 	and.w	r3, r3, #16
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d103      	bne.n	8014ca8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014ca0:	4b68      	ldr	r3, [pc, #416]	; (8014e44 <tcp_process+0x2ac>)
 8014ca2:	681a      	ldr	r2, [r3, #0]
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2200      	movs	r2, #0
 8014cac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f001 fc2f 	bl	801651c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	7d1b      	ldrb	r3, [r3, #20]
 8014cc2:	3b02      	subs	r3, #2
 8014cc4:	2b07      	cmp	r3, #7
 8014cc6:	f200 8337 	bhi.w	8015338 <tcp_process+0x7a0>
 8014cca:	a201      	add	r2, pc, #4	; (adr r2, 8014cd0 <tcp_process+0x138>)
 8014ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cd0:	08014cf1 	.word	0x08014cf1
 8014cd4:	08014f21 	.word	0x08014f21
 8014cd8:	08015099 	.word	0x08015099
 8014cdc:	080150c3 	.word	0x080150c3
 8014ce0:	080151e7 	.word	0x080151e7
 8014ce4:	08015099 	.word	0x08015099
 8014ce8:	08015273 	.word	0x08015273
 8014cec:	08015303 	.word	0x08015303
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014cf0:	4b4f      	ldr	r3, [pc, #316]	; (8014e30 <tcp_process+0x298>)
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	f003 0310 	and.w	r3, r3, #16
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f000 80e4 	beq.w	8014ec6 <tcp_process+0x32e>
 8014cfe:	4b4c      	ldr	r3, [pc, #304]	; (8014e30 <tcp_process+0x298>)
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	f003 0302 	and.w	r3, r3, #2
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	f000 80dd 	beq.w	8014ec6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d10:	1c5a      	adds	r2, r3, #1
 8014d12:	4b48      	ldr	r3, [pc, #288]	; (8014e34 <tcp_process+0x29c>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	f040 80d5 	bne.w	8014ec6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014d1c:	4b46      	ldr	r3, [pc, #280]	; (8014e38 <tcp_process+0x2a0>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	1c5a      	adds	r2, r3, #1
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014d2e:	4b41      	ldr	r3, [pc, #260]	; (8014e34 <tcp_process+0x29c>)
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014d36:	4b44      	ldr	r3, [pc, #272]	; (8014e48 <tcp_process+0x2b0>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	89db      	ldrh	r3, [r3, #14]
 8014d3c:	b29a      	uxth	r2, r3
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014d50:	4b39      	ldr	r3, [pc, #228]	; (8014e38 <tcp_process+0x2a0>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	1e5a      	subs	r2, r3, #1
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	2204      	movs	r2, #4
 8014d5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3304      	adds	r3, #4
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f004 ff65 	bl	8019c38 <ip4_route>
 8014d6e:	4601      	mov	r1, r0
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	3304      	adds	r3, #4
 8014d74:	461a      	mov	r2, r3
 8014d76:	4620      	mov	r0, r4
 8014d78:	f7ff f88c 	bl	8013e94 <tcp_eff_send_mss_netif>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	461a      	mov	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d88:	009a      	lsls	r2, r3, #2
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d8e:	005b      	lsls	r3, r3, #1
 8014d90:	f241 111c 	movw	r1, #4380	; 0x111c
 8014d94:	428b      	cmp	r3, r1
 8014d96:	bf38      	it	cc
 8014d98:	460b      	movcc	r3, r1
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d204      	bcs.n	8014da8 <tcp_process+0x210>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014da2:	009b      	lsls	r3, r3, #2
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	e00d      	b.n	8014dc4 <tcp_process+0x22c>
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dac:	005b      	lsls	r3, r3, #1
 8014dae:	f241 121c 	movw	r2, #4380	; 0x111c
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d904      	bls.n	8014dc0 <tcp_process+0x228>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dba:	005b      	lsls	r3, r3, #1
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	e001      	b.n	8014dc4 <tcp_process+0x22c>
 8014dc0:	f241 131c 	movw	r3, #4380	; 0x111c
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d106      	bne.n	8014de2 <tcp_process+0x24a>
 8014dd4:	4b13      	ldr	r3, [pc, #76]	; (8014e24 <tcp_process+0x28c>)
 8014dd6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014dda:	491c      	ldr	r1, [pc, #112]	; (8014e4c <tcp_process+0x2b4>)
 8014ddc:	4813      	ldr	r0, [pc, #76]	; (8014e2c <tcp_process+0x294>)
 8014dde:	f006 fc71 	bl	801b6c4 <iprintf>
        --pcb->snd_queuelen;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014de8:	3b01      	subs	r3, #1
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014df6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d12a      	bne.n	8014e54 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e02:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d106      	bne.n	8014e18 <tcp_process+0x280>
 8014e0a:	4b06      	ldr	r3, [pc, #24]	; (8014e24 <tcp_process+0x28c>)
 8014e0c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014e10:	490f      	ldr	r1, [pc, #60]	; (8014e50 <tcp_process+0x2b8>)
 8014e12:	4806      	ldr	r0, [pc, #24]	; (8014e2c <tcp_process+0x294>)
 8014e14:	f006 fc56 	bl	801b6c4 <iprintf>
          pcb->unsent = rseg->next;
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	66da      	str	r2, [r3, #108]	; 0x6c
 8014e20:	e01c      	b.n	8014e5c <tcp_process+0x2c4>
 8014e22:	bf00      	nop
 8014e24:	0801de24 	.word	0x0801de24
 8014e28:	0801e05c 	.word	0x0801e05c
 8014e2c:	0801de70 	.word	0x0801de70
 8014e30:	2000b020 	.word	0x2000b020
 8014e34:	2000b018 	.word	0x2000b018
 8014e38:	2000b014 	.word	0x2000b014
 8014e3c:	0801e078 	.word	0x0801e078
 8014e40:	2000b021 	.word	0x2000b021
 8014e44:	2000afdc 	.word	0x2000afdc
 8014e48:	2000b004 	.word	0x2000b004
 8014e4c:	0801e098 	.word	0x0801e098
 8014e50:	0801e0b0 	.word	0x0801e0b0
        } else {
          pcb->unacked = rseg->next;
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014e5c:	69f8      	ldr	r0, [r7, #28]
 8014e5e:	f7fe fc54 	bl	801370a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d104      	bne.n	8014e74 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e70:	861a      	strh	r2, [r3, #48]	; 0x30
 8014e72:	e006      	b.n	8014e82 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2200      	movs	r2, #0
 8014e78:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d00a      	beq.n	8014ea2 <tcp_process+0x30a>
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	6910      	ldr	r0, [r2, #16]
 8014e96:	2200      	movs	r2, #0
 8014e98:	6879      	ldr	r1, [r7, #4]
 8014e9a:	4798      	blx	r3
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	76bb      	strb	r3, [r7, #26]
 8014ea0:	e001      	b.n	8014ea6 <tcp_process+0x30e>
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014ea6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014eaa:	f113 0f0d 	cmn.w	r3, #13
 8014eae:	d102      	bne.n	8014eb6 <tcp_process+0x31e>
          return ERR_ABRT;
 8014eb0:	f06f 030c 	mvn.w	r3, #12
 8014eb4:	e250      	b.n	8015358 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	8b5b      	ldrh	r3, [r3, #26]
 8014eba:	f043 0302 	orr.w	r3, r3, #2
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014ec4:	e23a      	b.n	801533c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014ec6:	4b98      	ldr	r3, [pc, #608]	; (8015128 <tcp_process+0x590>)
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	f003 0310 	and.w	r3, r3, #16
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	f000 8234 	beq.w	801533c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ed4:	4b95      	ldr	r3, [pc, #596]	; (801512c <tcp_process+0x594>)
 8014ed6:	6819      	ldr	r1, [r3, #0]
 8014ed8:	4b95      	ldr	r3, [pc, #596]	; (8015130 <tcp_process+0x598>)
 8014eda:	881b      	ldrh	r3, [r3, #0]
 8014edc:	461a      	mov	r2, r3
 8014ede:	4b95      	ldr	r3, [pc, #596]	; (8015134 <tcp_process+0x59c>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ee4:	4b94      	ldr	r3, [pc, #592]	; (8015138 <tcp_process+0x5a0>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ee8:	885b      	ldrh	r3, [r3, #2]
 8014eea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014eec:	4a92      	ldr	r2, [pc, #584]	; (8015138 <tcp_process+0x5a0>)
 8014eee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ef0:	8812      	ldrh	r2, [r2, #0]
 8014ef2:	b292      	uxth	r2, r2
 8014ef4:	9202      	str	r2, [sp, #8]
 8014ef6:	9301      	str	r3, [sp, #4]
 8014ef8:	4b90      	ldr	r3, [pc, #576]	; (801513c <tcp_process+0x5a4>)
 8014efa:	9300      	str	r3, [sp, #0]
 8014efc:	4b90      	ldr	r3, [pc, #576]	; (8015140 <tcp_process+0x5a8>)
 8014efe:	4602      	mov	r2, r0
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f003 f8dd 	bl	80180c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f0c:	2b05      	cmp	r3, #5
 8014f0e:	f200 8215 	bhi.w	801533c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2200      	movs	r2, #0
 8014f16:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f002 fea9 	bl	8017c70 <tcp_rexmit_rto>
      break;
 8014f1e:	e20d      	b.n	801533c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014f20:	4b81      	ldr	r3, [pc, #516]	; (8015128 <tcp_process+0x590>)
 8014f22:	781b      	ldrb	r3, [r3, #0]
 8014f24:	f003 0310 	and.w	r3, r3, #16
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f000 80a1 	beq.w	8015070 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f2e:	4b7f      	ldr	r3, [pc, #508]	; (801512c <tcp_process+0x594>)
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	db7e      	blt.n	801503c <tcp_process+0x4a4>
 8014f3e:	4b7b      	ldr	r3, [pc, #492]	; (801512c <tcp_process+0x594>)
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f46:	1ad3      	subs	r3, r2, r3
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	dc77      	bgt.n	801503c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	2204      	movs	r2, #4
 8014f50:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d102      	bne.n	8014f60 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014f5a:	23fa      	movs	r3, #250	; 0xfa
 8014f5c:	76bb      	strb	r3, [r7, #26]
 8014f5e:	e01d      	b.n	8014f9c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f64:	699b      	ldr	r3, [r3, #24]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d106      	bne.n	8014f78 <tcp_process+0x3e0>
 8014f6a:	4b76      	ldr	r3, [pc, #472]	; (8015144 <tcp_process+0x5ac>)
 8014f6c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014f70:	4975      	ldr	r1, [pc, #468]	; (8015148 <tcp_process+0x5b0>)
 8014f72:	4876      	ldr	r0, [pc, #472]	; (801514c <tcp_process+0x5b4>)
 8014f74:	f006 fba6 	bl	801b6c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f7c:	699b      	ldr	r3, [r3, #24]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d00a      	beq.n	8014f98 <tcp_process+0x400>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f86:	699b      	ldr	r3, [r3, #24]
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	6910      	ldr	r0, [r2, #16]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	6879      	ldr	r1, [r7, #4]
 8014f90:	4798      	blx	r3
 8014f92:	4603      	mov	r3, r0
 8014f94:	76bb      	strb	r3, [r7, #26]
 8014f96:	e001      	b.n	8014f9c <tcp_process+0x404>
 8014f98:	23f0      	movs	r3, #240	; 0xf0
 8014f9a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014f9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00a      	beq.n	8014fba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014fa4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014fa8:	f113 0f0d 	cmn.w	r3, #13
 8014fac:	d002      	beq.n	8014fb4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f7fd fd5e 	bl	8012a70 <tcp_abort>
            }
            return ERR_ABRT;
 8014fb4:	f06f 030c 	mvn.w	r3, #12
 8014fb8:	e1ce      	b.n	8015358 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 fae0 	bl	8015580 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014fc0:	4b63      	ldr	r3, [pc, #396]	; (8015150 <tcp_process+0x5b8>)
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d005      	beq.n	8014fd4 <tcp_process+0x43c>
            recv_acked--;
 8014fc8:	4b61      	ldr	r3, [pc, #388]	; (8015150 <tcp_process+0x5b8>)
 8014fca:	881b      	ldrh	r3, [r3, #0]
 8014fcc:	3b01      	subs	r3, #1
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	4b5f      	ldr	r3, [pc, #380]	; (8015150 <tcp_process+0x5b8>)
 8014fd2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fd8:	009a      	lsls	r2, r3, #2
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	f241 111c 	movw	r1, #4380	; 0x111c
 8014fe4:	428b      	cmp	r3, r1
 8014fe6:	bf38      	it	cc
 8014fe8:	460b      	movcc	r3, r1
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d204      	bcs.n	8014ff8 <tcp_process+0x460>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	e00d      	b.n	8015014 <tcp_process+0x47c>
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ffc:	005b      	lsls	r3, r3, #1
 8014ffe:	f241 121c 	movw	r2, #4380	; 0x111c
 8015002:	4293      	cmp	r3, r2
 8015004:	d904      	bls.n	8015010 <tcp_process+0x478>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801500a:	005b      	lsls	r3, r3, #1
 801500c:	b29b      	uxth	r3, r3
 801500e:	e001      	b.n	8015014 <tcp_process+0x47c>
 8015010:	f241 131c 	movw	r3, #4380	; 0x111c
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801501a:	4b4e      	ldr	r3, [pc, #312]	; (8015154 <tcp_process+0x5bc>)
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	f003 0320 	and.w	r3, r3, #32
 8015022:	2b00      	cmp	r3, #0
 8015024:	d037      	beq.n	8015096 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	8b5b      	ldrh	r3, [r3, #26]
 801502a:	f043 0302 	orr.w	r3, r3, #2
 801502e:	b29a      	uxth	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2207      	movs	r2, #7
 8015038:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801503a:	e02c      	b.n	8015096 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801503c:	4b3b      	ldr	r3, [pc, #236]	; (801512c <tcp_process+0x594>)
 801503e:	6819      	ldr	r1, [r3, #0]
 8015040:	4b3b      	ldr	r3, [pc, #236]	; (8015130 <tcp_process+0x598>)
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	461a      	mov	r2, r3
 8015046:	4b3b      	ldr	r3, [pc, #236]	; (8015134 <tcp_process+0x59c>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801504c:	4b3a      	ldr	r3, [pc, #232]	; (8015138 <tcp_process+0x5a0>)
 801504e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015050:	885b      	ldrh	r3, [r3, #2]
 8015052:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015054:	4a38      	ldr	r2, [pc, #224]	; (8015138 <tcp_process+0x5a0>)
 8015056:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015058:	8812      	ldrh	r2, [r2, #0]
 801505a:	b292      	uxth	r2, r2
 801505c:	9202      	str	r2, [sp, #8]
 801505e:	9301      	str	r3, [sp, #4]
 8015060:	4b36      	ldr	r3, [pc, #216]	; (801513c <tcp_process+0x5a4>)
 8015062:	9300      	str	r3, [sp, #0]
 8015064:	4b36      	ldr	r3, [pc, #216]	; (8015140 <tcp_process+0x5a8>)
 8015066:	4602      	mov	r2, r0
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f003 f829 	bl	80180c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801506e:	e167      	b.n	8015340 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015070:	4b2d      	ldr	r3, [pc, #180]	; (8015128 <tcp_process+0x590>)
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	f003 0302 	and.w	r3, r3, #2
 8015078:	2b00      	cmp	r3, #0
 801507a:	f000 8161 	beq.w	8015340 <tcp_process+0x7a8>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015082:	1e5a      	subs	r2, r3, #1
 8015084:	4b2b      	ldr	r3, [pc, #172]	; (8015134 <tcp_process+0x59c>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	429a      	cmp	r2, r3
 801508a:	f040 8159 	bne.w	8015340 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f002 fe10 	bl	8017cb4 <tcp_rexmit>
      break;
 8015094:	e154      	b.n	8015340 <tcp_process+0x7a8>
 8015096:	e153      	b.n	8015340 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f000 fa71 	bl	8015580 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801509e:	4b2d      	ldr	r3, [pc, #180]	; (8015154 <tcp_process+0x5bc>)
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	f003 0320 	and.w	r3, r3, #32
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	f000 814c 	beq.w	8015344 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	8b5b      	ldrh	r3, [r3, #26]
 80150b0:	f043 0302 	orr.w	r3, r3, #2
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2207      	movs	r2, #7
 80150be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80150c0:	e140      	b.n	8015344 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f000 fa5c 	bl	8015580 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80150c8:	4b22      	ldr	r3, [pc, #136]	; (8015154 <tcp_process+0x5bc>)
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	f003 0320 	and.w	r3, r3, #32
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d071      	beq.n	80151b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80150d4:	4b14      	ldr	r3, [pc, #80]	; (8015128 <tcp_process+0x590>)
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	f003 0310 	and.w	r3, r3, #16
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d060      	beq.n	80151a2 <tcp_process+0x60a>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150e4:	4b11      	ldr	r3, [pc, #68]	; (801512c <tcp_process+0x594>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d15a      	bne.n	80151a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d156      	bne.n	80151a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	8b5b      	ldrh	r3, [r3, #26]
 80150f8:	f043 0302 	orr.w	r3, r3, #2
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f7fe fdbc 	bl	8013c80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015108:	4b13      	ldr	r3, [pc, #76]	; (8015158 <tcp_process+0x5c0>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	429a      	cmp	r2, r3
 8015110:	d105      	bne.n	801511e <tcp_process+0x586>
 8015112:	4b11      	ldr	r3, [pc, #68]	; (8015158 <tcp_process+0x5c0>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	4a0f      	ldr	r2, [pc, #60]	; (8015158 <tcp_process+0x5c0>)
 801511a:	6013      	str	r3, [r2, #0]
 801511c:	e02e      	b.n	801517c <tcp_process+0x5e4>
 801511e:	4b0e      	ldr	r3, [pc, #56]	; (8015158 <tcp_process+0x5c0>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	617b      	str	r3, [r7, #20]
 8015124:	e027      	b.n	8015176 <tcp_process+0x5de>
 8015126:	bf00      	nop
 8015128:	2000b020 	.word	0x2000b020
 801512c:	2000b018 	.word	0x2000b018
 8015130:	2000b01e 	.word	0x2000b01e
 8015134:	2000b014 	.word	0x2000b014
 8015138:	2000b004 	.word	0x2000b004
 801513c:	200042c4 	.word	0x200042c4
 8015140:	200042c8 	.word	0x200042c8
 8015144:	0801de24 	.word	0x0801de24
 8015148:	0801e0c4 	.word	0x0801e0c4
 801514c:	0801de70 	.word	0x0801de70
 8015150:	2000b01c 	.word	0x2000b01c
 8015154:	2000b021 	.word	0x2000b021
 8015158:	2000afe8 	.word	0x2000afe8
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	68db      	ldr	r3, [r3, #12]
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	429a      	cmp	r2, r3
 8015164:	d104      	bne.n	8015170 <tcp_process+0x5d8>
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	68da      	ldr	r2, [r3, #12]
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	60da      	str	r2, [r3, #12]
 801516e:	e005      	b.n	801517c <tcp_process+0x5e4>
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	617b      	str	r3, [r7, #20]
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d1ef      	bne.n	801515c <tcp_process+0x5c4>
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	60da      	str	r2, [r3, #12]
 8015182:	4b77      	ldr	r3, [pc, #476]	; (8015360 <tcp_process+0x7c8>)
 8015184:	2201      	movs	r2, #1
 8015186:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	220a      	movs	r2, #10
 801518c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801518e:	4b75      	ldr	r3, [pc, #468]	; (8015364 <tcp_process+0x7cc>)
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	60da      	str	r2, [r3, #12]
 8015196:	4a73      	ldr	r2, [pc, #460]	; (8015364 <tcp_process+0x7cc>)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6013      	str	r3, [r2, #0]
 801519c:	f003 f952 	bl	8018444 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80151a0:	e0d2      	b.n	8015348 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	8b5b      	ldrh	r3, [r3, #26]
 80151a6:	f043 0302 	orr.w	r3, r3, #2
 80151aa:	b29a      	uxth	r2, r3
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2208      	movs	r2, #8
 80151b4:	751a      	strb	r2, [r3, #20]
      break;
 80151b6:	e0c7      	b.n	8015348 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80151b8:	4b6b      	ldr	r3, [pc, #428]	; (8015368 <tcp_process+0x7d0>)
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	f003 0310 	and.w	r3, r3, #16
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	f000 80c1 	beq.w	8015348 <tcp_process+0x7b0>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80151ca:	4b68      	ldr	r3, [pc, #416]	; (801536c <tcp_process+0x7d4>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	f040 80ba 	bne.w	8015348 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80151d8:	2b00      	cmp	r3, #0
 80151da:	f040 80b5 	bne.w	8015348 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	2206      	movs	r2, #6
 80151e2:	751a      	strb	r2, [r3, #20]
      break;
 80151e4:	e0b0      	b.n	8015348 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f000 f9ca 	bl	8015580 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80151ec:	4b60      	ldr	r3, [pc, #384]	; (8015370 <tcp_process+0x7d8>)
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	f003 0320 	and.w	r3, r3, #32
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	f000 80a9 	beq.w	801534c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	8b5b      	ldrh	r3, [r3, #26]
 80151fe:	f043 0302 	orr.w	r3, r3, #2
 8015202:	b29a      	uxth	r2, r3
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f7fe fd39 	bl	8013c80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801520e:	4b59      	ldr	r3, [pc, #356]	; (8015374 <tcp_process+0x7dc>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	429a      	cmp	r2, r3
 8015216:	d105      	bne.n	8015224 <tcp_process+0x68c>
 8015218:	4b56      	ldr	r3, [pc, #344]	; (8015374 <tcp_process+0x7dc>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	68db      	ldr	r3, [r3, #12]
 801521e:	4a55      	ldr	r2, [pc, #340]	; (8015374 <tcp_process+0x7dc>)
 8015220:	6013      	str	r3, [r2, #0]
 8015222:	e013      	b.n	801524c <tcp_process+0x6b4>
 8015224:	4b53      	ldr	r3, [pc, #332]	; (8015374 <tcp_process+0x7dc>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	613b      	str	r3, [r7, #16]
 801522a:	e00c      	b.n	8015246 <tcp_process+0x6ae>
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	429a      	cmp	r2, r3
 8015234:	d104      	bne.n	8015240 <tcp_process+0x6a8>
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	68da      	ldr	r2, [r3, #12]
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	60da      	str	r2, [r3, #12]
 801523e:	e005      	b.n	801524c <tcp_process+0x6b4>
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	613b      	str	r3, [r7, #16]
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d1ef      	bne.n	801522c <tcp_process+0x694>
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2200      	movs	r2, #0
 8015250:	60da      	str	r2, [r3, #12]
 8015252:	4b43      	ldr	r3, [pc, #268]	; (8015360 <tcp_process+0x7c8>)
 8015254:	2201      	movs	r2, #1
 8015256:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	220a      	movs	r2, #10
 801525c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801525e:	4b41      	ldr	r3, [pc, #260]	; (8015364 <tcp_process+0x7cc>)
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	60da      	str	r2, [r3, #12]
 8015266:	4a3f      	ldr	r2, [pc, #252]	; (8015364 <tcp_process+0x7cc>)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6013      	str	r3, [r2, #0]
 801526c:	f003 f8ea 	bl	8018444 <tcp_timer_needed>
      }
      break;
 8015270:	e06c      	b.n	801534c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f000 f984 	bl	8015580 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015278:	4b3b      	ldr	r3, [pc, #236]	; (8015368 <tcp_process+0x7d0>)
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	f003 0310 	and.w	r3, r3, #16
 8015280:	2b00      	cmp	r3, #0
 8015282:	d065      	beq.n	8015350 <tcp_process+0x7b8>
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015288:	4b38      	ldr	r3, [pc, #224]	; (801536c <tcp_process+0x7d4>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	429a      	cmp	r2, r3
 801528e:	d15f      	bne.n	8015350 <tcp_process+0x7b8>
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015294:	2b00      	cmp	r3, #0
 8015296:	d15b      	bne.n	8015350 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f7fe fcf1 	bl	8013c80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801529e:	4b35      	ldr	r3, [pc, #212]	; (8015374 <tcp_process+0x7dc>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d105      	bne.n	80152b4 <tcp_process+0x71c>
 80152a8:	4b32      	ldr	r3, [pc, #200]	; (8015374 <tcp_process+0x7dc>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	68db      	ldr	r3, [r3, #12]
 80152ae:	4a31      	ldr	r2, [pc, #196]	; (8015374 <tcp_process+0x7dc>)
 80152b0:	6013      	str	r3, [r2, #0]
 80152b2:	e013      	b.n	80152dc <tcp_process+0x744>
 80152b4:	4b2f      	ldr	r3, [pc, #188]	; (8015374 <tcp_process+0x7dc>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	60fb      	str	r3, [r7, #12]
 80152ba:	e00c      	b.n	80152d6 <tcp_process+0x73e>
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	687a      	ldr	r2, [r7, #4]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d104      	bne.n	80152d0 <tcp_process+0x738>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	68da      	ldr	r2, [r3, #12]
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	60da      	str	r2, [r3, #12]
 80152ce:	e005      	b.n	80152dc <tcp_process+0x744>
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	60fb      	str	r3, [r7, #12]
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d1ef      	bne.n	80152bc <tcp_process+0x724>
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2200      	movs	r2, #0
 80152e0:	60da      	str	r2, [r3, #12]
 80152e2:	4b1f      	ldr	r3, [pc, #124]	; (8015360 <tcp_process+0x7c8>)
 80152e4:	2201      	movs	r2, #1
 80152e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	220a      	movs	r2, #10
 80152ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80152ee:	4b1d      	ldr	r3, [pc, #116]	; (8015364 <tcp_process+0x7cc>)
 80152f0:	681a      	ldr	r2, [r3, #0]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	60da      	str	r2, [r3, #12]
 80152f6:	4a1b      	ldr	r2, [pc, #108]	; (8015364 <tcp_process+0x7cc>)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6013      	str	r3, [r2, #0]
 80152fc:	f003 f8a2 	bl	8018444 <tcp_timer_needed>
      }
      break;
 8015300:	e026      	b.n	8015350 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 f93c 	bl	8015580 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015308:	4b17      	ldr	r3, [pc, #92]	; (8015368 <tcp_process+0x7d0>)
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	f003 0310 	and.w	r3, r3, #16
 8015310:	2b00      	cmp	r3, #0
 8015312:	d01f      	beq.n	8015354 <tcp_process+0x7bc>
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015318:	4b14      	ldr	r3, [pc, #80]	; (801536c <tcp_process+0x7d4>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	429a      	cmp	r2, r3
 801531e:	d119      	bne.n	8015354 <tcp_process+0x7bc>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015324:	2b00      	cmp	r3, #0
 8015326:	d115      	bne.n	8015354 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015328:	4b11      	ldr	r3, [pc, #68]	; (8015370 <tcp_process+0x7d8>)
 801532a:	781b      	ldrb	r3, [r3, #0]
 801532c:	f043 0310 	orr.w	r3, r3, #16
 8015330:	b2da      	uxtb	r2, r3
 8015332:	4b0f      	ldr	r3, [pc, #60]	; (8015370 <tcp_process+0x7d8>)
 8015334:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015336:	e00d      	b.n	8015354 <tcp_process+0x7bc>
    default:
      break;
 8015338:	bf00      	nop
 801533a:	e00c      	b.n	8015356 <tcp_process+0x7be>
      break;
 801533c:	bf00      	nop
 801533e:	e00a      	b.n	8015356 <tcp_process+0x7be>
      break;
 8015340:	bf00      	nop
 8015342:	e008      	b.n	8015356 <tcp_process+0x7be>
      break;
 8015344:	bf00      	nop
 8015346:	e006      	b.n	8015356 <tcp_process+0x7be>
      break;
 8015348:	bf00      	nop
 801534a:	e004      	b.n	8015356 <tcp_process+0x7be>
      break;
 801534c:	bf00      	nop
 801534e:	e002      	b.n	8015356 <tcp_process+0x7be>
      break;
 8015350:	bf00      	nop
 8015352:	e000      	b.n	8015356 <tcp_process+0x7be>
      break;
 8015354:	bf00      	nop
  }
  return ERR_OK;
 8015356:	2300      	movs	r3, #0
}
 8015358:	4618      	mov	r0, r3
 801535a:	3724      	adds	r7, #36	; 0x24
 801535c:	46bd      	mov	sp, r7
 801535e:	bd90      	pop	{r4, r7, pc}
 8015360:	2000aff0 	.word	0x2000aff0
 8015364:	2000afec 	.word	0x2000afec
 8015368:	2000b020 	.word	0x2000b020
 801536c:	2000b018 	.word	0x2000b018
 8015370:	2000b021 	.word	0x2000b021
 8015374:	2000afe8 	.word	0x2000afe8

08015378 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015378:	b590      	push	{r4, r7, lr}
 801537a:	b085      	sub	sp, #20
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d106      	bne.n	8015396 <tcp_oos_insert_segment+0x1e>
 8015388:	4b3b      	ldr	r3, [pc, #236]	; (8015478 <tcp_oos_insert_segment+0x100>)
 801538a:	f240 421f 	movw	r2, #1055	; 0x41f
 801538e:	493b      	ldr	r1, [pc, #236]	; (801547c <tcp_oos_insert_segment+0x104>)
 8015390:	483b      	ldr	r0, [pc, #236]	; (8015480 <tcp_oos_insert_segment+0x108>)
 8015392:	f006 f997 	bl	801b6c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	68db      	ldr	r3, [r3, #12]
 801539a:	899b      	ldrh	r3, [r3, #12]
 801539c:	b29b      	uxth	r3, r3
 801539e:	4618      	mov	r0, r3
 80153a0:	f7fb fa15 	bl	80107ce <lwip_htons>
 80153a4:	4603      	mov	r3, r0
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	f003 0301 	and.w	r3, r3, #1
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d028      	beq.n	8015402 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80153b0:	6838      	ldr	r0, [r7, #0]
 80153b2:	f7fe f995 	bl	80136e0 <tcp_segs_free>
    next = NULL;
 80153b6:	2300      	movs	r3, #0
 80153b8:	603b      	str	r3, [r7, #0]
 80153ba:	e056      	b.n	801546a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	899b      	ldrh	r3, [r3, #12]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7fb fa02 	bl	80107ce <lwip_htons>
 80153ca:	4603      	mov	r3, r0
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	f003 0301 	and.w	r3, r3, #1
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d00d      	beq.n	80153f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	68db      	ldr	r3, [r3, #12]
 80153da:	899b      	ldrh	r3, [r3, #12]
 80153dc:	b29c      	uxth	r4, r3
 80153de:	2001      	movs	r0, #1
 80153e0:	f7fb f9f5 	bl	80107ce <lwip_htons>
 80153e4:	4603      	mov	r3, r0
 80153e6:	461a      	mov	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	4322      	orrs	r2, r4
 80153ee:	b292      	uxth	r2, r2
 80153f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f7fe f984 	bl	801370a <tcp_seg_free>
    while (next &&
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d00e      	beq.n	8015426 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	891b      	ldrh	r3, [r3, #8]
 801540c:	461a      	mov	r2, r3
 801540e:	4b1d      	ldr	r3, [pc, #116]	; (8015484 <tcp_oos_insert_segment+0x10c>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	441a      	add	r2, r3
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	68db      	ldr	r3, [r3, #12]
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	6839      	ldr	r1, [r7, #0]
 801541c:	8909      	ldrh	r1, [r1, #8]
 801541e:	440b      	add	r3, r1
 8015420:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015422:	2b00      	cmp	r3, #0
 8015424:	daca      	bge.n	80153bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d01e      	beq.n	801546a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	891b      	ldrh	r3, [r3, #8]
 8015430:	461a      	mov	r2, r3
 8015432:	4b14      	ldr	r3, [pc, #80]	; (8015484 <tcp_oos_insert_segment+0x10c>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	441a      	add	r2, r3
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015440:	2b00      	cmp	r3, #0
 8015442:	dd12      	ble.n	801546a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	68db      	ldr	r3, [r3, #12]
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	b29a      	uxth	r2, r3
 801544c:	4b0d      	ldr	r3, [pc, #52]	; (8015484 <tcp_oos_insert_segment+0x10c>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	b29b      	uxth	r3, r3
 8015452:	1ad3      	subs	r3, r2, r3
 8015454:	b29a      	uxth	r2, r3
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	685a      	ldr	r2, [r3, #4]
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	891b      	ldrh	r3, [r3, #8]
 8015462:	4619      	mov	r1, r3
 8015464:	4610      	mov	r0, r2
 8015466:	f7fc fbf5 	bl	8011c54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	683a      	ldr	r2, [r7, #0]
 801546e:	601a      	str	r2, [r3, #0]
}
 8015470:	bf00      	nop
 8015472:	3714      	adds	r7, #20
 8015474:	46bd      	mov	sp, r7
 8015476:	bd90      	pop	{r4, r7, pc}
 8015478:	0801de24 	.word	0x0801de24
 801547c:	0801e0e4 	.word	0x0801e0e4
 8015480:	0801de70 	.word	0x0801de70
 8015484:	2000b014 	.word	0x2000b014

08015488 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015488:	b5b0      	push	{r4, r5, r7, lr}
 801548a:	b086      	sub	sp, #24
 801548c:	af00      	add	r7, sp, #0
 801548e:	60f8      	str	r0, [r7, #12]
 8015490:	60b9      	str	r1, [r7, #8]
 8015492:	607a      	str	r2, [r7, #4]
 8015494:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015496:	e03e      	b.n	8015516 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fc fde2 	bl	8012070 <pbuf_clen>
 80154ac:	4603      	mov	r3, r0
 80154ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154b6:	8a7a      	ldrh	r2, [r7, #18]
 80154b8:	429a      	cmp	r2, r3
 80154ba:	d906      	bls.n	80154ca <tcp_free_acked_segments+0x42>
 80154bc:	4b2a      	ldr	r3, [pc, #168]	; (8015568 <tcp_free_acked_segments+0xe0>)
 80154be:	f240 4257 	movw	r2, #1111	; 0x457
 80154c2:	492a      	ldr	r1, [pc, #168]	; (801556c <tcp_free_acked_segments+0xe4>)
 80154c4:	482a      	ldr	r0, [pc, #168]	; (8015570 <tcp_free_acked_segments+0xe8>)
 80154c6:	f006 f8fd 	bl	801b6c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80154d0:	8a7b      	ldrh	r3, [r7, #18]
 80154d2:	1ad3      	subs	r3, r2, r3
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	891a      	ldrh	r2, [r3, #8]
 80154e0:	4b24      	ldr	r3, [pc, #144]	; (8015574 <tcp_free_acked_segments+0xec>)
 80154e2:	881b      	ldrh	r3, [r3, #0]
 80154e4:	4413      	add	r3, r2
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	4b22      	ldr	r3, [pc, #136]	; (8015574 <tcp_free_acked_segments+0xec>)
 80154ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80154ec:	6978      	ldr	r0, [r7, #20]
 80154ee:	f7fe f90c 	bl	801370a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d00c      	beq.n	8015516 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d109      	bne.n	8015516 <tcp_free_acked_segments+0x8e>
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d106      	bne.n	8015516 <tcp_free_acked_segments+0x8e>
 8015508:	4b17      	ldr	r3, [pc, #92]	; (8015568 <tcp_free_acked_segments+0xe0>)
 801550a:	f240 4261 	movw	r2, #1121	; 0x461
 801550e:	491a      	ldr	r1, [pc, #104]	; (8015578 <tcp_free_acked_segments+0xf0>)
 8015510:	4817      	ldr	r0, [pc, #92]	; (8015570 <tcp_free_acked_segments+0xe8>)
 8015512:	f006 f8d7 	bl	801b6c4 <iprintf>
  while (seg_list != NULL &&
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d020      	beq.n	801555e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	4618      	mov	r0, r3
 8015524:	f7fb f968 	bl	80107f8 <lwip_htonl>
 8015528:	4604      	mov	r4, r0
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	891b      	ldrh	r3, [r3, #8]
 801552e:	461d      	mov	r5, r3
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	899b      	ldrh	r3, [r3, #12]
 8015536:	b29b      	uxth	r3, r3
 8015538:	4618      	mov	r0, r3
 801553a:	f7fb f948 	bl	80107ce <lwip_htons>
 801553e:	4603      	mov	r3, r0
 8015540:	b2db      	uxtb	r3, r3
 8015542:	f003 0303 	and.w	r3, r3, #3
 8015546:	2b00      	cmp	r3, #0
 8015548:	d001      	beq.n	801554e <tcp_free_acked_segments+0xc6>
 801554a:	2301      	movs	r3, #1
 801554c:	e000      	b.n	8015550 <tcp_free_acked_segments+0xc8>
 801554e:	2300      	movs	r3, #0
 8015550:	442b      	add	r3, r5
 8015552:	18e2      	adds	r2, r4, r3
 8015554:	4b09      	ldr	r3, [pc, #36]	; (801557c <tcp_free_acked_segments+0xf4>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801555a:	2b00      	cmp	r3, #0
 801555c:	dd9c      	ble.n	8015498 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801555e:	68bb      	ldr	r3, [r7, #8]
}
 8015560:	4618      	mov	r0, r3
 8015562:	3718      	adds	r7, #24
 8015564:	46bd      	mov	sp, r7
 8015566:	bdb0      	pop	{r4, r5, r7, pc}
 8015568:	0801de24 	.word	0x0801de24
 801556c:	0801e10c 	.word	0x0801e10c
 8015570:	0801de70 	.word	0x0801de70
 8015574:	2000b01c 	.word	0x2000b01c
 8015578:	0801e134 	.word	0x0801e134
 801557c:	2000b018 	.word	0x2000b018

08015580 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015580:	b5b0      	push	{r4, r5, r7, lr}
 8015582:	b094      	sub	sp, #80	; 0x50
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d106      	bne.n	80155a0 <tcp_receive+0x20>
 8015592:	4b91      	ldr	r3, [pc, #580]	; (80157d8 <tcp_receive+0x258>)
 8015594:	f240 427b 	movw	r2, #1147	; 0x47b
 8015598:	4990      	ldr	r1, [pc, #576]	; (80157dc <tcp_receive+0x25c>)
 801559a:	4891      	ldr	r0, [pc, #580]	; (80157e0 <tcp_receive+0x260>)
 801559c:	f006 f892 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	7d1b      	ldrb	r3, [r3, #20]
 80155a4:	2b03      	cmp	r3, #3
 80155a6:	d806      	bhi.n	80155b6 <tcp_receive+0x36>
 80155a8:	4b8b      	ldr	r3, [pc, #556]	; (80157d8 <tcp_receive+0x258>)
 80155aa:	f240 427c 	movw	r2, #1148	; 0x47c
 80155ae:	498d      	ldr	r1, [pc, #564]	; (80157e4 <tcp_receive+0x264>)
 80155b0:	488b      	ldr	r0, [pc, #556]	; (80157e0 <tcp_receive+0x260>)
 80155b2:	f006 f887 	bl	801b6c4 <iprintf>

  if (flags & TCP_ACK) {
 80155b6:	4b8c      	ldr	r3, [pc, #560]	; (80157e8 <tcp_receive+0x268>)
 80155b8:	781b      	ldrb	r3, [r3, #0]
 80155ba:	f003 0310 	and.w	r3, r3, #16
 80155be:	2b00      	cmp	r3, #0
 80155c0:	f000 8264 	beq.w	8015a8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80155ca:	461a      	mov	r2, r3
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155d0:	4413      	add	r3, r2
 80155d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80155d8:	4b84      	ldr	r3, [pc, #528]	; (80157ec <tcp_receive+0x26c>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	1ad3      	subs	r3, r2, r3
 80155de:	2b00      	cmp	r3, #0
 80155e0:	db1b      	blt.n	801561a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80155e6:	4b81      	ldr	r3, [pc, #516]	; (80157ec <tcp_receive+0x26c>)
 80155e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d106      	bne.n	80155fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80155f2:	4b7f      	ldr	r3, [pc, #508]	; (80157f0 <tcp_receive+0x270>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	1ad3      	subs	r3, r2, r3
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	db0e      	blt.n	801561a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015600:	4b7b      	ldr	r3, [pc, #492]	; (80157f0 <tcp_receive+0x270>)
 8015602:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015604:	429a      	cmp	r2, r3
 8015606:	d125      	bne.n	8015654 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015608:	4b7a      	ldr	r3, [pc, #488]	; (80157f4 <tcp_receive+0x274>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	89db      	ldrh	r3, [r3, #14]
 801560e:	b29a      	uxth	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015616:	429a      	cmp	r2, r3
 8015618:	d91c      	bls.n	8015654 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801561a:	4b76      	ldr	r3, [pc, #472]	; (80157f4 <tcp_receive+0x274>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	89db      	ldrh	r3, [r3, #14]
 8015620:	b29a      	uxth	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015634:	429a      	cmp	r2, r3
 8015636:	d205      	bcs.n	8015644 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015644:	4b69      	ldr	r3, [pc, #420]	; (80157ec <tcp_receive+0x26c>)
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801564c:	4b68      	ldr	r3, [pc, #416]	; (80157f0 <tcp_receive+0x270>)
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015654:	4b66      	ldr	r3, [pc, #408]	; (80157f0 <tcp_receive+0x270>)
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801565c:	1ad3      	subs	r3, r2, r3
 801565e:	2b00      	cmp	r3, #0
 8015660:	dc58      	bgt.n	8015714 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015662:	4b65      	ldr	r3, [pc, #404]	; (80157f8 <tcp_receive+0x278>)
 8015664:	881b      	ldrh	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d14b      	bne.n	8015702 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015674:	4413      	add	r3, r2
 8015676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015678:	429a      	cmp	r2, r3
 801567a:	d142      	bne.n	8015702 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015682:	2b00      	cmp	r3, #0
 8015684:	db3d      	blt.n	8015702 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801568a:	4b59      	ldr	r3, [pc, #356]	; (80157f0 <tcp_receive+0x270>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	429a      	cmp	r2, r3
 8015690:	d137      	bne.n	8015702 <tcp_receive+0x182>
              found_dupack = 1;
 8015692:	2301      	movs	r3, #1
 8015694:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801569c:	2bff      	cmp	r3, #255	; 0xff
 801569e:	d007      	beq.n	80156b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156a6:	3301      	adds	r3, #1
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156b6:	2b03      	cmp	r3, #3
 80156b8:	d91b      	bls.n	80156f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156c4:	4413      	add	r3, r2
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d30a      	bcc.n	80156e8 <tcp_receive+0x168>
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156dc:	4413      	add	r3, r2
 80156de:	b29a      	uxth	r2, r3
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80156e6:	e004      	b.n	80156f2 <tcp_receive+0x172>
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156f8:	2b02      	cmp	r3, #2
 80156fa:	d902      	bls.n	8015702 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f002 fb45 	bl	8017d8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015704:	2b00      	cmp	r3, #0
 8015706:	f040 8161 	bne.w	80159cc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2200      	movs	r2, #0
 801570e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015712:	e15b      	b.n	80159cc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015714:	4b36      	ldr	r3, [pc, #216]	; (80157f0 <tcp_receive+0x270>)
 8015716:	681a      	ldr	r2, [r3, #0]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801571c:	1ad3      	subs	r3, r2, r3
 801571e:	3b01      	subs	r3, #1
 8015720:	2b00      	cmp	r3, #0
 8015722:	f2c0 814e 	blt.w	80159c2 <tcp_receive+0x442>
 8015726:	4b32      	ldr	r3, [pc, #200]	; (80157f0 <tcp_receive+0x270>)
 8015728:	681a      	ldr	r2, [r3, #0]
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801572e:	1ad3      	subs	r3, r2, r3
 8015730:	2b00      	cmp	r3, #0
 8015732:	f300 8146 	bgt.w	80159c2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	8b5b      	ldrh	r3, [r3, #26]
 801573a:	f003 0304 	and.w	r3, r3, #4
 801573e:	2b00      	cmp	r3, #0
 8015740:	d010      	beq.n	8015764 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	8b5b      	ldrh	r3, [r3, #26]
 8015746:	f023 0304 	bic.w	r3, r3, #4
 801574a:	b29a      	uxth	r2, r3
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2200      	movs	r2, #0
 8015760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015772:	10db      	asrs	r3, r3, #3
 8015774:	b21b      	sxth	r3, r3
 8015776:	b29a      	uxth	r2, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801577e:	b29b      	uxth	r3, r3
 8015780:	4413      	add	r3, r2
 8015782:	b29b      	uxth	r3, r3
 8015784:	b21a      	sxth	r2, r3
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801578c:	4b18      	ldr	r3, [pc, #96]	; (80157f0 <tcp_receive+0x270>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	b29a      	uxth	r2, r3
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015796:	b29b      	uxth	r3, r3
 8015798:	1ad3      	subs	r3, r2, r3
 801579a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2200      	movs	r2, #0
 80157a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80157a4:	4b12      	ldr	r3, [pc, #72]	; (80157f0 <tcp_receive+0x270>)
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	7d1b      	ldrb	r3, [r3, #20]
 80157b0:	2b03      	cmp	r3, #3
 80157b2:	f240 8097 	bls.w	80158e4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d245      	bcs.n	8015852 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	8b5b      	ldrh	r3, [r3, #26]
 80157ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d014      	beq.n	80157fc <tcp_receive+0x27c>
 80157d2:	2301      	movs	r3, #1
 80157d4:	e013      	b.n	80157fe <tcp_receive+0x27e>
 80157d6:	bf00      	nop
 80157d8:	0801de24 	.word	0x0801de24
 80157dc:	0801e154 	.word	0x0801e154
 80157e0:	0801de70 	.word	0x0801de70
 80157e4:	0801e170 	.word	0x0801e170
 80157e8:	2000b020 	.word	0x2000b020
 80157ec:	2000b014 	.word	0x2000b014
 80157f0:	2000b018 	.word	0x2000b018
 80157f4:	2000b004 	.word	0x2000b004
 80157f8:	2000b01e 	.word	0x2000b01e
 80157fc:	2302      	movs	r3, #2
 80157fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015802:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015806:	b29a      	uxth	r2, r3
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801580c:	fb12 f303 	smulbb	r3, r2, r3
 8015810:	b29b      	uxth	r3, r3
 8015812:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015814:	4293      	cmp	r3, r2
 8015816:	bf28      	it	cs
 8015818:	4613      	movcs	r3, r2
 801581a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015822:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015824:	4413      	add	r3, r2
 8015826:	b29a      	uxth	r2, r3
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801582e:	429a      	cmp	r2, r3
 8015830:	d309      	bcc.n	8015846 <tcp_receive+0x2c6>
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015838:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801583a:	4413      	add	r3, r2
 801583c:	b29a      	uxth	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015844:	e04e      	b.n	80158e4 <tcp_receive+0x364>
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801584c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015850:	e048      	b.n	80158e4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015858:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801585a:	4413      	add	r3, r2
 801585c:	b29a      	uxth	r2, r3
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015864:	429a      	cmp	r2, r3
 8015866:	d309      	bcc.n	801587c <tcp_receive+0x2fc>
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801586e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015870:	4413      	add	r3, r2
 8015872:	b29a      	uxth	r2, r3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801587a:	e004      	b.n	8015886 <tcp_receive+0x306>
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015892:	429a      	cmp	r2, r3
 8015894:	d326      	bcc.n	80158e4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158a2:	1ad3      	subs	r3, r2, r3
 80158a4:	b29a      	uxth	r2, r3
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158b6:	4413      	add	r3, r2
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d30a      	bcc.n	80158da <tcp_receive+0x35a>
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158ce:	4413      	add	r3, r2
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80158d8:	e004      	b.n	80158e4 <tcp_receive+0x364>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158ec:	4a98      	ldr	r2, [pc, #608]	; (8015b50 <tcp_receive+0x5d0>)
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f7ff fdca 	bl	8015488 <tcp_free_acked_segments>
 80158f4:	4602      	mov	r2, r0
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015902:	4a94      	ldr	r2, [pc, #592]	; (8015b54 <tcp_receive+0x5d4>)
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f7ff fdbf 	bl	8015488 <tcp_free_acked_segments>
 801590a:	4602      	mov	r2, r0
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015914:	2b00      	cmp	r3, #0
 8015916:	d104      	bne.n	8015922 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801591e:	861a      	strh	r2, [r3, #48]	; 0x30
 8015920:	e002      	b.n	8015928 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2200      	movs	r2, #0
 8015926:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2200      	movs	r2, #0
 801592c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015932:	2b00      	cmp	r3, #0
 8015934:	d103      	bne.n	801593e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2200      	movs	r2, #0
 801593a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015944:	4b84      	ldr	r3, [pc, #528]	; (8015b58 <tcp_receive+0x5d8>)
 8015946:	881b      	ldrh	r3, [r3, #0]
 8015948:	4413      	add	r3, r2
 801594a:	b29a      	uxth	r2, r3
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	8b5b      	ldrh	r3, [r3, #26]
 8015956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801595a:	2b00      	cmp	r3, #0
 801595c:	d035      	beq.n	80159ca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015962:	2b00      	cmp	r3, #0
 8015964:	d118      	bne.n	8015998 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00c      	beq.n	8015988 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015976:	68db      	ldr	r3, [r3, #12]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	4618      	mov	r0, r3
 801597c:	f7fa ff3c 	bl	80107f8 <lwip_htonl>
 8015980:	4603      	mov	r3, r0
 8015982:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015984:	2b00      	cmp	r3, #0
 8015986:	dc20      	bgt.n	80159ca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	8b5b      	ldrh	r3, [r3, #26]
 801598c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015990:	b29a      	uxth	r2, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015996:	e018      	b.n	80159ca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7fa ff27 	bl	80107f8 <lwip_htonl>
 80159aa:	4603      	mov	r3, r0
 80159ac:	1ae3      	subs	r3, r4, r3
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	dc0b      	bgt.n	80159ca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	8b5b      	ldrh	r3, [r3, #26]
 80159b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159c0:	e003      	b.n	80159ca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f002 fbce 	bl	8018164 <tcp_send_empty_ack>
 80159c8:	e000      	b.n	80159cc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159ca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d05b      	beq.n	8015a8c <tcp_receive+0x50c>
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80159d8:	4b60      	ldr	r3, [pc, #384]	; (8015b5c <tcp_receive+0x5dc>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	1ad3      	subs	r3, r2, r3
 80159de:	2b00      	cmp	r3, #0
 80159e0:	da54      	bge.n	8015a8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80159e2:	4b5f      	ldr	r3, [pc, #380]	; (8015b60 <tcp_receive+0x5e0>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	b29a      	uxth	r2, r3
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	1ad3      	subs	r3, r2, r3
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80159f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a00:	10db      	asrs	r3, r3, #3
 8015a02:	b21b      	sxth	r3, r3
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	b29b      	uxth	r3, r3
 8015a0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a14:	b29a      	uxth	r2, r3
 8015a16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a1a:	4413      	add	r3, r2
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	b21a      	sxth	r2, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015a24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	da05      	bge.n	8015a38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015a2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a30:	425b      	negs	r3, r3
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015a38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a42:	109b      	asrs	r3, r3, #2
 8015a44:	b21b      	sxth	r3, r3
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	1ad3      	subs	r3, r2, r3
 8015a4a:	b29b      	uxth	r3, r3
 8015a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a56:	b29a      	uxth	r2, r3
 8015a58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a5c:	4413      	add	r3, r2
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	b21a      	sxth	r2, r3
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a6c:	10db      	asrs	r3, r3, #3
 8015a6e:	b21b      	sxth	r3, r3
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	4413      	add	r3, r2
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	b21a      	sxth	r2, r3
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015a8c:	4b35      	ldr	r3, [pc, #212]	; (8015b64 <tcp_receive+0x5e4>)
 8015a8e:	881b      	ldrh	r3, [r3, #0]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	f000 84e2 	beq.w	801645a <tcp_receive+0xeda>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	7d1b      	ldrb	r3, [r3, #20]
 8015a9a:	2b06      	cmp	r3, #6
 8015a9c:	f200 84dd 	bhi.w	801645a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015aa4:	4b30      	ldr	r3, [pc, #192]	; (8015b68 <tcp_receive+0x5e8>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	1ad3      	subs	r3, r2, r3
 8015aaa:	3b01      	subs	r3, #1
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	f2c0 808f 	blt.w	8015bd0 <tcp_receive+0x650>
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ab6:	4b2b      	ldr	r3, [pc, #172]	; (8015b64 <tcp_receive+0x5e4>)
 8015ab8:	881b      	ldrh	r3, [r3, #0]
 8015aba:	4619      	mov	r1, r3
 8015abc:	4b2a      	ldr	r3, [pc, #168]	; (8015b68 <tcp_receive+0x5e8>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	440b      	add	r3, r1
 8015ac2:	1ad3      	subs	r3, r2, r3
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	f300 8082 	bgt.w	8015bd0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015acc:	4b27      	ldr	r3, [pc, #156]	; (8015b6c <tcp_receive+0x5ec>)
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ad6:	4b24      	ldr	r3, [pc, #144]	; (8015b68 <tcp_receive+0x5e8>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	1ad3      	subs	r3, r2, r3
 8015adc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015ade:	4b23      	ldr	r3, [pc, #140]	; (8015b6c <tcp_receive+0x5ec>)
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d106      	bne.n	8015af4 <tcp_receive+0x574>
 8015ae6:	4b22      	ldr	r3, [pc, #136]	; (8015b70 <tcp_receive+0x5f0>)
 8015ae8:	f240 5294 	movw	r2, #1428	; 0x594
 8015aec:	4921      	ldr	r1, [pc, #132]	; (8015b74 <tcp_receive+0x5f4>)
 8015aee:	4822      	ldr	r0, [pc, #136]	; (8015b78 <tcp_receive+0x5f8>)
 8015af0:	f005 fde8 	bl	801b6c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d906      	bls.n	8015b0c <tcp_receive+0x58c>
 8015afe:	4b1c      	ldr	r3, [pc, #112]	; (8015b70 <tcp_receive+0x5f0>)
 8015b00:	f240 5295 	movw	r2, #1429	; 0x595
 8015b04:	491d      	ldr	r1, [pc, #116]	; (8015b7c <tcp_receive+0x5fc>)
 8015b06:	481c      	ldr	r0, [pc, #112]	; (8015b78 <tcp_receive+0x5f8>)
 8015b08:	f005 fddc 	bl	801b6c4 <iprintf>
      off = (u16_t)off32;
 8015b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015b12:	4b16      	ldr	r3, [pc, #88]	; (8015b6c <tcp_receive+0x5ec>)
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	891b      	ldrh	r3, [r3, #8]
 8015b18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d906      	bls.n	8015b2e <tcp_receive+0x5ae>
 8015b20:	4b13      	ldr	r3, [pc, #76]	; (8015b70 <tcp_receive+0x5f0>)
 8015b22:	f240 5297 	movw	r2, #1431	; 0x597
 8015b26:	4916      	ldr	r1, [pc, #88]	; (8015b80 <tcp_receive+0x600>)
 8015b28:	4813      	ldr	r0, [pc, #76]	; (8015b78 <tcp_receive+0x5f8>)
 8015b2a:	f005 fdcb 	bl	801b6c4 <iprintf>
      inseg.len -= off;
 8015b2e:	4b0f      	ldr	r3, [pc, #60]	; (8015b6c <tcp_receive+0x5ec>)
 8015b30:	891a      	ldrh	r2, [r3, #8]
 8015b32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b36:	1ad3      	subs	r3, r2, r3
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	4b0c      	ldr	r3, [pc, #48]	; (8015b6c <tcp_receive+0x5ec>)
 8015b3c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015b3e:	4b0b      	ldr	r3, [pc, #44]	; (8015b6c <tcp_receive+0x5ec>)
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	891a      	ldrh	r2, [r3, #8]
 8015b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b48:	1ad3      	subs	r3, r2, r3
 8015b4a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015b4c:	e02a      	b.n	8015ba4 <tcp_receive+0x624>
 8015b4e:	bf00      	nop
 8015b50:	0801e18c 	.word	0x0801e18c
 8015b54:	0801e194 	.word	0x0801e194
 8015b58:	2000b01c 	.word	0x2000b01c
 8015b5c:	2000b018 	.word	0x2000b018
 8015b60:	2000afdc 	.word	0x2000afdc
 8015b64:	2000b01e 	.word	0x2000b01e
 8015b68:	2000b014 	.word	0x2000b014
 8015b6c:	2000aff4 	.word	0x2000aff4
 8015b70:	0801de24 	.word	0x0801de24
 8015b74:	0801e19c 	.word	0x0801e19c
 8015b78:	0801de70 	.word	0x0801de70
 8015b7c:	0801e1ac 	.word	0x0801e1ac
 8015b80:	0801e1bc 	.word	0x0801e1bc
        off -= p->len;
 8015b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b86:	895b      	ldrh	r3, [r3, #10]
 8015b88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b8c:	1ad3      	subs	r3, r2, r3
 8015b8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015b96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ba6:	895b      	ldrh	r3, [r3, #10]
 8015ba8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d8e9      	bhi.n	8015b84 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015bb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015bb8:	f7fc f94c 	bl	8011e54 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc0:	4a91      	ldr	r2, [pc, #580]	; (8015e08 <tcp_receive+0x888>)
 8015bc2:	6013      	str	r3, [r2, #0]
 8015bc4:	4b91      	ldr	r3, [pc, #580]	; (8015e0c <tcp_receive+0x88c>)
 8015bc6:	68db      	ldr	r3, [r3, #12]
 8015bc8:	4a8f      	ldr	r2, [pc, #572]	; (8015e08 <tcp_receive+0x888>)
 8015bca:	6812      	ldr	r2, [r2, #0]
 8015bcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015bce:	e00d      	b.n	8015bec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015bd0:	4b8d      	ldr	r3, [pc, #564]	; (8015e08 <tcp_receive+0x888>)
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd8:	1ad3      	subs	r3, r2, r3
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	da06      	bge.n	8015bec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	8b5b      	ldrh	r3, [r3, #26]
 8015be2:	f043 0302 	orr.w	r3, r3, #2
 8015be6:	b29a      	uxth	r2, r3
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015bec:	4b86      	ldr	r3, [pc, #536]	; (8015e08 <tcp_receive+0x888>)
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf4:	1ad3      	subs	r3, r2, r3
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	f2c0 842a 	blt.w	8016450 <tcp_receive+0xed0>
 8015bfc:	4b82      	ldr	r3, [pc, #520]	; (8015e08 <tcp_receive+0x888>)
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c04:	6879      	ldr	r1, [r7, #4]
 8015c06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c08:	440b      	add	r3, r1
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	3301      	adds	r3, #1
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	f300 841e 	bgt.w	8016450 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c18:	4b7b      	ldr	r3, [pc, #492]	; (8015e08 <tcp_receive+0x888>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	f040 829a 	bne.w	8016156 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015c22:	4b7a      	ldr	r3, [pc, #488]	; (8015e0c <tcp_receive+0x88c>)
 8015c24:	891c      	ldrh	r4, [r3, #8]
 8015c26:	4b79      	ldr	r3, [pc, #484]	; (8015e0c <tcp_receive+0x88c>)
 8015c28:	68db      	ldr	r3, [r3, #12]
 8015c2a:	899b      	ldrh	r3, [r3, #12]
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7fa fdcd 	bl	80107ce <lwip_htons>
 8015c34:	4603      	mov	r3, r0
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	f003 0303 	and.w	r3, r3, #3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d001      	beq.n	8015c44 <tcp_receive+0x6c4>
 8015c40:	2301      	movs	r3, #1
 8015c42:	e000      	b.n	8015c46 <tcp_receive+0x6c6>
 8015c44:	2300      	movs	r3, #0
 8015c46:	4423      	add	r3, r4
 8015c48:	b29a      	uxth	r2, r3
 8015c4a:	4b71      	ldr	r3, [pc, #452]	; (8015e10 <tcp_receive+0x890>)
 8015c4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015c52:	4b6f      	ldr	r3, [pc, #444]	; (8015e10 <tcp_receive+0x890>)
 8015c54:	881b      	ldrh	r3, [r3, #0]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d275      	bcs.n	8015d46 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015c5a:	4b6c      	ldr	r3, [pc, #432]	; (8015e0c <tcp_receive+0x88c>)
 8015c5c:	68db      	ldr	r3, [r3, #12]
 8015c5e:	899b      	ldrh	r3, [r3, #12]
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fa fdb3 	bl	80107ce <lwip_htons>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	f003 0301 	and.w	r3, r3, #1
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d01f      	beq.n	8015cb4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015c74:	4b65      	ldr	r3, [pc, #404]	; (8015e0c <tcp_receive+0x88c>)
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	899b      	ldrh	r3, [r3, #12]
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	b21b      	sxth	r3, r3
 8015c7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015c82:	b21c      	sxth	r4, r3
 8015c84:	4b61      	ldr	r3, [pc, #388]	; (8015e0c <tcp_receive+0x88c>)
 8015c86:	68db      	ldr	r3, [r3, #12]
 8015c88:	899b      	ldrh	r3, [r3, #12]
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7fa fd9e 	bl	80107ce <lwip_htons>
 8015c92:	4603      	mov	r3, r0
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7fa fd95 	bl	80107ce <lwip_htons>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	b21b      	sxth	r3, r3
 8015ca8:	4323      	orrs	r3, r4
 8015caa:	b21a      	sxth	r2, r3
 8015cac:	4b57      	ldr	r3, [pc, #348]	; (8015e0c <tcp_receive+0x88c>)
 8015cae:	68db      	ldr	r3, [r3, #12]
 8015cb0:	b292      	uxth	r2, r2
 8015cb2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015cb8:	4b54      	ldr	r3, [pc, #336]	; (8015e0c <tcp_receive+0x88c>)
 8015cba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015cbc:	4b53      	ldr	r3, [pc, #332]	; (8015e0c <tcp_receive+0x88c>)
 8015cbe:	68db      	ldr	r3, [r3, #12]
 8015cc0:	899b      	ldrh	r3, [r3, #12]
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7fa fd82 	bl	80107ce <lwip_htons>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	f003 0302 	and.w	r3, r3, #2
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d005      	beq.n	8015ce2 <tcp_receive+0x762>
            inseg.len -= 1;
 8015cd6:	4b4d      	ldr	r3, [pc, #308]	; (8015e0c <tcp_receive+0x88c>)
 8015cd8:	891b      	ldrh	r3, [r3, #8]
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	b29a      	uxth	r2, r3
 8015cde:	4b4b      	ldr	r3, [pc, #300]	; (8015e0c <tcp_receive+0x88c>)
 8015ce0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015ce2:	4b4a      	ldr	r3, [pc, #296]	; (8015e0c <tcp_receive+0x88c>)
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	4a49      	ldr	r2, [pc, #292]	; (8015e0c <tcp_receive+0x88c>)
 8015ce8:	8912      	ldrh	r2, [r2, #8]
 8015cea:	4611      	mov	r1, r2
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7fb ffb1 	bl	8011c54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015cf2:	4b46      	ldr	r3, [pc, #280]	; (8015e0c <tcp_receive+0x88c>)
 8015cf4:	891c      	ldrh	r4, [r3, #8]
 8015cf6:	4b45      	ldr	r3, [pc, #276]	; (8015e0c <tcp_receive+0x88c>)
 8015cf8:	68db      	ldr	r3, [r3, #12]
 8015cfa:	899b      	ldrh	r3, [r3, #12]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7fa fd65 	bl	80107ce <lwip_htons>
 8015d04:	4603      	mov	r3, r0
 8015d06:	b2db      	uxtb	r3, r3
 8015d08:	f003 0303 	and.w	r3, r3, #3
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d001      	beq.n	8015d14 <tcp_receive+0x794>
 8015d10:	2301      	movs	r3, #1
 8015d12:	e000      	b.n	8015d16 <tcp_receive+0x796>
 8015d14:	2300      	movs	r3, #0
 8015d16:	4423      	add	r3, r4
 8015d18:	b29a      	uxth	r2, r3
 8015d1a:	4b3d      	ldr	r3, [pc, #244]	; (8015e10 <tcp_receive+0x890>)
 8015d1c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d1e:	4b3c      	ldr	r3, [pc, #240]	; (8015e10 <tcp_receive+0x890>)
 8015d20:	881b      	ldrh	r3, [r3, #0]
 8015d22:	461a      	mov	r2, r3
 8015d24:	4b38      	ldr	r3, [pc, #224]	; (8015e08 <tcp_receive+0x888>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	441a      	add	r2, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d2e:	6879      	ldr	r1, [r7, #4]
 8015d30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d32:	440b      	add	r3, r1
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d006      	beq.n	8015d46 <tcp_receive+0x7c6>
 8015d38:	4b36      	ldr	r3, [pc, #216]	; (8015e14 <tcp_receive+0x894>)
 8015d3a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015d3e:	4936      	ldr	r1, [pc, #216]	; (8015e18 <tcp_receive+0x898>)
 8015d40:	4836      	ldr	r0, [pc, #216]	; (8015e1c <tcp_receive+0x89c>)
 8015d42:	f005 fcbf 	bl	801b6c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	f000 80e7 	beq.w	8015f1e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d50:	4b2e      	ldr	r3, [pc, #184]	; (8015e0c <tcp_receive+0x88c>)
 8015d52:	68db      	ldr	r3, [r3, #12]
 8015d54:	899b      	ldrh	r3, [r3, #12]
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7fa fd38 	bl	80107ce <lwip_htons>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	b2db      	uxtb	r3, r3
 8015d62:	f003 0301 	and.w	r3, r3, #1
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d010      	beq.n	8015d8c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015d6a:	e00a      	b.n	8015d82 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d70:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d76:	681a      	ldr	r2, [r3, #0]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	f7fd fcc4 	bl	801370a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d1f0      	bne.n	8015d6c <tcp_receive+0x7ec>
 8015d8a:	e0c8      	b.n	8015f1e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d90:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015d92:	e052      	b.n	8015e3a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	899b      	ldrh	r3, [r3, #12]
 8015d9a:	b29b      	uxth	r3, r3
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7fa fd16 	bl	80107ce <lwip_htons>
 8015da2:	4603      	mov	r3, r0
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	f003 0301 	and.w	r3, r3, #1
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d03d      	beq.n	8015e2a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015dae:	4b17      	ldr	r3, [pc, #92]	; (8015e0c <tcp_receive+0x88c>)
 8015db0:	68db      	ldr	r3, [r3, #12]
 8015db2:	899b      	ldrh	r3, [r3, #12]
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7fa fd09 	bl	80107ce <lwip_htons>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d130      	bne.n	8015e2a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015dc8:	4b10      	ldr	r3, [pc, #64]	; (8015e0c <tcp_receive+0x88c>)
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	899b      	ldrh	r3, [r3, #12]
 8015dce:	b29c      	uxth	r4, r3
 8015dd0:	2001      	movs	r0, #1
 8015dd2:	f7fa fcfc 	bl	80107ce <lwip_htons>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	461a      	mov	r2, r3
 8015dda:	4b0c      	ldr	r3, [pc, #48]	; (8015e0c <tcp_receive+0x88c>)
 8015ddc:	68db      	ldr	r3, [r3, #12]
 8015dde:	4322      	orrs	r2, r4
 8015de0:	b292      	uxth	r2, r2
 8015de2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015de4:	4b09      	ldr	r3, [pc, #36]	; (8015e0c <tcp_receive+0x88c>)
 8015de6:	891c      	ldrh	r4, [r3, #8]
 8015de8:	4b08      	ldr	r3, [pc, #32]	; (8015e0c <tcp_receive+0x88c>)
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	899b      	ldrh	r3, [r3, #12]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7fa fcec 	bl	80107ce <lwip_htons>
 8015df6:	4603      	mov	r3, r0
 8015df8:	b2db      	uxtb	r3, r3
 8015dfa:	f003 0303 	and.w	r3, r3, #3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d00e      	beq.n	8015e20 <tcp_receive+0x8a0>
 8015e02:	2301      	movs	r3, #1
 8015e04:	e00d      	b.n	8015e22 <tcp_receive+0x8a2>
 8015e06:	bf00      	nop
 8015e08:	2000b014 	.word	0x2000b014
 8015e0c:	2000aff4 	.word	0x2000aff4
 8015e10:	2000b01e 	.word	0x2000b01e
 8015e14:	0801de24 	.word	0x0801de24
 8015e18:	0801e1cc 	.word	0x0801e1cc
 8015e1c:	0801de70 	.word	0x0801de70
 8015e20:	2300      	movs	r3, #0
 8015e22:	4423      	add	r3, r4
 8015e24:	b29a      	uxth	r2, r3
 8015e26:	4b98      	ldr	r3, [pc, #608]	; (8016088 <tcp_receive+0xb08>)
 8015e28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015e34:	6938      	ldr	r0, [r7, #16]
 8015e36:	f7fd fc68 	bl	801370a <tcp_seg_free>
            while (next &&
 8015e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d00e      	beq.n	8015e5e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015e40:	4b91      	ldr	r3, [pc, #580]	; (8016088 <tcp_receive+0xb08>)
 8015e42:	881b      	ldrh	r3, [r3, #0]
 8015e44:	461a      	mov	r2, r3
 8015e46:	4b91      	ldr	r3, [pc, #580]	; (801608c <tcp_receive+0xb0c>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	441a      	add	r2, r3
 8015e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e4e:	68db      	ldr	r3, [r3, #12]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e54:	8909      	ldrh	r1, [r1, #8]
 8015e56:	440b      	add	r3, r1
 8015e58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	da9a      	bge.n	8015d94 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d059      	beq.n	8015f18 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015e64:	4b88      	ldr	r3, [pc, #544]	; (8016088 <tcp_receive+0xb08>)
 8015e66:	881b      	ldrh	r3, [r3, #0]
 8015e68:	461a      	mov	r2, r3
 8015e6a:	4b88      	ldr	r3, [pc, #544]	; (801608c <tcp_receive+0xb0c>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	441a      	add	r2, r3
 8015e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	dd4d      	ble.n	8015f18 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e7e:	68db      	ldr	r3, [r3, #12]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	4b81      	ldr	r3, [pc, #516]	; (801608c <tcp_receive+0xb0c>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	b29b      	uxth	r3, r3
 8015e8a:	1ad3      	subs	r3, r2, r3
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	4b80      	ldr	r3, [pc, #512]	; (8016090 <tcp_receive+0xb10>)
 8015e90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015e92:	4b7f      	ldr	r3, [pc, #508]	; (8016090 <tcp_receive+0xb10>)
 8015e94:	68db      	ldr	r3, [r3, #12]
 8015e96:	899b      	ldrh	r3, [r3, #12]
 8015e98:	b29b      	uxth	r3, r3
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7fa fc97 	bl	80107ce <lwip_htons>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	f003 0302 	and.w	r3, r3, #2
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d005      	beq.n	8015eb8 <tcp_receive+0x938>
                inseg.len -= 1;
 8015eac:	4b78      	ldr	r3, [pc, #480]	; (8016090 <tcp_receive+0xb10>)
 8015eae:	891b      	ldrh	r3, [r3, #8]
 8015eb0:	3b01      	subs	r3, #1
 8015eb2:	b29a      	uxth	r2, r3
 8015eb4:	4b76      	ldr	r3, [pc, #472]	; (8016090 <tcp_receive+0xb10>)
 8015eb6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015eb8:	4b75      	ldr	r3, [pc, #468]	; (8016090 <tcp_receive+0xb10>)
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	4a74      	ldr	r2, [pc, #464]	; (8016090 <tcp_receive+0xb10>)
 8015ebe:	8912      	ldrh	r2, [r2, #8]
 8015ec0:	4611      	mov	r1, r2
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f7fb fec6 	bl	8011c54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015ec8:	4b71      	ldr	r3, [pc, #452]	; (8016090 <tcp_receive+0xb10>)
 8015eca:	891c      	ldrh	r4, [r3, #8]
 8015ecc:	4b70      	ldr	r3, [pc, #448]	; (8016090 <tcp_receive+0xb10>)
 8015ece:	68db      	ldr	r3, [r3, #12]
 8015ed0:	899b      	ldrh	r3, [r3, #12]
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fa fc7a 	bl	80107ce <lwip_htons>
 8015eda:	4603      	mov	r3, r0
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	f003 0303 	and.w	r3, r3, #3
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d001      	beq.n	8015eea <tcp_receive+0x96a>
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	e000      	b.n	8015eec <tcp_receive+0x96c>
 8015eea:	2300      	movs	r3, #0
 8015eec:	4423      	add	r3, r4
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	4b65      	ldr	r3, [pc, #404]	; (8016088 <tcp_receive+0xb08>)
 8015ef2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015ef4:	4b64      	ldr	r3, [pc, #400]	; (8016088 <tcp_receive+0xb08>)
 8015ef6:	881b      	ldrh	r3, [r3, #0]
 8015ef8:	461a      	mov	r2, r3
 8015efa:	4b64      	ldr	r3, [pc, #400]	; (801608c <tcp_receive+0xb0c>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	441a      	add	r2, r3
 8015f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f02:	68db      	ldr	r3, [r3, #12]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d006      	beq.n	8015f18 <tcp_receive+0x998>
 8015f0a:	4b62      	ldr	r3, [pc, #392]	; (8016094 <tcp_receive+0xb14>)
 8015f0c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015f10:	4961      	ldr	r1, [pc, #388]	; (8016098 <tcp_receive+0xb18>)
 8015f12:	4862      	ldr	r0, [pc, #392]	; (801609c <tcp_receive+0xb1c>)
 8015f14:	f005 fbd6 	bl	801b6c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f1c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015f1e:	4b5a      	ldr	r3, [pc, #360]	; (8016088 <tcp_receive+0xb08>)
 8015f20:	881b      	ldrh	r3, [r3, #0]
 8015f22:	461a      	mov	r2, r3
 8015f24:	4b59      	ldr	r3, [pc, #356]	; (801608c <tcp_receive+0xb0c>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	441a      	add	r2, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f32:	4b55      	ldr	r3, [pc, #340]	; (8016088 <tcp_receive+0xb08>)
 8015f34:	881b      	ldrh	r3, [r3, #0]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d206      	bcs.n	8015f48 <tcp_receive+0x9c8>
 8015f3a:	4b56      	ldr	r3, [pc, #344]	; (8016094 <tcp_receive+0xb14>)
 8015f3c:	f240 6207 	movw	r2, #1543	; 0x607
 8015f40:	4957      	ldr	r1, [pc, #348]	; (80160a0 <tcp_receive+0xb20>)
 8015f42:	4856      	ldr	r0, [pc, #344]	; (801609c <tcp_receive+0xb1c>)
 8015f44:	f005 fbbe 	bl	801b6c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f4c:	4b4e      	ldr	r3, [pc, #312]	; (8016088 <tcp_receive+0xb08>)
 8015f4e:	881b      	ldrh	r3, [r3, #0]
 8015f50:	1ad3      	subs	r3, r2, r3
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7fc fd95 	bl	8012a88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015f5e:	4b4c      	ldr	r3, [pc, #304]	; (8016090 <tcp_receive+0xb10>)
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	891b      	ldrh	r3, [r3, #8]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d006      	beq.n	8015f76 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015f68:	4b49      	ldr	r3, [pc, #292]	; (8016090 <tcp_receive+0xb10>)
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	4a4d      	ldr	r2, [pc, #308]	; (80160a4 <tcp_receive+0xb24>)
 8015f6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015f70:	4b47      	ldr	r3, [pc, #284]	; (8016090 <tcp_receive+0xb10>)
 8015f72:	2200      	movs	r2, #0
 8015f74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f76:	4b46      	ldr	r3, [pc, #280]	; (8016090 <tcp_receive+0xb10>)
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	899b      	ldrh	r3, [r3, #12]
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7fa fc25 	bl	80107ce <lwip_htons>
 8015f84:	4603      	mov	r3, r0
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	f003 0301 	and.w	r3, r3, #1
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f000 80b8 	beq.w	8016102 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015f92:	4b45      	ldr	r3, [pc, #276]	; (80160a8 <tcp_receive+0xb28>)
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	f043 0320 	orr.w	r3, r3, #32
 8015f9a:	b2da      	uxtb	r2, r3
 8015f9c:	4b42      	ldr	r3, [pc, #264]	; (80160a8 <tcp_receive+0xb28>)
 8015f9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015fa0:	e0af      	b.n	8016102 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fa6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fac:	68db      	ldr	r3, [r3, #12]
 8015fae:	685b      	ldr	r3, [r3, #4]
 8015fb0:	4a36      	ldr	r2, [pc, #216]	; (801608c <tcp_receive+0xb0c>)
 8015fb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	891b      	ldrh	r3, [r3, #8]
 8015fb8:	461c      	mov	r4, r3
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	899b      	ldrh	r3, [r3, #12]
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7fa fc03 	bl	80107ce <lwip_htons>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	f003 0303 	and.w	r3, r3, #3
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d001      	beq.n	8015fd8 <tcp_receive+0xa58>
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	e000      	b.n	8015fda <tcp_receive+0xa5a>
 8015fd8:	2300      	movs	r3, #0
 8015fda:	191a      	adds	r2, r3, r4
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe0:	441a      	add	r2, r3
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015fea:	461c      	mov	r4, r3
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	891b      	ldrh	r3, [r3, #8]
 8015ff0:	461d      	mov	r5, r3
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	68db      	ldr	r3, [r3, #12]
 8015ff6:	899b      	ldrh	r3, [r3, #12]
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fa fbe7 	bl	80107ce <lwip_htons>
 8016000:	4603      	mov	r3, r0
 8016002:	b2db      	uxtb	r3, r3
 8016004:	f003 0303 	and.w	r3, r3, #3
 8016008:	2b00      	cmp	r3, #0
 801600a:	d001      	beq.n	8016010 <tcp_receive+0xa90>
 801600c:	2301      	movs	r3, #1
 801600e:	e000      	b.n	8016012 <tcp_receive+0xa92>
 8016010:	2300      	movs	r3, #0
 8016012:	442b      	add	r3, r5
 8016014:	429c      	cmp	r4, r3
 8016016:	d206      	bcs.n	8016026 <tcp_receive+0xaa6>
 8016018:	4b1e      	ldr	r3, [pc, #120]	; (8016094 <tcp_receive+0xb14>)
 801601a:	f240 622b 	movw	r2, #1579	; 0x62b
 801601e:	4923      	ldr	r1, [pc, #140]	; (80160ac <tcp_receive+0xb2c>)
 8016020:	481e      	ldr	r0, [pc, #120]	; (801609c <tcp_receive+0xb1c>)
 8016022:	f005 fb4f 	bl	801b6c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	891b      	ldrh	r3, [r3, #8]
 801602a:	461c      	mov	r4, r3
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	68db      	ldr	r3, [r3, #12]
 8016030:	899b      	ldrh	r3, [r3, #12]
 8016032:	b29b      	uxth	r3, r3
 8016034:	4618      	mov	r0, r3
 8016036:	f7fa fbca 	bl	80107ce <lwip_htons>
 801603a:	4603      	mov	r3, r0
 801603c:	b2db      	uxtb	r3, r3
 801603e:	f003 0303 	and.w	r3, r3, #3
 8016042:	2b00      	cmp	r3, #0
 8016044:	d001      	beq.n	801604a <tcp_receive+0xaca>
 8016046:	2301      	movs	r3, #1
 8016048:	e000      	b.n	801604c <tcp_receive+0xacc>
 801604a:	2300      	movs	r3, #0
 801604c:	1919      	adds	r1, r3, r4
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016052:	b28b      	uxth	r3, r1
 8016054:	1ad3      	subs	r3, r2, r3
 8016056:	b29a      	uxth	r2, r3
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f7fc fd13 	bl	8012a88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	891b      	ldrh	r3, [r3, #8]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d028      	beq.n	80160be <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801606c:	4b0d      	ldr	r3, [pc, #52]	; (80160a4 <tcp_receive+0xb24>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d01d      	beq.n	80160b0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016074:	4b0b      	ldr	r3, [pc, #44]	; (80160a4 <tcp_receive+0xb24>)
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	685b      	ldr	r3, [r3, #4]
 801607c:	4619      	mov	r1, r3
 801607e:	4610      	mov	r0, r2
 8016080:	f7fc f830 	bl	80120e4 <pbuf_cat>
 8016084:	e018      	b.n	80160b8 <tcp_receive+0xb38>
 8016086:	bf00      	nop
 8016088:	2000b01e 	.word	0x2000b01e
 801608c:	2000b014 	.word	0x2000b014
 8016090:	2000aff4 	.word	0x2000aff4
 8016094:	0801de24 	.word	0x0801de24
 8016098:	0801e204 	.word	0x0801e204
 801609c:	0801de70 	.word	0x0801de70
 80160a0:	0801e240 	.word	0x0801e240
 80160a4:	2000b024 	.word	0x2000b024
 80160a8:	2000b021 	.word	0x2000b021
 80160ac:	0801e260 	.word	0x0801e260
            } else {
              recv_data = cseg->p;
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	685b      	ldr	r3, [r3, #4]
 80160b4:	4a70      	ldr	r2, [pc, #448]	; (8016278 <tcp_receive+0xcf8>)
 80160b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2200      	movs	r2, #0
 80160bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	899b      	ldrh	r3, [r3, #12]
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7fa fb81 	bl	80107ce <lwip_htons>
 80160cc:	4603      	mov	r3, r0
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	f003 0301 	and.w	r3, r3, #1
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d00d      	beq.n	80160f4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80160d8:	4b68      	ldr	r3, [pc, #416]	; (801627c <tcp_receive+0xcfc>)
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	f043 0320 	orr.w	r3, r3, #32
 80160e0:	b2da      	uxtb	r2, r3
 80160e2:	4b66      	ldr	r3, [pc, #408]	; (801627c <tcp_receive+0xcfc>)
 80160e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	7d1b      	ldrb	r3, [r3, #20]
 80160ea:	2b04      	cmp	r3, #4
 80160ec:	d102      	bne.n	80160f4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2207      	movs	r2, #7
 80160f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80160fc:	68b8      	ldr	r0, [r7, #8]
 80160fe:	f7fd fb04 	bl	801370a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016106:	2b00      	cmp	r3, #0
 8016108:	d008      	beq.n	801611c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	685a      	ldr	r2, [r3, #4]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016116:	429a      	cmp	r2, r3
 8016118:	f43f af43 	beq.w	8015fa2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	8b5b      	ldrh	r3, [r3, #26]
 8016120:	f003 0301 	and.w	r3, r3, #1
 8016124:	2b00      	cmp	r3, #0
 8016126:	d00e      	beq.n	8016146 <tcp_receive+0xbc6>
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	8b5b      	ldrh	r3, [r3, #26]
 801612c:	f023 0301 	bic.w	r3, r3, #1
 8016130:	b29a      	uxth	r2, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	835a      	strh	r2, [r3, #26]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	8b5b      	ldrh	r3, [r3, #26]
 801613a:	f043 0302 	orr.w	r3, r3, #2
 801613e:	b29a      	uxth	r2, r3
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016144:	e188      	b.n	8016458 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	8b5b      	ldrh	r3, [r3, #26]
 801614a:	f043 0301 	orr.w	r3, r3, #1
 801614e:	b29a      	uxth	r2, r3
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016154:	e180      	b.n	8016458 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801615a:	2b00      	cmp	r3, #0
 801615c:	d106      	bne.n	801616c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801615e:	4848      	ldr	r0, [pc, #288]	; (8016280 <tcp_receive+0xd00>)
 8016160:	f7fd fb0a 	bl	8013778 <tcp_seg_copy>
 8016164:	4602      	mov	r2, r0
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	675a      	str	r2, [r3, #116]	; 0x74
 801616a:	e16d      	b.n	8016448 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801616c:	2300      	movs	r3, #0
 801616e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016174:	63bb      	str	r3, [r7, #56]	; 0x38
 8016176:	e157      	b.n	8016428 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	685a      	ldr	r2, [r3, #4]
 801617e:	4b41      	ldr	r3, [pc, #260]	; (8016284 <tcp_receive+0xd04>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	429a      	cmp	r2, r3
 8016184:	d11d      	bne.n	80161c2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016186:	4b3e      	ldr	r3, [pc, #248]	; (8016280 <tcp_receive+0xd00>)
 8016188:	891a      	ldrh	r2, [r3, #8]
 801618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801618c:	891b      	ldrh	r3, [r3, #8]
 801618e:	429a      	cmp	r2, r3
 8016190:	f240 814f 	bls.w	8016432 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016194:	483a      	ldr	r0, [pc, #232]	; (8016280 <tcp_receive+0xd00>)
 8016196:	f7fd faef 	bl	8013778 <tcp_seg_copy>
 801619a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 8149 	beq.w	8016436 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80161a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d003      	beq.n	80161b2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80161aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ac:	697a      	ldr	r2, [r7, #20]
 80161ae:	601a      	str	r2, [r3, #0]
 80161b0:	e002      	b.n	80161b8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	697a      	ldr	r2, [r7, #20]
 80161b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80161b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	f7ff f8dc 	bl	8015378 <tcp_oos_insert_segment>
                }
                break;
 80161c0:	e139      	b.n	8016436 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80161c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d117      	bne.n	80161f8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80161c8:	4b2e      	ldr	r3, [pc, #184]	; (8016284 <tcp_receive+0xd04>)
 80161ca:	681a      	ldr	r2, [r3, #0]
 80161cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ce:	68db      	ldr	r3, [r3, #12]
 80161d0:	685b      	ldr	r3, [r3, #4]
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	da57      	bge.n	8016288 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80161d8:	4829      	ldr	r0, [pc, #164]	; (8016280 <tcp_receive+0xd00>)
 80161da:	f7fd facd 	bl	8013778 <tcp_seg_copy>
 80161de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80161e0:	69bb      	ldr	r3, [r7, #24]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f000 8129 	beq.w	801643a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	69ba      	ldr	r2, [r7, #24]
 80161ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80161ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80161f0:	69b8      	ldr	r0, [r7, #24]
 80161f2:	f7ff f8c1 	bl	8015378 <tcp_oos_insert_segment>
                  }
                  break;
 80161f6:	e120      	b.n	801643a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80161f8:	4b22      	ldr	r3, [pc, #136]	; (8016284 <tcp_receive+0xd04>)
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161fe:	68db      	ldr	r3, [r3, #12]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	1ad3      	subs	r3, r2, r3
 8016204:	3b01      	subs	r3, #1
 8016206:	2b00      	cmp	r3, #0
 8016208:	db3e      	blt.n	8016288 <tcp_receive+0xd08>
 801620a:	4b1e      	ldr	r3, [pc, #120]	; (8016284 <tcp_receive+0xd04>)
 801620c:	681a      	ldr	r2, [r3, #0]
 801620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	685b      	ldr	r3, [r3, #4]
 8016214:	1ad3      	subs	r3, r2, r3
 8016216:	3301      	adds	r3, #1
 8016218:	2b00      	cmp	r3, #0
 801621a:	dc35      	bgt.n	8016288 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801621c:	4818      	ldr	r0, [pc, #96]	; (8016280 <tcp_receive+0xd00>)
 801621e:	f7fd faab 	bl	8013778 <tcp_seg_copy>
 8016222:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	2b00      	cmp	r3, #0
 8016228:	f000 8109 	beq.w	801643e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622e:	68db      	ldr	r3, [r3, #12]
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016234:	8912      	ldrh	r2, [r2, #8]
 8016236:	441a      	add	r2, r3
 8016238:	4b12      	ldr	r3, [pc, #72]	; (8016284 <tcp_receive+0xd04>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	2b00      	cmp	r3, #0
 8016240:	dd12      	ble.n	8016268 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016242:	4b10      	ldr	r3, [pc, #64]	; (8016284 <tcp_receive+0xd04>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	b29a      	uxth	r2, r3
 8016248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	b29b      	uxth	r3, r3
 8016250:	1ad3      	subs	r3, r2, r3
 8016252:	b29a      	uxth	r2, r3
 8016254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016256:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801625a:	685a      	ldr	r2, [r3, #4]
 801625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801625e:	891b      	ldrh	r3, [r3, #8]
 8016260:	4619      	mov	r1, r3
 8016262:	4610      	mov	r0, r2
 8016264:	f7fb fcf6 	bl	8011c54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801626a:	69fa      	ldr	r2, [r7, #28]
 801626c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801626e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016270:	69f8      	ldr	r0, [r7, #28]
 8016272:	f7ff f881 	bl	8015378 <tcp_oos_insert_segment>
                  }
                  break;
 8016276:	e0e2      	b.n	801643e <tcp_receive+0xebe>
 8016278:	2000b024 	.word	0x2000b024
 801627c:	2000b021 	.word	0x2000b021
 8016280:	2000aff4 	.word	0x2000aff4
 8016284:	2000b014 	.word	0x2000b014
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2b00      	cmp	r3, #0
 8016292:	f040 80c6 	bne.w	8016422 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016296:	4b80      	ldr	r3, [pc, #512]	; (8016498 <tcp_receive+0xf18>)
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801629c:	68db      	ldr	r3, [r3, #12]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	f340 80bd 	ble.w	8016422 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80162a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162aa:	68db      	ldr	r3, [r3, #12]
 80162ac:	899b      	ldrh	r3, [r3, #12]
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7fa fa8c 	bl	80107ce <lwip_htons>
 80162b6:	4603      	mov	r3, r0
 80162b8:	b2db      	uxtb	r3, r3
 80162ba:	f003 0301 	and.w	r3, r3, #1
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f040 80bf 	bne.w	8016442 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80162c4:	4875      	ldr	r0, [pc, #468]	; (801649c <tcp_receive+0xf1c>)
 80162c6:	f7fd fa57 	bl	8013778 <tcp_seg_copy>
 80162ca:	4602      	mov	r2, r0
 80162cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80162d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f000 80b6 	beq.w	8016446 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80162da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162dc:	68db      	ldr	r3, [r3, #12]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80162e2:	8912      	ldrh	r2, [r2, #8]
 80162e4:	441a      	add	r2, r3
 80162e6:	4b6c      	ldr	r3, [pc, #432]	; (8016498 <tcp_receive+0xf18>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	dd12      	ble.n	8016316 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80162f0:	4b69      	ldr	r3, [pc, #420]	; (8016498 <tcp_receive+0xf18>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	b29a      	uxth	r2, r3
 8016302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016304:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016308:	685a      	ldr	r2, [r3, #4]
 801630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801630c:	891b      	ldrh	r3, [r3, #8]
 801630e:	4619      	mov	r1, r3
 8016310:	4610      	mov	r0, r2
 8016312:	f7fb fc9f 	bl	8011c54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016316:	4b62      	ldr	r3, [pc, #392]	; (80164a0 <tcp_receive+0xf20>)
 8016318:	881b      	ldrh	r3, [r3, #0]
 801631a:	461a      	mov	r2, r3
 801631c:	4b5e      	ldr	r3, [pc, #376]	; (8016498 <tcp_receive+0xf18>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	441a      	add	r2, r3
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016326:	6879      	ldr	r1, [r7, #4]
 8016328:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801632a:	440b      	add	r3, r1
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	2b00      	cmp	r3, #0
 8016330:	f340 8089 	ble.w	8016446 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	68db      	ldr	r3, [r3, #12]
 801633a:	899b      	ldrh	r3, [r3, #12]
 801633c:	b29b      	uxth	r3, r3
 801633e:	4618      	mov	r0, r3
 8016340:	f7fa fa45 	bl	80107ce <lwip_htons>
 8016344:	4603      	mov	r3, r0
 8016346:	b2db      	uxtb	r3, r3
 8016348:	f003 0301 	and.w	r3, r3, #1
 801634c:	2b00      	cmp	r3, #0
 801634e:	d022      	beq.n	8016396 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	68db      	ldr	r3, [r3, #12]
 8016356:	899b      	ldrh	r3, [r3, #12]
 8016358:	b29b      	uxth	r3, r3
 801635a:	b21b      	sxth	r3, r3
 801635c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016360:	b21c      	sxth	r4, r3
 8016362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	68db      	ldr	r3, [r3, #12]
 8016368:	899b      	ldrh	r3, [r3, #12]
 801636a:	b29b      	uxth	r3, r3
 801636c:	4618      	mov	r0, r3
 801636e:	f7fa fa2e 	bl	80107ce <lwip_htons>
 8016372:	4603      	mov	r3, r0
 8016374:	b2db      	uxtb	r3, r3
 8016376:	b29b      	uxth	r3, r3
 8016378:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801637c:	b29b      	uxth	r3, r3
 801637e:	4618      	mov	r0, r3
 8016380:	f7fa fa25 	bl	80107ce <lwip_htons>
 8016384:	4603      	mov	r3, r0
 8016386:	b21b      	sxth	r3, r3
 8016388:	4323      	orrs	r3, r4
 801638a:	b21a      	sxth	r2, r3
 801638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	b292      	uxth	r2, r2
 8016394:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801639a:	b29a      	uxth	r2, r3
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163a0:	4413      	add	r3, r2
 80163a2:	b299      	uxth	r1, r3
 80163a4:	4b3c      	ldr	r3, [pc, #240]	; (8016498 <tcp_receive+0xf18>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	b29a      	uxth	r2, r3
 80163aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	1a8a      	subs	r2, r1, r2
 80163b0:	b292      	uxth	r2, r2
 80163b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80163b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	685a      	ldr	r2, [r3, #4]
 80163ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	891b      	ldrh	r3, [r3, #8]
 80163c0:	4619      	mov	r1, r3
 80163c2:	4610      	mov	r0, r2
 80163c4:	f7fb fc46 	bl	8011c54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80163c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	891c      	ldrh	r4, [r3, #8]
 80163ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	899b      	ldrh	r3, [r3, #12]
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	4618      	mov	r0, r3
 80163da:	f7fa f9f8 	bl	80107ce <lwip_htons>
 80163de:	4603      	mov	r3, r0
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	f003 0303 	and.w	r3, r3, #3
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d001      	beq.n	80163ee <tcp_receive+0xe6e>
 80163ea:	2301      	movs	r3, #1
 80163ec:	e000      	b.n	80163f0 <tcp_receive+0xe70>
 80163ee:	2300      	movs	r3, #0
 80163f0:	4423      	add	r3, r4
 80163f2:	b29a      	uxth	r2, r3
 80163f4:	4b2a      	ldr	r3, [pc, #168]	; (80164a0 <tcp_receive+0xf20>)
 80163f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80163f8:	4b29      	ldr	r3, [pc, #164]	; (80164a0 <tcp_receive+0xf20>)
 80163fa:	881b      	ldrh	r3, [r3, #0]
 80163fc:	461a      	mov	r2, r3
 80163fe:	4b26      	ldr	r3, [pc, #152]	; (8016498 <tcp_receive+0xf18>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	441a      	add	r2, r3
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016408:	6879      	ldr	r1, [r7, #4]
 801640a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801640c:	440b      	add	r3, r1
 801640e:	429a      	cmp	r2, r3
 8016410:	d019      	beq.n	8016446 <tcp_receive+0xec6>
 8016412:	4b24      	ldr	r3, [pc, #144]	; (80164a4 <tcp_receive+0xf24>)
 8016414:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016418:	4923      	ldr	r1, [pc, #140]	; (80164a8 <tcp_receive+0xf28>)
 801641a:	4824      	ldr	r0, [pc, #144]	; (80164ac <tcp_receive+0xf2c>)
 801641c:	f005 f952 	bl	801b6c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016420:	e011      	b.n	8016446 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	63bb      	str	r3, [r7, #56]	; 0x38
 8016428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801642a:	2b00      	cmp	r3, #0
 801642c:	f47f aea4 	bne.w	8016178 <tcp_receive+0xbf8>
 8016430:	e00a      	b.n	8016448 <tcp_receive+0xec8>
                break;
 8016432:	bf00      	nop
 8016434:	e008      	b.n	8016448 <tcp_receive+0xec8>
                break;
 8016436:	bf00      	nop
 8016438:	e006      	b.n	8016448 <tcp_receive+0xec8>
                  break;
 801643a:	bf00      	nop
 801643c:	e004      	b.n	8016448 <tcp_receive+0xec8>
                  break;
 801643e:	bf00      	nop
 8016440:	e002      	b.n	8016448 <tcp_receive+0xec8>
                  break;
 8016442:	bf00      	nop
 8016444:	e000      	b.n	8016448 <tcp_receive+0xec8>
                break;
 8016446:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f001 fe8b 	bl	8018164 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801644e:	e003      	b.n	8016458 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016450:	6878      	ldr	r0, [r7, #4]
 8016452:	f001 fe87 	bl	8018164 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016456:	e01a      	b.n	801648e <tcp_receive+0xf0e>
 8016458:	e019      	b.n	801648e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801645a:	4b0f      	ldr	r3, [pc, #60]	; (8016498 <tcp_receive+0xf18>)
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016462:	1ad3      	subs	r3, r2, r3
 8016464:	2b00      	cmp	r3, #0
 8016466:	db0a      	blt.n	801647e <tcp_receive+0xefe>
 8016468:	4b0b      	ldr	r3, [pc, #44]	; (8016498 <tcp_receive+0xf18>)
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016470:	6879      	ldr	r1, [r7, #4]
 8016472:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016474:	440b      	add	r3, r1
 8016476:	1ad3      	subs	r3, r2, r3
 8016478:	3301      	adds	r3, #1
 801647a:	2b00      	cmp	r3, #0
 801647c:	dd07      	ble.n	801648e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	8b5b      	ldrh	r3, [r3, #26]
 8016482:	f043 0302 	orr.w	r3, r3, #2
 8016486:	b29a      	uxth	r2, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801648c:	e7ff      	b.n	801648e <tcp_receive+0xf0e>
 801648e:	bf00      	nop
 8016490:	3750      	adds	r7, #80	; 0x50
 8016492:	46bd      	mov	sp, r7
 8016494:	bdb0      	pop	{r4, r5, r7, pc}
 8016496:	bf00      	nop
 8016498:	2000b014 	.word	0x2000b014
 801649c:	2000aff4 	.word	0x2000aff4
 80164a0:	2000b01e 	.word	0x2000b01e
 80164a4:	0801de24 	.word	0x0801de24
 80164a8:	0801e1cc 	.word	0x0801e1cc
 80164ac:	0801de70 	.word	0x0801de70

080164b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b083      	sub	sp, #12
 80164b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80164b6:	4b15      	ldr	r3, [pc, #84]	; (801650c <tcp_get_next_optbyte+0x5c>)
 80164b8:	881b      	ldrh	r3, [r3, #0]
 80164ba:	1c5a      	adds	r2, r3, #1
 80164bc:	b291      	uxth	r1, r2
 80164be:	4a13      	ldr	r2, [pc, #76]	; (801650c <tcp_get_next_optbyte+0x5c>)
 80164c0:	8011      	strh	r1, [r2, #0]
 80164c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80164c4:	4b12      	ldr	r3, [pc, #72]	; (8016510 <tcp_get_next_optbyte+0x60>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d004      	beq.n	80164d6 <tcp_get_next_optbyte+0x26>
 80164cc:	4b11      	ldr	r3, [pc, #68]	; (8016514 <tcp_get_next_optbyte+0x64>)
 80164ce:	881b      	ldrh	r3, [r3, #0]
 80164d0:	88fa      	ldrh	r2, [r7, #6]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d208      	bcs.n	80164e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80164d6:	4b10      	ldr	r3, [pc, #64]	; (8016518 <tcp_get_next_optbyte+0x68>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	3314      	adds	r3, #20
 80164dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80164de:	88fb      	ldrh	r3, [r7, #6]
 80164e0:	683a      	ldr	r2, [r7, #0]
 80164e2:	4413      	add	r3, r2
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	e00b      	b.n	8016500 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80164e8:	88fb      	ldrh	r3, [r7, #6]
 80164ea:	b2da      	uxtb	r2, r3
 80164ec:	4b09      	ldr	r3, [pc, #36]	; (8016514 <tcp_get_next_optbyte+0x64>)
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	1ad3      	subs	r3, r2, r3
 80164f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80164f6:	4b06      	ldr	r3, [pc, #24]	; (8016510 <tcp_get_next_optbyte+0x60>)
 80164f8:	681a      	ldr	r2, [r3, #0]
 80164fa:	797b      	ldrb	r3, [r7, #5]
 80164fc:	4413      	add	r3, r2
 80164fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016500:	4618      	mov	r0, r3
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr
 801650c:	2000b010 	.word	0x2000b010
 8016510:	2000b00c 	.word	0x2000b00c
 8016514:	2000b00a 	.word	0x2000b00a
 8016518:	2000b004 	.word	0x2000b004

0801651c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b084      	sub	sp, #16
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d106      	bne.n	8016538 <tcp_parseopt+0x1c>
 801652a:	4b32      	ldr	r3, [pc, #200]	; (80165f4 <tcp_parseopt+0xd8>)
 801652c:	f240 727d 	movw	r2, #1917	; 0x77d
 8016530:	4931      	ldr	r1, [pc, #196]	; (80165f8 <tcp_parseopt+0xdc>)
 8016532:	4832      	ldr	r0, [pc, #200]	; (80165fc <tcp_parseopt+0xe0>)
 8016534:	f005 f8c6 	bl	801b6c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016538:	4b31      	ldr	r3, [pc, #196]	; (8016600 <tcp_parseopt+0xe4>)
 801653a:	881b      	ldrh	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d056      	beq.n	80165ee <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016540:	4b30      	ldr	r3, [pc, #192]	; (8016604 <tcp_parseopt+0xe8>)
 8016542:	2200      	movs	r2, #0
 8016544:	801a      	strh	r2, [r3, #0]
 8016546:	e046      	b.n	80165d6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016548:	f7ff ffb2 	bl	80164b0 <tcp_get_next_optbyte>
 801654c:	4603      	mov	r3, r0
 801654e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016550:	7bfb      	ldrb	r3, [r7, #15]
 8016552:	2b02      	cmp	r3, #2
 8016554:	d006      	beq.n	8016564 <tcp_parseopt+0x48>
 8016556:	2b02      	cmp	r3, #2
 8016558:	dc2c      	bgt.n	80165b4 <tcp_parseopt+0x98>
 801655a:	2b00      	cmp	r3, #0
 801655c:	d042      	beq.n	80165e4 <tcp_parseopt+0xc8>
 801655e:	2b01      	cmp	r3, #1
 8016560:	d128      	bne.n	80165b4 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016562:	e038      	b.n	80165d6 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016564:	f7ff ffa4 	bl	80164b0 <tcp_get_next_optbyte>
 8016568:	4603      	mov	r3, r0
 801656a:	2b04      	cmp	r3, #4
 801656c:	d13c      	bne.n	80165e8 <tcp_parseopt+0xcc>
 801656e:	4b25      	ldr	r3, [pc, #148]	; (8016604 <tcp_parseopt+0xe8>)
 8016570:	881b      	ldrh	r3, [r3, #0]
 8016572:	3301      	adds	r3, #1
 8016574:	4a22      	ldr	r2, [pc, #136]	; (8016600 <tcp_parseopt+0xe4>)
 8016576:	8812      	ldrh	r2, [r2, #0]
 8016578:	4293      	cmp	r3, r2
 801657a:	da35      	bge.n	80165e8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801657c:	f7ff ff98 	bl	80164b0 <tcp_get_next_optbyte>
 8016580:	4603      	mov	r3, r0
 8016582:	b29b      	uxth	r3, r3
 8016584:	021b      	lsls	r3, r3, #8
 8016586:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016588:	f7ff ff92 	bl	80164b0 <tcp_get_next_optbyte>
 801658c:	4603      	mov	r3, r0
 801658e:	b29a      	uxth	r2, r3
 8016590:	89bb      	ldrh	r3, [r7, #12]
 8016592:	4313      	orrs	r3, r2
 8016594:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016596:	89bb      	ldrh	r3, [r7, #12]
 8016598:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801659c:	4293      	cmp	r3, r2
 801659e:	d804      	bhi.n	80165aa <tcp_parseopt+0x8e>
 80165a0:	89bb      	ldrh	r3, [r7, #12]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d001      	beq.n	80165aa <tcp_parseopt+0x8e>
 80165a6:	89ba      	ldrh	r2, [r7, #12]
 80165a8:	e001      	b.n	80165ae <tcp_parseopt+0x92>
 80165aa:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80165b2:	e010      	b.n	80165d6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80165b4:	f7ff ff7c 	bl	80164b0 <tcp_get_next_optbyte>
 80165b8:	4603      	mov	r3, r0
 80165ba:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80165bc:	7afb      	ldrb	r3, [r7, #11]
 80165be:	2b01      	cmp	r3, #1
 80165c0:	d914      	bls.n	80165ec <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80165c2:	7afb      	ldrb	r3, [r7, #11]
 80165c4:	b29a      	uxth	r2, r3
 80165c6:	4b0f      	ldr	r3, [pc, #60]	; (8016604 <tcp_parseopt+0xe8>)
 80165c8:	881b      	ldrh	r3, [r3, #0]
 80165ca:	4413      	add	r3, r2
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	3b02      	subs	r3, #2
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	4b0c      	ldr	r3, [pc, #48]	; (8016604 <tcp_parseopt+0xe8>)
 80165d4:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80165d6:	4b0b      	ldr	r3, [pc, #44]	; (8016604 <tcp_parseopt+0xe8>)
 80165d8:	881a      	ldrh	r2, [r3, #0]
 80165da:	4b09      	ldr	r3, [pc, #36]	; (8016600 <tcp_parseopt+0xe4>)
 80165dc:	881b      	ldrh	r3, [r3, #0]
 80165de:	429a      	cmp	r2, r3
 80165e0:	d3b2      	bcc.n	8016548 <tcp_parseopt+0x2c>
 80165e2:	e004      	b.n	80165ee <tcp_parseopt+0xd2>
          return;
 80165e4:	bf00      	nop
 80165e6:	e002      	b.n	80165ee <tcp_parseopt+0xd2>
            return;
 80165e8:	bf00      	nop
 80165ea:	e000      	b.n	80165ee <tcp_parseopt+0xd2>
            return;
 80165ec:	bf00      	nop
      }
    }
  }
}
 80165ee:	3710      	adds	r7, #16
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	0801de24 	.word	0x0801de24
 80165f8:	0801e288 	.word	0x0801e288
 80165fc:	0801de70 	.word	0x0801de70
 8016600:	2000b008 	.word	0x2000b008
 8016604:	2000b010 	.word	0x2000b010

08016608 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016608:	b480      	push	{r7}
 801660a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801660c:	4b05      	ldr	r3, [pc, #20]	; (8016624 <tcp_trigger_input_pcb_close+0x1c>)
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	f043 0310 	orr.w	r3, r3, #16
 8016614:	b2da      	uxtb	r2, r3
 8016616:	4b03      	ldr	r3, [pc, #12]	; (8016624 <tcp_trigger_input_pcb_close+0x1c>)
 8016618:	701a      	strb	r2, [r3, #0]
}
 801661a:	bf00      	nop
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	2000b021 	.word	0x2000b021

08016628 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d00a      	beq.n	8016650 <tcp_route+0x28>
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	7a1b      	ldrb	r3, [r3, #8]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d006      	beq.n	8016650 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	7a1b      	ldrb	r3, [r3, #8]
 8016646:	4618      	mov	r0, r3
 8016648:	f7fb f92a 	bl	80118a0 <netif_get_by_index>
 801664c:	4603      	mov	r3, r0
 801664e:	e003      	b.n	8016658 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f003 faf1 	bl	8019c38 <ip4_route>
 8016656:	4603      	mov	r3, r0
  }
}
 8016658:	4618      	mov	r0, r3
 801665a:	3710      	adds	r7, #16
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}

08016660 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016660:	b590      	push	{r4, r7, lr}
 8016662:	b087      	sub	sp, #28
 8016664:	af00      	add	r7, sp, #0
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	603b      	str	r3, [r7, #0]
 801666c:	4613      	mov	r3, r2
 801666e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d105      	bne.n	8016682 <tcp_create_segment+0x22>
 8016676:	4b44      	ldr	r3, [pc, #272]	; (8016788 <tcp_create_segment+0x128>)
 8016678:	22a3      	movs	r2, #163	; 0xa3
 801667a:	4944      	ldr	r1, [pc, #272]	; (801678c <tcp_create_segment+0x12c>)
 801667c:	4844      	ldr	r0, [pc, #272]	; (8016790 <tcp_create_segment+0x130>)
 801667e:	f005 f821 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d105      	bne.n	8016694 <tcp_create_segment+0x34>
 8016688:	4b3f      	ldr	r3, [pc, #252]	; (8016788 <tcp_create_segment+0x128>)
 801668a:	22a4      	movs	r2, #164	; 0xa4
 801668c:	4941      	ldr	r1, [pc, #260]	; (8016794 <tcp_create_segment+0x134>)
 801668e:	4840      	ldr	r0, [pc, #256]	; (8016790 <tcp_create_segment+0x130>)
 8016690:	f005 f818 	bl	801b6c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016698:	009b      	lsls	r3, r3, #2
 801669a:	b2db      	uxtb	r3, r3
 801669c:	f003 0304 	and.w	r3, r3, #4
 80166a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80166a2:	2003      	movs	r0, #3
 80166a4:	f7fa fd76 	bl	8011194 <memp_malloc>
 80166a8:	6138      	str	r0, [r7, #16]
 80166aa:	693b      	ldr	r3, [r7, #16]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d104      	bne.n	80166ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80166b0:	68b8      	ldr	r0, [r7, #8]
 80166b2:	f7fb fc55 	bl	8011f60 <pbuf_free>
    return NULL;
 80166b6:	2300      	movs	r3, #0
 80166b8:	e061      	b.n	801677e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80166c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	2200      	movs	r2, #0
 80166c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	68ba      	ldr	r2, [r7, #8]
 80166cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	891a      	ldrh	r2, [r3, #8]
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d205      	bcs.n	80166e6 <tcp_create_segment+0x86>
 80166da:	4b2b      	ldr	r3, [pc, #172]	; (8016788 <tcp_create_segment+0x128>)
 80166dc:	22b0      	movs	r2, #176	; 0xb0
 80166de:	492e      	ldr	r1, [pc, #184]	; (8016798 <tcp_create_segment+0x138>)
 80166e0:	482b      	ldr	r0, [pc, #172]	; (8016790 <tcp_create_segment+0x130>)
 80166e2:	f004 ffef 	bl	801b6c4 <iprintf>
  seg->len = p->tot_len - optlen;
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	891a      	ldrh	r2, [r3, #8]
 80166ea:	7dfb      	ldrb	r3, [r7, #23]
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	1ad3      	subs	r3, r2, r3
 80166f0:	b29a      	uxth	r2, r3
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80166f6:	2114      	movs	r1, #20
 80166f8:	68b8      	ldr	r0, [r7, #8]
 80166fa:	f7fb fb9b 	bl	8011e34 <pbuf_add_header>
 80166fe:	4603      	mov	r3, r0
 8016700:	2b00      	cmp	r3, #0
 8016702:	d004      	beq.n	801670e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016704:	6938      	ldr	r0, [r7, #16]
 8016706:	f7fd f800 	bl	801370a <tcp_seg_free>
    return NULL;
 801670a:	2300      	movs	r3, #0
 801670c:	e037      	b.n	801677e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	685a      	ldr	r2, [r3, #4]
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	8ada      	ldrh	r2, [r3, #22]
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	68dc      	ldr	r4, [r3, #12]
 8016720:	4610      	mov	r0, r2
 8016722:	f7fa f854 	bl	80107ce <lwip_htons>
 8016726:	4603      	mov	r3, r0
 8016728:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	8b1a      	ldrh	r2, [r3, #24]
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	68dc      	ldr	r4, [r3, #12]
 8016732:	4610      	mov	r0, r2
 8016734:	f7fa f84b 	bl	80107ce <lwip_htons>
 8016738:	4603      	mov	r3, r0
 801673a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	68dc      	ldr	r4, [r3, #12]
 8016740:	6838      	ldr	r0, [r7, #0]
 8016742:	f7fa f859 	bl	80107f8 <lwip_htonl>
 8016746:	4603      	mov	r3, r0
 8016748:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801674a:	7dfb      	ldrb	r3, [r7, #23]
 801674c:	089b      	lsrs	r3, r3, #2
 801674e:	b2db      	uxtb	r3, r3
 8016750:	b29b      	uxth	r3, r3
 8016752:	3305      	adds	r3, #5
 8016754:	b29b      	uxth	r3, r3
 8016756:	031b      	lsls	r3, r3, #12
 8016758:	b29a      	uxth	r2, r3
 801675a:	79fb      	ldrb	r3, [r7, #7]
 801675c:	b29b      	uxth	r3, r3
 801675e:	4313      	orrs	r3, r2
 8016760:	b29a      	uxth	r2, r3
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	68dc      	ldr	r4, [r3, #12]
 8016766:	4610      	mov	r0, r2
 8016768:	f7fa f831 	bl	80107ce <lwip_htons>
 801676c:	4603      	mov	r3, r0
 801676e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	68db      	ldr	r3, [r3, #12]
 8016774:	2200      	movs	r2, #0
 8016776:	749a      	strb	r2, [r3, #18]
 8016778:	2200      	movs	r2, #0
 801677a:	74da      	strb	r2, [r3, #19]
  return seg;
 801677c:	693b      	ldr	r3, [r7, #16]
}
 801677e:	4618      	mov	r0, r3
 8016780:	371c      	adds	r7, #28
 8016782:	46bd      	mov	sp, r7
 8016784:	bd90      	pop	{r4, r7, pc}
 8016786:	bf00      	nop
 8016788:	0801e2a4 	.word	0x0801e2a4
 801678c:	0801e2d8 	.word	0x0801e2d8
 8016790:	0801e2f8 	.word	0x0801e2f8
 8016794:	0801e320 	.word	0x0801e320
 8016798:	0801e344 	.word	0x0801e344

0801679c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b086      	sub	sp, #24
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	607b      	str	r3, [r7, #4]
 80167a4:	4603      	mov	r3, r0
 80167a6:	73fb      	strb	r3, [r7, #15]
 80167a8:	460b      	mov	r3, r1
 80167aa:	81bb      	strh	r3, [r7, #12]
 80167ac:	4613      	mov	r3, r2
 80167ae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80167b0:	89bb      	ldrh	r3, [r7, #12]
 80167b2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d105      	bne.n	80167c6 <tcp_pbuf_prealloc+0x2a>
 80167ba:	4b30      	ldr	r3, [pc, #192]	; (801687c <tcp_pbuf_prealloc+0xe0>)
 80167bc:	22e8      	movs	r2, #232	; 0xe8
 80167be:	4930      	ldr	r1, [pc, #192]	; (8016880 <tcp_pbuf_prealloc+0xe4>)
 80167c0:	4830      	ldr	r0, [pc, #192]	; (8016884 <tcp_pbuf_prealloc+0xe8>)
 80167c2:	f004 ff7f 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80167c6:	6a3b      	ldr	r3, [r7, #32]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d105      	bne.n	80167d8 <tcp_pbuf_prealloc+0x3c>
 80167cc:	4b2b      	ldr	r3, [pc, #172]	; (801687c <tcp_pbuf_prealloc+0xe0>)
 80167ce:	22e9      	movs	r2, #233	; 0xe9
 80167d0:	492d      	ldr	r1, [pc, #180]	; (8016888 <tcp_pbuf_prealloc+0xec>)
 80167d2:	482c      	ldr	r0, [pc, #176]	; (8016884 <tcp_pbuf_prealloc+0xe8>)
 80167d4:	f004 ff76 	bl	801b6c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80167d8:	89ba      	ldrh	r2, [r7, #12]
 80167da:	897b      	ldrh	r3, [r7, #10]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d221      	bcs.n	8016824 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80167e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80167e4:	f003 0302 	and.w	r3, r3, #2
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d111      	bne.n	8016810 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80167ec:	6a3b      	ldr	r3, [r7, #32]
 80167ee:	8b5b      	ldrh	r3, [r3, #26]
 80167f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d115      	bne.n	8016824 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80167f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d007      	beq.n	8016810 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016800:	6a3b      	ldr	r3, [r7, #32]
 8016802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016804:	2b00      	cmp	r3, #0
 8016806:	d103      	bne.n	8016810 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016808:	6a3b      	ldr	r3, [r7, #32]
 801680a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801680c:	2b00      	cmp	r3, #0
 801680e:	d009      	beq.n	8016824 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016810:	89bb      	ldrh	r3, [r7, #12]
 8016812:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8016816:	f023 0203 	bic.w	r2, r3, #3
 801681a:	897b      	ldrh	r3, [r7, #10]
 801681c:	4293      	cmp	r3, r2
 801681e:	bf28      	it	cs
 8016820:	4613      	movcs	r3, r2
 8016822:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016824:	8af9      	ldrh	r1, [r7, #22]
 8016826:	7bfb      	ldrb	r3, [r7, #15]
 8016828:	f44f 7220 	mov.w	r2, #640	; 0x280
 801682c:	4618      	mov	r0, r3
 801682e:	f7fb f8b3 	bl	8011998 <pbuf_alloc>
 8016832:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d101      	bne.n	801683e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801683a:	2300      	movs	r3, #0
 801683c:	e019      	b.n	8016872 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d006      	beq.n	8016854 <tcp_pbuf_prealloc+0xb8>
 8016846:	4b0d      	ldr	r3, [pc, #52]	; (801687c <tcp_pbuf_prealloc+0xe0>)
 8016848:	f240 120b 	movw	r2, #267	; 0x10b
 801684c:	490f      	ldr	r1, [pc, #60]	; (801688c <tcp_pbuf_prealloc+0xf0>)
 801684e:	480d      	ldr	r0, [pc, #52]	; (8016884 <tcp_pbuf_prealloc+0xe8>)
 8016850:	f004 ff38 	bl	801b6c4 <iprintf>
  *oversize = p->len - length;
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	895a      	ldrh	r2, [r3, #10]
 8016858:	89bb      	ldrh	r3, [r7, #12]
 801685a:	1ad3      	subs	r3, r2, r3
 801685c:	b29a      	uxth	r2, r3
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	89ba      	ldrh	r2, [r7, #12]
 8016866:	811a      	strh	r2, [r3, #8]
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	891a      	ldrh	r2, [r3, #8]
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	815a      	strh	r2, [r3, #10]
  return p;
 8016870:	693b      	ldr	r3, [r7, #16]
}
 8016872:	4618      	mov	r0, r3
 8016874:	3718      	adds	r7, #24
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	0801e2a4 	.word	0x0801e2a4
 8016880:	0801e35c 	.word	0x0801e35c
 8016884:	0801e2f8 	.word	0x0801e2f8
 8016888:	0801e380 	.word	0x0801e380
 801688c:	0801e3a0 	.word	0x0801e3a0

08016890 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	460b      	mov	r3, r1
 801689a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d106      	bne.n	80168b0 <tcp_write_checks+0x20>
 80168a2:	4b33      	ldr	r3, [pc, #204]	; (8016970 <tcp_write_checks+0xe0>)
 80168a4:	f240 1233 	movw	r2, #307	; 0x133
 80168a8:	4932      	ldr	r1, [pc, #200]	; (8016974 <tcp_write_checks+0xe4>)
 80168aa:	4833      	ldr	r0, [pc, #204]	; (8016978 <tcp_write_checks+0xe8>)
 80168ac:	f004 ff0a 	bl	801b6c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	7d1b      	ldrb	r3, [r3, #20]
 80168b4:	2b04      	cmp	r3, #4
 80168b6:	d00e      	beq.n	80168d6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80168bc:	2b07      	cmp	r3, #7
 80168be:	d00a      	beq.n	80168d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80168c4:	2b02      	cmp	r3, #2
 80168c6:	d006      	beq.n	80168d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80168cc:	2b03      	cmp	r3, #3
 80168ce:	d002      	beq.n	80168d6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80168d0:	f06f 030a 	mvn.w	r3, #10
 80168d4:	e048      	b.n	8016968 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80168d6:	887b      	ldrh	r3, [r7, #2]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d101      	bne.n	80168e0 <tcp_write_checks+0x50>
    return ERR_OK;
 80168dc:	2300      	movs	r3, #0
 80168de:	e043      	b.n	8016968 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80168e6:	887a      	ldrh	r2, [r7, #2]
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d909      	bls.n	8016900 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	8b5b      	ldrh	r3, [r3, #26]
 80168f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80168fa:	f04f 33ff 	mov.w	r3, #4294967295
 80168fe:	e033      	b.n	8016968 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016906:	2b0f      	cmp	r3, #15
 8016908:	d909      	bls.n	801691e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	8b5b      	ldrh	r3, [r3, #26]
 801690e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016912:	b29a      	uxth	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016918:	f04f 33ff 	mov.w	r3, #4294967295
 801691c:	e024      	b.n	8016968 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016924:	2b00      	cmp	r3, #0
 8016926:	d00f      	beq.n	8016948 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801692c:	2b00      	cmp	r3, #0
 801692e:	d11a      	bne.n	8016966 <tcp_write_checks+0xd6>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016934:	2b00      	cmp	r3, #0
 8016936:	d116      	bne.n	8016966 <tcp_write_checks+0xd6>
 8016938:	4b0d      	ldr	r3, [pc, #52]	; (8016970 <tcp_write_checks+0xe0>)
 801693a:	f240 1255 	movw	r2, #341	; 0x155
 801693e:	490f      	ldr	r1, [pc, #60]	; (801697c <tcp_write_checks+0xec>)
 8016940:	480d      	ldr	r0, [pc, #52]	; (8016978 <tcp_write_checks+0xe8>)
 8016942:	f004 febf 	bl	801b6c4 <iprintf>
 8016946:	e00e      	b.n	8016966 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801694c:	2b00      	cmp	r3, #0
 801694e:	d103      	bne.n	8016958 <tcp_write_checks+0xc8>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016954:	2b00      	cmp	r3, #0
 8016956:	d006      	beq.n	8016966 <tcp_write_checks+0xd6>
 8016958:	4b05      	ldr	r3, [pc, #20]	; (8016970 <tcp_write_checks+0xe0>)
 801695a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801695e:	4908      	ldr	r1, [pc, #32]	; (8016980 <tcp_write_checks+0xf0>)
 8016960:	4805      	ldr	r0, [pc, #20]	; (8016978 <tcp_write_checks+0xe8>)
 8016962:	f004 feaf 	bl	801b6c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016966:	2300      	movs	r3, #0
}
 8016968:	4618      	mov	r0, r3
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}
 8016970:	0801e2a4 	.word	0x0801e2a4
 8016974:	0801e3b4 	.word	0x0801e3b4
 8016978:	0801e2f8 	.word	0x0801e2f8
 801697c:	0801e3d4 	.word	0x0801e3d4
 8016980:	0801e410 	.word	0x0801e410

08016984 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016984:	b590      	push	{r4, r7, lr}
 8016986:	b09b      	sub	sp, #108	; 0x6c
 8016988:	af04      	add	r7, sp, #16
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	4611      	mov	r1, r2
 8016990:	461a      	mov	r2, r3
 8016992:	460b      	mov	r3, r1
 8016994:	80fb      	strh	r3, [r7, #6]
 8016996:	4613      	mov	r3, r2
 8016998:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801699a:	2300      	movs	r3, #0
 801699c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801699e:	2300      	movs	r3, #0
 80169a0:	653b      	str	r3, [r7, #80]	; 0x50
 80169a2:	2300      	movs	r3, #0
 80169a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80169a6:	2300      	movs	r3, #0
 80169a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80169aa:	2300      	movs	r3, #0
 80169ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80169ae:	2300      	movs	r3, #0
 80169b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80169b4:	2300      	movs	r3, #0
 80169b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80169be:	2300      	movs	r3, #0
 80169c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80169c2:	2300      	movs	r3, #0
 80169c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d109      	bne.n	80169e0 <tcp_write+0x5c>
 80169cc:	4ba4      	ldr	r3, [pc, #656]	; (8016c60 <tcp_write+0x2dc>)
 80169ce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80169d2:	49a4      	ldr	r1, [pc, #656]	; (8016c64 <tcp_write+0x2e0>)
 80169d4:	48a4      	ldr	r0, [pc, #656]	; (8016c68 <tcp_write+0x2e4>)
 80169d6:	f004 fe75 	bl	801b6c4 <iprintf>
 80169da:	f06f 030f 	mvn.w	r3, #15
 80169de:	e32a      	b.n	8017036 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80169e6:	085b      	lsrs	r3, r3, #1
 80169e8:	b29a      	uxth	r2, r3
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80169ee:	4293      	cmp	r3, r2
 80169f0:	bf28      	it	cs
 80169f2:	4613      	movcs	r3, r2
 80169f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80169f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d102      	bne.n	8016a02 <tcp_write+0x7e>
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a00:	e000      	b.n	8016a04 <tcp_write+0x80>
 8016a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a04:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d109      	bne.n	8016a20 <tcp_write+0x9c>
 8016a0c:	4b94      	ldr	r3, [pc, #592]	; (8016c60 <tcp_write+0x2dc>)
 8016a0e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016a12:	4996      	ldr	r1, [pc, #600]	; (8016c6c <tcp_write+0x2e8>)
 8016a14:	4894      	ldr	r0, [pc, #592]	; (8016c68 <tcp_write+0x2e4>)
 8016a16:	f004 fe55 	bl	801b6c4 <iprintf>
 8016a1a:	f06f 030f 	mvn.w	r3, #15
 8016a1e:	e30a      	b.n	8017036 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016a20:	88fb      	ldrh	r3, [r7, #6]
 8016a22:	4619      	mov	r1, r3
 8016a24:	68f8      	ldr	r0, [r7, #12]
 8016a26:	f7ff ff33 	bl	8016890 <tcp_write_checks>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016a30:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d002      	beq.n	8016a3e <tcp_write+0xba>
    return err;
 8016a38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016a3c:	e2fb      	b.n	8017036 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016a48:	2300      	movs	r3, #0
 8016a4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	f000 80f6 	beq.w	8016c44 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8016a5e:	e002      	b.n	8016a66 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d1f8      	bne.n	8016a60 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a70:	7a9b      	ldrb	r3, [r3, #10]
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	f003 0304 	and.w	r3, r3, #4
 8016a7a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016a7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a80:	891b      	ldrh	r3, [r3, #8]
 8016a82:	4619      	mov	r1, r3
 8016a84:	8c3b      	ldrh	r3, [r7, #32]
 8016a86:	440b      	add	r3, r1
 8016a88:	429a      	cmp	r2, r3
 8016a8a:	da06      	bge.n	8016a9a <tcp_write+0x116>
 8016a8c:	4b74      	ldr	r3, [pc, #464]	; (8016c60 <tcp_write+0x2dc>)
 8016a8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016a92:	4977      	ldr	r1, [pc, #476]	; (8016c70 <tcp_write+0x2ec>)
 8016a94:	4874      	ldr	r0, [pc, #464]	; (8016c68 <tcp_write+0x2e4>)
 8016a96:	f004 fe15 	bl	801b6c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a9c:	891a      	ldrh	r2, [r3, #8]
 8016a9e:	8c3b      	ldrh	r3, [r7, #32]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016aa6:	1ad3      	subs	r3, r2, r3
 8016aa8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016ab0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016ab2:	8a7b      	ldrh	r3, [r7, #18]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d026      	beq.n	8016b06 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016ab8:	8a7b      	ldrh	r3, [r7, #18]
 8016aba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016abc:	429a      	cmp	r2, r3
 8016abe:	d206      	bcs.n	8016ace <tcp_write+0x14a>
 8016ac0:	4b67      	ldr	r3, [pc, #412]	; (8016c60 <tcp_write+0x2dc>)
 8016ac2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016ac6:	496b      	ldr	r1, [pc, #428]	; (8016c74 <tcp_write+0x2f0>)
 8016ac8:	4867      	ldr	r0, [pc, #412]	; (8016c68 <tcp_write+0x2e4>)
 8016aca:	f004 fdfb 	bl	801b6c4 <iprintf>
      seg = last_unsent;
 8016ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016ad2:	8a7b      	ldrh	r3, [r7, #18]
 8016ad4:	88fa      	ldrh	r2, [r7, #6]
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	bf28      	it	cs
 8016ada:	4613      	movcs	r3, r2
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	bf28      	it	cs
 8016ae4:	4613      	movcs	r3, r2
 8016ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016ae8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016aee:	4413      	add	r3, r2
 8016af0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016af4:	8a7a      	ldrh	r2, [r7, #18]
 8016af6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016af8:	1ad3      	subs	r3, r2, r3
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016afe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b02:	1ad3      	subs	r3, r2, r3
 8016b04:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016b06:	8a7b      	ldrh	r3, [r7, #18]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d00b      	beq.n	8016b24 <tcp_write+0x1a0>
 8016b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b10:	88fb      	ldrh	r3, [r7, #6]
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d006      	beq.n	8016b24 <tcp_write+0x1a0>
 8016b16:	4b52      	ldr	r3, [pc, #328]	; (8016c60 <tcp_write+0x2dc>)
 8016b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b1c:	4956      	ldr	r1, [pc, #344]	; (8016c78 <tcp_write+0x2f4>)
 8016b1e:	4852      	ldr	r0, [pc, #328]	; (8016c68 <tcp_write+0x2e4>)
 8016b20:	f004 fdd0 	bl	801b6c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016b24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b28:	88fb      	ldrh	r3, [r7, #6]
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	f080 8167 	bcs.w	8016dfe <tcp_write+0x47a>
 8016b30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	f000 8163 	beq.w	8016dfe <tcp_write+0x47a>
 8016b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b3a:	891b      	ldrh	r3, [r3, #8]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	f000 815e 	beq.w	8016dfe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016b42:	88fa      	ldrh	r2, [r7, #6]
 8016b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b48:	1ad2      	subs	r2, r2, r3
 8016b4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b4c:	4293      	cmp	r3, r2
 8016b4e:	bfa8      	it	ge
 8016b50:	4613      	movge	r3, r2
 8016b52:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b56:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016b58:	797b      	ldrb	r3, [r7, #5]
 8016b5a:	f003 0301 	and.w	r3, r3, #1
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d027      	beq.n	8016bb2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016b62:	f107 0012 	add.w	r0, r7, #18
 8016b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016b68:	8bf9      	ldrh	r1, [r7, #30]
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	9302      	str	r3, [sp, #8]
 8016b6e:	797b      	ldrb	r3, [r7, #5]
 8016b70:	9301      	str	r3, [sp, #4]
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	9300      	str	r3, [sp, #0]
 8016b76:	4603      	mov	r3, r0
 8016b78:	2000      	movs	r0, #0
 8016b7a:	f7ff fe0f 	bl	801679c <tcp_pbuf_prealloc>
 8016b7e:	6578      	str	r0, [r7, #84]	; 0x54
 8016b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	f000 8225 	beq.w	8016fd2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b8a:	6858      	ldr	r0, [r3, #4]
 8016b8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b90:	68ba      	ldr	r2, [r7, #8]
 8016b92:	4413      	add	r3, r2
 8016b94:	8bfa      	ldrh	r2, [r7, #30]
 8016b96:	4619      	mov	r1, r3
 8016b98:	f004 ff05 	bl	801b9a6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016b9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016b9e:	f7fb fa67 	bl	8012070 <pbuf_clen>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016baa:	4413      	add	r3, r2
 8016bac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016bb0:	e041      	b.n	8016c36 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8016bb8:	e002      	b.n	8016bc0 <tcp_write+0x23c>
 8016bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8016bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d1f8      	bne.n	8016bba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bca:	7b1b      	ldrb	r3, [r3, #12]
 8016bcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d115      	bne.n	8016c00 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016bda:	8952      	ldrh	r2, [r2, #10]
 8016bdc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016bde:	68ba      	ldr	r2, [r7, #8]
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d10d      	bne.n	8016c00 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d006      	beq.n	8016bfa <tcp_write+0x276>
 8016bec:	4b1c      	ldr	r3, [pc, #112]	; (8016c60 <tcp_write+0x2dc>)
 8016bee:	f240 2231 	movw	r2, #561	; 0x231
 8016bf2:	4922      	ldr	r1, [pc, #136]	; (8016c7c <tcp_write+0x2f8>)
 8016bf4:	481c      	ldr	r0, [pc, #112]	; (8016c68 <tcp_write+0x2e4>)
 8016bf6:	f004 fd65 	bl	801b6c4 <iprintf>
          extendlen = seglen;
 8016bfa:	8bfb      	ldrh	r3, [r7, #30]
 8016bfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016bfe:	e01a      	b.n	8016c36 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016c00:	8bfb      	ldrh	r3, [r7, #30]
 8016c02:	2201      	movs	r2, #1
 8016c04:	4619      	mov	r1, r3
 8016c06:	2000      	movs	r0, #0
 8016c08:	f7fa fec6 	bl	8011998 <pbuf_alloc>
 8016c0c:	6578      	str	r0, [r7, #84]	; 0x54
 8016c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	f000 81e0 	beq.w	8016fd6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016c16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c1a:	68ba      	ldr	r2, [r7, #8]
 8016c1c:	441a      	add	r2, r3
 8016c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c20:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016c22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016c24:	f7fb fa24 	bl	8012070 <pbuf_clen>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016c30:	4413      	add	r3, r2
 8016c32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016c36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c3a:	8bfb      	ldrh	r3, [r7, #30]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016c42:	e0dc      	b.n	8016dfe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	f000 80d7 	beq.w	8016dfe <tcp_write+0x47a>
 8016c50:	4b03      	ldr	r3, [pc, #12]	; (8016c60 <tcp_write+0x2dc>)
 8016c52:	f240 224a 	movw	r2, #586	; 0x24a
 8016c56:	490a      	ldr	r1, [pc, #40]	; (8016c80 <tcp_write+0x2fc>)
 8016c58:	4803      	ldr	r0, [pc, #12]	; (8016c68 <tcp_write+0x2e4>)
 8016c5a:	f004 fd33 	bl	801b6c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016c5e:	e0ce      	b.n	8016dfe <tcp_write+0x47a>
 8016c60:	0801e2a4 	.word	0x0801e2a4
 8016c64:	0801e444 	.word	0x0801e444
 8016c68:	0801e2f8 	.word	0x0801e2f8
 8016c6c:	0801e45c 	.word	0x0801e45c
 8016c70:	0801e490 	.word	0x0801e490
 8016c74:	0801e4a8 	.word	0x0801e4a8
 8016c78:	0801e4c8 	.word	0x0801e4c8
 8016c7c:	0801e4e8 	.word	0x0801e4e8
 8016c80:	0801e514 	.word	0x0801e514
    struct pbuf *p;
    u16_t left = len - pos;
 8016c84:	88fa      	ldrh	r2, [r7, #6]
 8016c86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c8a:	1ad3      	subs	r3, r2, r3
 8016c8c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016c8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c96:	1ad3      	subs	r3, r2, r3
 8016c98:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016c9a:	8b7a      	ldrh	r2, [r7, #26]
 8016c9c:	8bbb      	ldrh	r3, [r7, #28]
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	bf28      	it	cs
 8016ca2:	4613      	movcs	r3, r2
 8016ca4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016ca6:	797b      	ldrb	r3, [r7, #5]
 8016ca8:	f003 0301 	and.w	r3, r3, #1
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d036      	beq.n	8016d1e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016cb4:	b29a      	uxth	r2, r3
 8016cb6:	8b3b      	ldrh	r3, [r7, #24]
 8016cb8:	4413      	add	r3, r2
 8016cba:	b299      	uxth	r1, r3
 8016cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	bf0c      	ite	eq
 8016cc2:	2301      	moveq	r3, #1
 8016cc4:	2300      	movne	r3, #0
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	f107 0012 	add.w	r0, r7, #18
 8016ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016cce:	9302      	str	r3, [sp, #8]
 8016cd0:	797b      	ldrb	r3, [r7, #5]
 8016cd2:	9301      	str	r3, [sp, #4]
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	9300      	str	r3, [sp, #0]
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2036      	movs	r0, #54	; 0x36
 8016cdc:	f7ff fd5e 	bl	801679c <tcp_pbuf_prealloc>
 8016ce0:	6338      	str	r0, [r7, #48]	; 0x30
 8016ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	f000 8178 	beq.w	8016fda <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cec:	895b      	ldrh	r3, [r3, #10]
 8016cee:	8b3a      	ldrh	r2, [r7, #24]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d906      	bls.n	8016d02 <tcp_write+0x37e>
 8016cf4:	4b8c      	ldr	r3, [pc, #560]	; (8016f28 <tcp_write+0x5a4>)
 8016cf6:	f240 2266 	movw	r2, #614	; 0x266
 8016cfa:	498c      	ldr	r1, [pc, #560]	; (8016f2c <tcp_write+0x5a8>)
 8016cfc:	488c      	ldr	r0, [pc, #560]	; (8016f30 <tcp_write+0x5ac>)
 8016cfe:	f004 fce1 	bl	801b6c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d04:	685a      	ldr	r2, [r3, #4]
 8016d06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016d0a:	18d0      	adds	r0, r2, r3
 8016d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d10:	68ba      	ldr	r2, [r7, #8]
 8016d12:	4413      	add	r3, r2
 8016d14:	8b3a      	ldrh	r2, [r7, #24]
 8016d16:	4619      	mov	r1, r3
 8016d18:	f004 fe45 	bl	801b9a6 <memcpy>
 8016d1c:	e02f      	b.n	8016d7e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016d1e:	8a7b      	ldrh	r3, [r7, #18]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d006      	beq.n	8016d32 <tcp_write+0x3ae>
 8016d24:	4b80      	ldr	r3, [pc, #512]	; (8016f28 <tcp_write+0x5a4>)
 8016d26:	f240 2271 	movw	r2, #625	; 0x271
 8016d2a:	4982      	ldr	r1, [pc, #520]	; (8016f34 <tcp_write+0x5b0>)
 8016d2c:	4880      	ldr	r0, [pc, #512]	; (8016f30 <tcp_write+0x5ac>)
 8016d2e:	f004 fcc9 	bl	801b6c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016d32:	8b3b      	ldrh	r3, [r7, #24]
 8016d34:	2201      	movs	r2, #1
 8016d36:	4619      	mov	r1, r3
 8016d38:	2036      	movs	r0, #54	; 0x36
 8016d3a:	f7fa fe2d 	bl	8011998 <pbuf_alloc>
 8016d3e:	6178      	str	r0, [r7, #20]
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	f000 814b 	beq.w	8016fde <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016d48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d4c:	68ba      	ldr	r2, [r7, #8]
 8016d4e:	441a      	add	r2, r3
 8016d50:	697b      	ldr	r3, [r7, #20]
 8016d52:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016d58:	b29b      	uxth	r3, r3
 8016d5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d5e:	4619      	mov	r1, r3
 8016d60:	2036      	movs	r0, #54	; 0x36
 8016d62:	f7fa fe19 	bl	8011998 <pbuf_alloc>
 8016d66:	6338      	str	r0, [r7, #48]	; 0x30
 8016d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d103      	bne.n	8016d76 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016d6e:	6978      	ldr	r0, [r7, #20]
 8016d70:	f7fb f8f6 	bl	8011f60 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016d74:	e136      	b.n	8016fe4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016d76:	6979      	ldr	r1, [r7, #20]
 8016d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d7a:	f7fb f9b3 	bl	80120e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d80:	f7fb f976 	bl	8012070 <pbuf_clen>
 8016d84:	4603      	mov	r3, r0
 8016d86:	461a      	mov	r2, r3
 8016d88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016d8c:	4413      	add	r3, r2
 8016d8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016d92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016d96:	2b10      	cmp	r3, #16
 8016d98:	d903      	bls.n	8016da2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d9c:	f7fb f8e0 	bl	8011f60 <pbuf_free>
      goto memerr;
 8016da0:	e120      	b.n	8016fe4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016da6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016daa:	441a      	add	r2, r3
 8016dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016db0:	9300      	str	r3, [sp, #0]
 8016db2:	4613      	mov	r3, r2
 8016db4:	2200      	movs	r2, #0
 8016db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016db8:	68f8      	ldr	r0, [r7, #12]
 8016dba:	f7ff fc51 	bl	8016660 <tcp_create_segment>
 8016dbe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f000 810d 	beq.w	8016fe2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d102      	bne.n	8016dd4 <tcp_write+0x450>
      queue = seg;
 8016dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8016dd2:	e00c      	b.n	8016dee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d106      	bne.n	8016de8 <tcp_write+0x464>
 8016dda:	4b53      	ldr	r3, [pc, #332]	; (8016f28 <tcp_write+0x5a4>)
 8016ddc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016de0:	4955      	ldr	r1, [pc, #340]	; (8016f38 <tcp_write+0x5b4>)
 8016de2:	4853      	ldr	r0, [pc, #332]	; (8016f30 <tcp_write+0x5ac>)
 8016de4:	f004 fc6e 	bl	801b6c4 <iprintf>
      prev_seg->next = seg;
 8016de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016dec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016df0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016df2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016df6:	8b3b      	ldrh	r3, [r7, #24]
 8016df8:	4413      	add	r3, r2
 8016dfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016dfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e02:	88fb      	ldrh	r3, [r7, #6]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	f4ff af3d 	bcc.w	8016c84 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016e0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d02c      	beq.n	8016e6a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e16:	e01e      	b.n	8016e56 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1a:	891a      	ldrh	r2, [r3, #8]
 8016e1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e1e:	4413      	add	r3, r2
 8016e20:	b29a      	uxth	r2, r3
 8016e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e24:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d110      	bne.n	8016e50 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e34:	8952      	ldrh	r2, [r2, #10]
 8016e36:	4413      	add	r3, r2
 8016e38:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016e3a:	68b9      	ldr	r1, [r7, #8]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f004 fdb2 	bl	801b9a6 <memcpy>
        p->len += oversize_used;
 8016e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e44:	895a      	ldrh	r2, [r3, #10]
 8016e46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e48:	4413      	add	r3, r2
 8016e4a:	b29a      	uxth	r2, r3
 8016e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d1dd      	bne.n	8016e18 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e5e:	891a      	ldrh	r2, [r3, #8]
 8016e60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e62:	4413      	add	r3, r2
 8016e64:	b29a      	uxth	r2, r3
 8016e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e68:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016e6a:	8a7a      	ldrh	r2, [r7, #18]
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d018      	beq.n	8016eaa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d106      	bne.n	8016e8c <tcp_write+0x508>
 8016e7e:	4b2a      	ldr	r3, [pc, #168]	; (8016f28 <tcp_write+0x5a4>)
 8016e80:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016e84:	492d      	ldr	r1, [pc, #180]	; (8016f3c <tcp_write+0x5b8>)
 8016e86:	482a      	ldr	r0, [pc, #168]	; (8016f30 <tcp_write+0x5ac>)
 8016e88:	f004 fc1c 	bl	801b6c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7fb f926 	bl	80120e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e9a:	891a      	ldrh	r2, [r3, #8]
 8016e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e9e:	891b      	ldrh	r3, [r3, #8]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	b29a      	uxth	r2, r3
 8016ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ea6:	811a      	strh	r2, [r3, #8]
 8016ea8:	e037      	b.n	8016f1a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016eaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d034      	beq.n	8016f1a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d003      	beq.n	8016ebe <tcp_write+0x53a>
 8016eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d106      	bne.n	8016ecc <tcp_write+0x548>
 8016ebe:	4b1a      	ldr	r3, [pc, #104]	; (8016f28 <tcp_write+0x5a4>)
 8016ec0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016ec4:	491e      	ldr	r1, [pc, #120]	; (8016f40 <tcp_write+0x5bc>)
 8016ec6:	481a      	ldr	r0, [pc, #104]	; (8016f30 <tcp_write+0x5ac>)
 8016ec8:	f004 fbfc 	bl	801b6c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ed2:	e009      	b.n	8016ee8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed6:	891a      	ldrh	r2, [r3, #8]
 8016ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016eda:	4413      	add	r3, r2
 8016edc:	b29a      	uxth	r2, r3
 8016ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d1f1      	bne.n	8016ed4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef2:	891a      	ldrh	r2, [r3, #8]
 8016ef4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ef6:	4413      	add	r3, r2
 8016ef8:	b29a      	uxth	r2, r3
 8016efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f00:	895a      	ldrh	r2, [r3, #10]
 8016f02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f04:	4413      	add	r3, r2
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f0e:	891a      	ldrh	r2, [r3, #8]
 8016f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f12:	4413      	add	r3, r2
 8016f14:	b29a      	uxth	r2, r3
 8016f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f18:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d111      	bne.n	8016f44 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f24:	66da      	str	r2, [r3, #108]	; 0x6c
 8016f26:	e010      	b.n	8016f4a <tcp_write+0x5c6>
 8016f28:	0801e2a4 	.word	0x0801e2a4
 8016f2c:	0801e544 	.word	0x0801e544
 8016f30:	0801e2f8 	.word	0x0801e2f8
 8016f34:	0801e584 	.word	0x0801e584
 8016f38:	0801e594 	.word	0x0801e594
 8016f3c:	0801e5a8 	.word	0x0801e5a8
 8016f40:	0801e5e0 	.word	0x0801e5e0
  } else {
    last_unsent->next = queue;
 8016f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f48:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016f4e:	88fb      	ldrh	r3, [r7, #6]
 8016f50:	441a      	add	r2, r3
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016f5c:	88fb      	ldrh	r3, [r7, #6]
 8016f5e:	1ad3      	subs	r3, r2, r3
 8016f60:	b29a      	uxth	r2, r3
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016f6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00e      	beq.n	8016f9a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d10a      	bne.n	8016f9a <tcp_write+0x616>
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d106      	bne.n	8016f9a <tcp_write+0x616>
 8016f8c:	4b2c      	ldr	r3, [pc, #176]	; (8017040 <tcp_write+0x6bc>)
 8016f8e:	f240 3212 	movw	r2, #786	; 0x312
 8016f92:	492c      	ldr	r1, [pc, #176]	; (8017044 <tcp_write+0x6c0>)
 8016f94:	482c      	ldr	r0, [pc, #176]	; (8017048 <tcp_write+0x6c4>)
 8016f96:	f004 fb95 	bl	801b6c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d016      	beq.n	8016fce <tcp_write+0x64a>
 8016fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fa2:	68db      	ldr	r3, [r3, #12]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d012      	beq.n	8016fce <tcp_write+0x64a>
 8016fa8:	797b      	ldrb	r3, [r7, #5]
 8016faa:	f003 0302 	and.w	r3, r3, #2
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d10d      	bne.n	8016fce <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fb4:	68db      	ldr	r3, [r3, #12]
 8016fb6:	899b      	ldrh	r3, [r3, #12]
 8016fb8:	b29c      	uxth	r4, r3
 8016fba:	2008      	movs	r0, #8
 8016fbc:	f7f9 fc07 	bl	80107ce <lwip_htons>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	4322      	orrs	r2, r4
 8016fca:	b292      	uxth	r2, r2
 8016fcc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	e031      	b.n	8017036 <tcp_write+0x6b2>
          goto memerr;
 8016fd2:	bf00      	nop
 8016fd4:	e006      	b.n	8016fe4 <tcp_write+0x660>
            goto memerr;
 8016fd6:	bf00      	nop
 8016fd8:	e004      	b.n	8016fe4 <tcp_write+0x660>
        goto memerr;
 8016fda:	bf00      	nop
 8016fdc:	e002      	b.n	8016fe4 <tcp_write+0x660>
        goto memerr;
 8016fde:	bf00      	nop
 8016fe0:	e000      	b.n	8016fe4 <tcp_write+0x660>
      goto memerr;
 8016fe2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	8b5b      	ldrh	r3, [r3, #26]
 8016fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fec:	b29a      	uxth	r2, r3
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d002      	beq.n	8016ffe <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016ff8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016ffa:	f7fa ffb1 	bl	8011f60 <pbuf_free>
  }
  if (queue != NULL) {
 8016ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017000:	2b00      	cmp	r3, #0
 8017002:	d002      	beq.n	801700a <tcp_write+0x686>
    tcp_segs_free(queue);
 8017004:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017006:	f7fc fb6b 	bl	80136e0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017010:	2b00      	cmp	r3, #0
 8017012:	d00e      	beq.n	8017032 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017018:	2b00      	cmp	r3, #0
 801701a:	d10a      	bne.n	8017032 <tcp_write+0x6ae>
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017020:	2b00      	cmp	r3, #0
 8017022:	d106      	bne.n	8017032 <tcp_write+0x6ae>
 8017024:	4b06      	ldr	r3, [pc, #24]	; (8017040 <tcp_write+0x6bc>)
 8017026:	f240 3227 	movw	r2, #807	; 0x327
 801702a:	4906      	ldr	r1, [pc, #24]	; (8017044 <tcp_write+0x6c0>)
 801702c:	4806      	ldr	r0, [pc, #24]	; (8017048 <tcp_write+0x6c4>)
 801702e:	f004 fb49 	bl	801b6c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017036:	4618      	mov	r0, r3
 8017038:	375c      	adds	r7, #92	; 0x5c
 801703a:	46bd      	mov	sp, r7
 801703c:	bd90      	pop	{r4, r7, pc}
 801703e:	bf00      	nop
 8017040:	0801e2a4 	.word	0x0801e2a4
 8017044:	0801e618 	.word	0x0801e618
 8017048:	0801e2f8 	.word	0x0801e2f8

0801704c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801704c:	b590      	push	{r4, r7, lr}
 801704e:	b08b      	sub	sp, #44	; 0x2c
 8017050:	af02      	add	r7, sp, #8
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	460b      	mov	r3, r1
 8017056:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017058:	2300      	movs	r3, #0
 801705a:	61fb      	str	r3, [r7, #28]
 801705c:	2300      	movs	r3, #0
 801705e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017060:	2300      	movs	r3, #0
 8017062:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d106      	bne.n	8017078 <tcp_split_unsent_seg+0x2c>
 801706a:	4b95      	ldr	r3, [pc, #596]	; (80172c0 <tcp_split_unsent_seg+0x274>)
 801706c:	f240 324b 	movw	r2, #843	; 0x34b
 8017070:	4994      	ldr	r1, [pc, #592]	; (80172c4 <tcp_split_unsent_seg+0x278>)
 8017072:	4895      	ldr	r0, [pc, #596]	; (80172c8 <tcp_split_unsent_seg+0x27c>)
 8017074:	f004 fb26 	bl	801b6c4 <iprintf>

  useg = pcb->unsent;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801707c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d102      	bne.n	801708a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017084:	f04f 33ff 	mov.w	r3, #4294967295
 8017088:	e116      	b.n	80172b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801708a:	887b      	ldrh	r3, [r7, #2]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d109      	bne.n	80170a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017090:	4b8b      	ldr	r3, [pc, #556]	; (80172c0 <tcp_split_unsent_seg+0x274>)
 8017092:	f240 3253 	movw	r2, #851	; 0x353
 8017096:	498d      	ldr	r1, [pc, #564]	; (80172cc <tcp_split_unsent_seg+0x280>)
 8017098:	488b      	ldr	r0, [pc, #556]	; (80172c8 <tcp_split_unsent_seg+0x27c>)
 801709a:	f004 fb13 	bl	801b6c4 <iprintf>
    return ERR_VAL;
 801709e:	f06f 0305 	mvn.w	r3, #5
 80170a2:	e109      	b.n	80172b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	891b      	ldrh	r3, [r3, #8]
 80170a8:	887a      	ldrh	r2, [r7, #2]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d301      	bcc.n	80170b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80170ae:	2300      	movs	r3, #0
 80170b0:	e102      	b.n	80172b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80170b6:	887a      	ldrh	r2, [r7, #2]
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d906      	bls.n	80170ca <tcp_split_unsent_seg+0x7e>
 80170bc:	4b80      	ldr	r3, [pc, #512]	; (80172c0 <tcp_split_unsent_seg+0x274>)
 80170be:	f240 325b 	movw	r2, #859	; 0x35b
 80170c2:	4983      	ldr	r1, [pc, #524]	; (80172d0 <tcp_split_unsent_seg+0x284>)
 80170c4:	4880      	ldr	r0, [pc, #512]	; (80172c8 <tcp_split_unsent_seg+0x27c>)
 80170c6:	f004 fafd 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	891b      	ldrh	r3, [r3, #8]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d106      	bne.n	80170e0 <tcp_split_unsent_seg+0x94>
 80170d2:	4b7b      	ldr	r3, [pc, #492]	; (80172c0 <tcp_split_unsent_seg+0x274>)
 80170d4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80170d8:	497e      	ldr	r1, [pc, #504]	; (80172d4 <tcp_split_unsent_seg+0x288>)
 80170da:	487b      	ldr	r0, [pc, #492]	; (80172c8 <tcp_split_unsent_seg+0x27c>)
 80170dc:	f004 faf2 	bl	801b6c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	7a9b      	ldrb	r3, [r3, #10]
 80170e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80170e6:	7bfb      	ldrb	r3, [r7, #15]
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	f003 0304 	and.w	r3, r3, #4
 80170f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80170f2:	697b      	ldr	r3, [r7, #20]
 80170f4:	891a      	ldrh	r2, [r3, #8]
 80170f6:	887b      	ldrh	r3, [r7, #2]
 80170f8:	1ad3      	subs	r3, r2, r3
 80170fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80170fc:	7bbb      	ldrb	r3, [r7, #14]
 80170fe:	b29a      	uxth	r2, r3
 8017100:	89bb      	ldrh	r3, [r7, #12]
 8017102:	4413      	add	r3, r2
 8017104:	b29b      	uxth	r3, r3
 8017106:	f44f 7220 	mov.w	r2, #640	; 0x280
 801710a:	4619      	mov	r1, r3
 801710c:	2036      	movs	r0, #54	; 0x36
 801710e:	f7fa fc43 	bl	8011998 <pbuf_alloc>
 8017112:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	2b00      	cmp	r3, #0
 8017118:	f000 80b7 	beq.w	801728a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	685b      	ldr	r3, [r3, #4]
 8017120:	891a      	ldrh	r2, [r3, #8]
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	891b      	ldrh	r3, [r3, #8]
 8017126:	1ad3      	subs	r3, r2, r3
 8017128:	b29a      	uxth	r2, r3
 801712a:	887b      	ldrh	r3, [r7, #2]
 801712c:	4413      	add	r3, r2
 801712e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	6858      	ldr	r0, [r3, #4]
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	685a      	ldr	r2, [r3, #4]
 8017138:	7bbb      	ldrb	r3, [r7, #14]
 801713a:	18d1      	adds	r1, r2, r3
 801713c:	897b      	ldrh	r3, [r7, #10]
 801713e:	89ba      	ldrh	r2, [r7, #12]
 8017140:	f7fb f8f8 	bl	8012334 <pbuf_copy_partial>
 8017144:	4603      	mov	r3, r0
 8017146:	461a      	mov	r2, r3
 8017148:	89bb      	ldrh	r3, [r7, #12]
 801714a:	4293      	cmp	r3, r2
 801714c:	f040 809f 	bne.w	801728e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	68db      	ldr	r3, [r3, #12]
 8017154:	899b      	ldrh	r3, [r3, #12]
 8017156:	b29b      	uxth	r3, r3
 8017158:	4618      	mov	r0, r3
 801715a:	f7f9 fb38 	bl	80107ce <lwip_htons>
 801715e:	4603      	mov	r3, r0
 8017160:	b2db      	uxtb	r3, r3
 8017162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017166:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017168:	2300      	movs	r3, #0
 801716a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801716c:	7efb      	ldrb	r3, [r7, #27]
 801716e:	f003 0308 	and.w	r3, r3, #8
 8017172:	2b00      	cmp	r3, #0
 8017174:	d007      	beq.n	8017186 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017176:	7efb      	ldrb	r3, [r7, #27]
 8017178:	f023 0308 	bic.w	r3, r3, #8
 801717c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801717e:	7ebb      	ldrb	r3, [r7, #26]
 8017180:	f043 0308 	orr.w	r3, r3, #8
 8017184:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017186:	7efb      	ldrb	r3, [r7, #27]
 8017188:	f003 0301 	and.w	r3, r3, #1
 801718c:	2b00      	cmp	r3, #0
 801718e:	d007      	beq.n	80171a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017190:	7efb      	ldrb	r3, [r7, #27]
 8017192:	f023 0301 	bic.w	r3, r3, #1
 8017196:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017198:	7ebb      	ldrb	r3, [r7, #26]
 801719a:	f043 0301 	orr.w	r3, r3, #1
 801719e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	68db      	ldr	r3, [r3, #12]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	4618      	mov	r0, r3
 80171a8:	f7f9 fb26 	bl	80107f8 <lwip_htonl>
 80171ac:	4602      	mov	r2, r0
 80171ae:	887b      	ldrh	r3, [r7, #2]
 80171b0:	18d1      	adds	r1, r2, r3
 80171b2:	7eba      	ldrb	r2, [r7, #26]
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
 80171b6:	9300      	str	r3, [sp, #0]
 80171b8:	460b      	mov	r3, r1
 80171ba:	6939      	ldr	r1, [r7, #16]
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f7ff fa4f 	bl	8016660 <tcp_create_segment>
 80171c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80171c4:	69fb      	ldr	r3, [r7, #28]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d063      	beq.n	8017292 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	685b      	ldr	r3, [r3, #4]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7fa ff4e 	bl	8012070 <pbuf_clen>
 80171d4:	4603      	mov	r3, r0
 80171d6:	461a      	mov	r2, r3
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171de:	1a9b      	subs	r3, r3, r2
 80171e0:	b29a      	uxth	r2, r3
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80171e8:	697b      	ldr	r3, [r7, #20]
 80171ea:	6858      	ldr	r0, [r3, #4]
 80171ec:	697b      	ldr	r3, [r7, #20]
 80171ee:	685b      	ldr	r3, [r3, #4]
 80171f0:	891a      	ldrh	r2, [r3, #8]
 80171f2:	89bb      	ldrh	r3, [r7, #12]
 80171f4:	1ad3      	subs	r3, r2, r3
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	4619      	mov	r1, r3
 80171fa:	f7fa fd2b 	bl	8011c54 <pbuf_realloc>
  useg->len -= remainder;
 80171fe:	697b      	ldr	r3, [r7, #20]
 8017200:	891a      	ldrh	r2, [r3, #8]
 8017202:	89bb      	ldrh	r3, [r7, #12]
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	b29a      	uxth	r2, r3
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	899b      	ldrh	r3, [r3, #12]
 8017212:	b29c      	uxth	r4, r3
 8017214:	7efb      	ldrb	r3, [r7, #27]
 8017216:	b29b      	uxth	r3, r3
 8017218:	4618      	mov	r0, r3
 801721a:	f7f9 fad8 	bl	80107ce <lwip_htons>
 801721e:	4603      	mov	r3, r0
 8017220:	461a      	mov	r2, r3
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	68db      	ldr	r3, [r3, #12]
 8017226:	4322      	orrs	r2, r4
 8017228:	b292      	uxth	r2, r2
 801722a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	4618      	mov	r0, r3
 8017232:	f7fa ff1d 	bl	8012070 <pbuf_clen>
 8017236:	4603      	mov	r3, r0
 8017238:	461a      	mov	r2, r3
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017240:	4413      	add	r3, r2
 8017242:	b29a      	uxth	r2, r3
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801724a:	69fb      	ldr	r3, [r7, #28]
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	4618      	mov	r0, r3
 8017250:	f7fa ff0e 	bl	8012070 <pbuf_clen>
 8017254:	4603      	mov	r3, r0
 8017256:	461a      	mov	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801725e:	4413      	add	r3, r2
 8017260:	b29a      	uxth	r2, r3
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	681a      	ldr	r2, [r3, #0]
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	69fa      	ldr	r2, [r7, #28]
 8017274:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017276:	69fb      	ldr	r3, [r7, #28]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d103      	bne.n	8017286 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2200      	movs	r2, #0
 8017282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017286:	2300      	movs	r3, #0
 8017288:	e016      	b.n	80172b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801728a:	bf00      	nop
 801728c:	e002      	b.n	8017294 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801728e:	bf00      	nop
 8017290:	e000      	b.n	8017294 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017292:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017294:	69fb      	ldr	r3, [r7, #28]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d006      	beq.n	80172a8 <tcp_split_unsent_seg+0x25c>
 801729a:	4b09      	ldr	r3, [pc, #36]	; (80172c0 <tcp_split_unsent_seg+0x274>)
 801729c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80172a0:	490d      	ldr	r1, [pc, #52]	; (80172d8 <tcp_split_unsent_seg+0x28c>)
 80172a2:	4809      	ldr	r0, [pc, #36]	; (80172c8 <tcp_split_unsent_seg+0x27c>)
 80172a4:	f004 fa0e 	bl	801b6c4 <iprintf>
  if (p != NULL) {
 80172a8:	693b      	ldr	r3, [r7, #16]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d002      	beq.n	80172b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80172ae:	6938      	ldr	r0, [r7, #16]
 80172b0:	f7fa fe56 	bl	8011f60 <pbuf_free>
  }

  return ERR_MEM;
 80172b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3724      	adds	r7, #36	; 0x24
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd90      	pop	{r4, r7, pc}
 80172c0:	0801e2a4 	.word	0x0801e2a4
 80172c4:	0801e638 	.word	0x0801e638
 80172c8:	0801e2f8 	.word	0x0801e2f8
 80172cc:	0801e65c 	.word	0x0801e65c
 80172d0:	0801e680 	.word	0x0801e680
 80172d4:	0801e690 	.word	0x0801e690
 80172d8:	0801e6a0 	.word	0x0801e6a0

080172dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80172dc:	b590      	push	{r4, r7, lr}
 80172de:	b085      	sub	sp, #20
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d106      	bne.n	80172f8 <tcp_send_fin+0x1c>
 80172ea:	4b21      	ldr	r3, [pc, #132]	; (8017370 <tcp_send_fin+0x94>)
 80172ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80172f0:	4920      	ldr	r1, [pc, #128]	; (8017374 <tcp_send_fin+0x98>)
 80172f2:	4821      	ldr	r0, [pc, #132]	; (8017378 <tcp_send_fin+0x9c>)
 80172f4:	f004 f9e6 	bl	801b6c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d02e      	beq.n	801735e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017304:	60fb      	str	r3, [r7, #12]
 8017306:	e002      	b.n	801730e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d1f8      	bne.n	8017308 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	68db      	ldr	r3, [r3, #12]
 801731a:	899b      	ldrh	r3, [r3, #12]
 801731c:	b29b      	uxth	r3, r3
 801731e:	4618      	mov	r0, r3
 8017320:	f7f9 fa55 	bl	80107ce <lwip_htons>
 8017324:	4603      	mov	r3, r0
 8017326:	b2db      	uxtb	r3, r3
 8017328:	f003 0307 	and.w	r3, r3, #7
 801732c:	2b00      	cmp	r3, #0
 801732e:	d116      	bne.n	801735e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	899b      	ldrh	r3, [r3, #12]
 8017336:	b29c      	uxth	r4, r3
 8017338:	2001      	movs	r0, #1
 801733a:	f7f9 fa48 	bl	80107ce <lwip_htons>
 801733e:	4603      	mov	r3, r0
 8017340:	461a      	mov	r2, r3
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	4322      	orrs	r2, r4
 8017348:	b292      	uxth	r2, r2
 801734a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	8b5b      	ldrh	r3, [r3, #26]
 8017350:	f043 0320 	orr.w	r3, r3, #32
 8017354:	b29a      	uxth	r2, r3
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801735a:	2300      	movs	r3, #0
 801735c:	e004      	b.n	8017368 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801735e:	2101      	movs	r1, #1
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f000 f80b 	bl	801737c <tcp_enqueue_flags>
 8017366:	4603      	mov	r3, r0
}
 8017368:	4618      	mov	r0, r3
 801736a:	3714      	adds	r7, #20
 801736c:	46bd      	mov	sp, r7
 801736e:	bd90      	pop	{r4, r7, pc}
 8017370:	0801e2a4 	.word	0x0801e2a4
 8017374:	0801e6ac 	.word	0x0801e6ac
 8017378:	0801e2f8 	.word	0x0801e2f8

0801737c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b08a      	sub	sp, #40	; 0x28
 8017380:	af02      	add	r7, sp, #8
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	460b      	mov	r3, r1
 8017386:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017388:	2300      	movs	r3, #0
 801738a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801738c:	2300      	movs	r3, #0
 801738e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017390:	78fb      	ldrb	r3, [r7, #3]
 8017392:	f003 0303 	and.w	r3, r3, #3
 8017396:	2b00      	cmp	r3, #0
 8017398:	d106      	bne.n	80173a8 <tcp_enqueue_flags+0x2c>
 801739a:	4b67      	ldr	r3, [pc, #412]	; (8017538 <tcp_enqueue_flags+0x1bc>)
 801739c:	f240 4211 	movw	r2, #1041	; 0x411
 80173a0:	4966      	ldr	r1, [pc, #408]	; (801753c <tcp_enqueue_flags+0x1c0>)
 80173a2:	4867      	ldr	r0, [pc, #412]	; (8017540 <tcp_enqueue_flags+0x1c4>)
 80173a4:	f004 f98e 	bl	801b6c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d106      	bne.n	80173bc <tcp_enqueue_flags+0x40>
 80173ae:	4b62      	ldr	r3, [pc, #392]	; (8017538 <tcp_enqueue_flags+0x1bc>)
 80173b0:	f240 4213 	movw	r2, #1043	; 0x413
 80173b4:	4963      	ldr	r1, [pc, #396]	; (8017544 <tcp_enqueue_flags+0x1c8>)
 80173b6:	4862      	ldr	r0, [pc, #392]	; (8017540 <tcp_enqueue_flags+0x1c4>)
 80173b8:	f004 f984 	bl	801b6c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80173bc:	78fb      	ldrb	r3, [r7, #3]
 80173be:	f003 0302 	and.w	r3, r3, #2
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d001      	beq.n	80173ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80173c6:	2301      	movs	r3, #1
 80173c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80173ca:	7ffb      	ldrb	r3, [r7, #31]
 80173cc:	009b      	lsls	r3, r3, #2
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	f003 0304 	and.w	r3, r3, #4
 80173d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80173d6:	7dfb      	ldrb	r3, [r7, #23]
 80173d8:	b29b      	uxth	r3, r3
 80173da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173de:	4619      	mov	r1, r3
 80173e0:	2036      	movs	r0, #54	; 0x36
 80173e2:	f7fa fad9 	bl	8011998 <pbuf_alloc>
 80173e6:	6138      	str	r0, [r7, #16]
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d109      	bne.n	8017402 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	8b5b      	ldrh	r3, [r3, #26]
 80173f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173f6:	b29a      	uxth	r2, r3
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80173fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017400:	e095      	b.n	801752e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	895a      	ldrh	r2, [r3, #10]
 8017406:	7dfb      	ldrb	r3, [r7, #23]
 8017408:	b29b      	uxth	r3, r3
 801740a:	429a      	cmp	r2, r3
 801740c:	d206      	bcs.n	801741c <tcp_enqueue_flags+0xa0>
 801740e:	4b4a      	ldr	r3, [pc, #296]	; (8017538 <tcp_enqueue_flags+0x1bc>)
 8017410:	f240 4239 	movw	r2, #1081	; 0x439
 8017414:	494c      	ldr	r1, [pc, #304]	; (8017548 <tcp_enqueue_flags+0x1cc>)
 8017416:	484a      	ldr	r0, [pc, #296]	; (8017540 <tcp_enqueue_flags+0x1c4>)
 8017418:	f004 f954 	bl	801b6c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017420:	78fa      	ldrb	r2, [r7, #3]
 8017422:	7ffb      	ldrb	r3, [r7, #31]
 8017424:	9300      	str	r3, [sp, #0]
 8017426:	460b      	mov	r3, r1
 8017428:	6939      	ldr	r1, [r7, #16]
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7ff f918 	bl	8016660 <tcp_create_segment>
 8017430:	60f8      	str	r0, [r7, #12]
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d109      	bne.n	801744c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	8b5b      	ldrh	r3, [r3, #26]
 801743c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017440:	b29a      	uxth	r2, r3
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017446:	f04f 33ff 	mov.w	r3, #4294967295
 801744a:	e070      	b.n	801752e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	68db      	ldr	r3, [r3, #12]
 8017450:	f003 0303 	and.w	r3, r3, #3
 8017454:	2b00      	cmp	r3, #0
 8017456:	d006      	beq.n	8017466 <tcp_enqueue_flags+0xea>
 8017458:	4b37      	ldr	r3, [pc, #220]	; (8017538 <tcp_enqueue_flags+0x1bc>)
 801745a:	f240 4242 	movw	r2, #1090	; 0x442
 801745e:	493b      	ldr	r1, [pc, #236]	; (801754c <tcp_enqueue_flags+0x1d0>)
 8017460:	4837      	ldr	r0, [pc, #220]	; (8017540 <tcp_enqueue_flags+0x1c4>)
 8017462:	f004 f92f 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	891b      	ldrh	r3, [r3, #8]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d006      	beq.n	801747c <tcp_enqueue_flags+0x100>
 801746e:	4b32      	ldr	r3, [pc, #200]	; (8017538 <tcp_enqueue_flags+0x1bc>)
 8017470:	f240 4243 	movw	r2, #1091	; 0x443
 8017474:	4936      	ldr	r1, [pc, #216]	; (8017550 <tcp_enqueue_flags+0x1d4>)
 8017476:	4832      	ldr	r0, [pc, #200]	; (8017540 <tcp_enqueue_flags+0x1c4>)
 8017478:	f004 f924 	bl	801b6c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017480:	2b00      	cmp	r3, #0
 8017482:	d103      	bne.n	801748c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	68fa      	ldr	r2, [r7, #12]
 8017488:	66da      	str	r2, [r3, #108]	; 0x6c
 801748a:	e00d      	b.n	80174a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017490:	61bb      	str	r3, [r7, #24]
 8017492:	e002      	b.n	801749a <tcp_enqueue_flags+0x11e>
 8017494:	69bb      	ldr	r3, [r7, #24]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	61bb      	str	r3, [r7, #24]
 801749a:	69bb      	ldr	r3, [r7, #24]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d1f8      	bne.n	8017494 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80174a2:	69bb      	ldr	r3, [r7, #24]
 80174a4:	68fa      	ldr	r2, [r7, #12]
 80174a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2200      	movs	r2, #0
 80174ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80174b0:	78fb      	ldrb	r3, [r7, #3]
 80174b2:	f003 0302 	and.w	r3, r3, #2
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d104      	bne.n	80174c4 <tcp_enqueue_flags+0x148>
 80174ba:	78fb      	ldrb	r3, [r7, #3]
 80174bc:	f003 0301 	and.w	r3, r3, #1
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d004      	beq.n	80174ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174c8:	1c5a      	adds	r2, r3, #1
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80174ce:	78fb      	ldrb	r3, [r7, #3]
 80174d0:	f003 0301 	and.w	r3, r3, #1
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d006      	beq.n	80174e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	8b5b      	ldrh	r3, [r3, #26]
 80174dc:	f043 0320 	orr.w	r3, r3, #32
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	685b      	ldr	r3, [r3, #4]
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7fa fdc0 	bl	8012070 <pbuf_clen>
 80174f0:	4603      	mov	r3, r0
 80174f2:	461a      	mov	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174fa:	4413      	add	r3, r2
 80174fc:	b29a      	uxth	r2, r3
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801750a:	2b00      	cmp	r3, #0
 801750c:	d00e      	beq.n	801752c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017512:	2b00      	cmp	r3, #0
 8017514:	d10a      	bne.n	801752c <tcp_enqueue_flags+0x1b0>
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801751a:	2b00      	cmp	r3, #0
 801751c:	d106      	bne.n	801752c <tcp_enqueue_flags+0x1b0>
 801751e:	4b06      	ldr	r3, [pc, #24]	; (8017538 <tcp_enqueue_flags+0x1bc>)
 8017520:	f240 4265 	movw	r2, #1125	; 0x465
 8017524:	490b      	ldr	r1, [pc, #44]	; (8017554 <tcp_enqueue_flags+0x1d8>)
 8017526:	4806      	ldr	r0, [pc, #24]	; (8017540 <tcp_enqueue_flags+0x1c4>)
 8017528:	f004 f8cc 	bl	801b6c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801752c:	2300      	movs	r3, #0
}
 801752e:	4618      	mov	r0, r3
 8017530:	3720      	adds	r7, #32
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	0801e2a4 	.word	0x0801e2a4
 801753c:	0801e6c8 	.word	0x0801e6c8
 8017540:	0801e2f8 	.word	0x0801e2f8
 8017544:	0801e720 	.word	0x0801e720
 8017548:	0801e740 	.word	0x0801e740
 801754c:	0801e77c 	.word	0x0801e77c
 8017550:	0801e794 	.word	0x0801e794
 8017554:	0801e7c0 	.word	0x0801e7c0

08017558 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017558:	b5b0      	push	{r4, r5, r7, lr}
 801755a:	b08a      	sub	sp, #40	; 0x28
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d106      	bne.n	8017574 <tcp_output+0x1c>
 8017566:	4b8a      	ldr	r3, [pc, #552]	; (8017790 <tcp_output+0x238>)
 8017568:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801756c:	4989      	ldr	r1, [pc, #548]	; (8017794 <tcp_output+0x23c>)
 801756e:	488a      	ldr	r0, [pc, #552]	; (8017798 <tcp_output+0x240>)
 8017570:	f004 f8a8 	bl	801b6c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	7d1b      	ldrb	r3, [r3, #20]
 8017578:	2b01      	cmp	r3, #1
 801757a:	d106      	bne.n	801758a <tcp_output+0x32>
 801757c:	4b84      	ldr	r3, [pc, #528]	; (8017790 <tcp_output+0x238>)
 801757e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017582:	4986      	ldr	r1, [pc, #536]	; (801779c <tcp_output+0x244>)
 8017584:	4884      	ldr	r0, [pc, #528]	; (8017798 <tcp_output+0x240>)
 8017586:	f004 f89d 	bl	801b6c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801758a:	4b85      	ldr	r3, [pc, #532]	; (80177a0 <tcp_output+0x248>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	687a      	ldr	r2, [r7, #4]
 8017590:	429a      	cmp	r2, r3
 8017592:	d101      	bne.n	8017598 <tcp_output+0x40>
    return ERR_OK;
 8017594:	2300      	movs	r3, #0
 8017596:	e1ce      	b.n	8017936 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80175a4:	4293      	cmp	r3, r2
 80175a6:	bf28      	it	cs
 80175a8:	4613      	movcs	r3, r2
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80175b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d10b      	bne.n	80175d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	8b5b      	ldrh	r3, [r3, #26]
 80175be:	f003 0302 	and.w	r3, r3, #2
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	f000 81aa 	beq.w	801791c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f000 fdcb 	bl	8018164 <tcp_send_empty_ack>
 80175ce:	4603      	mov	r3, r0
 80175d0:	e1b1      	b.n	8017936 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80175d2:	6879      	ldr	r1, [r7, #4]
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	3304      	adds	r3, #4
 80175d8:	461a      	mov	r2, r3
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f7ff f824 	bl	8016628 <tcp_route>
 80175e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80175e2:	697b      	ldr	r3, [r7, #20]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d102      	bne.n	80175ee <tcp_output+0x96>
    return ERR_RTE;
 80175e8:	f06f 0303 	mvn.w	r3, #3
 80175ec:	e1a3      	b.n	8017936 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d003      	beq.n	80175fc <tcp_output+0xa4>
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d111      	bne.n	8017620 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d002      	beq.n	8017608 <tcp_output+0xb0>
 8017602:	697b      	ldr	r3, [r7, #20]
 8017604:	3304      	adds	r3, #4
 8017606:	e000      	b.n	801760a <tcp_output+0xb2>
 8017608:	2300      	movs	r3, #0
 801760a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d102      	bne.n	8017618 <tcp_output+0xc0>
      return ERR_RTE;
 8017612:	f06f 0303 	mvn.w	r3, #3
 8017616:	e18e      	b.n	8017936 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	681a      	ldr	r2, [r3, #0]
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017622:	68db      	ldr	r3, [r3, #12]
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	4618      	mov	r0, r3
 8017628:	f7f9 f8e6 	bl	80107f8 <lwip_htonl>
 801762c:	4602      	mov	r2, r0
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017632:	1ad3      	subs	r3, r2, r3
 8017634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017636:	8912      	ldrh	r2, [r2, #8]
 8017638:	4413      	add	r3, r2
 801763a:	69ba      	ldr	r2, [r7, #24]
 801763c:	429a      	cmp	r2, r3
 801763e:	d227      	bcs.n	8017690 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017646:	461a      	mov	r2, r3
 8017648:	69bb      	ldr	r3, [r7, #24]
 801764a:	4293      	cmp	r3, r2
 801764c:	d114      	bne.n	8017678 <tcp_output+0x120>
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017652:	2b00      	cmp	r3, #0
 8017654:	d110      	bne.n	8017678 <tcp_output+0x120>
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801765c:	2b00      	cmp	r3, #0
 801765e:	d10b      	bne.n	8017678 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2200      	movs	r2, #0
 8017664:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2201      	movs	r2, #1
 801766c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2200      	movs	r2, #0
 8017674:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	8b5b      	ldrh	r3, [r3, #26]
 801767c:	f003 0302 	and.w	r3, r3, #2
 8017680:	2b00      	cmp	r3, #0
 8017682:	f000 814d 	beq.w	8017920 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f000 fd6c 	bl	8018164 <tcp_send_empty_ack>
 801768c:	4603      	mov	r3, r0
 801768e:	e152      	b.n	8017936 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2200      	movs	r2, #0
 8017694:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801769c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801769e:	6a3b      	ldr	r3, [r7, #32]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	f000 811c 	beq.w	80178de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80176a6:	e002      	b.n	80176ae <tcp_output+0x156>
 80176a8:	6a3b      	ldr	r3, [r7, #32]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	623b      	str	r3, [r7, #32]
 80176ae:	6a3b      	ldr	r3, [r7, #32]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d1f8      	bne.n	80176a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80176b6:	e112      	b.n	80178de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80176b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ba:	68db      	ldr	r3, [r3, #12]
 80176bc:	899b      	ldrh	r3, [r3, #12]
 80176be:	b29b      	uxth	r3, r3
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7f9 f884 	bl	80107ce <lwip_htons>
 80176c6:	4603      	mov	r3, r0
 80176c8:	b2db      	uxtb	r3, r3
 80176ca:	f003 0304 	and.w	r3, r3, #4
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d006      	beq.n	80176e0 <tcp_output+0x188>
 80176d2:	4b2f      	ldr	r3, [pc, #188]	; (8017790 <tcp_output+0x238>)
 80176d4:	f240 5236 	movw	r2, #1334	; 0x536
 80176d8:	4932      	ldr	r1, [pc, #200]	; (80177a4 <tcp_output+0x24c>)
 80176da:	482f      	ldr	r0, [pc, #188]	; (8017798 <tcp_output+0x240>)
 80176dc:	f003 fff2 	bl	801b6c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d01f      	beq.n	8017728 <tcp_output+0x1d0>
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	8b5b      	ldrh	r3, [r3, #26]
 80176ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d119      	bne.n	8017728 <tcp_output+0x1d0>
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00b      	beq.n	8017714 <tcp_output+0x1bc>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d110      	bne.n	8017728 <tcp_output+0x1d0>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801770a:	891a      	ldrh	r2, [r3, #8]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017710:	429a      	cmp	r2, r3
 8017712:	d209      	bcs.n	8017728 <tcp_output+0x1d0>
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801771a:	2b00      	cmp	r3, #0
 801771c:	d004      	beq.n	8017728 <tcp_output+0x1d0>
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017724:	2b0f      	cmp	r3, #15
 8017726:	d901      	bls.n	801772c <tcp_output+0x1d4>
 8017728:	2301      	movs	r3, #1
 801772a:	e000      	b.n	801772e <tcp_output+0x1d6>
 801772c:	2300      	movs	r3, #0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d106      	bne.n	8017740 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	8b5b      	ldrh	r3, [r3, #26]
 8017736:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801773a:	2b00      	cmp	r3, #0
 801773c:	f000 80e4 	beq.w	8017908 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	7d1b      	ldrb	r3, [r3, #20]
 8017744:	2b02      	cmp	r3, #2
 8017746:	d00d      	beq.n	8017764 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774a:	68db      	ldr	r3, [r3, #12]
 801774c:	899b      	ldrh	r3, [r3, #12]
 801774e:	b29c      	uxth	r4, r3
 8017750:	2010      	movs	r0, #16
 8017752:	f7f9 f83c 	bl	80107ce <lwip_htons>
 8017756:	4603      	mov	r3, r0
 8017758:	461a      	mov	r2, r3
 801775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775c:	68db      	ldr	r3, [r3, #12]
 801775e:	4322      	orrs	r2, r4
 8017760:	b292      	uxth	r2, r2
 8017762:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017764:	697a      	ldr	r2, [r7, #20]
 8017766:	6879      	ldr	r1, [r7, #4]
 8017768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801776a:	f000 f909 	bl	8017980 <tcp_output_segment>
 801776e:	4603      	mov	r3, r0
 8017770:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d016      	beq.n	80177a8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	8b5b      	ldrh	r3, [r3, #26]
 801777e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017782:	b29a      	uxth	r2, r3
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	835a      	strh	r2, [r3, #26]
      return err;
 8017788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801778c:	e0d3      	b.n	8017936 <tcp_output+0x3de>
 801778e:	bf00      	nop
 8017790:	0801e2a4 	.word	0x0801e2a4
 8017794:	0801e7e8 	.word	0x0801e7e8
 8017798:	0801e2f8 	.word	0x0801e2f8
 801779c:	0801e800 	.word	0x0801e800
 80177a0:	2000b028 	.word	0x2000b028
 80177a4:	0801e828 	.word	0x0801e828
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	7d1b      	ldrb	r3, [r3, #20]
 80177b4:	2b02      	cmp	r3, #2
 80177b6:	d006      	beq.n	80177c6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	8b5b      	ldrh	r3, [r3, #26]
 80177bc:	f023 0303 	bic.w	r3, r3, #3
 80177c0:	b29a      	uxth	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	68db      	ldr	r3, [r3, #12]
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7f9 f813 	bl	80107f8 <lwip_htonl>
 80177d2:	4604      	mov	r4, r0
 80177d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d6:	891b      	ldrh	r3, [r3, #8]
 80177d8:	461d      	mov	r5, r3
 80177da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177dc:	68db      	ldr	r3, [r3, #12]
 80177de:	899b      	ldrh	r3, [r3, #12]
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7f8 fff3 	bl	80107ce <lwip_htons>
 80177e8:	4603      	mov	r3, r0
 80177ea:	b2db      	uxtb	r3, r3
 80177ec:	f003 0303 	and.w	r3, r3, #3
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d001      	beq.n	80177f8 <tcp_output+0x2a0>
 80177f4:	2301      	movs	r3, #1
 80177f6:	e000      	b.n	80177fa <tcp_output+0x2a2>
 80177f8:	2300      	movs	r3, #0
 80177fa:	442b      	add	r3, r5
 80177fc:	4423      	add	r3, r4
 80177fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	1ad3      	subs	r3, r2, r3
 8017808:	2b00      	cmp	r3, #0
 801780a:	da02      	bge.n	8017812 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	68ba      	ldr	r2, [r7, #8]
 8017810:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017814:	891b      	ldrh	r3, [r3, #8]
 8017816:	461c      	mov	r4, r3
 8017818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801781a:	68db      	ldr	r3, [r3, #12]
 801781c:	899b      	ldrh	r3, [r3, #12]
 801781e:	b29b      	uxth	r3, r3
 8017820:	4618      	mov	r0, r3
 8017822:	f7f8 ffd4 	bl	80107ce <lwip_htons>
 8017826:	4603      	mov	r3, r0
 8017828:	b2db      	uxtb	r3, r3
 801782a:	f003 0303 	and.w	r3, r3, #3
 801782e:	2b00      	cmp	r3, #0
 8017830:	d001      	beq.n	8017836 <tcp_output+0x2de>
 8017832:	2301      	movs	r3, #1
 8017834:	e000      	b.n	8017838 <tcp_output+0x2e0>
 8017836:	2300      	movs	r3, #0
 8017838:	4423      	add	r3, r4
 801783a:	2b00      	cmp	r3, #0
 801783c:	d049      	beq.n	80178d2 <tcp_output+0x37a>
      seg->next = NULL;
 801783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017840:	2200      	movs	r2, #0
 8017842:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017848:	2b00      	cmp	r3, #0
 801784a:	d105      	bne.n	8017858 <tcp_output+0x300>
        pcb->unacked = seg;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017850:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017854:	623b      	str	r3, [r7, #32]
 8017856:	e03f      	b.n	80178d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801785a:	68db      	ldr	r3, [r3, #12]
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	4618      	mov	r0, r3
 8017860:	f7f8 ffca 	bl	80107f8 <lwip_htonl>
 8017864:	4604      	mov	r4, r0
 8017866:	6a3b      	ldr	r3, [r7, #32]
 8017868:	68db      	ldr	r3, [r3, #12]
 801786a:	685b      	ldr	r3, [r3, #4]
 801786c:	4618      	mov	r0, r3
 801786e:	f7f8 ffc3 	bl	80107f8 <lwip_htonl>
 8017872:	4603      	mov	r3, r0
 8017874:	1ae3      	subs	r3, r4, r3
 8017876:	2b00      	cmp	r3, #0
 8017878:	da24      	bge.n	80178c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	3370      	adds	r3, #112	; 0x70
 801787e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017880:	e002      	b.n	8017888 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017882:	69fb      	ldr	r3, [r7, #28]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017888:	69fb      	ldr	r3, [r7, #28]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d011      	beq.n	80178b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017890:	69fb      	ldr	r3, [r7, #28]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	68db      	ldr	r3, [r3, #12]
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	4618      	mov	r0, r3
 801789a:	f7f8 ffad 	bl	80107f8 <lwip_htonl>
 801789e:	4604      	mov	r4, r0
 80178a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178a2:	68db      	ldr	r3, [r3, #12]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7f8 ffa6 	bl	80107f8 <lwip_htonl>
 80178ac:	4603      	mov	r3, r0
 80178ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	dbe6      	blt.n	8017882 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80178b4:	69fb      	ldr	r3, [r7, #28]
 80178b6:	681a      	ldr	r2, [r3, #0]
 80178b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178c0:	601a      	str	r2, [r3, #0]
 80178c2:	e009      	b.n	80178d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80178c4:	6a3b      	ldr	r3, [r7, #32]
 80178c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80178ca:	6a3b      	ldr	r3, [r7, #32]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	623b      	str	r3, [r7, #32]
 80178d0:	e002      	b.n	80178d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80178d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178d4:	f7fb ff19 	bl	801370a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80178de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d012      	beq.n	801790a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80178e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e6:	68db      	ldr	r3, [r3, #12]
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7f8 ff84 	bl	80107f8 <lwip_htonl>
 80178f0:	4602      	mov	r2, r0
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178f6:	1ad3      	subs	r3, r2, r3
 80178f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178fa:	8912      	ldrh	r2, [r2, #8]
 80178fc:	4413      	add	r3, r2
  while (seg != NULL &&
 80178fe:	69ba      	ldr	r2, [r7, #24]
 8017900:	429a      	cmp	r2, r3
 8017902:	f4bf aed9 	bcs.w	80176b8 <tcp_output+0x160>
 8017906:	e000      	b.n	801790a <tcp_output+0x3b2>
      break;
 8017908:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801790e:	2b00      	cmp	r3, #0
 8017910:	d108      	bne.n	8017924 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	2200      	movs	r2, #0
 8017916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801791a:	e004      	b.n	8017926 <tcp_output+0x3ce>
    goto output_done;
 801791c:	bf00      	nop
 801791e:	e002      	b.n	8017926 <tcp_output+0x3ce>
    goto output_done;
 8017920:	bf00      	nop
 8017922:	e000      	b.n	8017926 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017924:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	8b5b      	ldrh	r3, [r3, #26]
 801792a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801792e:	b29a      	uxth	r2, r3
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017934:	2300      	movs	r3, #0
}
 8017936:	4618      	mov	r0, r3
 8017938:	3728      	adds	r7, #40	; 0x28
 801793a:	46bd      	mov	sp, r7
 801793c:	bdb0      	pop	{r4, r5, r7, pc}
 801793e:	bf00      	nop

08017940 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d106      	bne.n	801795c <tcp_output_segment_busy+0x1c>
 801794e:	4b09      	ldr	r3, [pc, #36]	; (8017974 <tcp_output_segment_busy+0x34>)
 8017950:	f240 529a 	movw	r2, #1434	; 0x59a
 8017954:	4908      	ldr	r1, [pc, #32]	; (8017978 <tcp_output_segment_busy+0x38>)
 8017956:	4809      	ldr	r0, [pc, #36]	; (801797c <tcp_output_segment_busy+0x3c>)
 8017958:	f003 feb4 	bl	801b6c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	685b      	ldr	r3, [r3, #4]
 8017960:	7b9b      	ldrb	r3, [r3, #14]
 8017962:	2b01      	cmp	r3, #1
 8017964:	d001      	beq.n	801796a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017966:	2301      	movs	r3, #1
 8017968:	e000      	b.n	801796c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801796a:	2300      	movs	r3, #0
}
 801796c:	4618      	mov	r0, r3
 801796e:	3708      	adds	r7, #8
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}
 8017974:	0801e2a4 	.word	0x0801e2a4
 8017978:	0801e840 	.word	0x0801e840
 801797c:	0801e2f8 	.word	0x0801e2f8

08017980 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017980:	b5b0      	push	{r4, r5, r7, lr}
 8017982:	b08c      	sub	sp, #48	; 0x30
 8017984:	af04      	add	r7, sp, #16
 8017986:	60f8      	str	r0, [r7, #12]
 8017988:	60b9      	str	r1, [r7, #8]
 801798a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d106      	bne.n	80179a0 <tcp_output_segment+0x20>
 8017992:	4b64      	ldr	r3, [pc, #400]	; (8017b24 <tcp_output_segment+0x1a4>)
 8017994:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017998:	4963      	ldr	r1, [pc, #396]	; (8017b28 <tcp_output_segment+0x1a8>)
 801799a:	4864      	ldr	r0, [pc, #400]	; (8017b2c <tcp_output_segment+0x1ac>)
 801799c:	f003 fe92 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d106      	bne.n	80179b4 <tcp_output_segment+0x34>
 80179a6:	4b5f      	ldr	r3, [pc, #380]	; (8017b24 <tcp_output_segment+0x1a4>)
 80179a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80179ac:	4960      	ldr	r1, [pc, #384]	; (8017b30 <tcp_output_segment+0x1b0>)
 80179ae:	485f      	ldr	r0, [pc, #380]	; (8017b2c <tcp_output_segment+0x1ac>)
 80179b0:	f003 fe88 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d106      	bne.n	80179c8 <tcp_output_segment+0x48>
 80179ba:	4b5a      	ldr	r3, [pc, #360]	; (8017b24 <tcp_output_segment+0x1a4>)
 80179bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80179c0:	495c      	ldr	r1, [pc, #368]	; (8017b34 <tcp_output_segment+0x1b4>)
 80179c2:	485a      	ldr	r0, [pc, #360]	; (8017b2c <tcp_output_segment+0x1ac>)
 80179c4:	f003 fe7e 	bl	801b6c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80179c8:	68f8      	ldr	r0, [r7, #12]
 80179ca:	f7ff ffb9 	bl	8017940 <tcp_output_segment_busy>
 80179ce:	4603      	mov	r3, r0
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d001      	beq.n	80179d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80179d4:	2300      	movs	r3, #0
 80179d6:	e0a1      	b.n	8017b1c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	68dc      	ldr	r4, [r3, #12]
 80179e0:	4610      	mov	r0, r2
 80179e2:	f7f8 ff09 	bl	80107f8 <lwip_htonl>
 80179e6:	4603      	mov	r3, r0
 80179e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	68dc      	ldr	r4, [r3, #12]
 80179f2:	4610      	mov	r0, r2
 80179f4:	f7f8 feeb 	bl	80107ce <lwip_htons>
 80179f8:	4603      	mov	r3, r0
 80179fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a00:	68ba      	ldr	r2, [r7, #8]
 8017a02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017a04:	441a      	add	r2, r3
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	68db      	ldr	r3, [r3, #12]
 8017a0e:	3314      	adds	r3, #20
 8017a10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	7a9b      	ldrb	r3, [r3, #10]
 8017a16:	f003 0301 	and.w	r3, r3, #1
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d015      	beq.n	8017a4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	3304      	adds	r3, #4
 8017a22:	461a      	mov	r2, r3
 8017a24:	6879      	ldr	r1, [r7, #4]
 8017a26:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8017a2a:	f7fc fa33 	bl	8013e94 <tcp_eff_send_mss_netif>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017a32:	8b7b      	ldrh	r3, [r7, #26]
 8017a34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f8 fedd 	bl	80107f8 <lwip_htonl>
 8017a3e:	4602      	mov	r2, r0
 8017a40:	69fb      	ldr	r3, [r7, #28]
 8017a42:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	3304      	adds	r3, #4
 8017a48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	da02      	bge.n	8017a5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	2200      	movs	r2, #0
 8017a58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d10c      	bne.n	8017a7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017a62:	4b35      	ldr	r3, [pc, #212]	; (8017b38 <tcp_output_segment+0x1b8>)
 8017a64:	681a      	ldr	r2, [r3, #0]
 8017a66:	68bb      	ldr	r3, [r7, #8]
 8017a68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	68db      	ldr	r3, [r3, #12]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7f8 fec1 	bl	80107f8 <lwip_htonl>
 8017a76:	4602      	mov	r2, r0
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	68da      	ldr	r2, [r3, #12]
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	685b      	ldr	r3, [r3, #4]
 8017a86:	1ad3      	subs	r3, r2, r3
 8017a88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	8959      	ldrh	r1, [r3, #10]
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	685b      	ldr	r3, [r3, #4]
 8017a94:	8b3a      	ldrh	r2, [r7, #24]
 8017a96:	1a8a      	subs	r2, r1, r2
 8017a98:	b292      	uxth	r2, r2
 8017a9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	685b      	ldr	r3, [r3, #4]
 8017aa0:	8919      	ldrh	r1, [r3, #8]
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	685b      	ldr	r3, [r3, #4]
 8017aa6:	8b3a      	ldrh	r2, [r7, #24]
 8017aa8:	1a8a      	subs	r2, r1, r2
 8017aaa:	b292      	uxth	r2, r2
 8017aac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	68fa      	ldr	r2, [r7, #12]
 8017ab4:	68d2      	ldr	r2, [r2, #12]
 8017ab6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	68db      	ldr	r3, [r3, #12]
 8017abc:	2200      	movs	r2, #0
 8017abe:	741a      	strb	r2, [r3, #16]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	68da      	ldr	r2, [r3, #12]
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	7a9b      	ldrb	r3, [r3, #10]
 8017acc:	f003 0301 	and.w	r3, r3, #1
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d001      	beq.n	8017ad8 <tcp_output_segment+0x158>
 8017ad4:	2318      	movs	r3, #24
 8017ad6:	e000      	b.n	8017ada <tcp_output_segment+0x15a>
 8017ad8:	2314      	movs	r3, #20
 8017ada:	4413      	add	r3, r2
 8017adc:	69fa      	ldr	r2, [r7, #28]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d006      	beq.n	8017af0 <tcp_output_segment+0x170>
 8017ae2:	4b10      	ldr	r3, [pc, #64]	; (8017b24 <tcp_output_segment+0x1a4>)
 8017ae4:	f240 621c 	movw	r2, #1564	; 0x61c
 8017ae8:	4914      	ldr	r1, [pc, #80]	; (8017b3c <tcp_output_segment+0x1bc>)
 8017aea:	4810      	ldr	r0, [pc, #64]	; (8017b2c <tcp_output_segment+0x1ac>)
 8017aec:	f003 fdea 	bl	801b6c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	6858      	ldr	r0, [r3, #4]
 8017af4:	68b9      	ldr	r1, [r7, #8]
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	1d1c      	adds	r4, r3, #4
 8017afa:	68bb      	ldr	r3, [r7, #8]
 8017afc:	7add      	ldrb	r5, [r3, #11]
 8017afe:	68bb      	ldr	r3, [r7, #8]
 8017b00:	7a9b      	ldrb	r3, [r3, #10]
 8017b02:	687a      	ldr	r2, [r7, #4]
 8017b04:	9202      	str	r2, [sp, #8]
 8017b06:	2206      	movs	r2, #6
 8017b08:	9201      	str	r2, [sp, #4]
 8017b0a:	9300      	str	r3, [sp, #0]
 8017b0c:	462b      	mov	r3, r5
 8017b0e:	4622      	mov	r2, r4
 8017b10:	f002 fa50 	bl	8019fb4 <ip4_output_if>
 8017b14:	4603      	mov	r3, r0
 8017b16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3720      	adds	r7, #32
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bdb0      	pop	{r4, r5, r7, pc}
 8017b24:	0801e2a4 	.word	0x0801e2a4
 8017b28:	0801e868 	.word	0x0801e868
 8017b2c:	0801e2f8 	.word	0x0801e2f8
 8017b30:	0801e888 	.word	0x0801e888
 8017b34:	0801e8a8 	.word	0x0801e8a8
 8017b38:	2000afdc 	.word	0x2000afdc
 8017b3c:	0801e8cc 	.word	0x0801e8cc

08017b40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017b40:	b5b0      	push	{r4, r5, r7, lr}
 8017b42:	b084      	sub	sp, #16
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d106      	bne.n	8017b5c <tcp_rexmit_rto_prepare+0x1c>
 8017b4e:	4b31      	ldr	r3, [pc, #196]	; (8017c14 <tcp_rexmit_rto_prepare+0xd4>)
 8017b50:	f240 6263 	movw	r2, #1635	; 0x663
 8017b54:	4930      	ldr	r1, [pc, #192]	; (8017c18 <tcp_rexmit_rto_prepare+0xd8>)
 8017b56:	4831      	ldr	r0, [pc, #196]	; (8017c1c <tcp_rexmit_rto_prepare+0xdc>)
 8017b58:	f003 fdb4 	bl	801b6c4 <iprintf>

  if (pcb->unacked == NULL) {
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d102      	bne.n	8017b6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017b64:	f06f 0305 	mvn.w	r3, #5
 8017b68:	e050      	b.n	8017c0c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b6e:	60fb      	str	r3, [r7, #12]
 8017b70:	e00b      	b.n	8017b8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017b72:	68f8      	ldr	r0, [r7, #12]
 8017b74:	f7ff fee4 	bl	8017940 <tcp_output_segment_busy>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d002      	beq.n	8017b84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017b7e:	f06f 0305 	mvn.w	r3, #5
 8017b82:	e043      	b.n	8017c0c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	60fb      	str	r3, [r7, #12]
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d1ef      	bne.n	8017b72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017b92:	68f8      	ldr	r0, [r7, #12]
 8017b94:	f7ff fed4 	bl	8017940 <tcp_output_segment_busy>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d002      	beq.n	8017ba4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017b9e:	f06f 0305 	mvn.w	r3, #5
 8017ba2:	e033      	b.n	8017c0c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	8b5b      	ldrh	r3, [r3, #26]
 8017bbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017bc2:	b29a      	uxth	r2, r3
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	68db      	ldr	r3, [r3, #12]
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7f8 fe12 	bl	80107f8 <lwip_htonl>
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	891b      	ldrh	r3, [r3, #8]
 8017bda:	461d      	mov	r5, r3
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	68db      	ldr	r3, [r3, #12]
 8017be0:	899b      	ldrh	r3, [r3, #12]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7f8 fdf2 	bl	80107ce <lwip_htons>
 8017bea:	4603      	mov	r3, r0
 8017bec:	b2db      	uxtb	r3, r3
 8017bee:	f003 0303 	and.w	r3, r3, #3
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d001      	beq.n	8017bfa <tcp_rexmit_rto_prepare+0xba>
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	e000      	b.n	8017bfc <tcp_rexmit_rto_prepare+0xbc>
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	442b      	add	r3, r5
 8017bfe:	18e2      	adds	r2, r4, r3
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	2200      	movs	r2, #0
 8017c08:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017c0a:	2300      	movs	r3, #0
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3710      	adds	r7, #16
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bdb0      	pop	{r4, r5, r7, pc}
 8017c14:	0801e2a4 	.word	0x0801e2a4
 8017c18:	0801e8e0 	.word	0x0801e8e0
 8017c1c:	0801e2f8 	.word	0x0801e2f8

08017c20 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d106      	bne.n	8017c3c <tcp_rexmit_rto_commit+0x1c>
 8017c2e:	4b0d      	ldr	r3, [pc, #52]	; (8017c64 <tcp_rexmit_rto_commit+0x44>)
 8017c30:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017c34:	490c      	ldr	r1, [pc, #48]	; (8017c68 <tcp_rexmit_rto_commit+0x48>)
 8017c36:	480d      	ldr	r0, [pc, #52]	; (8017c6c <tcp_rexmit_rto_commit+0x4c>)
 8017c38:	f003 fd44 	bl	801b6c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017c42:	2bff      	cmp	r3, #255	; 0xff
 8017c44:	d007      	beq.n	8017c56 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017c4c:	3301      	adds	r3, #1
 8017c4e:	b2da      	uxtb	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017c56:	6878      	ldr	r0, [r7, #4]
 8017c58:	f7ff fc7e 	bl	8017558 <tcp_output>
}
 8017c5c:	bf00      	nop
 8017c5e:	3708      	adds	r7, #8
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}
 8017c64:	0801e2a4 	.word	0x0801e2a4
 8017c68:	0801e904 	.word	0x0801e904
 8017c6c:	0801e2f8 	.word	0x0801e2f8

08017c70 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d106      	bne.n	8017c8c <tcp_rexmit_rto+0x1c>
 8017c7e:	4b0a      	ldr	r3, [pc, #40]	; (8017ca8 <tcp_rexmit_rto+0x38>)
 8017c80:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017c84:	4909      	ldr	r1, [pc, #36]	; (8017cac <tcp_rexmit_rto+0x3c>)
 8017c86:	480a      	ldr	r0, [pc, #40]	; (8017cb0 <tcp_rexmit_rto+0x40>)
 8017c88:	f003 fd1c 	bl	801b6c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f7ff ff57 	bl	8017b40 <tcp_rexmit_rto_prepare>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d102      	bne.n	8017c9e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f7ff ffc1 	bl	8017c20 <tcp_rexmit_rto_commit>
  }
}
 8017c9e:	bf00      	nop
 8017ca0:	3708      	adds	r7, #8
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	0801e2a4 	.word	0x0801e2a4
 8017cac:	0801e928 	.word	0x0801e928
 8017cb0:	0801e2f8 	.word	0x0801e2f8

08017cb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017cb4:	b590      	push	{r4, r7, lr}
 8017cb6:	b085      	sub	sp, #20
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d106      	bne.n	8017cd0 <tcp_rexmit+0x1c>
 8017cc2:	4b2f      	ldr	r3, [pc, #188]	; (8017d80 <tcp_rexmit+0xcc>)
 8017cc4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017cc8:	492e      	ldr	r1, [pc, #184]	; (8017d84 <tcp_rexmit+0xd0>)
 8017cca:	482f      	ldr	r0, [pc, #188]	; (8017d88 <tcp_rexmit+0xd4>)
 8017ccc:	f003 fcfa 	bl	801b6c4 <iprintf>

  if (pcb->unacked == NULL) {
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d102      	bne.n	8017cde <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017cd8:	f06f 0305 	mvn.w	r3, #5
 8017cdc:	e04c      	b.n	8017d78 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ce2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017ce4:	68b8      	ldr	r0, [r7, #8]
 8017ce6:	f7ff fe2b 	bl	8017940 <tcp_output_segment_busy>
 8017cea:	4603      	mov	r3, r0
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d002      	beq.n	8017cf6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017cf0:	f06f 0305 	mvn.w	r3, #5
 8017cf4:	e040      	b.n	8017d78 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	681a      	ldr	r2, [r3, #0]
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	336c      	adds	r3, #108	; 0x6c
 8017d02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017d04:	e002      	b.n	8017d0c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d011      	beq.n	8017d38 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	68db      	ldr	r3, [r3, #12]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7f8 fd6b 	bl	80107f8 <lwip_htonl>
 8017d22:	4604      	mov	r4, r0
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	685b      	ldr	r3, [r3, #4]
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f7f8 fd64 	bl	80107f8 <lwip_htonl>
 8017d30:	4603      	mov	r3, r0
 8017d32:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	dbe6      	blt.n	8017d06 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681a      	ldr	r2, [r3, #0]
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	68ba      	ldr	r2, [r7, #8]
 8017d44:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d103      	bne.n	8017d56 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2200      	movs	r2, #0
 8017d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d5c:	2bff      	cmp	r3, #255	; 0xff
 8017d5e:	d007      	beq.n	8017d70 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d66:	3301      	adds	r3, #1
 8017d68:	b2da      	uxtb	r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2200      	movs	r2, #0
 8017d74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017d76:	2300      	movs	r3, #0
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3714      	adds	r7, #20
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd90      	pop	{r4, r7, pc}
 8017d80:	0801e2a4 	.word	0x0801e2a4
 8017d84:	0801e944 	.word	0x0801e944
 8017d88:	0801e2f8 	.word	0x0801e2f8

08017d8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d106      	bne.n	8017da8 <tcp_rexmit_fast+0x1c>
 8017d9a:	4b2a      	ldr	r3, [pc, #168]	; (8017e44 <tcp_rexmit_fast+0xb8>)
 8017d9c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017da0:	4929      	ldr	r1, [pc, #164]	; (8017e48 <tcp_rexmit_fast+0xbc>)
 8017da2:	482a      	ldr	r0, [pc, #168]	; (8017e4c <tcp_rexmit_fast+0xc0>)
 8017da4:	f003 fc8e 	bl	801b6c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d044      	beq.n	8017e3a <tcp_rexmit_fast+0xae>
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	8b5b      	ldrh	r3, [r3, #26]
 8017db4:	f003 0304 	and.w	r3, r3, #4
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d13e      	bne.n	8017e3a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017dbc:	6878      	ldr	r0, [r7, #4]
 8017dbe:	f7ff ff79 	bl	8017cb4 <tcp_rexmit>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d138      	bne.n	8017e3a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017dd4:	4293      	cmp	r3, r2
 8017dd6:	bf28      	it	cs
 8017dd8:	4613      	movcs	r3, r2
 8017dda:	b29b      	uxth	r3, r3
 8017ddc:	0fda      	lsrs	r2, r3, #31
 8017dde:	4413      	add	r3, r2
 8017de0:	105b      	asrs	r3, r3, #1
 8017de2:	b29a      	uxth	r2, r3
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017df0:	461a      	mov	r2, r3
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017df6:	005b      	lsls	r3, r3, #1
 8017df8:	429a      	cmp	r2, r3
 8017dfa:	d206      	bcs.n	8017e0a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e00:	005b      	lsls	r3, r3, #1
 8017e02:	b29a      	uxth	r2, r3
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e14:	4619      	mov	r1, r3
 8017e16:	0049      	lsls	r1, r1, #1
 8017e18:	440b      	add	r3, r1
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	4413      	add	r3, r2
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	8b5b      	ldrh	r3, [r3, #26]
 8017e2a:	f043 0304 	orr.w	r3, r3, #4
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	2200      	movs	r2, #0
 8017e38:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017e3a:	bf00      	nop
 8017e3c:	3708      	adds	r7, #8
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}
 8017e42:	bf00      	nop
 8017e44:	0801e2a4 	.word	0x0801e2a4
 8017e48:	0801e95c 	.word	0x0801e95c
 8017e4c:	0801e2f8 	.word	0x0801e2f8

08017e50 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b086      	sub	sp, #24
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	60f8      	str	r0, [r7, #12]
 8017e58:	607b      	str	r3, [r7, #4]
 8017e5a:	460b      	mov	r3, r1
 8017e5c:	817b      	strh	r3, [r7, #10]
 8017e5e:	4613      	mov	r3, r2
 8017e60:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017e62:	897a      	ldrh	r2, [r7, #10]
 8017e64:	893b      	ldrh	r3, [r7, #8]
 8017e66:	4413      	add	r3, r2
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	3314      	adds	r3, #20
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e72:	4619      	mov	r1, r3
 8017e74:	2022      	movs	r0, #34	; 0x22
 8017e76:	f7f9 fd8f 	bl	8011998 <pbuf_alloc>
 8017e7a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d04d      	beq.n	8017f1e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017e82:	897b      	ldrh	r3, [r7, #10]
 8017e84:	3313      	adds	r3, #19
 8017e86:	697a      	ldr	r2, [r7, #20]
 8017e88:	8952      	ldrh	r2, [r2, #10]
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	db06      	blt.n	8017e9c <tcp_output_alloc_header_common+0x4c>
 8017e8e:	4b26      	ldr	r3, [pc, #152]	; (8017f28 <tcp_output_alloc_header_common+0xd8>)
 8017e90:	f240 7223 	movw	r2, #1827	; 0x723
 8017e94:	4925      	ldr	r1, [pc, #148]	; (8017f2c <tcp_output_alloc_header_common+0xdc>)
 8017e96:	4826      	ldr	r0, [pc, #152]	; (8017f30 <tcp_output_alloc_header_common+0xe0>)
 8017e98:	f003 fc14 	bl	801b6c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017e9c:	697b      	ldr	r3, [r7, #20]
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017ea2:	8c3b      	ldrh	r3, [r7, #32]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7f8 fc92 	bl	80107ce <lwip_htons>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	461a      	mov	r2, r3
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7f8 fc8a 	bl	80107ce <lwip_htons>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	461a      	mov	r2, r3
 8017ebe:	693b      	ldr	r3, [r7, #16]
 8017ec0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017ec2:	693b      	ldr	r3, [r7, #16]
 8017ec4:	687a      	ldr	r2, [r7, #4]
 8017ec6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017ec8:	68f8      	ldr	r0, [r7, #12]
 8017eca:	f7f8 fc95 	bl	80107f8 <lwip_htonl>
 8017ece:	4602      	mov	r2, r0
 8017ed0:	693b      	ldr	r3, [r7, #16]
 8017ed2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017ed4:	897b      	ldrh	r3, [r7, #10]
 8017ed6:	089b      	lsrs	r3, r3, #2
 8017ed8:	b29b      	uxth	r3, r3
 8017eda:	3305      	adds	r3, #5
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	031b      	lsls	r3, r3, #12
 8017ee0:	b29a      	uxth	r2, r3
 8017ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	4313      	orrs	r3, r2
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7f8 fc6e 	bl	80107ce <lwip_htons>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	461a      	mov	r2, r3
 8017ef6:	693b      	ldr	r3, [r7, #16]
 8017ef8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017efa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7f8 fc66 	bl	80107ce <lwip_htons>
 8017f02:	4603      	mov	r3, r0
 8017f04:	461a      	mov	r2, r3
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	741a      	strb	r2, [r3, #16]
 8017f10:	2200      	movs	r2, #0
 8017f12:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	2200      	movs	r2, #0
 8017f18:	749a      	strb	r2, [r3, #18]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017f1e:	697b      	ldr	r3, [r7, #20]
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3718      	adds	r7, #24
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	0801e2a4 	.word	0x0801e2a4
 8017f2c:	0801e97c 	.word	0x0801e97c
 8017f30:	0801e2f8 	.word	0x0801e2f8

08017f34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017f34:	b5b0      	push	{r4, r5, r7, lr}
 8017f36:	b08a      	sub	sp, #40	; 0x28
 8017f38:	af04      	add	r7, sp, #16
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	607b      	str	r3, [r7, #4]
 8017f3e:	460b      	mov	r3, r1
 8017f40:	817b      	strh	r3, [r7, #10]
 8017f42:	4613      	mov	r3, r2
 8017f44:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d106      	bne.n	8017f5a <tcp_output_alloc_header+0x26>
 8017f4c:	4b15      	ldr	r3, [pc, #84]	; (8017fa4 <tcp_output_alloc_header+0x70>)
 8017f4e:	f240 7242 	movw	r2, #1858	; 0x742
 8017f52:	4915      	ldr	r1, [pc, #84]	; (8017fa8 <tcp_output_alloc_header+0x74>)
 8017f54:	4815      	ldr	r0, [pc, #84]	; (8017fac <tcp_output_alloc_header+0x78>)
 8017f56:	f003 fbb5 	bl	801b6c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	8adb      	ldrh	r3, [r3, #22]
 8017f62:	68fa      	ldr	r2, [r7, #12]
 8017f64:	8b12      	ldrh	r2, [r2, #24]
 8017f66:	68f9      	ldr	r1, [r7, #12]
 8017f68:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017f6a:	893d      	ldrh	r5, [r7, #8]
 8017f6c:	897c      	ldrh	r4, [r7, #10]
 8017f6e:	9103      	str	r1, [sp, #12]
 8017f70:	2110      	movs	r1, #16
 8017f72:	9102      	str	r1, [sp, #8]
 8017f74:	9201      	str	r2, [sp, #4]
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	462a      	mov	r2, r5
 8017f7c:	4621      	mov	r1, r4
 8017f7e:	f7ff ff67 	bl	8017e50 <tcp_output_alloc_header_common>
 8017f82:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d006      	beq.n	8017f98 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f8e:	68fa      	ldr	r2, [r7, #12]
 8017f90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017f92:	441a      	add	r2, r3
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017f98:	697b      	ldr	r3, [r7, #20]
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3718      	adds	r7, #24
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8017fa2:	bf00      	nop
 8017fa4:	0801e2a4 	.word	0x0801e2a4
 8017fa8:	0801e9ac 	.word	0x0801e9ac
 8017fac:	0801e2f8 	.word	0x0801e2f8

08017fb0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b088      	sub	sp, #32
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	4611      	mov	r1, r2
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	460b      	mov	r3, r1
 8017fc0:	71fb      	strb	r3, [r7, #7]
 8017fc2:	4613      	mov	r3, r2
 8017fc4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017fca:	68bb      	ldr	r3, [r7, #8]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d106      	bne.n	8017fde <tcp_output_fill_options+0x2e>
 8017fd0:	4b12      	ldr	r3, [pc, #72]	; (801801c <tcp_output_fill_options+0x6c>)
 8017fd2:	f240 7256 	movw	r2, #1878	; 0x756
 8017fd6:	4912      	ldr	r1, [pc, #72]	; (8018020 <tcp_output_fill_options+0x70>)
 8017fd8:	4812      	ldr	r0, [pc, #72]	; (8018024 <tcp_output_fill_options+0x74>)
 8017fda:	f003 fb73 	bl	801b6c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017fde:	68bb      	ldr	r3, [r7, #8]
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017fe4:	69bb      	ldr	r3, [r7, #24]
 8017fe6:	3314      	adds	r3, #20
 8017fe8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017fea:	8bfb      	ldrh	r3, [r7, #30]
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	461a      	mov	r2, r3
 8017ff0:	79fb      	ldrb	r3, [r7, #7]
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	f003 0304 	and.w	r3, r3, #4
 8017ff8:	4413      	add	r3, r2
 8017ffa:	3314      	adds	r3, #20
 8017ffc:	69ba      	ldr	r2, [r7, #24]
 8017ffe:	4413      	add	r3, r2
 8018000:	697a      	ldr	r2, [r7, #20]
 8018002:	429a      	cmp	r2, r3
 8018004:	d006      	beq.n	8018014 <tcp_output_fill_options+0x64>
 8018006:	4b05      	ldr	r3, [pc, #20]	; (801801c <tcp_output_fill_options+0x6c>)
 8018008:	f240 7275 	movw	r2, #1909	; 0x775
 801800c:	4906      	ldr	r1, [pc, #24]	; (8018028 <tcp_output_fill_options+0x78>)
 801800e:	4805      	ldr	r0, [pc, #20]	; (8018024 <tcp_output_fill_options+0x74>)
 8018010:	f003 fb58 	bl	801b6c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018014:	bf00      	nop
 8018016:	3720      	adds	r7, #32
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	0801e2a4 	.word	0x0801e2a4
 8018020:	0801e9d4 	.word	0x0801e9d4
 8018024:	0801e2f8 	.word	0x0801e2f8
 8018028:	0801e8cc 	.word	0x0801e8cc

0801802c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b08a      	sub	sp, #40	; 0x28
 8018030:	af04      	add	r7, sp, #16
 8018032:	60f8      	str	r0, [r7, #12]
 8018034:	60b9      	str	r1, [r7, #8]
 8018036:	607a      	str	r2, [r7, #4]
 8018038:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d106      	bne.n	801804e <tcp_output_control_segment+0x22>
 8018040:	4b1c      	ldr	r3, [pc, #112]	; (80180b4 <tcp_output_control_segment+0x88>)
 8018042:	f240 7287 	movw	r2, #1927	; 0x787
 8018046:	491c      	ldr	r1, [pc, #112]	; (80180b8 <tcp_output_control_segment+0x8c>)
 8018048:	481c      	ldr	r0, [pc, #112]	; (80180bc <tcp_output_control_segment+0x90>)
 801804a:	f003 fb3b 	bl	801b6c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801804e:	683a      	ldr	r2, [r7, #0]
 8018050:	6879      	ldr	r1, [r7, #4]
 8018052:	68f8      	ldr	r0, [r7, #12]
 8018054:	f7fe fae8 	bl	8016628 <tcp_route>
 8018058:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d102      	bne.n	8018066 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018060:	23fc      	movs	r3, #252	; 0xfc
 8018062:	75fb      	strb	r3, [r7, #23]
 8018064:	e01c      	b.n	80180a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d006      	beq.n	801807a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	7adb      	ldrb	r3, [r3, #11]
 8018070:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	7a9b      	ldrb	r3, [r3, #10]
 8018076:	757b      	strb	r3, [r7, #21]
 8018078:	e003      	b.n	8018082 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801807a:	23ff      	movs	r3, #255	; 0xff
 801807c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801807e:	2300      	movs	r3, #0
 8018080:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018082:	7dba      	ldrb	r2, [r7, #22]
 8018084:	693b      	ldr	r3, [r7, #16]
 8018086:	9302      	str	r3, [sp, #8]
 8018088:	2306      	movs	r3, #6
 801808a:	9301      	str	r3, [sp, #4]
 801808c:	7d7b      	ldrb	r3, [r7, #21]
 801808e:	9300      	str	r3, [sp, #0]
 8018090:	4613      	mov	r3, r2
 8018092:	683a      	ldr	r2, [r7, #0]
 8018094:	6879      	ldr	r1, [r7, #4]
 8018096:	68b8      	ldr	r0, [r7, #8]
 8018098:	f001 ff8c 	bl	8019fb4 <ip4_output_if>
 801809c:	4603      	mov	r3, r0
 801809e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80180a0:	68b8      	ldr	r0, [r7, #8]
 80180a2:	f7f9 ff5d 	bl	8011f60 <pbuf_free>
  return err;
 80180a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3718      	adds	r7, #24
 80180ae:	46bd      	mov	sp, r7
 80180b0:	bd80      	pop	{r7, pc}
 80180b2:	bf00      	nop
 80180b4:	0801e2a4 	.word	0x0801e2a4
 80180b8:	0801e9fc 	.word	0x0801e9fc
 80180bc:	0801e2f8 	.word	0x0801e2f8

080180c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80180c0:	b590      	push	{r4, r7, lr}
 80180c2:	b08b      	sub	sp, #44	; 0x2c
 80180c4:	af04      	add	r7, sp, #16
 80180c6:	60f8      	str	r0, [r7, #12]
 80180c8:	60b9      	str	r1, [r7, #8]
 80180ca:	607a      	str	r2, [r7, #4]
 80180cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80180ce:	683b      	ldr	r3, [r7, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d106      	bne.n	80180e2 <tcp_rst+0x22>
 80180d4:	4b1f      	ldr	r3, [pc, #124]	; (8018154 <tcp_rst+0x94>)
 80180d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80180da:	491f      	ldr	r1, [pc, #124]	; (8018158 <tcp_rst+0x98>)
 80180dc:	481f      	ldr	r0, [pc, #124]	; (801815c <tcp_rst+0x9c>)
 80180de:	f003 faf1 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80180e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d106      	bne.n	80180f6 <tcp_rst+0x36>
 80180e8:	4b1a      	ldr	r3, [pc, #104]	; (8018154 <tcp_rst+0x94>)
 80180ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80180ee:	491c      	ldr	r1, [pc, #112]	; (8018160 <tcp_rst+0xa0>)
 80180f0:	481a      	ldr	r0, [pc, #104]	; (801815c <tcp_rst+0x9c>)
 80180f2:	f003 fae7 	bl	801b6c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80180f6:	2300      	movs	r3, #0
 80180f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80180fa:	f24d 0316 	movw	r3, #53270	; 0xd016
 80180fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018100:	7dfb      	ldrb	r3, [r7, #23]
 8018102:	b29c      	uxth	r4, r3
 8018104:	68b8      	ldr	r0, [r7, #8]
 8018106:	f7f8 fb77 	bl	80107f8 <lwip_htonl>
 801810a:	4602      	mov	r2, r0
 801810c:	8abb      	ldrh	r3, [r7, #20]
 801810e:	9303      	str	r3, [sp, #12]
 8018110:	2314      	movs	r3, #20
 8018112:	9302      	str	r3, [sp, #8]
 8018114:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018116:	9301      	str	r3, [sp, #4]
 8018118:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801811a:	9300      	str	r3, [sp, #0]
 801811c:	4613      	mov	r3, r2
 801811e:	2200      	movs	r2, #0
 8018120:	4621      	mov	r1, r4
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f7ff fe94 	bl	8017e50 <tcp_output_alloc_header_common>
 8018128:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d00c      	beq.n	801814a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018130:	7dfb      	ldrb	r3, [r7, #23]
 8018132:	2200      	movs	r2, #0
 8018134:	6939      	ldr	r1, [r7, #16]
 8018136:	68f8      	ldr	r0, [r7, #12]
 8018138:	f7ff ff3a 	bl	8017fb0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801813e:	683a      	ldr	r2, [r7, #0]
 8018140:	6939      	ldr	r1, [r7, #16]
 8018142:	68f8      	ldr	r0, [r7, #12]
 8018144:	f7ff ff72 	bl	801802c <tcp_output_control_segment>
 8018148:	e000      	b.n	801814c <tcp_rst+0x8c>
    return;
 801814a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801814c:	371c      	adds	r7, #28
 801814e:	46bd      	mov	sp, r7
 8018150:	bd90      	pop	{r4, r7, pc}
 8018152:	bf00      	nop
 8018154:	0801e2a4 	.word	0x0801e2a4
 8018158:	0801ea28 	.word	0x0801ea28
 801815c:	0801e2f8 	.word	0x0801e2f8
 8018160:	0801ea44 	.word	0x0801ea44

08018164 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018164:	b590      	push	{r4, r7, lr}
 8018166:	b087      	sub	sp, #28
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801816c:	2300      	movs	r3, #0
 801816e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018170:	2300      	movs	r3, #0
 8018172:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d106      	bne.n	8018188 <tcp_send_empty_ack+0x24>
 801817a:	4b28      	ldr	r3, [pc, #160]	; (801821c <tcp_send_empty_ack+0xb8>)
 801817c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018180:	4927      	ldr	r1, [pc, #156]	; (8018220 <tcp_send_empty_ack+0xbc>)
 8018182:	4828      	ldr	r0, [pc, #160]	; (8018224 <tcp_send_empty_ack+0xc0>)
 8018184:	f003 fa9e 	bl	801b6c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018188:	7dfb      	ldrb	r3, [r7, #23]
 801818a:	009b      	lsls	r3, r3, #2
 801818c:	b2db      	uxtb	r3, r3
 801818e:	f003 0304 	and.w	r3, r3, #4
 8018192:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018194:	7d7b      	ldrb	r3, [r7, #21]
 8018196:	b29c      	uxth	r4, r3
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801819c:	4618      	mov	r0, r3
 801819e:	f7f8 fb2b 	bl	80107f8 <lwip_htonl>
 80181a2:	4603      	mov	r3, r0
 80181a4:	2200      	movs	r2, #0
 80181a6:	4621      	mov	r1, r4
 80181a8:	6878      	ldr	r0, [r7, #4]
 80181aa:	f7ff fec3 	bl	8017f34 <tcp_output_alloc_header>
 80181ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d109      	bne.n	80181ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	8b5b      	ldrh	r3, [r3, #26]
 80181ba:	f043 0303 	orr.w	r3, r3, #3
 80181be:	b29a      	uxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80181c4:	f06f 0301 	mvn.w	r3, #1
 80181c8:	e023      	b.n	8018212 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80181ca:	7dbb      	ldrb	r3, [r7, #22]
 80181cc:	7dfa      	ldrb	r2, [r7, #23]
 80181ce:	6939      	ldr	r1, [r7, #16]
 80181d0:	6878      	ldr	r0, [r7, #4]
 80181d2:	f7ff feed 	bl	8017fb0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	3304      	adds	r3, #4
 80181dc:	6939      	ldr	r1, [r7, #16]
 80181de:	6878      	ldr	r0, [r7, #4]
 80181e0:	f7ff ff24 	bl	801802c <tcp_output_control_segment>
 80181e4:	4603      	mov	r3, r0
 80181e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80181e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d007      	beq.n	8018200 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	8b5b      	ldrh	r3, [r3, #26]
 80181f4:	f043 0303 	orr.w	r3, r3, #3
 80181f8:	b29a      	uxth	r2, r3
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	835a      	strh	r2, [r3, #26]
 80181fe:	e006      	b.n	801820e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	8b5b      	ldrh	r3, [r3, #26]
 8018204:	f023 0303 	bic.w	r3, r3, #3
 8018208:	b29a      	uxth	r2, r3
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801820e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018212:	4618      	mov	r0, r3
 8018214:	371c      	adds	r7, #28
 8018216:	46bd      	mov	sp, r7
 8018218:	bd90      	pop	{r4, r7, pc}
 801821a:	bf00      	nop
 801821c:	0801e2a4 	.word	0x0801e2a4
 8018220:	0801ea60 	.word	0x0801ea60
 8018224:	0801e2f8 	.word	0x0801e2f8

08018228 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018228:	b590      	push	{r4, r7, lr}
 801822a:	b087      	sub	sp, #28
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018230:	2300      	movs	r3, #0
 8018232:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d106      	bne.n	8018248 <tcp_keepalive+0x20>
 801823a:	4b18      	ldr	r3, [pc, #96]	; (801829c <tcp_keepalive+0x74>)
 801823c:	f640 0224 	movw	r2, #2084	; 0x824
 8018240:	4917      	ldr	r1, [pc, #92]	; (80182a0 <tcp_keepalive+0x78>)
 8018242:	4818      	ldr	r0, [pc, #96]	; (80182a4 <tcp_keepalive+0x7c>)
 8018244:	f003 fa3e 	bl	801b6c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018248:	7dfb      	ldrb	r3, [r7, #23]
 801824a:	b29c      	uxth	r4, r3
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018250:	3b01      	subs	r3, #1
 8018252:	4618      	mov	r0, r3
 8018254:	f7f8 fad0 	bl	80107f8 <lwip_htonl>
 8018258:	4603      	mov	r3, r0
 801825a:	2200      	movs	r2, #0
 801825c:	4621      	mov	r1, r4
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f7ff fe68 	bl	8017f34 <tcp_output_alloc_header>
 8018264:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018266:	693b      	ldr	r3, [r7, #16]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d102      	bne.n	8018272 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801826c:	f04f 33ff 	mov.w	r3, #4294967295
 8018270:	e010      	b.n	8018294 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018272:	7dfb      	ldrb	r3, [r7, #23]
 8018274:	2200      	movs	r2, #0
 8018276:	6939      	ldr	r1, [r7, #16]
 8018278:	6878      	ldr	r0, [r7, #4]
 801827a:	f7ff fe99 	bl	8017fb0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	3304      	adds	r3, #4
 8018284:	6939      	ldr	r1, [r7, #16]
 8018286:	6878      	ldr	r0, [r7, #4]
 8018288:	f7ff fed0 	bl	801802c <tcp_output_control_segment>
 801828c:	4603      	mov	r3, r0
 801828e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018294:	4618      	mov	r0, r3
 8018296:	371c      	adds	r7, #28
 8018298:	46bd      	mov	sp, r7
 801829a:	bd90      	pop	{r4, r7, pc}
 801829c:	0801e2a4 	.word	0x0801e2a4
 80182a0:	0801ea80 	.word	0x0801ea80
 80182a4:	0801e2f8 	.word	0x0801e2f8

080182a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80182a8:	b590      	push	{r4, r7, lr}
 80182aa:	b08b      	sub	sp, #44	; 0x2c
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80182b0:	2300      	movs	r3, #0
 80182b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d106      	bne.n	80182ca <tcp_zero_window_probe+0x22>
 80182bc:	4b4c      	ldr	r3, [pc, #304]	; (80183f0 <tcp_zero_window_probe+0x148>)
 80182be:	f640 024f 	movw	r2, #2127	; 0x84f
 80182c2:	494c      	ldr	r1, [pc, #304]	; (80183f4 <tcp_zero_window_probe+0x14c>)
 80182c4:	484c      	ldr	r0, [pc, #304]	; (80183f8 <tcp_zero_window_probe+0x150>)
 80182c6:	f003 f9fd 	bl	801b6c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80182d0:	6a3b      	ldr	r3, [r7, #32]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d101      	bne.n	80182da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80182d6:	2300      	movs	r3, #0
 80182d8:	e086      	b.n	80183e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80182e0:	2bff      	cmp	r3, #255	; 0xff
 80182e2:	d007      	beq.n	80182f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80182ea:	3301      	adds	r3, #1
 80182ec:	b2da      	uxtb	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80182f4:	6a3b      	ldr	r3, [r7, #32]
 80182f6:	68db      	ldr	r3, [r3, #12]
 80182f8:	899b      	ldrh	r3, [r3, #12]
 80182fa:	b29b      	uxth	r3, r3
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7f8 fa66 	bl	80107ce <lwip_htons>
 8018302:	4603      	mov	r3, r0
 8018304:	b2db      	uxtb	r3, r3
 8018306:	f003 0301 	and.w	r3, r3, #1
 801830a:	2b00      	cmp	r3, #0
 801830c:	d005      	beq.n	801831a <tcp_zero_window_probe+0x72>
 801830e:	6a3b      	ldr	r3, [r7, #32]
 8018310:	891b      	ldrh	r3, [r3, #8]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d101      	bne.n	801831a <tcp_zero_window_probe+0x72>
 8018316:	2301      	movs	r3, #1
 8018318:	e000      	b.n	801831c <tcp_zero_window_probe+0x74>
 801831a:	2300      	movs	r3, #0
 801831c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801831e:	7ffb      	ldrb	r3, [r7, #31]
 8018320:	2b00      	cmp	r3, #0
 8018322:	bf0c      	ite	eq
 8018324:	2301      	moveq	r3, #1
 8018326:	2300      	movne	r3, #0
 8018328:	b2db      	uxtb	r3, r3
 801832a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801832c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018330:	b299      	uxth	r1, r3
 8018332:	6a3b      	ldr	r3, [r7, #32]
 8018334:	68db      	ldr	r3, [r3, #12]
 8018336:	685b      	ldr	r3, [r3, #4]
 8018338:	8bba      	ldrh	r2, [r7, #28]
 801833a:	6878      	ldr	r0, [r7, #4]
 801833c:	f7ff fdfa 	bl	8017f34 <tcp_output_alloc_header>
 8018340:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018342:	69bb      	ldr	r3, [r7, #24]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d102      	bne.n	801834e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018348:	f04f 33ff 	mov.w	r3, #4294967295
 801834c:	e04c      	b.n	80183e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801834e:	69bb      	ldr	r3, [r7, #24]
 8018350:	685b      	ldr	r3, [r3, #4]
 8018352:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018354:	7ffb      	ldrb	r3, [r7, #31]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d011      	beq.n	801837e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	899b      	ldrh	r3, [r3, #12]
 801835e:	b29b      	uxth	r3, r3
 8018360:	b21b      	sxth	r3, r3
 8018362:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018366:	b21c      	sxth	r4, r3
 8018368:	2011      	movs	r0, #17
 801836a:	f7f8 fa30 	bl	80107ce <lwip_htons>
 801836e:	4603      	mov	r3, r0
 8018370:	b21b      	sxth	r3, r3
 8018372:	4323      	orrs	r3, r4
 8018374:	b21b      	sxth	r3, r3
 8018376:	b29a      	uxth	r2, r3
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	819a      	strh	r2, [r3, #12]
 801837c:	e010      	b.n	80183a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801837e:	69bb      	ldr	r3, [r7, #24]
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	3314      	adds	r3, #20
 8018384:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018386:	6a3b      	ldr	r3, [r7, #32]
 8018388:	6858      	ldr	r0, [r3, #4]
 801838a:	6a3b      	ldr	r3, [r7, #32]
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	891a      	ldrh	r2, [r3, #8]
 8018390:	6a3b      	ldr	r3, [r7, #32]
 8018392:	891b      	ldrh	r3, [r3, #8]
 8018394:	1ad3      	subs	r3, r2, r3
 8018396:	b29b      	uxth	r3, r3
 8018398:	2201      	movs	r2, #1
 801839a:	6939      	ldr	r1, [r7, #16]
 801839c:	f7f9 ffca 	bl	8012334 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80183a0:	6a3b      	ldr	r3, [r7, #32]
 80183a2:	68db      	ldr	r3, [r3, #12]
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7f8 fa26 	bl	80107f8 <lwip_htonl>
 80183ac:	4603      	mov	r3, r0
 80183ae:	3301      	adds	r3, #1
 80183b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	1ad3      	subs	r3, r2, r3
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	da02      	bge.n	80183c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	68fa      	ldr	r2, [r7, #12]
 80183c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80183c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183c8:	2200      	movs	r2, #0
 80183ca:	69b9      	ldr	r1, [r7, #24]
 80183cc:	6878      	ldr	r0, [r7, #4]
 80183ce:	f7ff fdef 	bl	8017fb0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	3304      	adds	r3, #4
 80183d8:	69b9      	ldr	r1, [r7, #24]
 80183da:	6878      	ldr	r0, [r7, #4]
 80183dc:	f7ff fe26 	bl	801802c <tcp_output_control_segment>
 80183e0:	4603      	mov	r3, r0
 80183e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80183e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80183e8:	4618      	mov	r0, r3
 80183ea:	372c      	adds	r7, #44	; 0x2c
 80183ec:	46bd      	mov	sp, r7
 80183ee:	bd90      	pop	{r4, r7, pc}
 80183f0:	0801e2a4 	.word	0x0801e2a4
 80183f4:	0801ea9c 	.word	0x0801ea9c
 80183f8:	0801e2f8 	.word	0x0801e2f8

080183fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b082      	sub	sp, #8
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018404:	f7fa f884 	bl	8012510 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018408:	4b0a      	ldr	r3, [pc, #40]	; (8018434 <tcpip_tcp_timer+0x38>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d103      	bne.n	8018418 <tcpip_tcp_timer+0x1c>
 8018410:	4b09      	ldr	r3, [pc, #36]	; (8018438 <tcpip_tcp_timer+0x3c>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d005      	beq.n	8018424 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018418:	2200      	movs	r2, #0
 801841a:	4908      	ldr	r1, [pc, #32]	; (801843c <tcpip_tcp_timer+0x40>)
 801841c:	20fa      	movs	r0, #250	; 0xfa
 801841e:	f000 f8f3 	bl	8018608 <sys_timeout>
 8018422:	e003      	b.n	801842c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018424:	4b06      	ldr	r3, [pc, #24]	; (8018440 <tcpip_tcp_timer+0x44>)
 8018426:	2200      	movs	r2, #0
 8018428:	601a      	str	r2, [r3, #0]
  }
}
 801842a:	bf00      	nop
 801842c:	bf00      	nop
 801842e:	3708      	adds	r7, #8
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}
 8018434:	2000afe8 	.word	0x2000afe8
 8018438:	2000afec 	.word	0x2000afec
 801843c:	080183fd 	.word	0x080183fd
 8018440:	2000b034 	.word	0x2000b034

08018444 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018448:	4b0a      	ldr	r3, [pc, #40]	; (8018474 <tcp_timer_needed+0x30>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d10f      	bne.n	8018470 <tcp_timer_needed+0x2c>
 8018450:	4b09      	ldr	r3, [pc, #36]	; (8018478 <tcp_timer_needed+0x34>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d103      	bne.n	8018460 <tcp_timer_needed+0x1c>
 8018458:	4b08      	ldr	r3, [pc, #32]	; (801847c <tcp_timer_needed+0x38>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d007      	beq.n	8018470 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018460:	4b04      	ldr	r3, [pc, #16]	; (8018474 <tcp_timer_needed+0x30>)
 8018462:	2201      	movs	r2, #1
 8018464:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018466:	2200      	movs	r2, #0
 8018468:	4905      	ldr	r1, [pc, #20]	; (8018480 <tcp_timer_needed+0x3c>)
 801846a:	20fa      	movs	r0, #250	; 0xfa
 801846c:	f000 f8cc 	bl	8018608 <sys_timeout>
  }
}
 8018470:	bf00      	nop
 8018472:	bd80      	pop	{r7, pc}
 8018474:	2000b034 	.word	0x2000b034
 8018478:	2000afe8 	.word	0x2000afe8
 801847c:	2000afec 	.word	0x2000afec
 8018480:	080183fd 	.word	0x080183fd

08018484 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b086      	sub	sp, #24
 8018488:	af00      	add	r7, sp, #0
 801848a:	60f8      	str	r0, [r7, #12]
 801848c:	60b9      	str	r1, [r7, #8]
 801848e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018490:	2006      	movs	r0, #6
 8018492:	f7f8 fe7f 	bl	8011194 <memp_malloc>
 8018496:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018498:	693b      	ldr	r3, [r7, #16]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d109      	bne.n	80184b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d151      	bne.n	8018548 <sys_timeout_abs+0xc4>
 80184a4:	4b2a      	ldr	r3, [pc, #168]	; (8018550 <sys_timeout_abs+0xcc>)
 80184a6:	22be      	movs	r2, #190	; 0xbe
 80184a8:	492a      	ldr	r1, [pc, #168]	; (8018554 <sys_timeout_abs+0xd0>)
 80184aa:	482b      	ldr	r0, [pc, #172]	; (8018558 <sys_timeout_abs+0xd4>)
 80184ac:	f003 f90a 	bl	801b6c4 <iprintf>
    return;
 80184b0:	e04a      	b.n	8018548 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80184b2:	693b      	ldr	r3, [r7, #16]
 80184b4:	2200      	movs	r2, #0
 80184b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	68ba      	ldr	r2, [r7, #8]
 80184bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80184be:	693b      	ldr	r3, [r7, #16]
 80184c0:	687a      	ldr	r2, [r7, #4]
 80184c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80184c4:	693b      	ldr	r3, [r7, #16]
 80184c6:	68fa      	ldr	r2, [r7, #12]
 80184c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80184ca:	4b24      	ldr	r3, [pc, #144]	; (801855c <sys_timeout_abs+0xd8>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d103      	bne.n	80184da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80184d2:	4a22      	ldr	r2, [pc, #136]	; (801855c <sys_timeout_abs+0xd8>)
 80184d4:	693b      	ldr	r3, [r7, #16]
 80184d6:	6013      	str	r3, [r2, #0]
    return;
 80184d8:	e037      	b.n	801854a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	685a      	ldr	r2, [r3, #4]
 80184de:	4b1f      	ldr	r3, [pc, #124]	; (801855c <sys_timeout_abs+0xd8>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	1ad3      	subs	r3, r2, r3
 80184e6:	0fdb      	lsrs	r3, r3, #31
 80184e8:	f003 0301 	and.w	r3, r3, #1
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d007      	beq.n	8018502 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80184f2:	4b1a      	ldr	r3, [pc, #104]	; (801855c <sys_timeout_abs+0xd8>)
 80184f4:	681a      	ldr	r2, [r3, #0]
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80184fa:	4a18      	ldr	r2, [pc, #96]	; (801855c <sys_timeout_abs+0xd8>)
 80184fc:	693b      	ldr	r3, [r7, #16]
 80184fe:	6013      	str	r3, [r2, #0]
 8018500:	e023      	b.n	801854a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018502:	4b16      	ldr	r3, [pc, #88]	; (801855c <sys_timeout_abs+0xd8>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	617b      	str	r3, [r7, #20]
 8018508:	e01a      	b.n	8018540 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d00b      	beq.n	801852a <sys_timeout_abs+0xa6>
 8018512:	693b      	ldr	r3, [r7, #16]
 8018514:	685a      	ldr	r2, [r3, #4]
 8018516:	697b      	ldr	r3, [r7, #20]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	685b      	ldr	r3, [r3, #4]
 801851c:	1ad3      	subs	r3, r2, r3
 801851e:	0fdb      	lsrs	r3, r3, #31
 8018520:	f003 0301 	and.w	r3, r3, #1
 8018524:	b2db      	uxtb	r3, r3
 8018526:	2b00      	cmp	r3, #0
 8018528:	d007      	beq.n	801853a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	693b      	ldr	r3, [r7, #16]
 8018530:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018532:	697b      	ldr	r3, [r7, #20]
 8018534:	693a      	ldr	r2, [r7, #16]
 8018536:	601a      	str	r2, [r3, #0]
        break;
 8018538:	e007      	b.n	801854a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	617b      	str	r3, [r7, #20]
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d1e1      	bne.n	801850a <sys_timeout_abs+0x86>
 8018546:	e000      	b.n	801854a <sys_timeout_abs+0xc6>
    return;
 8018548:	bf00      	nop
      }
    }
  }
}
 801854a:	3718      	adds	r7, #24
 801854c:	46bd      	mov	sp, r7
 801854e:	bd80      	pop	{r7, pc}
 8018550:	0801eac0 	.word	0x0801eac0
 8018554:	0801eaf4 	.word	0x0801eaf4
 8018558:	0801eb34 	.word	0x0801eb34
 801855c:	2000b02c 	.word	0x2000b02c

08018560 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b086      	sub	sp, #24
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	685b      	ldr	r3, [r3, #4]
 8018570:	4798      	blx	r3

  now = sys_now();
 8018572:	f7e9 fa1f 	bl	80019b4 <sys_now>
 8018576:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	681a      	ldr	r2, [r3, #0]
 801857c:	4b0f      	ldr	r3, [pc, #60]	; (80185bc <lwip_cyclic_timer+0x5c>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	4413      	add	r3, r2
 8018582:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018584:	68fa      	ldr	r2, [r7, #12]
 8018586:	693b      	ldr	r3, [r7, #16]
 8018588:	1ad3      	subs	r3, r2, r3
 801858a:	0fdb      	lsrs	r3, r3, #31
 801858c:	f003 0301 	and.w	r3, r3, #1
 8018590:	b2db      	uxtb	r3, r3
 8018592:	2b00      	cmp	r3, #0
 8018594:	d009      	beq.n	80185aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	681a      	ldr	r2, [r3, #0]
 801859a:	693b      	ldr	r3, [r7, #16]
 801859c:	4413      	add	r3, r2
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	4907      	ldr	r1, [pc, #28]	; (80185c0 <lwip_cyclic_timer+0x60>)
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7ff ff6e 	bl	8018484 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80185a8:	e004      	b.n	80185b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80185aa:	687a      	ldr	r2, [r7, #4]
 80185ac:	4904      	ldr	r1, [pc, #16]	; (80185c0 <lwip_cyclic_timer+0x60>)
 80185ae:	68f8      	ldr	r0, [r7, #12]
 80185b0:	f7ff ff68 	bl	8018484 <sys_timeout_abs>
}
 80185b4:	bf00      	nop
 80185b6:	3718      	adds	r7, #24
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}
 80185bc:	2000b030 	.word	0x2000b030
 80185c0:	08018561 	.word	0x08018561

080185c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b082      	sub	sp, #8
 80185c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80185ca:	2301      	movs	r3, #1
 80185cc:	607b      	str	r3, [r7, #4]
 80185ce:	e00e      	b.n	80185ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80185d0:	4a0b      	ldr	r2, [pc, #44]	; (8018600 <sys_timeouts_init+0x3c>)
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	00db      	lsls	r3, r3, #3
 80185dc:	4a08      	ldr	r2, [pc, #32]	; (8018600 <sys_timeouts_init+0x3c>)
 80185de:	4413      	add	r3, r2
 80185e0:	461a      	mov	r2, r3
 80185e2:	4908      	ldr	r1, [pc, #32]	; (8018604 <sys_timeouts_init+0x40>)
 80185e4:	f000 f810 	bl	8018608 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	3301      	adds	r3, #1
 80185ec:	607b      	str	r3, [r7, #4]
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2b02      	cmp	r3, #2
 80185f2:	d9ed      	bls.n	80185d0 <sys_timeouts_init+0xc>
  }
}
 80185f4:	bf00      	nop
 80185f6:	bf00      	nop
 80185f8:	3708      	adds	r7, #8
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	bf00      	nop
 8018600:	0801f84c 	.word	0x0801f84c
 8018604:	08018561 	.word	0x08018561

08018608 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b086      	sub	sp, #24
 801860c:	af00      	add	r7, sp, #0
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801861a:	d306      	bcc.n	801862a <sys_timeout+0x22>
 801861c:	4b0a      	ldr	r3, [pc, #40]	; (8018648 <sys_timeout+0x40>)
 801861e:	f240 1229 	movw	r2, #297	; 0x129
 8018622:	490a      	ldr	r1, [pc, #40]	; (801864c <sys_timeout+0x44>)
 8018624:	480a      	ldr	r0, [pc, #40]	; (8018650 <sys_timeout+0x48>)
 8018626:	f003 f84d 	bl	801b6c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801862a:	f7e9 f9c3 	bl	80019b4 <sys_now>
 801862e:	4602      	mov	r2, r0
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	4413      	add	r3, r2
 8018634:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018636:	687a      	ldr	r2, [r7, #4]
 8018638:	68b9      	ldr	r1, [r7, #8]
 801863a:	6978      	ldr	r0, [r7, #20]
 801863c:	f7ff ff22 	bl	8018484 <sys_timeout_abs>
#endif
}
 8018640:	bf00      	nop
 8018642:	3718      	adds	r7, #24
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}
 8018648:	0801eac0 	.word	0x0801eac0
 801864c:	0801eb5c 	.word	0x0801eb5c
 8018650:	0801eb34 	.word	0x0801eb34

08018654 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b084      	sub	sp, #16
 8018658:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801865a:	f7e9 f9ab 	bl	80019b4 <sys_now>
 801865e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8018660:	4b1a      	ldr	r3, [pc, #104]	; (80186cc <sys_check_timeouts+0x78>)
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	b2db      	uxtb	r3, r3
 8018666:	2b00      	cmp	r3, #0
 8018668:	d001      	beq.n	801866e <sys_check_timeouts+0x1a>
 801866a:	f7f9 f93f 	bl	80118ec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801866e:	4b18      	ldr	r3, [pc, #96]	; (80186d0 <sys_check_timeouts+0x7c>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d022      	beq.n	80186c0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	685b      	ldr	r3, [r3, #4]
 801867e:	68fa      	ldr	r2, [r7, #12]
 8018680:	1ad3      	subs	r3, r2, r3
 8018682:	0fdb      	lsrs	r3, r3, #31
 8018684:	f003 0301 	and.w	r3, r3, #1
 8018688:	b2db      	uxtb	r3, r3
 801868a:	2b00      	cmp	r3, #0
 801868c:	d11a      	bne.n	80186c4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	4a0f      	ldr	r2, [pc, #60]	; (80186d0 <sys_check_timeouts+0x7c>)
 8018694:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	689b      	ldr	r3, [r3, #8]
 801869a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801869c:	68bb      	ldr	r3, [r7, #8]
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80186a2:	68bb      	ldr	r3, [r7, #8]
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	4a0b      	ldr	r2, [pc, #44]	; (80186d4 <sys_check_timeouts+0x80>)
 80186a8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80186aa:	68b9      	ldr	r1, [r7, #8]
 80186ac:	2006      	movs	r0, #6
 80186ae:	f7f8 fde1 	bl	8011274 <memp_free>
    if (handler != NULL) {
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d0d3      	beq.n	8018660 <sys_check_timeouts+0xc>
      handler(arg);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	6838      	ldr	r0, [r7, #0]
 80186bc:	4798      	blx	r3
  do {
 80186be:	e7cf      	b.n	8018660 <sys_check_timeouts+0xc>
      return;
 80186c0:	bf00      	nop
 80186c2:	e000      	b.n	80186c6 <sys_check_timeouts+0x72>
      return;
 80186c4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80186c6:	3710      	adds	r7, #16
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	2000afd9 	.word	0x2000afd9
 80186d0:	2000b02c 	.word	0x2000b02c
 80186d4:	2000b030 	.word	0x2000b030

080186d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80186dc:	f002 fef2 	bl	801b4c4 <rand>
 80186e0:	4603      	mov	r3, r0
 80186e2:	b29b      	uxth	r3, r3
 80186e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80186e8:	b29b      	uxth	r3, r3
 80186ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80186ee:	b29a      	uxth	r2, r3
 80186f0:	4b01      	ldr	r3, [pc, #4]	; (80186f8 <udp_init+0x20>)
 80186f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80186f4:	bf00      	nop
 80186f6:	bd80      	pop	{r7, pc}
 80186f8:	20000080 	.word	0x20000080

080186fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	4613      	mov	r3, r2
 8018708:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d105      	bne.n	801871c <udp_input_local_match+0x20>
 8018710:	4b27      	ldr	r3, [pc, #156]	; (80187b0 <udp_input_local_match+0xb4>)
 8018712:	2287      	movs	r2, #135	; 0x87
 8018714:	4927      	ldr	r1, [pc, #156]	; (80187b4 <udp_input_local_match+0xb8>)
 8018716:	4828      	ldr	r0, [pc, #160]	; (80187b8 <udp_input_local_match+0xbc>)
 8018718:	f002 ffd4 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801871c:	68bb      	ldr	r3, [r7, #8]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d105      	bne.n	801872e <udp_input_local_match+0x32>
 8018722:	4b23      	ldr	r3, [pc, #140]	; (80187b0 <udp_input_local_match+0xb4>)
 8018724:	2288      	movs	r2, #136	; 0x88
 8018726:	4925      	ldr	r1, [pc, #148]	; (80187bc <udp_input_local_match+0xc0>)
 8018728:	4823      	ldr	r0, [pc, #140]	; (80187b8 <udp_input_local_match+0xbc>)
 801872a:	f002 ffcb 	bl	801b6c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	7a1b      	ldrb	r3, [r3, #8]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d00b      	beq.n	801874e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	7a1a      	ldrb	r2, [r3, #8]
 801873a:	4b21      	ldr	r3, [pc, #132]	; (80187c0 <udp_input_local_match+0xc4>)
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018742:	3301      	adds	r3, #1
 8018744:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018746:	429a      	cmp	r2, r3
 8018748:	d001      	beq.n	801874e <udp_input_local_match+0x52>
    return 0;
 801874a:	2300      	movs	r3, #0
 801874c:	e02b      	b.n	80187a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801874e:	79fb      	ldrb	r3, [r7, #7]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d018      	beq.n	8018786 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d013      	beq.n	8018782 <udp_input_local_match+0x86>
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d00f      	beq.n	8018782 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018762:	4b17      	ldr	r3, [pc, #92]	; (80187c0 <udp_input_local_match+0xc4>)
 8018764:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801876a:	d00a      	beq.n	8018782 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	681a      	ldr	r2, [r3, #0]
 8018770:	4b13      	ldr	r3, [pc, #76]	; (80187c0 <udp_input_local_match+0xc4>)
 8018772:	695b      	ldr	r3, [r3, #20]
 8018774:	405a      	eors	r2, r3
 8018776:	68bb      	ldr	r3, [r7, #8]
 8018778:	3308      	adds	r3, #8
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801877e:	2b00      	cmp	r3, #0
 8018780:	d110      	bne.n	80187a4 <udp_input_local_match+0xa8>
          return 1;
 8018782:	2301      	movs	r3, #1
 8018784:	e00f      	b.n	80187a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d009      	beq.n	80187a0 <udp_input_local_match+0xa4>
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d005      	beq.n	80187a0 <udp_input_local_match+0xa4>
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	681a      	ldr	r2, [r3, #0]
 8018798:	4b09      	ldr	r3, [pc, #36]	; (80187c0 <udp_input_local_match+0xc4>)
 801879a:	695b      	ldr	r3, [r3, #20]
 801879c:	429a      	cmp	r2, r3
 801879e:	d101      	bne.n	80187a4 <udp_input_local_match+0xa8>
        return 1;
 80187a0:	2301      	movs	r3, #1
 80187a2:	e000      	b.n	80187a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80187a4:	2300      	movs	r3, #0
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	3710      	adds	r7, #16
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	0801eba8 	.word	0x0801eba8
 80187b4:	0801ebd8 	.word	0x0801ebd8
 80187b8:	0801ebfc 	.word	0x0801ebfc
 80187bc:	0801ec24 	.word	0x0801ec24
 80187c0:	200042b4 	.word	0x200042b4

080187c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80187c4:	b590      	push	{r4, r7, lr}
 80187c6:	b08d      	sub	sp, #52	; 0x34
 80187c8:	af02      	add	r7, sp, #8
 80187ca:	6078      	str	r0, [r7, #4]
 80187cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80187ce:	2300      	movs	r3, #0
 80187d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d105      	bne.n	80187e4 <udp_input+0x20>
 80187d8:	4b7c      	ldr	r3, [pc, #496]	; (80189cc <udp_input+0x208>)
 80187da:	22cf      	movs	r2, #207	; 0xcf
 80187dc:	497c      	ldr	r1, [pc, #496]	; (80189d0 <udp_input+0x20c>)
 80187de:	487d      	ldr	r0, [pc, #500]	; (80189d4 <udp_input+0x210>)
 80187e0:	f002 ff70 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d105      	bne.n	80187f6 <udp_input+0x32>
 80187ea:	4b78      	ldr	r3, [pc, #480]	; (80189cc <udp_input+0x208>)
 80187ec:	22d0      	movs	r2, #208	; 0xd0
 80187ee:	497a      	ldr	r1, [pc, #488]	; (80189d8 <udp_input+0x214>)
 80187f0:	4878      	ldr	r0, [pc, #480]	; (80189d4 <udp_input+0x210>)
 80187f2:	f002 ff67 	bl	801b6c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	895b      	ldrh	r3, [r3, #10]
 80187fa:	2b07      	cmp	r3, #7
 80187fc:	d803      	bhi.n	8018806 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80187fe:	6878      	ldr	r0, [r7, #4]
 8018800:	f7f9 fbae 	bl	8011f60 <pbuf_free>
    goto end;
 8018804:	e0de      	b.n	80189c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	685b      	ldr	r3, [r3, #4]
 801880a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801880c:	4b73      	ldr	r3, [pc, #460]	; (80189dc <udp_input+0x218>)
 801880e:	695b      	ldr	r3, [r3, #20]
 8018810:	4a72      	ldr	r2, [pc, #456]	; (80189dc <udp_input+0x218>)
 8018812:	6812      	ldr	r2, [r2, #0]
 8018814:	4611      	mov	r1, r2
 8018816:	4618      	mov	r0, r3
 8018818:	f001 fca4 	bl	801a164 <ip4_addr_isbroadcast_u32>
 801881c:	4603      	mov	r3, r0
 801881e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	881b      	ldrh	r3, [r3, #0]
 8018824:	b29b      	uxth	r3, r3
 8018826:	4618      	mov	r0, r3
 8018828:	f7f7 ffd1 	bl	80107ce <lwip_htons>
 801882c:	4603      	mov	r3, r0
 801882e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018830:	697b      	ldr	r3, [r7, #20]
 8018832:	885b      	ldrh	r3, [r3, #2]
 8018834:	b29b      	uxth	r3, r3
 8018836:	4618      	mov	r0, r3
 8018838:	f7f7 ffc9 	bl	80107ce <lwip_htons>
 801883c:	4603      	mov	r3, r0
 801883e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018840:	2300      	movs	r3, #0
 8018842:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018844:	2300      	movs	r3, #0
 8018846:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018848:	2300      	movs	r3, #0
 801884a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801884c:	4b64      	ldr	r3, [pc, #400]	; (80189e0 <udp_input+0x21c>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	627b      	str	r3, [r7, #36]	; 0x24
 8018852:	e054      	b.n	80188fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018856:	8a5b      	ldrh	r3, [r3, #18]
 8018858:	89fa      	ldrh	r2, [r7, #14]
 801885a:	429a      	cmp	r2, r3
 801885c:	d14a      	bne.n	80188f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801885e:	7cfb      	ldrb	r3, [r7, #19]
 8018860:	461a      	mov	r2, r3
 8018862:	6839      	ldr	r1, [r7, #0]
 8018864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018866:	f7ff ff49 	bl	80186fc <udp_input_local_match>
 801886a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801886c:	2b00      	cmp	r3, #0
 801886e:	d041      	beq.n	80188f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018872:	7c1b      	ldrb	r3, [r3, #16]
 8018874:	f003 0304 	and.w	r3, r3, #4
 8018878:	2b00      	cmp	r3, #0
 801887a:	d11d      	bne.n	80188b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d102      	bne.n	8018888 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018884:	61fb      	str	r3, [r7, #28]
 8018886:	e017      	b.n	80188b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018888:	7cfb      	ldrb	r3, [r7, #19]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d014      	beq.n	80188b8 <udp_input+0xf4>
 801888e:	4b53      	ldr	r3, [pc, #332]	; (80189dc <udp_input+0x218>)
 8018890:	695b      	ldr	r3, [r3, #20]
 8018892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018896:	d10f      	bne.n	80188b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	3304      	adds	r3, #4
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d008      	beq.n	80188b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80188a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a8:	681a      	ldr	r2, [r3, #0]
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	3304      	adds	r3, #4
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d101      	bne.n	80188b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80188b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80188b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ba:	8a9b      	ldrh	r3, [r3, #20]
 80188bc:	8a3a      	ldrh	r2, [r7, #16]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d118      	bne.n	80188f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80188c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d005      	beq.n	80188d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80188ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188cc:	685a      	ldr	r2, [r3, #4]
 80188ce:	4b43      	ldr	r3, [pc, #268]	; (80189dc <udp_input+0x218>)
 80188d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d10e      	bne.n	80188f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80188d6:	6a3b      	ldr	r3, [r7, #32]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d014      	beq.n	8018906 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80188dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188de:	68da      	ldr	r2, [r3, #12]
 80188e0:	6a3b      	ldr	r3, [r7, #32]
 80188e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80188e4:	4b3e      	ldr	r3, [pc, #248]	; (80189e0 <udp_input+0x21c>)
 80188e6:	681a      	ldr	r2, [r3, #0]
 80188e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80188ec:	4a3c      	ldr	r2, [pc, #240]	; (80189e0 <udp_input+0x21c>)
 80188ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80188f2:	e008      	b.n	8018906 <udp_input+0x142>
      }
    }

    prev = pcb;
 80188f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fa:	68db      	ldr	r3, [r3, #12]
 80188fc:	627b      	str	r3, [r7, #36]	; 0x24
 80188fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018900:	2b00      	cmp	r3, #0
 8018902:	d1a7      	bne.n	8018854 <udp_input+0x90>
 8018904:	e000      	b.n	8018908 <udp_input+0x144>
        break;
 8018906:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801890a:	2b00      	cmp	r3, #0
 801890c:	d101      	bne.n	8018912 <udp_input+0x14e>
    pcb = uncon_pcb;
 801890e:	69fb      	ldr	r3, [r7, #28]
 8018910:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018914:	2b00      	cmp	r3, #0
 8018916:	d002      	beq.n	801891e <udp_input+0x15a>
    for_us = 1;
 8018918:	2301      	movs	r3, #1
 801891a:	76fb      	strb	r3, [r7, #27]
 801891c:	e00a      	b.n	8018934 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	3304      	adds	r3, #4
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	4b2d      	ldr	r3, [pc, #180]	; (80189dc <udp_input+0x218>)
 8018926:	695b      	ldr	r3, [r3, #20]
 8018928:	429a      	cmp	r2, r3
 801892a:	bf0c      	ite	eq
 801892c:	2301      	moveq	r3, #1
 801892e:	2300      	movne	r3, #0
 8018930:	b2db      	uxtb	r3, r3
 8018932:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018934:	7efb      	ldrb	r3, [r7, #27]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d041      	beq.n	80189be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801893a:	2108      	movs	r1, #8
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7f9 fa89 	bl	8011e54 <pbuf_remove_header>
 8018942:	4603      	mov	r3, r0
 8018944:	2b00      	cmp	r3, #0
 8018946:	d00a      	beq.n	801895e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018948:	4b20      	ldr	r3, [pc, #128]	; (80189cc <udp_input+0x208>)
 801894a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801894e:	4925      	ldr	r1, [pc, #148]	; (80189e4 <udp_input+0x220>)
 8018950:	4820      	ldr	r0, [pc, #128]	; (80189d4 <udp_input+0x210>)
 8018952:	f002 feb7 	bl	801b6c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018956:	6878      	ldr	r0, [r7, #4]
 8018958:	f7f9 fb02 	bl	8011f60 <pbuf_free>
      goto end;
 801895c:	e032      	b.n	80189c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018960:	2b00      	cmp	r3, #0
 8018962:	d012      	beq.n	801898a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018966:	699b      	ldr	r3, [r3, #24]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d00a      	beq.n	8018982 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801896e:	699c      	ldr	r4, [r3, #24]
 8018970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018972:	69d8      	ldr	r0, [r3, #28]
 8018974:	8a3b      	ldrh	r3, [r7, #16]
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	4b1b      	ldr	r3, [pc, #108]	; (80189e8 <udp_input+0x224>)
 801897a:	687a      	ldr	r2, [r7, #4]
 801897c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801897e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018980:	e021      	b.n	80189c6 <udp_input+0x202>
        pbuf_free(p);
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f7f9 faec 	bl	8011f60 <pbuf_free>
        goto end;
 8018988:	e01c      	b.n	80189c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801898a:	7cfb      	ldrb	r3, [r7, #19]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d112      	bne.n	80189b6 <udp_input+0x1f2>
 8018990:	4b12      	ldr	r3, [pc, #72]	; (80189dc <udp_input+0x218>)
 8018992:	695b      	ldr	r3, [r3, #20]
 8018994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018998:	2be0      	cmp	r3, #224	; 0xe0
 801899a:	d00c      	beq.n	80189b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801899c:	4b0f      	ldr	r3, [pc, #60]	; (80189dc <udp_input+0x218>)
 801899e:	899b      	ldrh	r3, [r3, #12]
 80189a0:	3308      	adds	r3, #8
 80189a2:	b29b      	uxth	r3, r3
 80189a4:	b21b      	sxth	r3, r3
 80189a6:	4619      	mov	r1, r3
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f7f9 fac6 	bl	8011f3a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80189ae:	2103      	movs	r1, #3
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f001 f8ad 	bl	8019b10 <icmp_dest_unreach>
      pbuf_free(p);
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f7f9 fad2 	bl	8011f60 <pbuf_free>
  return;
 80189bc:	e003      	b.n	80189c6 <udp_input+0x202>
    pbuf_free(p);
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f7f9 face 	bl	8011f60 <pbuf_free>
  return;
 80189c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80189c6:	372c      	adds	r7, #44	; 0x2c
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd90      	pop	{r4, r7, pc}
 80189cc:	0801eba8 	.word	0x0801eba8
 80189d0:	0801ec4c 	.word	0x0801ec4c
 80189d4:	0801ebfc 	.word	0x0801ebfc
 80189d8:	0801ec64 	.word	0x0801ec64
 80189dc:	200042b4 	.word	0x200042b4
 80189e0:	2000b038 	.word	0x2000b038
 80189e4:	0801ec80 	.word	0x0801ec80
 80189e8:	200042c4 	.word	0x200042c4

080189ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80189ec:	b480      	push	{r7}
 80189ee:	b085      	sub	sp, #20
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
 80189f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d01e      	beq.n	8018a3a <udp_netif_ip_addr_changed+0x4e>
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d01a      	beq.n	8018a3a <udp_netif_ip_addr_changed+0x4e>
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d017      	beq.n	8018a3a <udp_netif_ip_addr_changed+0x4e>
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d013      	beq.n	8018a3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018a12:	4b0d      	ldr	r3, [pc, #52]	; (8018a48 <udp_netif_ip_addr_changed+0x5c>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	60fb      	str	r3, [r7, #12]
 8018a18:	e00c      	b.n	8018a34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	681a      	ldr	r2, [r3, #0]
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	429a      	cmp	r2, r3
 8018a24:	d103      	bne.n	8018a2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018a26:	683b      	ldr	r3, [r7, #0]
 8018a28:	681a      	ldr	r2, [r3, #0]
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	60fb      	str	r3, [r7, #12]
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d1ef      	bne.n	8018a1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018a3a:	bf00      	nop
 8018a3c:	3714      	adds	r7, #20
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a44:	4770      	bx	lr
 8018a46:	bf00      	nop
 8018a48:	2000b038 	.word	0x2000b038

08018a4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018a54:	4915      	ldr	r1, [pc, #84]	; (8018aac <etharp_free_entry+0x60>)
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	4613      	mov	r3, r2
 8018a5a:	005b      	lsls	r3, r3, #1
 8018a5c:	4413      	add	r3, r2
 8018a5e:	00db      	lsls	r3, r3, #3
 8018a60:	440b      	add	r3, r1
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d013      	beq.n	8018a90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018a68:	4910      	ldr	r1, [pc, #64]	; (8018aac <etharp_free_entry+0x60>)
 8018a6a:	687a      	ldr	r2, [r7, #4]
 8018a6c:	4613      	mov	r3, r2
 8018a6e:	005b      	lsls	r3, r3, #1
 8018a70:	4413      	add	r3, r2
 8018a72:	00db      	lsls	r3, r3, #3
 8018a74:	440b      	add	r3, r1
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f7f9 fa71 	bl	8011f60 <pbuf_free>
    arp_table[i].q = NULL;
 8018a7e:	490b      	ldr	r1, [pc, #44]	; (8018aac <etharp_free_entry+0x60>)
 8018a80:	687a      	ldr	r2, [r7, #4]
 8018a82:	4613      	mov	r3, r2
 8018a84:	005b      	lsls	r3, r3, #1
 8018a86:	4413      	add	r3, r2
 8018a88:	00db      	lsls	r3, r3, #3
 8018a8a:	440b      	add	r3, r1
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018a90:	4906      	ldr	r1, [pc, #24]	; (8018aac <etharp_free_entry+0x60>)
 8018a92:	687a      	ldr	r2, [r7, #4]
 8018a94:	4613      	mov	r3, r2
 8018a96:	005b      	lsls	r3, r3, #1
 8018a98:	4413      	add	r3, r2
 8018a9a:	00db      	lsls	r3, r3, #3
 8018a9c:	440b      	add	r3, r1
 8018a9e:	3314      	adds	r3, #20
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018aa4:	bf00      	nop
 8018aa6:	3708      	adds	r7, #8
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	bd80      	pop	{r7, pc}
 8018aac:	2000b03c 	.word	0x2000b03c

08018ab0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	607b      	str	r3, [r7, #4]
 8018aba:	e096      	b.n	8018bea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018abc:	494f      	ldr	r1, [pc, #316]	; (8018bfc <etharp_tmr+0x14c>)
 8018abe:	687a      	ldr	r2, [r7, #4]
 8018ac0:	4613      	mov	r3, r2
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	4413      	add	r3, r2
 8018ac6:	00db      	lsls	r3, r3, #3
 8018ac8:	440b      	add	r3, r1
 8018aca:	3314      	adds	r3, #20
 8018acc:	781b      	ldrb	r3, [r3, #0]
 8018ace:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018ad0:	78fb      	ldrb	r3, [r7, #3]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	f000 8086 	beq.w	8018be4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018ad8:	4948      	ldr	r1, [pc, #288]	; (8018bfc <etharp_tmr+0x14c>)
 8018ada:	687a      	ldr	r2, [r7, #4]
 8018adc:	4613      	mov	r3, r2
 8018ade:	005b      	lsls	r3, r3, #1
 8018ae0:	4413      	add	r3, r2
 8018ae2:	00db      	lsls	r3, r3, #3
 8018ae4:	440b      	add	r3, r1
 8018ae6:	3312      	adds	r3, #18
 8018ae8:	881b      	ldrh	r3, [r3, #0]
 8018aea:	3301      	adds	r3, #1
 8018aec:	b298      	uxth	r0, r3
 8018aee:	4943      	ldr	r1, [pc, #268]	; (8018bfc <etharp_tmr+0x14c>)
 8018af0:	687a      	ldr	r2, [r7, #4]
 8018af2:	4613      	mov	r3, r2
 8018af4:	005b      	lsls	r3, r3, #1
 8018af6:	4413      	add	r3, r2
 8018af8:	00db      	lsls	r3, r3, #3
 8018afa:	440b      	add	r3, r1
 8018afc:	3312      	adds	r3, #18
 8018afe:	4602      	mov	r2, r0
 8018b00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018b02:	493e      	ldr	r1, [pc, #248]	; (8018bfc <etharp_tmr+0x14c>)
 8018b04:	687a      	ldr	r2, [r7, #4]
 8018b06:	4613      	mov	r3, r2
 8018b08:	005b      	lsls	r3, r3, #1
 8018b0a:	4413      	add	r3, r2
 8018b0c:	00db      	lsls	r3, r3, #3
 8018b0e:	440b      	add	r3, r1
 8018b10:	3312      	adds	r3, #18
 8018b12:	881b      	ldrh	r3, [r3, #0]
 8018b14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018b18:	d215      	bcs.n	8018b46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018b1a:	4938      	ldr	r1, [pc, #224]	; (8018bfc <etharp_tmr+0x14c>)
 8018b1c:	687a      	ldr	r2, [r7, #4]
 8018b1e:	4613      	mov	r3, r2
 8018b20:	005b      	lsls	r3, r3, #1
 8018b22:	4413      	add	r3, r2
 8018b24:	00db      	lsls	r3, r3, #3
 8018b26:	440b      	add	r3, r1
 8018b28:	3314      	adds	r3, #20
 8018b2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018b2c:	2b01      	cmp	r3, #1
 8018b2e:	d10e      	bne.n	8018b4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018b30:	4932      	ldr	r1, [pc, #200]	; (8018bfc <etharp_tmr+0x14c>)
 8018b32:	687a      	ldr	r2, [r7, #4]
 8018b34:	4613      	mov	r3, r2
 8018b36:	005b      	lsls	r3, r3, #1
 8018b38:	4413      	add	r3, r2
 8018b3a:	00db      	lsls	r3, r3, #3
 8018b3c:	440b      	add	r3, r1
 8018b3e:	3312      	adds	r3, #18
 8018b40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018b42:	2b04      	cmp	r3, #4
 8018b44:	d903      	bls.n	8018b4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018b46:	6878      	ldr	r0, [r7, #4]
 8018b48:	f7ff ff80 	bl	8018a4c <etharp_free_entry>
 8018b4c:	e04a      	b.n	8018be4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018b4e:	492b      	ldr	r1, [pc, #172]	; (8018bfc <etharp_tmr+0x14c>)
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	4613      	mov	r3, r2
 8018b54:	005b      	lsls	r3, r3, #1
 8018b56:	4413      	add	r3, r2
 8018b58:	00db      	lsls	r3, r3, #3
 8018b5a:	440b      	add	r3, r1
 8018b5c:	3314      	adds	r3, #20
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	2b03      	cmp	r3, #3
 8018b62:	d10a      	bne.n	8018b7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018b64:	4925      	ldr	r1, [pc, #148]	; (8018bfc <etharp_tmr+0x14c>)
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	4613      	mov	r3, r2
 8018b6a:	005b      	lsls	r3, r3, #1
 8018b6c:	4413      	add	r3, r2
 8018b6e:	00db      	lsls	r3, r3, #3
 8018b70:	440b      	add	r3, r1
 8018b72:	3314      	adds	r3, #20
 8018b74:	2204      	movs	r2, #4
 8018b76:	701a      	strb	r2, [r3, #0]
 8018b78:	e034      	b.n	8018be4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018b7a:	4920      	ldr	r1, [pc, #128]	; (8018bfc <etharp_tmr+0x14c>)
 8018b7c:	687a      	ldr	r2, [r7, #4]
 8018b7e:	4613      	mov	r3, r2
 8018b80:	005b      	lsls	r3, r3, #1
 8018b82:	4413      	add	r3, r2
 8018b84:	00db      	lsls	r3, r3, #3
 8018b86:	440b      	add	r3, r1
 8018b88:	3314      	adds	r3, #20
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	2b04      	cmp	r3, #4
 8018b8e:	d10a      	bne.n	8018ba6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018b90:	491a      	ldr	r1, [pc, #104]	; (8018bfc <etharp_tmr+0x14c>)
 8018b92:	687a      	ldr	r2, [r7, #4]
 8018b94:	4613      	mov	r3, r2
 8018b96:	005b      	lsls	r3, r3, #1
 8018b98:	4413      	add	r3, r2
 8018b9a:	00db      	lsls	r3, r3, #3
 8018b9c:	440b      	add	r3, r1
 8018b9e:	3314      	adds	r3, #20
 8018ba0:	2202      	movs	r2, #2
 8018ba2:	701a      	strb	r2, [r3, #0]
 8018ba4:	e01e      	b.n	8018be4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018ba6:	4915      	ldr	r1, [pc, #84]	; (8018bfc <etharp_tmr+0x14c>)
 8018ba8:	687a      	ldr	r2, [r7, #4]
 8018baa:	4613      	mov	r3, r2
 8018bac:	005b      	lsls	r3, r3, #1
 8018bae:	4413      	add	r3, r2
 8018bb0:	00db      	lsls	r3, r3, #3
 8018bb2:	440b      	add	r3, r1
 8018bb4:	3314      	adds	r3, #20
 8018bb6:	781b      	ldrb	r3, [r3, #0]
 8018bb8:	2b01      	cmp	r3, #1
 8018bba:	d113      	bne.n	8018be4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018bbc:	490f      	ldr	r1, [pc, #60]	; (8018bfc <etharp_tmr+0x14c>)
 8018bbe:	687a      	ldr	r2, [r7, #4]
 8018bc0:	4613      	mov	r3, r2
 8018bc2:	005b      	lsls	r3, r3, #1
 8018bc4:	4413      	add	r3, r2
 8018bc6:	00db      	lsls	r3, r3, #3
 8018bc8:	440b      	add	r3, r1
 8018bca:	3308      	adds	r3, #8
 8018bcc:	6818      	ldr	r0, [r3, #0]
 8018bce:	687a      	ldr	r2, [r7, #4]
 8018bd0:	4613      	mov	r3, r2
 8018bd2:	005b      	lsls	r3, r3, #1
 8018bd4:	4413      	add	r3, r2
 8018bd6:	00db      	lsls	r3, r3, #3
 8018bd8:	4a08      	ldr	r2, [pc, #32]	; (8018bfc <etharp_tmr+0x14c>)
 8018bda:	4413      	add	r3, r2
 8018bdc:	3304      	adds	r3, #4
 8018bde:	4619      	mov	r1, r3
 8018be0:	f000 fe6e 	bl	80198c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	3301      	adds	r3, #1
 8018be8:	607b      	str	r3, [r7, #4]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	2b09      	cmp	r3, #9
 8018bee:	f77f af65 	ble.w	8018abc <etharp_tmr+0xc>
      }
    }
  }
}
 8018bf2:	bf00      	nop
 8018bf4:	bf00      	nop
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	2000b03c 	.word	0x2000b03c

08018c00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b08a      	sub	sp, #40	; 0x28
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	60f8      	str	r0, [r7, #12]
 8018c08:	460b      	mov	r3, r1
 8018c0a:	607a      	str	r2, [r7, #4]
 8018c0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018c0e:	230a      	movs	r3, #10
 8018c10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018c12:	230a      	movs	r3, #10
 8018c14:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018c16:	230a      	movs	r3, #10
 8018c18:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018c1e:	230a      	movs	r3, #10
 8018c20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018c22:	2300      	movs	r3, #0
 8018c24:	83bb      	strh	r3, [r7, #28]
 8018c26:	2300      	movs	r3, #0
 8018c28:	837b      	strh	r3, [r7, #26]
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c2e:	2300      	movs	r3, #0
 8018c30:	843b      	strh	r3, [r7, #32]
 8018c32:	e0ae      	b.n	8018d92 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018c34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c38:	49a6      	ldr	r1, [pc, #664]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	005b      	lsls	r3, r3, #1
 8018c3e:	4413      	add	r3, r2
 8018c40:	00db      	lsls	r3, r3, #3
 8018c42:	440b      	add	r3, r1
 8018c44:	3314      	adds	r3, #20
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018c4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018c4e:	2b0a      	cmp	r3, #10
 8018c50:	d105      	bne.n	8018c5e <etharp_find_entry+0x5e>
 8018c52:	7dfb      	ldrb	r3, [r7, #23]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d102      	bne.n	8018c5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018c58:	8c3b      	ldrh	r3, [r7, #32]
 8018c5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8018c5c:	e095      	b.n	8018d8a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018c5e:	7dfb      	ldrb	r3, [r7, #23]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f000 8092 	beq.w	8018d8a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018c66:	7dfb      	ldrb	r3, [r7, #23]
 8018c68:	2b01      	cmp	r3, #1
 8018c6a:	d009      	beq.n	8018c80 <etharp_find_entry+0x80>
 8018c6c:	7dfb      	ldrb	r3, [r7, #23]
 8018c6e:	2b01      	cmp	r3, #1
 8018c70:	d806      	bhi.n	8018c80 <etharp_find_entry+0x80>
 8018c72:	4b99      	ldr	r3, [pc, #612]	; (8018ed8 <etharp_find_entry+0x2d8>)
 8018c74:	f240 1223 	movw	r2, #291	; 0x123
 8018c78:	4998      	ldr	r1, [pc, #608]	; (8018edc <etharp_find_entry+0x2dc>)
 8018c7a:	4899      	ldr	r0, [pc, #612]	; (8018ee0 <etharp_find_entry+0x2e0>)
 8018c7c:	f002 fd22 	bl	801b6c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d020      	beq.n	8018cc8 <etharp_find_entry+0xc8>
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	6819      	ldr	r1, [r3, #0]
 8018c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c8e:	4891      	ldr	r0, [pc, #580]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018c90:	4613      	mov	r3, r2
 8018c92:	005b      	lsls	r3, r3, #1
 8018c94:	4413      	add	r3, r2
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	4403      	add	r3, r0
 8018c9a:	3304      	adds	r3, #4
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	4299      	cmp	r1, r3
 8018ca0:	d112      	bne.n	8018cc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d00c      	beq.n	8018cc2 <etharp_find_entry+0xc2>
 8018ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cac:	4989      	ldr	r1, [pc, #548]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018cae:	4613      	mov	r3, r2
 8018cb0:	005b      	lsls	r3, r3, #1
 8018cb2:	4413      	add	r3, r2
 8018cb4:	00db      	lsls	r3, r3, #3
 8018cb6:	440b      	add	r3, r1
 8018cb8:	3308      	adds	r3, #8
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	687a      	ldr	r2, [r7, #4]
 8018cbe:	429a      	cmp	r2, r3
 8018cc0:	d102      	bne.n	8018cc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018cc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018cc6:	e100      	b.n	8018eca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018cc8:	7dfb      	ldrb	r3, [r7, #23]
 8018cca:	2b01      	cmp	r3, #1
 8018ccc:	d140      	bne.n	8018d50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cd2:	4980      	ldr	r1, [pc, #512]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	005b      	lsls	r3, r3, #1
 8018cd8:	4413      	add	r3, r2
 8018cda:	00db      	lsls	r3, r3, #3
 8018cdc:	440b      	add	r3, r1
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d01a      	beq.n	8018d1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ce8:	497a      	ldr	r1, [pc, #488]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018cea:	4613      	mov	r3, r2
 8018cec:	005b      	lsls	r3, r3, #1
 8018cee:	4413      	add	r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	440b      	add	r3, r1
 8018cf4:	3312      	adds	r3, #18
 8018cf6:	881b      	ldrh	r3, [r3, #0]
 8018cf8:	8bba      	ldrh	r2, [r7, #28]
 8018cfa:	429a      	cmp	r2, r3
 8018cfc:	d845      	bhi.n	8018d8a <etharp_find_entry+0x18a>
            old_queue = i;
 8018cfe:	8c3b      	ldrh	r3, [r7, #32]
 8018d00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d06:	4973      	ldr	r1, [pc, #460]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018d08:	4613      	mov	r3, r2
 8018d0a:	005b      	lsls	r3, r3, #1
 8018d0c:	4413      	add	r3, r2
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	440b      	add	r3, r1
 8018d12:	3312      	adds	r3, #18
 8018d14:	881b      	ldrh	r3, [r3, #0]
 8018d16:	83bb      	strh	r3, [r7, #28]
 8018d18:	e037      	b.n	8018d8a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018d1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d1e:	496d      	ldr	r1, [pc, #436]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018d20:	4613      	mov	r3, r2
 8018d22:	005b      	lsls	r3, r3, #1
 8018d24:	4413      	add	r3, r2
 8018d26:	00db      	lsls	r3, r3, #3
 8018d28:	440b      	add	r3, r1
 8018d2a:	3312      	adds	r3, #18
 8018d2c:	881b      	ldrh	r3, [r3, #0]
 8018d2e:	8b7a      	ldrh	r2, [r7, #26]
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d82a      	bhi.n	8018d8a <etharp_find_entry+0x18a>
            old_pending = i;
 8018d34:	8c3b      	ldrh	r3, [r7, #32]
 8018d36:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018d38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d3c:	4965      	ldr	r1, [pc, #404]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018d3e:	4613      	mov	r3, r2
 8018d40:	005b      	lsls	r3, r3, #1
 8018d42:	4413      	add	r3, r2
 8018d44:	00db      	lsls	r3, r3, #3
 8018d46:	440b      	add	r3, r1
 8018d48:	3312      	adds	r3, #18
 8018d4a:	881b      	ldrh	r3, [r3, #0]
 8018d4c:	837b      	strh	r3, [r7, #26]
 8018d4e:	e01c      	b.n	8018d8a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018d50:	7dfb      	ldrb	r3, [r7, #23]
 8018d52:	2b01      	cmp	r3, #1
 8018d54:	d919      	bls.n	8018d8a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d5a:	495e      	ldr	r1, [pc, #376]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	005b      	lsls	r3, r3, #1
 8018d60:	4413      	add	r3, r2
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	440b      	add	r3, r1
 8018d66:	3312      	adds	r3, #18
 8018d68:	881b      	ldrh	r3, [r3, #0]
 8018d6a:	8b3a      	ldrh	r2, [r7, #24]
 8018d6c:	429a      	cmp	r2, r3
 8018d6e:	d80c      	bhi.n	8018d8a <etharp_find_entry+0x18a>
            old_stable = i;
 8018d70:	8c3b      	ldrh	r3, [r7, #32]
 8018d72:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018d74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d78:	4956      	ldr	r1, [pc, #344]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018d7a:	4613      	mov	r3, r2
 8018d7c:	005b      	lsls	r3, r3, #1
 8018d7e:	4413      	add	r3, r2
 8018d80:	00db      	lsls	r3, r3, #3
 8018d82:	440b      	add	r3, r1
 8018d84:	3312      	adds	r3, #18
 8018d86:	881b      	ldrh	r3, [r3, #0]
 8018d88:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018d8a:	8c3b      	ldrh	r3, [r7, #32]
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	843b      	strh	r3, [r7, #32]
 8018d92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018d96:	2b09      	cmp	r3, #9
 8018d98:	f77f af4c 	ble.w	8018c34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018d9c:	7afb      	ldrb	r3, [r7, #11]
 8018d9e:	f003 0302 	and.w	r3, r3, #2
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d108      	bne.n	8018db8 <etharp_find_entry+0x1b8>
 8018da6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018daa:	2b0a      	cmp	r3, #10
 8018dac:	d107      	bne.n	8018dbe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018dae:	7afb      	ldrb	r3, [r7, #11]
 8018db0:	f003 0301 	and.w	r3, r3, #1
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d102      	bne.n	8018dbe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018db8:	f04f 33ff 	mov.w	r3, #4294967295
 8018dbc:	e085      	b.n	8018eca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018dbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018dc2:	2b09      	cmp	r3, #9
 8018dc4:	dc02      	bgt.n	8018dcc <etharp_find_entry+0x1cc>
    i = empty;
 8018dc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018dc8:	843b      	strh	r3, [r7, #32]
 8018dca:	e039      	b.n	8018e40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018dcc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018dd0:	2b09      	cmp	r3, #9
 8018dd2:	dc14      	bgt.n	8018dfe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dd6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018dd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ddc:	493d      	ldr	r1, [pc, #244]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018dde:	4613      	mov	r3, r2
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	4413      	add	r3, r2
 8018de4:	00db      	lsls	r3, r3, #3
 8018de6:	440b      	add	r3, r1
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d018      	beq.n	8018e20 <etharp_find_entry+0x220>
 8018dee:	4b3a      	ldr	r3, [pc, #232]	; (8018ed8 <etharp_find_entry+0x2d8>)
 8018df0:	f240 126d 	movw	r2, #365	; 0x16d
 8018df4:	493b      	ldr	r1, [pc, #236]	; (8018ee4 <etharp_find_entry+0x2e4>)
 8018df6:	483a      	ldr	r0, [pc, #232]	; (8018ee0 <etharp_find_entry+0x2e0>)
 8018df8:	f002 fc64 	bl	801b6c4 <iprintf>
 8018dfc:	e010      	b.n	8018e20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018dfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018e02:	2b09      	cmp	r3, #9
 8018e04:	dc02      	bgt.n	8018e0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e08:	843b      	strh	r3, [r7, #32]
 8018e0a:	e009      	b.n	8018e20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018e0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018e10:	2b09      	cmp	r3, #9
 8018e12:	dc02      	bgt.n	8018e1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018e14:	8bfb      	ldrh	r3, [r7, #30]
 8018e16:	843b      	strh	r3, [r7, #32]
 8018e18:	e002      	b.n	8018e20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e1e:	e054      	b.n	8018eca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018e20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018e24:	2b09      	cmp	r3, #9
 8018e26:	dd06      	ble.n	8018e36 <etharp_find_entry+0x236>
 8018e28:	4b2b      	ldr	r3, [pc, #172]	; (8018ed8 <etharp_find_entry+0x2d8>)
 8018e2a:	f240 127f 	movw	r2, #383	; 0x17f
 8018e2e:	492e      	ldr	r1, [pc, #184]	; (8018ee8 <etharp_find_entry+0x2e8>)
 8018e30:	482b      	ldr	r0, [pc, #172]	; (8018ee0 <etharp_find_entry+0x2e0>)
 8018e32:	f002 fc47 	bl	801b6c4 <iprintf>
    etharp_free_entry(i);
 8018e36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	f7ff fe06 	bl	8018a4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018e40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018e44:	2b09      	cmp	r3, #9
 8018e46:	dd06      	ble.n	8018e56 <etharp_find_entry+0x256>
 8018e48:	4b23      	ldr	r3, [pc, #140]	; (8018ed8 <etharp_find_entry+0x2d8>)
 8018e4a:	f240 1283 	movw	r2, #387	; 0x183
 8018e4e:	4926      	ldr	r1, [pc, #152]	; (8018ee8 <etharp_find_entry+0x2e8>)
 8018e50:	4823      	ldr	r0, [pc, #140]	; (8018ee0 <etharp_find_entry+0x2e0>)
 8018e52:	f002 fc37 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018e56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e5a:	491e      	ldr	r1, [pc, #120]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018e5c:	4613      	mov	r3, r2
 8018e5e:	005b      	lsls	r3, r3, #1
 8018e60:	4413      	add	r3, r2
 8018e62:	00db      	lsls	r3, r3, #3
 8018e64:	440b      	add	r3, r1
 8018e66:	3314      	adds	r3, #20
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d006      	beq.n	8018e7c <etharp_find_entry+0x27c>
 8018e6e:	4b1a      	ldr	r3, [pc, #104]	; (8018ed8 <etharp_find_entry+0x2d8>)
 8018e70:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018e74:	491d      	ldr	r1, [pc, #116]	; (8018eec <etharp_find_entry+0x2ec>)
 8018e76:	481a      	ldr	r0, [pc, #104]	; (8018ee0 <etharp_find_entry+0x2e0>)
 8018e78:	f002 fc24 	bl	801b6c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d00b      	beq.n	8018e9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	6819      	ldr	r1, [r3, #0]
 8018e8a:	4812      	ldr	r0, [pc, #72]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018e8c:	4613      	mov	r3, r2
 8018e8e:	005b      	lsls	r3, r3, #1
 8018e90:	4413      	add	r3, r2
 8018e92:	00db      	lsls	r3, r3, #3
 8018e94:	4403      	add	r3, r0
 8018e96:	3304      	adds	r3, #4
 8018e98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018e9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e9e:	490d      	ldr	r1, [pc, #52]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	4413      	add	r3, r2
 8018ea6:	00db      	lsls	r3, r3, #3
 8018ea8:	440b      	add	r3, r1
 8018eaa:	3312      	adds	r3, #18
 8018eac:	2200      	movs	r2, #0
 8018eae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018eb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018eb4:	4907      	ldr	r1, [pc, #28]	; (8018ed4 <etharp_find_entry+0x2d4>)
 8018eb6:	4613      	mov	r3, r2
 8018eb8:	005b      	lsls	r3, r3, #1
 8018eba:	4413      	add	r3, r2
 8018ebc:	00db      	lsls	r3, r3, #3
 8018ebe:	440b      	add	r3, r1
 8018ec0:	3308      	adds	r3, #8
 8018ec2:	687a      	ldr	r2, [r7, #4]
 8018ec4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018ec6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3728      	adds	r7, #40	; 0x28
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	bf00      	nop
 8018ed4:	2000b03c 	.word	0x2000b03c
 8018ed8:	0801ef0c 	.word	0x0801ef0c
 8018edc:	0801ef44 	.word	0x0801ef44
 8018ee0:	0801ef84 	.word	0x0801ef84
 8018ee4:	0801efac 	.word	0x0801efac
 8018ee8:	0801efc4 	.word	0x0801efc4
 8018eec:	0801efd8 	.word	0x0801efd8

08018ef0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b088      	sub	sp, #32
 8018ef4:	af02      	add	r7, sp, #8
 8018ef6:	60f8      	str	r0, [r7, #12]
 8018ef8:	60b9      	str	r1, [r7, #8]
 8018efa:	607a      	str	r2, [r7, #4]
 8018efc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018f04:	2b06      	cmp	r3, #6
 8018f06:	d006      	beq.n	8018f16 <etharp_update_arp_entry+0x26>
 8018f08:	4b48      	ldr	r3, [pc, #288]	; (801902c <etharp_update_arp_entry+0x13c>)
 8018f0a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018f0e:	4948      	ldr	r1, [pc, #288]	; (8019030 <etharp_update_arp_entry+0x140>)
 8018f10:	4848      	ldr	r0, [pc, #288]	; (8019034 <etharp_update_arp_entry+0x144>)
 8018f12:	f002 fbd7 	bl	801b6c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d012      	beq.n	8018f42 <etharp_update_arp_entry+0x52>
 8018f1c:	68bb      	ldr	r3, [r7, #8]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d00e      	beq.n	8018f42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	68f9      	ldr	r1, [r7, #12]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f001 f91a 	bl	801a164 <ip4_addr_isbroadcast_u32>
 8018f30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d105      	bne.n	8018f42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018f3e:	2be0      	cmp	r3, #224	; 0xe0
 8018f40:	d102      	bne.n	8018f48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018f42:	f06f 030f 	mvn.w	r3, #15
 8018f46:	e06c      	b.n	8019022 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018f48:	78fb      	ldrb	r3, [r7, #3]
 8018f4a:	68fa      	ldr	r2, [r7, #12]
 8018f4c:	4619      	mov	r1, r3
 8018f4e:	68b8      	ldr	r0, [r7, #8]
 8018f50:	f7ff fe56 	bl	8018c00 <etharp_find_entry>
 8018f54:	4603      	mov	r3, r0
 8018f56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018f58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	da02      	bge.n	8018f66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018f60:	8afb      	ldrh	r3, [r7, #22]
 8018f62:	b25b      	sxtb	r3, r3
 8018f64:	e05d      	b.n	8019022 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018f66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f6a:	4933      	ldr	r1, [pc, #204]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018f6c:	4613      	mov	r3, r2
 8018f6e:	005b      	lsls	r3, r3, #1
 8018f70:	4413      	add	r3, r2
 8018f72:	00db      	lsls	r3, r3, #3
 8018f74:	440b      	add	r3, r1
 8018f76:	3314      	adds	r3, #20
 8018f78:	2202      	movs	r2, #2
 8018f7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f80:	492d      	ldr	r1, [pc, #180]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018f82:	4613      	mov	r3, r2
 8018f84:	005b      	lsls	r3, r3, #1
 8018f86:	4413      	add	r3, r2
 8018f88:	00db      	lsls	r3, r3, #3
 8018f8a:	440b      	add	r3, r1
 8018f8c:	3308      	adds	r3, #8
 8018f8e:	68fa      	ldr	r2, [r7, #12]
 8018f90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018f92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f96:	4613      	mov	r3, r2
 8018f98:	005b      	lsls	r3, r3, #1
 8018f9a:	4413      	add	r3, r2
 8018f9c:	00db      	lsls	r3, r3, #3
 8018f9e:	3308      	adds	r3, #8
 8018fa0:	4a25      	ldr	r2, [pc, #148]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018fa2:	4413      	add	r3, r2
 8018fa4:	3304      	adds	r3, #4
 8018fa6:	2206      	movs	r2, #6
 8018fa8:	6879      	ldr	r1, [r7, #4]
 8018faa:	4618      	mov	r0, r3
 8018fac:	f002 fcfb 	bl	801b9a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018fb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fb4:	4920      	ldr	r1, [pc, #128]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	005b      	lsls	r3, r3, #1
 8018fba:	4413      	add	r3, r2
 8018fbc:	00db      	lsls	r3, r3, #3
 8018fbe:	440b      	add	r3, r1
 8018fc0:	3312      	adds	r3, #18
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018fc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fca:	491b      	ldr	r1, [pc, #108]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018fcc:	4613      	mov	r3, r2
 8018fce:	005b      	lsls	r3, r3, #1
 8018fd0:	4413      	add	r3, r2
 8018fd2:	00db      	lsls	r3, r3, #3
 8018fd4:	440b      	add	r3, r1
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d021      	beq.n	8019020 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018fdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fe0:	4915      	ldr	r1, [pc, #84]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	005b      	lsls	r3, r3, #1
 8018fe6:	4413      	add	r3, r2
 8018fe8:	00db      	lsls	r3, r3, #3
 8018fea:	440b      	add	r3, r1
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018ff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ff4:	4910      	ldr	r1, [pc, #64]	; (8019038 <etharp_update_arp_entry+0x148>)
 8018ff6:	4613      	mov	r3, r2
 8018ff8:	005b      	lsls	r3, r3, #1
 8018ffa:	4413      	add	r3, r2
 8018ffc:	00db      	lsls	r3, r3, #3
 8018ffe:	440b      	add	r3, r1
 8019000:	2200      	movs	r2, #0
 8019002:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801900a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801900e:	9300      	str	r3, [sp, #0]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6939      	ldr	r1, [r7, #16]
 8019014:	68f8      	ldr	r0, [r7, #12]
 8019016:	f001 ffb3 	bl	801af80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801901a:	6938      	ldr	r0, [r7, #16]
 801901c:	f7f8 ffa0 	bl	8011f60 <pbuf_free>
  }
  return ERR_OK;
 8019020:	2300      	movs	r3, #0
}
 8019022:	4618      	mov	r0, r3
 8019024:	3718      	adds	r7, #24
 8019026:	46bd      	mov	sp, r7
 8019028:	bd80      	pop	{r7, pc}
 801902a:	bf00      	nop
 801902c:	0801ef0c 	.word	0x0801ef0c
 8019030:	0801f004 	.word	0x0801f004
 8019034:	0801ef84 	.word	0x0801ef84
 8019038:	2000b03c 	.word	0x2000b03c

0801903c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019044:	2300      	movs	r3, #0
 8019046:	60fb      	str	r3, [r7, #12]
 8019048:	e01e      	b.n	8019088 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801904a:	4913      	ldr	r1, [pc, #76]	; (8019098 <etharp_cleanup_netif+0x5c>)
 801904c:	68fa      	ldr	r2, [r7, #12]
 801904e:	4613      	mov	r3, r2
 8019050:	005b      	lsls	r3, r3, #1
 8019052:	4413      	add	r3, r2
 8019054:	00db      	lsls	r3, r3, #3
 8019056:	440b      	add	r3, r1
 8019058:	3314      	adds	r3, #20
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801905e:	7afb      	ldrb	r3, [r7, #11]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d00e      	beq.n	8019082 <etharp_cleanup_netif+0x46>
 8019064:	490c      	ldr	r1, [pc, #48]	; (8019098 <etharp_cleanup_netif+0x5c>)
 8019066:	68fa      	ldr	r2, [r7, #12]
 8019068:	4613      	mov	r3, r2
 801906a:	005b      	lsls	r3, r3, #1
 801906c:	4413      	add	r3, r2
 801906e:	00db      	lsls	r3, r3, #3
 8019070:	440b      	add	r3, r1
 8019072:	3308      	adds	r3, #8
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	687a      	ldr	r2, [r7, #4]
 8019078:	429a      	cmp	r2, r3
 801907a:	d102      	bne.n	8019082 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801907c:	68f8      	ldr	r0, [r7, #12]
 801907e:	f7ff fce5 	bl	8018a4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	3301      	adds	r3, #1
 8019086:	60fb      	str	r3, [r7, #12]
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	2b09      	cmp	r3, #9
 801908c:	dddd      	ble.n	801904a <etharp_cleanup_netif+0xe>
    }
  }
}
 801908e:	bf00      	nop
 8019090:	bf00      	nop
 8019092:	3710      	adds	r7, #16
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}
 8019098:	2000b03c 	.word	0x2000b03c

0801909c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801909c:	b5b0      	push	{r4, r5, r7, lr}
 801909e:	b08a      	sub	sp, #40	; 0x28
 80190a0:	af04      	add	r7, sp, #16
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80190a6:	683b      	ldr	r3, [r7, #0]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d107      	bne.n	80190bc <etharp_input+0x20>
 80190ac:	4b3d      	ldr	r3, [pc, #244]	; (80191a4 <etharp_input+0x108>)
 80190ae:	f240 228a 	movw	r2, #650	; 0x28a
 80190b2:	493d      	ldr	r1, [pc, #244]	; (80191a8 <etharp_input+0x10c>)
 80190b4:	483d      	ldr	r0, [pc, #244]	; (80191ac <etharp_input+0x110>)
 80190b6:	f002 fb05 	bl	801b6c4 <iprintf>
 80190ba:	e06f      	b.n	801919c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	685b      	ldr	r3, [r3, #4]
 80190c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80190c2:	693b      	ldr	r3, [r7, #16]
 80190c4:	881b      	ldrh	r3, [r3, #0]
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190cc:	d10c      	bne.n	80190e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80190ce:	693b      	ldr	r3, [r7, #16]
 80190d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80190d2:	2b06      	cmp	r3, #6
 80190d4:	d108      	bne.n	80190e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80190da:	2b04      	cmp	r3, #4
 80190dc:	d104      	bne.n	80190e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80190de:	693b      	ldr	r3, [r7, #16]
 80190e0:	885b      	ldrh	r3, [r3, #2]
 80190e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80190e4:	2b08      	cmp	r3, #8
 80190e6:	d003      	beq.n	80190f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80190e8:	6878      	ldr	r0, [r7, #4]
 80190ea:	f7f8 ff39 	bl	8011f60 <pbuf_free>
    return;
 80190ee:	e055      	b.n	801919c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80190f0:	693b      	ldr	r3, [r7, #16]
 80190f2:	330e      	adds	r3, #14
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80190f8:	693b      	ldr	r3, [r7, #16]
 80190fa:	3318      	adds	r3, #24
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	3304      	adds	r3, #4
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d102      	bne.n	8019110 <etharp_input+0x74>
    for_us = 0;
 801910a:	2300      	movs	r3, #0
 801910c:	75fb      	strb	r3, [r7, #23]
 801910e:	e009      	b.n	8019124 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019110:	68ba      	ldr	r2, [r7, #8]
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	3304      	adds	r3, #4
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	429a      	cmp	r2, r3
 801911a:	bf0c      	ite	eq
 801911c:	2301      	moveq	r3, #1
 801911e:	2300      	movne	r3, #0
 8019120:	b2db      	uxtb	r3, r3
 8019122:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	f103 0208 	add.w	r2, r3, #8
 801912a:	7dfb      	ldrb	r3, [r7, #23]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d001      	beq.n	8019134 <etharp_input+0x98>
 8019130:	2301      	movs	r3, #1
 8019132:	e000      	b.n	8019136 <etharp_input+0x9a>
 8019134:	2302      	movs	r3, #2
 8019136:	f107 010c 	add.w	r1, r7, #12
 801913a:	6838      	ldr	r0, [r7, #0]
 801913c:	f7ff fed8 	bl	8018ef0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	88db      	ldrh	r3, [r3, #6]
 8019144:	b29b      	uxth	r3, r3
 8019146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801914a:	d003      	beq.n	8019154 <etharp_input+0xb8>
 801914c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019150:	d01e      	beq.n	8019190 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019152:	e020      	b.n	8019196 <etharp_input+0xfa>
      if (for_us) {
 8019154:	7dfb      	ldrb	r3, [r7, #23]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d01c      	beq.n	8019194 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019170:	693a      	ldr	r2, [r7, #16]
 8019172:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019174:	2102      	movs	r1, #2
 8019176:	9103      	str	r1, [sp, #12]
 8019178:	f107 010c 	add.w	r1, r7, #12
 801917c:	9102      	str	r1, [sp, #8]
 801917e:	9201      	str	r2, [sp, #4]
 8019180:	9300      	str	r3, [sp, #0]
 8019182:	462b      	mov	r3, r5
 8019184:	4622      	mov	r2, r4
 8019186:	4601      	mov	r1, r0
 8019188:	6838      	ldr	r0, [r7, #0]
 801918a:	f000 faeb 	bl	8019764 <etharp_raw>
      break;
 801918e:	e001      	b.n	8019194 <etharp_input+0xf8>
      break;
 8019190:	bf00      	nop
 8019192:	e000      	b.n	8019196 <etharp_input+0xfa>
      break;
 8019194:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019196:	6878      	ldr	r0, [r7, #4]
 8019198:	f7f8 fee2 	bl	8011f60 <pbuf_free>
}
 801919c:	3718      	adds	r7, #24
 801919e:	46bd      	mov	sp, r7
 80191a0:	bdb0      	pop	{r4, r5, r7, pc}
 80191a2:	bf00      	nop
 80191a4:	0801ef0c 	.word	0x0801ef0c
 80191a8:	0801f05c 	.word	0x0801f05c
 80191ac:	0801ef84 	.word	0x0801ef84

080191b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b086      	sub	sp, #24
 80191b4:	af02      	add	r7, sp, #8
 80191b6:	60f8      	str	r0, [r7, #12]
 80191b8:	60b9      	str	r1, [r7, #8]
 80191ba:	4613      	mov	r3, r2
 80191bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80191be:	79fa      	ldrb	r2, [r7, #7]
 80191c0:	4944      	ldr	r1, [pc, #272]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 80191c2:	4613      	mov	r3, r2
 80191c4:	005b      	lsls	r3, r3, #1
 80191c6:	4413      	add	r3, r2
 80191c8:	00db      	lsls	r3, r3, #3
 80191ca:	440b      	add	r3, r1
 80191cc:	3314      	adds	r3, #20
 80191ce:	781b      	ldrb	r3, [r3, #0]
 80191d0:	2b01      	cmp	r3, #1
 80191d2:	d806      	bhi.n	80191e2 <etharp_output_to_arp_index+0x32>
 80191d4:	4b40      	ldr	r3, [pc, #256]	; (80192d8 <etharp_output_to_arp_index+0x128>)
 80191d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80191da:	4940      	ldr	r1, [pc, #256]	; (80192dc <etharp_output_to_arp_index+0x12c>)
 80191dc:	4840      	ldr	r0, [pc, #256]	; (80192e0 <etharp_output_to_arp_index+0x130>)
 80191de:	f002 fa71 	bl	801b6c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80191e2:	79fa      	ldrb	r2, [r7, #7]
 80191e4:	493b      	ldr	r1, [pc, #236]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 80191e6:	4613      	mov	r3, r2
 80191e8:	005b      	lsls	r3, r3, #1
 80191ea:	4413      	add	r3, r2
 80191ec:	00db      	lsls	r3, r3, #3
 80191ee:	440b      	add	r3, r1
 80191f0:	3314      	adds	r3, #20
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	2b02      	cmp	r3, #2
 80191f6:	d153      	bne.n	80192a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80191f8:	79fa      	ldrb	r2, [r7, #7]
 80191fa:	4936      	ldr	r1, [pc, #216]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 80191fc:	4613      	mov	r3, r2
 80191fe:	005b      	lsls	r3, r3, #1
 8019200:	4413      	add	r3, r2
 8019202:	00db      	lsls	r3, r3, #3
 8019204:	440b      	add	r3, r1
 8019206:	3312      	adds	r3, #18
 8019208:	881b      	ldrh	r3, [r3, #0]
 801920a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801920e:	d919      	bls.n	8019244 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019210:	79fa      	ldrb	r2, [r7, #7]
 8019212:	4613      	mov	r3, r2
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	4413      	add	r3, r2
 8019218:	00db      	lsls	r3, r3, #3
 801921a:	4a2e      	ldr	r2, [pc, #184]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 801921c:	4413      	add	r3, r2
 801921e:	3304      	adds	r3, #4
 8019220:	4619      	mov	r1, r3
 8019222:	68f8      	ldr	r0, [r7, #12]
 8019224:	f000 fb4c 	bl	80198c0 <etharp_request>
 8019228:	4603      	mov	r3, r0
 801922a:	2b00      	cmp	r3, #0
 801922c:	d138      	bne.n	80192a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801922e:	79fa      	ldrb	r2, [r7, #7]
 8019230:	4928      	ldr	r1, [pc, #160]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 8019232:	4613      	mov	r3, r2
 8019234:	005b      	lsls	r3, r3, #1
 8019236:	4413      	add	r3, r2
 8019238:	00db      	lsls	r3, r3, #3
 801923a:	440b      	add	r3, r1
 801923c:	3314      	adds	r3, #20
 801923e:	2203      	movs	r2, #3
 8019240:	701a      	strb	r2, [r3, #0]
 8019242:	e02d      	b.n	80192a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019244:	79fa      	ldrb	r2, [r7, #7]
 8019246:	4923      	ldr	r1, [pc, #140]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 8019248:	4613      	mov	r3, r2
 801924a:	005b      	lsls	r3, r3, #1
 801924c:	4413      	add	r3, r2
 801924e:	00db      	lsls	r3, r3, #3
 8019250:	440b      	add	r3, r1
 8019252:	3312      	adds	r3, #18
 8019254:	881b      	ldrh	r3, [r3, #0]
 8019256:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801925a:	d321      	bcc.n	80192a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801925c:	79fa      	ldrb	r2, [r7, #7]
 801925e:	4613      	mov	r3, r2
 8019260:	005b      	lsls	r3, r3, #1
 8019262:	4413      	add	r3, r2
 8019264:	00db      	lsls	r3, r3, #3
 8019266:	4a1b      	ldr	r2, [pc, #108]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 8019268:	4413      	add	r3, r2
 801926a:	1d19      	adds	r1, r3, #4
 801926c:	79fa      	ldrb	r2, [r7, #7]
 801926e:	4613      	mov	r3, r2
 8019270:	005b      	lsls	r3, r3, #1
 8019272:	4413      	add	r3, r2
 8019274:	00db      	lsls	r3, r3, #3
 8019276:	3308      	adds	r3, #8
 8019278:	4a16      	ldr	r2, [pc, #88]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 801927a:	4413      	add	r3, r2
 801927c:	3304      	adds	r3, #4
 801927e:	461a      	mov	r2, r3
 8019280:	68f8      	ldr	r0, [r7, #12]
 8019282:	f000 fafb 	bl	801987c <etharp_request_dst>
 8019286:	4603      	mov	r3, r0
 8019288:	2b00      	cmp	r3, #0
 801928a:	d109      	bne.n	80192a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801928c:	79fa      	ldrb	r2, [r7, #7]
 801928e:	4911      	ldr	r1, [pc, #68]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 8019290:	4613      	mov	r3, r2
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	4413      	add	r3, r2
 8019296:	00db      	lsls	r3, r3, #3
 8019298:	440b      	add	r3, r1
 801929a:	3314      	adds	r3, #20
 801929c:	2203      	movs	r2, #3
 801929e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80192a6:	79fa      	ldrb	r2, [r7, #7]
 80192a8:	4613      	mov	r3, r2
 80192aa:	005b      	lsls	r3, r3, #1
 80192ac:	4413      	add	r3, r2
 80192ae:	00db      	lsls	r3, r3, #3
 80192b0:	3308      	adds	r3, #8
 80192b2:	4a08      	ldr	r2, [pc, #32]	; (80192d4 <etharp_output_to_arp_index+0x124>)
 80192b4:	4413      	add	r3, r2
 80192b6:	3304      	adds	r3, #4
 80192b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80192bc:	9200      	str	r2, [sp, #0]
 80192be:	460a      	mov	r2, r1
 80192c0:	68b9      	ldr	r1, [r7, #8]
 80192c2:	68f8      	ldr	r0, [r7, #12]
 80192c4:	f001 fe5c 	bl	801af80 <ethernet_output>
 80192c8:	4603      	mov	r3, r0
}
 80192ca:	4618      	mov	r0, r3
 80192cc:	3710      	adds	r7, #16
 80192ce:	46bd      	mov	sp, r7
 80192d0:	bd80      	pop	{r7, pc}
 80192d2:	bf00      	nop
 80192d4:	2000b03c 	.word	0x2000b03c
 80192d8:	0801ef0c 	.word	0x0801ef0c
 80192dc:	0801f07c 	.word	0x0801f07c
 80192e0:	0801ef84 	.word	0x0801ef84

080192e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b08a      	sub	sp, #40	; 0x28
 80192e8:	af02      	add	r7, sp, #8
 80192ea:	60f8      	str	r0, [r7, #12]
 80192ec:	60b9      	str	r1, [r7, #8]
 80192ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d106      	bne.n	8019308 <etharp_output+0x24>
 80192fa:	4b73      	ldr	r3, [pc, #460]	; (80194c8 <etharp_output+0x1e4>)
 80192fc:	f240 321e 	movw	r2, #798	; 0x31e
 8019300:	4972      	ldr	r1, [pc, #456]	; (80194cc <etharp_output+0x1e8>)
 8019302:	4873      	ldr	r0, [pc, #460]	; (80194d0 <etharp_output+0x1ec>)
 8019304:	f002 f9de 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d106      	bne.n	801931c <etharp_output+0x38>
 801930e:	4b6e      	ldr	r3, [pc, #440]	; (80194c8 <etharp_output+0x1e4>)
 8019310:	f240 321f 	movw	r2, #799	; 0x31f
 8019314:	496f      	ldr	r1, [pc, #444]	; (80194d4 <etharp_output+0x1f0>)
 8019316:	486e      	ldr	r0, [pc, #440]	; (80194d0 <etharp_output+0x1ec>)
 8019318:	f002 f9d4 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d106      	bne.n	8019330 <etharp_output+0x4c>
 8019322:	4b69      	ldr	r3, [pc, #420]	; (80194c8 <etharp_output+0x1e4>)
 8019324:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019328:	496b      	ldr	r1, [pc, #428]	; (80194d8 <etharp_output+0x1f4>)
 801932a:	4869      	ldr	r0, [pc, #420]	; (80194d0 <etharp_output+0x1ec>)
 801932c:	f002 f9ca 	bl	801b6c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	68f9      	ldr	r1, [r7, #12]
 8019336:	4618      	mov	r0, r3
 8019338:	f000 ff14 	bl	801a164 <ip4_addr_isbroadcast_u32>
 801933c:	4603      	mov	r3, r0
 801933e:	2b00      	cmp	r3, #0
 8019340:	d002      	beq.n	8019348 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019342:	4b66      	ldr	r3, [pc, #408]	; (80194dc <etharp_output+0x1f8>)
 8019344:	61fb      	str	r3, [r7, #28]
 8019346:	e0af      	b.n	80194a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019350:	2be0      	cmp	r3, #224	; 0xe0
 8019352:	d118      	bne.n	8019386 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019354:	2301      	movs	r3, #1
 8019356:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019358:	2300      	movs	r3, #0
 801935a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801935c:	235e      	movs	r3, #94	; 0x5e
 801935e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	3301      	adds	r3, #1
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801936a:	b2db      	uxtb	r3, r3
 801936c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	3302      	adds	r3, #2
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	3303      	adds	r3, #3
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801937e:	f107 0310 	add.w	r3, r7, #16
 8019382:	61fb      	str	r3, [r7, #28]
 8019384:	e090      	b.n	80194a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681a      	ldr	r2, [r3, #0]
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	3304      	adds	r3, #4
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	405a      	eors	r2, r3
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	3308      	adds	r3, #8
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	4013      	ands	r3, r2
 801939a:	2b00      	cmp	r3, #0
 801939c:	d012      	beq.n	80193c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80193a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d00b      	beq.n	80193c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	330c      	adds	r3, #12
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d003      	beq.n	80193be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	330c      	adds	r3, #12
 80193ba:	61bb      	str	r3, [r7, #24]
 80193bc:	e002      	b.n	80193c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80193be:	f06f 0303 	mvn.w	r3, #3
 80193c2:	e07d      	b.n	80194c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80193c4:	4b46      	ldr	r3, [pc, #280]	; (80194e0 <etharp_output+0x1fc>)
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	4619      	mov	r1, r3
 80193ca:	4a46      	ldr	r2, [pc, #280]	; (80194e4 <etharp_output+0x200>)
 80193cc:	460b      	mov	r3, r1
 80193ce:	005b      	lsls	r3, r3, #1
 80193d0:	440b      	add	r3, r1
 80193d2:	00db      	lsls	r3, r3, #3
 80193d4:	4413      	add	r3, r2
 80193d6:	3314      	adds	r3, #20
 80193d8:	781b      	ldrb	r3, [r3, #0]
 80193da:	2b01      	cmp	r3, #1
 80193dc:	d925      	bls.n	801942a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80193de:	4b40      	ldr	r3, [pc, #256]	; (80194e0 <etharp_output+0x1fc>)
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	4619      	mov	r1, r3
 80193e4:	4a3f      	ldr	r2, [pc, #252]	; (80194e4 <etharp_output+0x200>)
 80193e6:	460b      	mov	r3, r1
 80193e8:	005b      	lsls	r3, r3, #1
 80193ea:	440b      	add	r3, r1
 80193ec:	00db      	lsls	r3, r3, #3
 80193ee:	4413      	add	r3, r2
 80193f0:	3308      	adds	r3, #8
 80193f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	429a      	cmp	r2, r3
 80193f8:	d117      	bne.n	801942a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80193fa:	69bb      	ldr	r3, [r7, #24]
 80193fc:	681a      	ldr	r2, [r3, #0]
 80193fe:	4b38      	ldr	r3, [pc, #224]	; (80194e0 <etharp_output+0x1fc>)
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	4618      	mov	r0, r3
 8019404:	4937      	ldr	r1, [pc, #220]	; (80194e4 <etharp_output+0x200>)
 8019406:	4603      	mov	r3, r0
 8019408:	005b      	lsls	r3, r3, #1
 801940a:	4403      	add	r3, r0
 801940c:	00db      	lsls	r3, r3, #3
 801940e:	440b      	add	r3, r1
 8019410:	3304      	adds	r3, #4
 8019412:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019414:	429a      	cmp	r2, r3
 8019416:	d108      	bne.n	801942a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019418:	4b31      	ldr	r3, [pc, #196]	; (80194e0 <etharp_output+0x1fc>)
 801941a:	781b      	ldrb	r3, [r3, #0]
 801941c:	461a      	mov	r2, r3
 801941e:	68b9      	ldr	r1, [r7, #8]
 8019420:	68f8      	ldr	r0, [r7, #12]
 8019422:	f7ff fec5 	bl	80191b0 <etharp_output_to_arp_index>
 8019426:	4603      	mov	r3, r0
 8019428:	e04a      	b.n	80194c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801942a:	2300      	movs	r3, #0
 801942c:	75fb      	strb	r3, [r7, #23]
 801942e:	e031      	b.n	8019494 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019430:	7dfa      	ldrb	r2, [r7, #23]
 8019432:	492c      	ldr	r1, [pc, #176]	; (80194e4 <etharp_output+0x200>)
 8019434:	4613      	mov	r3, r2
 8019436:	005b      	lsls	r3, r3, #1
 8019438:	4413      	add	r3, r2
 801943a:	00db      	lsls	r3, r3, #3
 801943c:	440b      	add	r3, r1
 801943e:	3314      	adds	r3, #20
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	2b01      	cmp	r3, #1
 8019444:	d923      	bls.n	801948e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019446:	7dfa      	ldrb	r2, [r7, #23]
 8019448:	4926      	ldr	r1, [pc, #152]	; (80194e4 <etharp_output+0x200>)
 801944a:	4613      	mov	r3, r2
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	4413      	add	r3, r2
 8019450:	00db      	lsls	r3, r3, #3
 8019452:	440b      	add	r3, r1
 8019454:	3308      	adds	r3, #8
 8019456:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019458:	68fa      	ldr	r2, [r7, #12]
 801945a:	429a      	cmp	r2, r3
 801945c:	d117      	bne.n	801948e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	6819      	ldr	r1, [r3, #0]
 8019462:	7dfa      	ldrb	r2, [r7, #23]
 8019464:	481f      	ldr	r0, [pc, #124]	; (80194e4 <etharp_output+0x200>)
 8019466:	4613      	mov	r3, r2
 8019468:	005b      	lsls	r3, r3, #1
 801946a:	4413      	add	r3, r2
 801946c:	00db      	lsls	r3, r3, #3
 801946e:	4403      	add	r3, r0
 8019470:	3304      	adds	r3, #4
 8019472:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019474:	4299      	cmp	r1, r3
 8019476:	d10a      	bne.n	801948e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019478:	4a19      	ldr	r2, [pc, #100]	; (80194e0 <etharp_output+0x1fc>)
 801947a:	7dfb      	ldrb	r3, [r7, #23]
 801947c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801947e:	7dfb      	ldrb	r3, [r7, #23]
 8019480:	461a      	mov	r2, r3
 8019482:	68b9      	ldr	r1, [r7, #8]
 8019484:	68f8      	ldr	r0, [r7, #12]
 8019486:	f7ff fe93 	bl	80191b0 <etharp_output_to_arp_index>
 801948a:	4603      	mov	r3, r0
 801948c:	e018      	b.n	80194c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801948e:	7dfb      	ldrb	r3, [r7, #23]
 8019490:	3301      	adds	r3, #1
 8019492:	75fb      	strb	r3, [r7, #23]
 8019494:	7dfb      	ldrb	r3, [r7, #23]
 8019496:	2b09      	cmp	r3, #9
 8019498:	d9ca      	bls.n	8019430 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801949a:	68ba      	ldr	r2, [r7, #8]
 801949c:	69b9      	ldr	r1, [r7, #24]
 801949e:	68f8      	ldr	r0, [r7, #12]
 80194a0:	f000 f822 	bl	80194e8 <etharp_query>
 80194a4:	4603      	mov	r3, r0
 80194a6:	e00b      	b.n	80194c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80194ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80194b2:	9300      	str	r3, [sp, #0]
 80194b4:	69fb      	ldr	r3, [r7, #28]
 80194b6:	68b9      	ldr	r1, [r7, #8]
 80194b8:	68f8      	ldr	r0, [r7, #12]
 80194ba:	f001 fd61 	bl	801af80 <ethernet_output>
 80194be:	4603      	mov	r3, r0
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	3720      	adds	r7, #32
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}
 80194c8:	0801ef0c 	.word	0x0801ef0c
 80194cc:	0801f05c 	.word	0x0801f05c
 80194d0:	0801ef84 	.word	0x0801ef84
 80194d4:	0801f0ac 	.word	0x0801f0ac
 80194d8:	0801f04c 	.word	0x0801f04c
 80194dc:	0801f868 	.word	0x0801f868
 80194e0:	2000b12c 	.word	0x2000b12c
 80194e4:	2000b03c 	.word	0x2000b03c

080194e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b08c      	sub	sp, #48	; 0x30
 80194ec:	af02      	add	r7, sp, #8
 80194ee:	60f8      	str	r0, [r7, #12]
 80194f0:	60b9      	str	r1, [r7, #8]
 80194f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	3326      	adds	r3, #38	; 0x26
 80194f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80194fa:	23ff      	movs	r3, #255	; 0xff
 80194fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019500:	2300      	movs	r3, #0
 8019502:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	68f9      	ldr	r1, [r7, #12]
 801950a:	4618      	mov	r0, r3
 801950c:	f000 fe2a 	bl	801a164 <ip4_addr_isbroadcast_u32>
 8019510:	4603      	mov	r3, r0
 8019512:	2b00      	cmp	r3, #0
 8019514:	d10c      	bne.n	8019530 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801951e:	2be0      	cmp	r3, #224	; 0xe0
 8019520:	d006      	beq.n	8019530 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d003      	beq.n	8019530 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d102      	bne.n	8019536 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019530:	f06f 030f 	mvn.w	r3, #15
 8019534:	e101      	b.n	801973a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019536:	68fa      	ldr	r2, [r7, #12]
 8019538:	2101      	movs	r1, #1
 801953a:	68b8      	ldr	r0, [r7, #8]
 801953c:	f7ff fb60 	bl	8018c00 <etharp_find_entry>
 8019540:	4603      	mov	r3, r0
 8019542:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019544:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019548:	2b00      	cmp	r3, #0
 801954a:	da02      	bge.n	8019552 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801954c:	8a7b      	ldrh	r3, [r7, #18]
 801954e:	b25b      	sxtb	r3, r3
 8019550:	e0f3      	b.n	801973a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019552:	8a7b      	ldrh	r3, [r7, #18]
 8019554:	2b7e      	cmp	r3, #126	; 0x7e
 8019556:	d906      	bls.n	8019566 <etharp_query+0x7e>
 8019558:	4b7a      	ldr	r3, [pc, #488]	; (8019744 <etharp_query+0x25c>)
 801955a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801955e:	497a      	ldr	r1, [pc, #488]	; (8019748 <etharp_query+0x260>)
 8019560:	487a      	ldr	r0, [pc, #488]	; (801974c <etharp_query+0x264>)
 8019562:	f002 f8af 	bl	801b6c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019566:	8a7b      	ldrh	r3, [r7, #18]
 8019568:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801956a:	7c7a      	ldrb	r2, [r7, #17]
 801956c:	4978      	ldr	r1, [pc, #480]	; (8019750 <etharp_query+0x268>)
 801956e:	4613      	mov	r3, r2
 8019570:	005b      	lsls	r3, r3, #1
 8019572:	4413      	add	r3, r2
 8019574:	00db      	lsls	r3, r3, #3
 8019576:	440b      	add	r3, r1
 8019578:	3314      	adds	r3, #20
 801957a:	781b      	ldrb	r3, [r3, #0]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d115      	bne.n	80195ac <etharp_query+0xc4>
    is_new_entry = 1;
 8019580:	2301      	movs	r3, #1
 8019582:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019584:	7c7a      	ldrb	r2, [r7, #17]
 8019586:	4972      	ldr	r1, [pc, #456]	; (8019750 <etharp_query+0x268>)
 8019588:	4613      	mov	r3, r2
 801958a:	005b      	lsls	r3, r3, #1
 801958c:	4413      	add	r3, r2
 801958e:	00db      	lsls	r3, r3, #3
 8019590:	440b      	add	r3, r1
 8019592:	3314      	adds	r3, #20
 8019594:	2201      	movs	r2, #1
 8019596:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019598:	7c7a      	ldrb	r2, [r7, #17]
 801959a:	496d      	ldr	r1, [pc, #436]	; (8019750 <etharp_query+0x268>)
 801959c:	4613      	mov	r3, r2
 801959e:	005b      	lsls	r3, r3, #1
 80195a0:	4413      	add	r3, r2
 80195a2:	00db      	lsls	r3, r3, #3
 80195a4:	440b      	add	r3, r1
 80195a6:	3308      	adds	r3, #8
 80195a8:	68fa      	ldr	r2, [r7, #12]
 80195aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80195ac:	7c7a      	ldrb	r2, [r7, #17]
 80195ae:	4968      	ldr	r1, [pc, #416]	; (8019750 <etharp_query+0x268>)
 80195b0:	4613      	mov	r3, r2
 80195b2:	005b      	lsls	r3, r3, #1
 80195b4:	4413      	add	r3, r2
 80195b6:	00db      	lsls	r3, r3, #3
 80195b8:	440b      	add	r3, r1
 80195ba:	3314      	adds	r3, #20
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	2b01      	cmp	r3, #1
 80195c0:	d011      	beq.n	80195e6 <etharp_query+0xfe>
 80195c2:	7c7a      	ldrb	r2, [r7, #17]
 80195c4:	4962      	ldr	r1, [pc, #392]	; (8019750 <etharp_query+0x268>)
 80195c6:	4613      	mov	r3, r2
 80195c8:	005b      	lsls	r3, r3, #1
 80195ca:	4413      	add	r3, r2
 80195cc:	00db      	lsls	r3, r3, #3
 80195ce:	440b      	add	r3, r1
 80195d0:	3314      	adds	r3, #20
 80195d2:	781b      	ldrb	r3, [r3, #0]
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d806      	bhi.n	80195e6 <etharp_query+0xfe>
 80195d8:	4b5a      	ldr	r3, [pc, #360]	; (8019744 <etharp_query+0x25c>)
 80195da:	f240 32cd 	movw	r2, #973	; 0x3cd
 80195de:	495d      	ldr	r1, [pc, #372]	; (8019754 <etharp_query+0x26c>)
 80195e0:	485a      	ldr	r0, [pc, #360]	; (801974c <etharp_query+0x264>)
 80195e2:	f002 f86f 	bl	801b6c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80195e6:	6a3b      	ldr	r3, [r7, #32]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d102      	bne.n	80195f2 <etharp_query+0x10a>
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d10c      	bne.n	801960c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80195f2:	68b9      	ldr	r1, [r7, #8]
 80195f4:	68f8      	ldr	r0, [r7, #12]
 80195f6:	f000 f963 	bl	80198c0 <etharp_request>
 80195fa:	4603      	mov	r3, r0
 80195fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d102      	bne.n	801960c <etharp_query+0x124>
      return result;
 8019606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801960a:	e096      	b.n	801973a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d106      	bne.n	8019620 <etharp_query+0x138>
 8019612:	4b4c      	ldr	r3, [pc, #304]	; (8019744 <etharp_query+0x25c>)
 8019614:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019618:	494f      	ldr	r1, [pc, #316]	; (8019758 <etharp_query+0x270>)
 801961a:	484c      	ldr	r0, [pc, #304]	; (801974c <etharp_query+0x264>)
 801961c:	f002 f852 	bl	801b6c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019620:	7c7a      	ldrb	r2, [r7, #17]
 8019622:	494b      	ldr	r1, [pc, #300]	; (8019750 <etharp_query+0x268>)
 8019624:	4613      	mov	r3, r2
 8019626:	005b      	lsls	r3, r3, #1
 8019628:	4413      	add	r3, r2
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	440b      	add	r3, r1
 801962e:	3314      	adds	r3, #20
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	2b01      	cmp	r3, #1
 8019634:	d917      	bls.n	8019666 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019636:	4a49      	ldr	r2, [pc, #292]	; (801975c <etharp_query+0x274>)
 8019638:	7c7b      	ldrb	r3, [r7, #17]
 801963a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801963c:	7c7a      	ldrb	r2, [r7, #17]
 801963e:	4613      	mov	r3, r2
 8019640:	005b      	lsls	r3, r3, #1
 8019642:	4413      	add	r3, r2
 8019644:	00db      	lsls	r3, r3, #3
 8019646:	3308      	adds	r3, #8
 8019648:	4a41      	ldr	r2, [pc, #260]	; (8019750 <etharp_query+0x268>)
 801964a:	4413      	add	r3, r2
 801964c:	3304      	adds	r3, #4
 801964e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019652:	9200      	str	r2, [sp, #0]
 8019654:	697a      	ldr	r2, [r7, #20]
 8019656:	6879      	ldr	r1, [r7, #4]
 8019658:	68f8      	ldr	r0, [r7, #12]
 801965a:	f001 fc91 	bl	801af80 <ethernet_output>
 801965e:	4603      	mov	r3, r0
 8019660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019664:	e067      	b.n	8019736 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019666:	7c7a      	ldrb	r2, [r7, #17]
 8019668:	4939      	ldr	r1, [pc, #228]	; (8019750 <etharp_query+0x268>)
 801966a:	4613      	mov	r3, r2
 801966c:	005b      	lsls	r3, r3, #1
 801966e:	4413      	add	r3, r2
 8019670:	00db      	lsls	r3, r3, #3
 8019672:	440b      	add	r3, r1
 8019674:	3314      	adds	r3, #20
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	2b01      	cmp	r3, #1
 801967a:	d15c      	bne.n	8019736 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801967c:	2300      	movs	r3, #0
 801967e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019684:	e01c      	b.n	80196c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019686:	69fb      	ldr	r3, [r7, #28]
 8019688:	895a      	ldrh	r2, [r3, #10]
 801968a:	69fb      	ldr	r3, [r7, #28]
 801968c:	891b      	ldrh	r3, [r3, #8]
 801968e:	429a      	cmp	r2, r3
 8019690:	d10a      	bne.n	80196a8 <etharp_query+0x1c0>
 8019692:	69fb      	ldr	r3, [r7, #28]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d006      	beq.n	80196a8 <etharp_query+0x1c0>
 801969a:	4b2a      	ldr	r3, [pc, #168]	; (8019744 <etharp_query+0x25c>)
 801969c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80196a0:	492f      	ldr	r1, [pc, #188]	; (8019760 <etharp_query+0x278>)
 80196a2:	482a      	ldr	r0, [pc, #168]	; (801974c <etharp_query+0x264>)
 80196a4:	f002 f80e 	bl	801b6c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80196a8:	69fb      	ldr	r3, [r7, #28]
 80196aa:	7b1b      	ldrb	r3, [r3, #12]
 80196ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d002      	beq.n	80196ba <etharp_query+0x1d2>
        copy_needed = 1;
 80196b4:	2301      	movs	r3, #1
 80196b6:	61bb      	str	r3, [r7, #24]
        break;
 80196b8:	e005      	b.n	80196c6 <etharp_query+0x1de>
      }
      p = p->next;
 80196ba:	69fb      	ldr	r3, [r7, #28]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80196c0:	69fb      	ldr	r3, [r7, #28]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d1df      	bne.n	8019686 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80196c6:	69bb      	ldr	r3, [r7, #24]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d007      	beq.n	80196dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80196cc:	687a      	ldr	r2, [r7, #4]
 80196ce:	f44f 7120 	mov.w	r1, #640	; 0x280
 80196d2:	200e      	movs	r0, #14
 80196d4:	f7f8 fea0 	bl	8012418 <pbuf_clone>
 80196d8:	61f8      	str	r0, [r7, #28]
 80196da:	e004      	b.n	80196e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80196e0:	69f8      	ldr	r0, [r7, #28]
 80196e2:	f7f8 fcdd 	bl	80120a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80196e6:	69fb      	ldr	r3, [r7, #28]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d021      	beq.n	8019730 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80196ec:	7c7a      	ldrb	r2, [r7, #17]
 80196ee:	4918      	ldr	r1, [pc, #96]	; (8019750 <etharp_query+0x268>)
 80196f0:	4613      	mov	r3, r2
 80196f2:	005b      	lsls	r3, r3, #1
 80196f4:	4413      	add	r3, r2
 80196f6:	00db      	lsls	r3, r3, #3
 80196f8:	440b      	add	r3, r1
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d00a      	beq.n	8019716 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019700:	7c7a      	ldrb	r2, [r7, #17]
 8019702:	4913      	ldr	r1, [pc, #76]	; (8019750 <etharp_query+0x268>)
 8019704:	4613      	mov	r3, r2
 8019706:	005b      	lsls	r3, r3, #1
 8019708:	4413      	add	r3, r2
 801970a:	00db      	lsls	r3, r3, #3
 801970c:	440b      	add	r3, r1
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	4618      	mov	r0, r3
 8019712:	f7f8 fc25 	bl	8011f60 <pbuf_free>
      }
      arp_table[i].q = p;
 8019716:	7c7a      	ldrb	r2, [r7, #17]
 8019718:	490d      	ldr	r1, [pc, #52]	; (8019750 <etharp_query+0x268>)
 801971a:	4613      	mov	r3, r2
 801971c:	005b      	lsls	r3, r3, #1
 801971e:	4413      	add	r3, r2
 8019720:	00db      	lsls	r3, r3, #3
 8019722:	440b      	add	r3, r1
 8019724:	69fa      	ldr	r2, [r7, #28]
 8019726:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019728:	2300      	movs	r3, #0
 801972a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801972e:	e002      	b.n	8019736 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019730:	23ff      	movs	r3, #255	; 0xff
 8019732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801973a:	4618      	mov	r0, r3
 801973c:	3728      	adds	r7, #40	; 0x28
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}
 8019742:	bf00      	nop
 8019744:	0801ef0c 	.word	0x0801ef0c
 8019748:	0801f0b8 	.word	0x0801f0b8
 801974c:	0801ef84 	.word	0x0801ef84
 8019750:	2000b03c 	.word	0x2000b03c
 8019754:	0801f0c8 	.word	0x0801f0c8
 8019758:	0801f0ac 	.word	0x0801f0ac
 801975c:	2000b12c 	.word	0x2000b12c
 8019760:	0801f0f0 	.word	0x0801f0f0

08019764 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b08a      	sub	sp, #40	; 0x28
 8019768:	af02      	add	r7, sp, #8
 801976a:	60f8      	str	r0, [r7, #12]
 801976c:	60b9      	str	r1, [r7, #8]
 801976e:	607a      	str	r2, [r7, #4]
 8019770:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019772:	2300      	movs	r3, #0
 8019774:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	2b00      	cmp	r3, #0
 801977a:	d106      	bne.n	801978a <etharp_raw+0x26>
 801977c:	4b3a      	ldr	r3, [pc, #232]	; (8019868 <etharp_raw+0x104>)
 801977e:	f240 4257 	movw	r2, #1111	; 0x457
 8019782:	493a      	ldr	r1, [pc, #232]	; (801986c <etharp_raw+0x108>)
 8019784:	483a      	ldr	r0, [pc, #232]	; (8019870 <etharp_raw+0x10c>)
 8019786:	f001 ff9d 	bl	801b6c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801978a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801978e:	211c      	movs	r1, #28
 8019790:	200e      	movs	r0, #14
 8019792:	f7f8 f901 	bl	8011998 <pbuf_alloc>
 8019796:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019798:	69bb      	ldr	r3, [r7, #24]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d102      	bne.n	80197a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801979e:	f04f 33ff 	mov.w	r3, #4294967295
 80197a2:	e05d      	b.n	8019860 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80197a4:	69bb      	ldr	r3, [r7, #24]
 80197a6:	895b      	ldrh	r3, [r3, #10]
 80197a8:	2b1b      	cmp	r3, #27
 80197aa:	d806      	bhi.n	80197ba <etharp_raw+0x56>
 80197ac:	4b2e      	ldr	r3, [pc, #184]	; (8019868 <etharp_raw+0x104>)
 80197ae:	f240 4262 	movw	r2, #1122	; 0x462
 80197b2:	4930      	ldr	r1, [pc, #192]	; (8019874 <etharp_raw+0x110>)
 80197b4:	482e      	ldr	r0, [pc, #184]	; (8019870 <etharp_raw+0x10c>)
 80197b6:	f001 ff85 	bl	801b6c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80197ba:	69bb      	ldr	r3, [r7, #24]
 80197bc:	685b      	ldr	r3, [r3, #4]
 80197be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80197c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7f7 f803 	bl	80107ce <lwip_htons>
 80197c8:	4603      	mov	r3, r0
 80197ca:	461a      	mov	r2, r3
 80197cc:	697b      	ldr	r3, [r7, #20]
 80197ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80197d6:	2b06      	cmp	r3, #6
 80197d8:	d006      	beq.n	80197e8 <etharp_raw+0x84>
 80197da:	4b23      	ldr	r3, [pc, #140]	; (8019868 <etharp_raw+0x104>)
 80197dc:	f240 4269 	movw	r2, #1129	; 0x469
 80197e0:	4925      	ldr	r1, [pc, #148]	; (8019878 <etharp_raw+0x114>)
 80197e2:	4823      	ldr	r0, [pc, #140]	; (8019870 <etharp_raw+0x10c>)
 80197e4:	f001 ff6e 	bl	801b6c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	3308      	adds	r3, #8
 80197ec:	2206      	movs	r2, #6
 80197ee:	6839      	ldr	r1, [r7, #0]
 80197f0:	4618      	mov	r0, r3
 80197f2:	f002 f8d8 	bl	801b9a6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	3312      	adds	r3, #18
 80197fa:	2206      	movs	r2, #6
 80197fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80197fe:	4618      	mov	r0, r3
 8019800:	f002 f8d1 	bl	801b9a6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019804:	697b      	ldr	r3, [r7, #20]
 8019806:	330e      	adds	r3, #14
 8019808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801980a:	6812      	ldr	r2, [r2, #0]
 801980c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801980e:	697b      	ldr	r3, [r7, #20]
 8019810:	3318      	adds	r3, #24
 8019812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019814:	6812      	ldr	r2, [r2, #0]
 8019816:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	2200      	movs	r2, #0
 801981c:	701a      	strb	r2, [r3, #0]
 801981e:	2200      	movs	r2, #0
 8019820:	f042 0201 	orr.w	r2, r2, #1
 8019824:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019826:	697b      	ldr	r3, [r7, #20]
 8019828:	2200      	movs	r2, #0
 801982a:	f042 0208 	orr.w	r2, r2, #8
 801982e:	709a      	strb	r2, [r3, #2]
 8019830:	2200      	movs	r2, #0
 8019832:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019834:	697b      	ldr	r3, [r7, #20]
 8019836:	2206      	movs	r2, #6
 8019838:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	2204      	movs	r2, #4
 801983e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019840:	f640 0306 	movw	r3, #2054	; 0x806
 8019844:	9300      	str	r3, [sp, #0]
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	68ba      	ldr	r2, [r7, #8]
 801984a:	69b9      	ldr	r1, [r7, #24]
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f001 fb97 	bl	801af80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019852:	69b8      	ldr	r0, [r7, #24]
 8019854:	f7f8 fb84 	bl	8011f60 <pbuf_free>
  p = NULL;
 8019858:	2300      	movs	r3, #0
 801985a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801985c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019860:	4618      	mov	r0, r3
 8019862:	3720      	adds	r7, #32
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}
 8019868:	0801ef0c 	.word	0x0801ef0c
 801986c:	0801f05c 	.word	0x0801f05c
 8019870:	0801ef84 	.word	0x0801ef84
 8019874:	0801f10c 	.word	0x0801f10c
 8019878:	0801f140 	.word	0x0801f140

0801987c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b088      	sub	sp, #32
 8019880:	af04      	add	r7, sp, #16
 8019882:	60f8      	str	r0, [r7, #12]
 8019884:	60b9      	str	r1, [r7, #8]
 8019886:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019898:	2201      	movs	r2, #1
 801989a:	9203      	str	r2, [sp, #12]
 801989c:	68ba      	ldr	r2, [r7, #8]
 801989e:	9202      	str	r2, [sp, #8]
 80198a0:	4a06      	ldr	r2, [pc, #24]	; (80198bc <etharp_request_dst+0x40>)
 80198a2:	9201      	str	r2, [sp, #4]
 80198a4:	9300      	str	r3, [sp, #0]
 80198a6:	4603      	mov	r3, r0
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	68f8      	ldr	r0, [r7, #12]
 80198ac:	f7ff ff5a 	bl	8019764 <etharp_raw>
 80198b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80198b2:	4618      	mov	r0, r3
 80198b4:	3710      	adds	r7, #16
 80198b6:	46bd      	mov	sp, r7
 80198b8:	bd80      	pop	{r7, pc}
 80198ba:	bf00      	nop
 80198bc:	0801f870 	.word	0x0801f870

080198c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
 80198c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80198ca:	4a05      	ldr	r2, [pc, #20]	; (80198e0 <etharp_request+0x20>)
 80198cc:	6839      	ldr	r1, [r7, #0]
 80198ce:	6878      	ldr	r0, [r7, #4]
 80198d0:	f7ff ffd4 	bl	801987c <etharp_request_dst>
 80198d4:	4603      	mov	r3, r0
}
 80198d6:	4618      	mov	r0, r3
 80198d8:	3708      	adds	r7, #8
 80198da:	46bd      	mov	sp, r7
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop
 80198e0:	0801f868 	.word	0x0801f868

080198e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b08e      	sub	sp, #56	; 0x38
 80198e8:	af04      	add	r7, sp, #16
 80198ea:	6078      	str	r0, [r7, #4]
 80198ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80198ee:	4b82      	ldr	r3, [pc, #520]	; (8019af8 <icmp_input+0x214>)
 80198f0:	689b      	ldr	r3, [r3, #8]
 80198f2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80198f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	f003 030f 	and.w	r3, r3, #15
 80198fc:	b2db      	uxtb	r3, r3
 80198fe:	009b      	lsls	r3, r3, #2
 8019900:	b2db      	uxtb	r3, r3
 8019902:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019906:	2b13      	cmp	r3, #19
 8019908:	f240 80de 	bls.w	8019ac8 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	895b      	ldrh	r3, [r3, #10]
 8019910:	2b03      	cmp	r3, #3
 8019912:	f240 80db 	bls.w	8019acc <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	685b      	ldr	r3, [r3, #4]
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019920:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019924:	2b00      	cmp	r3, #0
 8019926:	f000 80c8 	beq.w	8019aba <icmp_input+0x1d6>
 801992a:	2b08      	cmp	r3, #8
 801992c:	f040 80c8 	bne.w	8019ac0 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019930:	4b72      	ldr	r3, [pc, #456]	; (8019afc <icmp_input+0x218>)
 8019932:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019934:	4b70      	ldr	r3, [pc, #448]	; (8019af8 <icmp_input+0x214>)
 8019936:	695b      	ldr	r3, [r3, #20]
 8019938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801993c:	2be0      	cmp	r3, #224	; 0xe0
 801993e:	f000 80cc 	beq.w	8019ada <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019942:	4b6d      	ldr	r3, [pc, #436]	; (8019af8 <icmp_input+0x214>)
 8019944:	695b      	ldr	r3, [r3, #20]
 8019946:	4a6c      	ldr	r2, [pc, #432]	; (8019af8 <icmp_input+0x214>)
 8019948:	6812      	ldr	r2, [r2, #0]
 801994a:	4611      	mov	r1, r2
 801994c:	4618      	mov	r0, r3
 801994e:	f000 fc09 	bl	801a164 <ip4_addr_isbroadcast_u32>
 8019952:	4603      	mov	r3, r0
 8019954:	2b00      	cmp	r3, #0
 8019956:	f040 80c2 	bne.w	8019ade <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	891b      	ldrh	r3, [r3, #8]
 801995e:	2b07      	cmp	r3, #7
 8019960:	f240 80b6 	bls.w	8019ad0 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019966:	330e      	adds	r3, #14
 8019968:	4619      	mov	r1, r3
 801996a:	6878      	ldr	r0, [r7, #4]
 801996c:	f7f8 fa62 	bl	8011e34 <pbuf_add_header>
 8019970:	4603      	mov	r3, r0
 8019972:	2b00      	cmp	r3, #0
 8019974:	d04b      	beq.n	8019a0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	891a      	ldrh	r2, [r3, #8]
 801997a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801997c:	4413      	add	r3, r2
 801997e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	891b      	ldrh	r3, [r3, #8]
 8019984:	8b7a      	ldrh	r2, [r7, #26]
 8019986:	429a      	cmp	r2, r3
 8019988:	f0c0 80ab 	bcc.w	8019ae2 <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801998c:	8b7b      	ldrh	r3, [r7, #26]
 801998e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019992:	4619      	mov	r1, r3
 8019994:	200e      	movs	r0, #14
 8019996:	f7f7 ffff 	bl	8011998 <pbuf_alloc>
 801999a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f000 80a1 	beq.w	8019ae6 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	895b      	ldrh	r3, [r3, #10]
 80199a8:	461a      	mov	r2, r3
 80199aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80199ac:	3308      	adds	r3, #8
 80199ae:	429a      	cmp	r2, r3
 80199b0:	d203      	bcs.n	80199ba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80199b2:	6978      	ldr	r0, [r7, #20]
 80199b4:	f7f8 fad4 	bl	8011f60 <pbuf_free>
          goto icmperr;
 80199b8:	e096      	b.n	8019ae8 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80199ba:	697b      	ldr	r3, [r7, #20]
 80199bc:	685b      	ldr	r3, [r3, #4]
 80199be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80199c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80199c2:	4618      	mov	r0, r3
 80199c4:	f001 ffef 	bl	801b9a6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80199c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80199ca:	4619      	mov	r1, r3
 80199cc:	6978      	ldr	r0, [r7, #20]
 80199ce:	f7f8 fa41 	bl	8011e54 <pbuf_remove_header>
 80199d2:	4603      	mov	r3, r0
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d009      	beq.n	80199ec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80199d8:	4b49      	ldr	r3, [pc, #292]	; (8019b00 <icmp_input+0x21c>)
 80199da:	22b6      	movs	r2, #182	; 0xb6
 80199dc:	4949      	ldr	r1, [pc, #292]	; (8019b04 <icmp_input+0x220>)
 80199de:	484a      	ldr	r0, [pc, #296]	; (8019b08 <icmp_input+0x224>)
 80199e0:	f001 fe70 	bl	801b6c4 <iprintf>
          pbuf_free(r);
 80199e4:	6978      	ldr	r0, [r7, #20]
 80199e6:	f7f8 fabb 	bl	8011f60 <pbuf_free>
          goto icmperr;
 80199ea:	e07d      	b.n	8019ae8 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80199ec:	6879      	ldr	r1, [r7, #4]
 80199ee:	6978      	ldr	r0, [r7, #20]
 80199f0:	f7f8 fbce 	bl	8012190 <pbuf_copy>
 80199f4:	4603      	mov	r3, r0
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d003      	beq.n	8019a02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80199fa:	6978      	ldr	r0, [r7, #20]
 80199fc:	f7f8 fab0 	bl	8011f60 <pbuf_free>
          goto icmperr;
 8019a00:	e072      	b.n	8019ae8 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 8019a02:	6878      	ldr	r0, [r7, #4]
 8019a04:	f7f8 faac 	bl	8011f60 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	607b      	str	r3, [r7, #4]
 8019a0c:	e00f      	b.n	8019a2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a10:	330e      	adds	r3, #14
 8019a12:	4619      	mov	r1, r3
 8019a14:	6878      	ldr	r0, [r7, #4]
 8019a16:	f7f8 fa1d 	bl	8011e54 <pbuf_remove_header>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d006      	beq.n	8019a2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019a20:	4b37      	ldr	r3, [pc, #220]	; (8019b00 <icmp_input+0x21c>)
 8019a22:	22c7      	movs	r2, #199	; 0xc7
 8019a24:	4939      	ldr	r1, [pc, #228]	; (8019b0c <icmp_input+0x228>)
 8019a26:	4838      	ldr	r0, [pc, #224]	; (8019b08 <icmp_input+0x224>)
 8019a28:	f001 fe4c 	bl	801b6c4 <iprintf>
          goto icmperr;
 8019a2c:	e05c      	b.n	8019ae8 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	685b      	ldr	r3, [r3, #4]
 8019a32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019a34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a36:	4619      	mov	r1, r3
 8019a38:	6878      	ldr	r0, [r7, #4]
 8019a3a:	f7f8 f9fb 	bl	8011e34 <pbuf_add_header>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d13c      	bne.n	8019abe <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	685b      	ldr	r3, [r3, #4]
 8019a48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019a4a:	69fb      	ldr	r3, [r7, #28]
 8019a4c:	681a      	ldr	r2, [r3, #0]
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019a52:	4b29      	ldr	r3, [pc, #164]	; (8019af8 <icmp_input+0x214>)
 8019a54:	691a      	ldr	r2, [r3, #16]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019a5a:	693b      	ldr	r3, [r7, #16]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019a60:	693b      	ldr	r3, [r7, #16]
 8019a62:	885b      	ldrh	r3, [r3, #2]
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019a6a:	4293      	cmp	r3, r2
 8019a6c:	d907      	bls.n	8019a7e <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019a6e:	693b      	ldr	r3, [r7, #16]
 8019a70:	885b      	ldrh	r3, [r3, #2]
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	3309      	adds	r3, #9
 8019a76:	b29a      	uxth	r2, r3
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	805a      	strh	r2, [r3, #2]
 8019a7c:	e006      	b.n	8019a8c <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019a7e:	693b      	ldr	r3, [r7, #16]
 8019a80:	885b      	ldrh	r3, [r3, #2]
 8019a82:	b29b      	uxth	r3, r3
 8019a84:	3308      	adds	r3, #8
 8019a86:	b29a      	uxth	r2, r3
 8019a88:	693b      	ldr	r3, [r7, #16]
 8019a8a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	22ff      	movs	r2, #255	; 0xff
 8019a90:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	2200      	movs	r2, #0
 8019a96:	729a      	strb	r2, [r3, #10]
 8019a98:	2200      	movs	r2, #0
 8019a9a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	9302      	str	r3, [sp, #8]
 8019aa0:	2301      	movs	r3, #1
 8019aa2:	9301      	str	r3, [sp, #4]
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	9300      	str	r3, [sp, #0]
 8019aa8:	23ff      	movs	r3, #255	; 0xff
 8019aaa:	2200      	movs	r2, #0
 8019aac:	69f9      	ldr	r1, [r7, #28]
 8019aae:	6878      	ldr	r0, [r7, #4]
 8019ab0:	f000 fa80 	bl	8019fb4 <ip4_output_if>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019ab8:	e001      	b.n	8019abe <icmp_input+0x1da>
      break;
 8019aba:	bf00      	nop
 8019abc:	e000      	b.n	8019ac0 <icmp_input+0x1dc>
      break;
 8019abe:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f7f8 fa4d 	bl	8011f60 <pbuf_free>
  return;
 8019ac6:	e013      	b.n	8019af0 <icmp_input+0x20c>
    goto lenerr;
 8019ac8:	bf00      	nop
 8019aca:	e002      	b.n	8019ad2 <icmp_input+0x1ee>
    goto lenerr;
 8019acc:	bf00      	nop
 8019ace:	e000      	b.n	8019ad2 <icmp_input+0x1ee>
        goto lenerr;
 8019ad0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019ad2:	6878      	ldr	r0, [r7, #4]
 8019ad4:	f7f8 fa44 	bl	8011f60 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019ad8:	e00a      	b.n	8019af0 <icmp_input+0x20c>
        goto icmperr;
 8019ada:	bf00      	nop
 8019adc:	e004      	b.n	8019ae8 <icmp_input+0x204>
        goto icmperr;
 8019ade:	bf00      	nop
 8019ae0:	e002      	b.n	8019ae8 <icmp_input+0x204>
          goto icmperr;
 8019ae2:	bf00      	nop
 8019ae4:	e000      	b.n	8019ae8 <icmp_input+0x204>
          goto icmperr;
 8019ae6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	f7f8 fa39 	bl	8011f60 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019aee:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019af0:	3728      	adds	r7, #40	; 0x28
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	200042b4 	.word	0x200042b4
 8019afc:	200042c8 	.word	0x200042c8
 8019b00:	0801f184 	.word	0x0801f184
 8019b04:	0801f1bc 	.word	0x0801f1bc
 8019b08:	0801f1f4 	.word	0x0801f1f4
 8019b0c:	0801f21c 	.word	0x0801f21c

08019b10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b082      	sub	sp, #8
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	6078      	str	r0, [r7, #4]
 8019b18:	460b      	mov	r3, r1
 8019b1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019b1c:	78fb      	ldrb	r3, [r7, #3]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	2103      	movs	r1, #3
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f000 f814 	bl	8019b50 <icmp_send_response>
}
 8019b28:	bf00      	nop
 8019b2a:	3708      	adds	r7, #8
 8019b2c:	46bd      	mov	sp, r7
 8019b2e:	bd80      	pop	{r7, pc}

08019b30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b082      	sub	sp, #8
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
 8019b38:	460b      	mov	r3, r1
 8019b3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019b3c:	78fb      	ldrb	r3, [r7, #3]
 8019b3e:	461a      	mov	r2, r3
 8019b40:	210b      	movs	r1, #11
 8019b42:	6878      	ldr	r0, [r7, #4]
 8019b44:	f000 f804 	bl	8019b50 <icmp_send_response>
}
 8019b48:	bf00      	nop
 8019b4a:	3708      	adds	r7, #8
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}

08019b50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b08c      	sub	sp, #48	; 0x30
 8019b54:	af04      	add	r7, sp, #16
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	460b      	mov	r3, r1
 8019b5a:	70fb      	strb	r3, [r7, #3]
 8019b5c:	4613      	mov	r3, r2
 8019b5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019b60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b64:	2124      	movs	r1, #36	; 0x24
 8019b66:	2022      	movs	r0, #34	; 0x22
 8019b68:	f7f7 ff16 	bl	8011998 <pbuf_alloc>
 8019b6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019b6e:	69fb      	ldr	r3, [r7, #28]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d056      	beq.n	8019c22 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019b74:	69fb      	ldr	r3, [r7, #28]
 8019b76:	895b      	ldrh	r3, [r3, #10]
 8019b78:	2b23      	cmp	r3, #35	; 0x23
 8019b7a:	d806      	bhi.n	8019b8a <icmp_send_response+0x3a>
 8019b7c:	4b2b      	ldr	r3, [pc, #172]	; (8019c2c <icmp_send_response+0xdc>)
 8019b7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019b82:	492b      	ldr	r1, [pc, #172]	; (8019c30 <icmp_send_response+0xe0>)
 8019b84:	482b      	ldr	r0, [pc, #172]	; (8019c34 <icmp_send_response+0xe4>)
 8019b86:	f001 fd9d 	bl	801b6c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019b90:	69fb      	ldr	r3, [r7, #28]
 8019b92:	685b      	ldr	r3, [r3, #4]
 8019b94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	78fa      	ldrb	r2, [r7, #3]
 8019b9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	78ba      	ldrb	r2, [r7, #2]
 8019ba0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019ba2:	697b      	ldr	r3, [r7, #20]
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	711a      	strb	r2, [r3, #4]
 8019ba8:	2200      	movs	r2, #0
 8019baa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	719a      	strb	r2, [r3, #6]
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	685b      	ldr	r3, [r3, #4]
 8019bba:	f103 0008 	add.w	r0, r3, #8
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	685b      	ldr	r3, [r3, #4]
 8019bc2:	221c      	movs	r2, #28
 8019bc4:	4619      	mov	r1, r3
 8019bc6:	f001 feee 	bl	801b9a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019bca:	69bb      	ldr	r3, [r7, #24]
 8019bcc:	68db      	ldr	r3, [r3, #12]
 8019bce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019bd0:	f107 030c 	add.w	r3, r7, #12
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f000 f82f 	bl	8019c38 <ip4_route>
 8019bda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d01b      	beq.n	8019c1a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	2200      	movs	r2, #0
 8019be6:	709a      	strb	r2, [r3, #2]
 8019be8:	2200      	movs	r2, #0
 8019bea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019bec:	69fb      	ldr	r3, [r7, #28]
 8019bee:	895b      	ldrh	r3, [r3, #10]
 8019bf0:	4619      	mov	r1, r3
 8019bf2:	6978      	ldr	r0, [r7, #20]
 8019bf4:	f7f6 fe76 	bl	80108e4 <inet_chksum>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	461a      	mov	r2, r3
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019c00:	f107 020c 	add.w	r2, r7, #12
 8019c04:	693b      	ldr	r3, [r7, #16]
 8019c06:	9302      	str	r3, [sp, #8]
 8019c08:	2301      	movs	r3, #1
 8019c0a:	9301      	str	r3, [sp, #4]
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	23ff      	movs	r3, #255	; 0xff
 8019c12:	2100      	movs	r1, #0
 8019c14:	69f8      	ldr	r0, [r7, #28]
 8019c16:	f000 f9cd 	bl	8019fb4 <ip4_output_if>
  }
  pbuf_free(q);
 8019c1a:	69f8      	ldr	r0, [r7, #28]
 8019c1c:	f7f8 f9a0 	bl	8011f60 <pbuf_free>
 8019c20:	e000      	b.n	8019c24 <icmp_send_response+0xd4>
    return;
 8019c22:	bf00      	nop
}
 8019c24:	3720      	adds	r7, #32
 8019c26:	46bd      	mov	sp, r7
 8019c28:	bd80      	pop	{r7, pc}
 8019c2a:	bf00      	nop
 8019c2c:	0801f184 	.word	0x0801f184
 8019c30:	0801f250 	.word	0x0801f250
 8019c34:	0801f1f4 	.word	0x0801f1f4

08019c38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019c38:	b480      	push	{r7}
 8019c3a:	b085      	sub	sp, #20
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019c40:	4b33      	ldr	r3, [pc, #204]	; (8019d10 <ip4_route+0xd8>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	60fb      	str	r3, [r7, #12]
 8019c46:	e036      	b.n	8019cb6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019c4e:	f003 0301 	and.w	r3, r3, #1
 8019c52:	b2db      	uxtb	r3, r3
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d02b      	beq.n	8019cb0 <ip4_route+0x78>
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019c5e:	089b      	lsrs	r3, r3, #2
 8019c60:	f003 0301 	and.w	r3, r3, #1
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d022      	beq.n	8019cb0 <ip4_route+0x78>
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	3304      	adds	r3, #4
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d01d      	beq.n	8019cb0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681a      	ldr	r2, [r3, #0]
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	3304      	adds	r3, #4
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	405a      	eors	r2, r3
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	3308      	adds	r3, #8
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	4013      	ands	r3, r2
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d101      	bne.n	8019c90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	e038      	b.n	8019d02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019c96:	f003 0302 	and.w	r3, r3, #2
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d108      	bne.n	8019cb0 <ip4_route+0x78>
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681a      	ldr	r2, [r3, #0]
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	330c      	adds	r3, #12
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	d101      	bne.n	8019cb0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	e028      	b.n	8019d02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	60fb      	str	r3, [r7, #12]
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d1c5      	bne.n	8019c48 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019cbc:	4b15      	ldr	r3, [pc, #84]	; (8019d14 <ip4_route+0xdc>)
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d01a      	beq.n	8019cfa <ip4_route+0xc2>
 8019cc4:	4b13      	ldr	r3, [pc, #76]	; (8019d14 <ip4_route+0xdc>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019ccc:	f003 0301 	and.w	r3, r3, #1
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d012      	beq.n	8019cfa <ip4_route+0xc2>
 8019cd4:	4b0f      	ldr	r3, [pc, #60]	; (8019d14 <ip4_route+0xdc>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019cdc:	f003 0304 	and.w	r3, r3, #4
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d00a      	beq.n	8019cfa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019ce4:	4b0b      	ldr	r3, [pc, #44]	; (8019d14 <ip4_route+0xdc>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	3304      	adds	r3, #4
 8019cea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d004      	beq.n	8019cfa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	b2db      	uxtb	r3, r3
 8019cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8019cf8:	d101      	bne.n	8019cfe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	e001      	b.n	8019d02 <ip4_route+0xca>
  }

  return netif_default;
 8019cfe:	4b05      	ldr	r3, [pc, #20]	; (8019d14 <ip4_route+0xdc>)
 8019d00:	681b      	ldr	r3, [r3, #0]
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	3714      	adds	r7, #20
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr
 8019d0e:	bf00      	nop
 8019d10:	2000afd0 	.word	0x2000afd0
 8019d14:	2000afd4 	.word	0x2000afd4

08019d18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b082      	sub	sp, #8
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d26:	f003 0301 	and.w	r3, r3, #1
 8019d2a:	b2db      	uxtb	r3, r3
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d016      	beq.n	8019d5e <ip4_input_accept+0x46>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	3304      	adds	r3, #4
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d011      	beq.n	8019d5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019d3a:	4b0b      	ldr	r3, [pc, #44]	; (8019d68 <ip4_input_accept+0x50>)
 8019d3c:	695a      	ldr	r2, [r3, #20]
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	3304      	adds	r3, #4
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d008      	beq.n	8019d5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019d48:	4b07      	ldr	r3, [pc, #28]	; (8019d68 <ip4_input_accept+0x50>)
 8019d4a:	695b      	ldr	r3, [r3, #20]
 8019d4c:	6879      	ldr	r1, [r7, #4]
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f000 fa08 	bl	801a164 <ip4_addr_isbroadcast_u32>
 8019d54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d001      	beq.n	8019d5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019d5a:	2301      	movs	r3, #1
 8019d5c:	e000      	b.n	8019d60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019d5e:	2300      	movs	r3, #0
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}
 8019d68:	200042b4 	.word	0x200042b4

08019d6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b086      	sub	sp, #24
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
 8019d74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	685b      	ldr	r3, [r3, #4]
 8019d7a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	091b      	lsrs	r3, r3, #4
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	2b04      	cmp	r3, #4
 8019d86:	d004      	beq.n	8019d92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019d88:	6878      	ldr	r0, [r7, #4]
 8019d8a:	f7f8 f8e9 	bl	8011f60 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019d8e:	2300      	movs	r3, #0
 8019d90:	e107      	b.n	8019fa2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019d92:	697b      	ldr	r3, [r7, #20]
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	f003 030f 	and.w	r3, r3, #15
 8019d9a:	b2db      	uxtb	r3, r3
 8019d9c:	009b      	lsls	r3, r3, #2
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	885b      	ldrh	r3, [r3, #2]
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7f6 fd10 	bl	80107ce <lwip_htons>
 8019dae:	4603      	mov	r3, r0
 8019db0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	891b      	ldrh	r3, [r3, #8]
 8019db6:	89ba      	ldrh	r2, [r7, #12]
 8019db8:	429a      	cmp	r2, r3
 8019dba:	d204      	bcs.n	8019dc6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019dbc:	89bb      	ldrh	r3, [r7, #12]
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	6878      	ldr	r0, [r7, #4]
 8019dc2:	f7f7 ff47 	bl	8011c54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	895b      	ldrh	r3, [r3, #10]
 8019dca:	89fa      	ldrh	r2, [r7, #14]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d807      	bhi.n	8019de0 <ip4_input+0x74>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	891b      	ldrh	r3, [r3, #8]
 8019dd4:	89ba      	ldrh	r2, [r7, #12]
 8019dd6:	429a      	cmp	r2, r3
 8019dd8:	d802      	bhi.n	8019de0 <ip4_input+0x74>
 8019dda:	89fb      	ldrh	r3, [r7, #14]
 8019ddc:	2b13      	cmp	r3, #19
 8019dde:	d804      	bhi.n	8019dea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019de0:	6878      	ldr	r0, [r7, #4]
 8019de2:	f7f8 f8bd 	bl	8011f60 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019de6:	2300      	movs	r3, #0
 8019de8:	e0db      	b.n	8019fa2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019dea:	697b      	ldr	r3, [r7, #20]
 8019dec:	691b      	ldr	r3, [r3, #16]
 8019dee:	4a6f      	ldr	r2, [pc, #444]	; (8019fac <ip4_input+0x240>)
 8019df0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	68db      	ldr	r3, [r3, #12]
 8019df6:	4a6d      	ldr	r2, [pc, #436]	; (8019fac <ip4_input+0x240>)
 8019df8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019dfa:	4b6c      	ldr	r3, [pc, #432]	; (8019fac <ip4_input+0x240>)
 8019dfc:	695b      	ldr	r3, [r3, #20]
 8019dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e02:	2be0      	cmp	r3, #224	; 0xe0
 8019e04:	d112      	bne.n	8019e2c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019e0c:	f003 0301 	and.w	r3, r3, #1
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d007      	beq.n	8019e26 <ip4_input+0xba>
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	3304      	adds	r3, #4
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d002      	beq.n	8019e26 <ip4_input+0xba>
      netif = inp;
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	613b      	str	r3, [r7, #16]
 8019e24:	e02a      	b.n	8019e7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8019e26:	2300      	movs	r3, #0
 8019e28:	613b      	str	r3, [r7, #16]
 8019e2a:	e027      	b.n	8019e7c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019e2c:	6838      	ldr	r0, [r7, #0]
 8019e2e:	f7ff ff73 	bl	8019d18 <ip4_input_accept>
 8019e32:	4603      	mov	r3, r0
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d002      	beq.n	8019e3e <ip4_input+0xd2>
      netif = inp;
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	613b      	str	r3, [r7, #16]
 8019e3c:	e01e      	b.n	8019e7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8019e3e:	2300      	movs	r3, #0
 8019e40:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019e42:	4b5a      	ldr	r3, [pc, #360]	; (8019fac <ip4_input+0x240>)
 8019e44:	695b      	ldr	r3, [r3, #20]
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	2b7f      	cmp	r3, #127	; 0x7f
 8019e4a:	d017      	beq.n	8019e7c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019e4c:	4b58      	ldr	r3, [pc, #352]	; (8019fb0 <ip4_input+0x244>)
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	613b      	str	r3, [r7, #16]
 8019e52:	e00e      	b.n	8019e72 <ip4_input+0x106>
          if (netif == inp) {
 8019e54:	693a      	ldr	r2, [r7, #16]
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	d006      	beq.n	8019e6a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019e5c:	6938      	ldr	r0, [r7, #16]
 8019e5e:	f7ff ff5b 	bl	8019d18 <ip4_input_accept>
 8019e62:	4603      	mov	r3, r0
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d108      	bne.n	8019e7a <ip4_input+0x10e>
 8019e68:	e000      	b.n	8019e6c <ip4_input+0x100>
            continue;
 8019e6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019e6c:	693b      	ldr	r3, [r7, #16]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	613b      	str	r3, [r7, #16]
 8019e72:	693b      	ldr	r3, [r7, #16]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d1ed      	bne.n	8019e54 <ip4_input+0xe8>
 8019e78:	e000      	b.n	8019e7c <ip4_input+0x110>
            break;
 8019e7a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019e7c:	4b4b      	ldr	r3, [pc, #300]	; (8019fac <ip4_input+0x240>)
 8019e7e:	691b      	ldr	r3, [r3, #16]
 8019e80:	6839      	ldr	r1, [r7, #0]
 8019e82:	4618      	mov	r0, r3
 8019e84:	f000 f96e 	bl	801a164 <ip4_addr_isbroadcast_u32>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d105      	bne.n	8019e9a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019e8e:	4b47      	ldr	r3, [pc, #284]	; (8019fac <ip4_input+0x240>)
 8019e90:	691b      	ldr	r3, [r3, #16]
 8019e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019e96:	2be0      	cmp	r3, #224	; 0xe0
 8019e98:	d104      	bne.n	8019ea4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019e9a:	6878      	ldr	r0, [r7, #4]
 8019e9c:	f7f8 f860 	bl	8011f60 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	e07e      	b.n	8019fa2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d104      	bne.n	8019eb4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019eaa:	6878      	ldr	r0, [r7, #4]
 8019eac:	f7f8 f858 	bl	8011f60 <pbuf_free>
    return ERR_OK;
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	e076      	b.n	8019fa2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019eb4:	697b      	ldr	r3, [r7, #20]
 8019eb6:	88db      	ldrh	r3, [r3, #6]
 8019eb8:	b29b      	uxth	r3, r3
 8019eba:	461a      	mov	r2, r3
 8019ebc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019ec0:	4013      	ands	r3, r2
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d00b      	beq.n	8019ede <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f000 fc92 	bl	801a7f0 <ip4_reass>
 8019ecc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d101      	bne.n	8019ed8 <ip4_input+0x16c>
      return ERR_OK;
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	e064      	b.n	8019fa2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	685b      	ldr	r3, [r3, #4]
 8019edc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019ede:	4a33      	ldr	r2, [pc, #204]	; (8019fac <ip4_input+0x240>)
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019ee4:	4a31      	ldr	r2, [pc, #196]	; (8019fac <ip4_input+0x240>)
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019eea:	4a30      	ldr	r2, [pc, #192]	; (8019fac <ip4_input+0x240>)
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	781b      	ldrb	r3, [r3, #0]
 8019ef4:	f003 030f 	and.w	r3, r3, #15
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	009b      	lsls	r3, r3, #2
 8019efc:	b2db      	uxtb	r3, r3
 8019efe:	b29a      	uxth	r2, r3
 8019f00:	4b2a      	ldr	r3, [pc, #168]	; (8019fac <ip4_input+0x240>)
 8019f02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019f04:	89fb      	ldrh	r3, [r7, #14]
 8019f06:	4619      	mov	r1, r3
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f7f7 ffa3 	bl	8011e54 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019f0e:	697b      	ldr	r3, [r7, #20]
 8019f10:	7a5b      	ldrb	r3, [r3, #9]
 8019f12:	2b11      	cmp	r3, #17
 8019f14:	d006      	beq.n	8019f24 <ip4_input+0x1b8>
 8019f16:	2b11      	cmp	r3, #17
 8019f18:	dc13      	bgt.n	8019f42 <ip4_input+0x1d6>
 8019f1a:	2b01      	cmp	r3, #1
 8019f1c:	d00c      	beq.n	8019f38 <ip4_input+0x1cc>
 8019f1e:	2b06      	cmp	r3, #6
 8019f20:	d005      	beq.n	8019f2e <ip4_input+0x1c2>
 8019f22:	e00e      	b.n	8019f42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019f24:	6839      	ldr	r1, [r7, #0]
 8019f26:	6878      	ldr	r0, [r7, #4]
 8019f28:	f7fe fc4c 	bl	80187c4 <udp_input>
        break;
 8019f2c:	e026      	b.n	8019f7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019f2e:	6839      	ldr	r1, [r7, #0]
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f7fa f86d 	bl	8014010 <tcp_input>
        break;
 8019f36:	e021      	b.n	8019f7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019f38:	6839      	ldr	r1, [r7, #0]
 8019f3a:	6878      	ldr	r0, [r7, #4]
 8019f3c:	f7ff fcd2 	bl	80198e4 <icmp_input>
        break;
 8019f40:	e01c      	b.n	8019f7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019f42:	4b1a      	ldr	r3, [pc, #104]	; (8019fac <ip4_input+0x240>)
 8019f44:	695b      	ldr	r3, [r3, #20]
 8019f46:	6939      	ldr	r1, [r7, #16]
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f000 f90b 	bl	801a164 <ip4_addr_isbroadcast_u32>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d10f      	bne.n	8019f74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019f54:	4b15      	ldr	r3, [pc, #84]	; (8019fac <ip4_input+0x240>)
 8019f56:	695b      	ldr	r3, [r3, #20]
 8019f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019f5c:	2be0      	cmp	r3, #224	; 0xe0
 8019f5e:	d009      	beq.n	8019f74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019f60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019f64:	4619      	mov	r1, r3
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7f7 ffe7 	bl	8011f3a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019f6c:	2102      	movs	r1, #2
 8019f6e:	6878      	ldr	r0, [r7, #4]
 8019f70:	f7ff fdce 	bl	8019b10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019f74:	6878      	ldr	r0, [r7, #4]
 8019f76:	f7f7 fff3 	bl	8011f60 <pbuf_free>
        break;
 8019f7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019f7c:	4b0b      	ldr	r3, [pc, #44]	; (8019fac <ip4_input+0x240>)
 8019f7e:	2200      	movs	r2, #0
 8019f80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019f82:	4b0a      	ldr	r3, [pc, #40]	; (8019fac <ip4_input+0x240>)
 8019f84:	2200      	movs	r2, #0
 8019f86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019f88:	4b08      	ldr	r3, [pc, #32]	; (8019fac <ip4_input+0x240>)
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019f8e:	4b07      	ldr	r3, [pc, #28]	; (8019fac <ip4_input+0x240>)
 8019f90:	2200      	movs	r2, #0
 8019f92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019f94:	4b05      	ldr	r3, [pc, #20]	; (8019fac <ip4_input+0x240>)
 8019f96:	2200      	movs	r2, #0
 8019f98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019f9a:	4b04      	ldr	r3, [pc, #16]	; (8019fac <ip4_input+0x240>)
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019fa0:	2300      	movs	r3, #0
}
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	3718      	adds	r7, #24
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	200042b4 	.word	0x200042b4
 8019fb0:	2000afd0 	.word	0x2000afd0

08019fb4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b08a      	sub	sp, #40	; 0x28
 8019fb8:	af04      	add	r7, sp, #16
 8019fba:	60f8      	str	r0, [r7, #12]
 8019fbc:	60b9      	str	r1, [r7, #8]
 8019fbe:	607a      	str	r2, [r7, #4]
 8019fc0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d009      	beq.n	8019fe0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d003      	beq.n	8019fda <ip4_output_if+0x26>
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d102      	bne.n	8019fe0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fdc:	3304      	adds	r3, #4
 8019fde:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019fe0:	78fa      	ldrb	r2, [r7, #3]
 8019fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe4:	9302      	str	r3, [sp, #8]
 8019fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019fea:	9301      	str	r3, [sp, #4]
 8019fec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019ff0:	9300      	str	r3, [sp, #0]
 8019ff2:	4613      	mov	r3, r2
 8019ff4:	687a      	ldr	r2, [r7, #4]
 8019ff6:	6979      	ldr	r1, [r7, #20]
 8019ff8:	68f8      	ldr	r0, [r7, #12]
 8019ffa:	f000 f805 	bl	801a008 <ip4_output_if_src>
 8019ffe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a000:	4618      	mov	r0, r3
 801a002:	3718      	adds	r7, #24
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b088      	sub	sp, #32
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	60f8      	str	r0, [r7, #12]
 801a010:	60b9      	str	r1, [r7, #8]
 801a012:	607a      	str	r2, [r7, #4]
 801a014:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	7b9b      	ldrb	r3, [r3, #14]
 801a01a:	2b01      	cmp	r3, #1
 801a01c:	d006      	beq.n	801a02c <ip4_output_if_src+0x24>
 801a01e:	4b4b      	ldr	r3, [pc, #300]	; (801a14c <ip4_output_if_src+0x144>)
 801a020:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a024:	494a      	ldr	r1, [pc, #296]	; (801a150 <ip4_output_if_src+0x148>)
 801a026:	484b      	ldr	r0, [pc, #300]	; (801a154 <ip4_output_if_src+0x14c>)
 801a028:	f001 fb4c 	bl	801b6c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d060      	beq.n	801a0f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a032:	2314      	movs	r3, #20
 801a034:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a036:	2114      	movs	r1, #20
 801a038:	68f8      	ldr	r0, [r7, #12]
 801a03a:	f7f7 fefb 	bl	8011e34 <pbuf_add_header>
 801a03e:	4603      	mov	r3, r0
 801a040:	2b00      	cmp	r3, #0
 801a042:	d002      	beq.n	801a04a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a044:	f06f 0301 	mvn.w	r3, #1
 801a048:	e07c      	b.n	801a144 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	685b      	ldr	r3, [r3, #4]
 801a04e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	895b      	ldrh	r3, [r3, #10]
 801a054:	2b13      	cmp	r3, #19
 801a056:	d806      	bhi.n	801a066 <ip4_output_if_src+0x5e>
 801a058:	4b3c      	ldr	r3, [pc, #240]	; (801a14c <ip4_output_if_src+0x144>)
 801a05a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a05e:	493e      	ldr	r1, [pc, #248]	; (801a158 <ip4_output_if_src+0x150>)
 801a060:	483c      	ldr	r0, [pc, #240]	; (801a154 <ip4_output_if_src+0x14c>)
 801a062:	f001 fb2f 	bl	801b6c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	78fa      	ldrb	r2, [r7, #3]
 801a06a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a06c:	69fb      	ldr	r3, [r7, #28]
 801a06e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a072:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681a      	ldr	r2, [r3, #0]
 801a078:	69fb      	ldr	r3, [r7, #28]
 801a07a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a07c:	8b7b      	ldrh	r3, [r7, #26]
 801a07e:	089b      	lsrs	r3, r3, #2
 801a080:	b29b      	uxth	r3, r3
 801a082:	b2db      	uxtb	r3, r3
 801a084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a088:	b2da      	uxtb	r2, r3
 801a08a:	69fb      	ldr	r3, [r7, #28]
 801a08c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a08e:	69fb      	ldr	r3, [r7, #28]
 801a090:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a094:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	891b      	ldrh	r3, [r3, #8]
 801a09a:	4618      	mov	r0, r3
 801a09c:	f7f6 fb97 	bl	80107ce <lwip_htons>
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	69fb      	ldr	r3, [r7, #28]
 801a0a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a0a8:	69fb      	ldr	r3, [r7, #28]
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	719a      	strb	r2, [r3, #6]
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a0b2:	4b2a      	ldr	r3, [pc, #168]	; (801a15c <ip4_output_if_src+0x154>)
 801a0b4:	881b      	ldrh	r3, [r3, #0]
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f7f6 fb89 	bl	80107ce <lwip_htons>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	461a      	mov	r2, r3
 801a0c0:	69fb      	ldr	r3, [r7, #28]
 801a0c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a0c4:	4b25      	ldr	r3, [pc, #148]	; (801a15c <ip4_output_if_src+0x154>)
 801a0c6:	881b      	ldrh	r3, [r3, #0]
 801a0c8:	3301      	adds	r3, #1
 801a0ca:	b29a      	uxth	r2, r3
 801a0cc:	4b23      	ldr	r3, [pc, #140]	; (801a15c <ip4_output_if_src+0x154>)
 801a0ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d104      	bne.n	801a0e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a0d6:	4b22      	ldr	r3, [pc, #136]	; (801a160 <ip4_output_if_src+0x158>)
 801a0d8:	681a      	ldr	r2, [r3, #0]
 801a0da:	69fb      	ldr	r3, [r7, #28]
 801a0dc:	60da      	str	r2, [r3, #12]
 801a0de:	e003      	b.n	801a0e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	69fb      	ldr	r3, [r7, #28]
 801a0e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a0e8:	69fb      	ldr	r3, [r7, #28]
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	729a      	strb	r2, [r3, #10]
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	72da      	strb	r2, [r3, #11]
 801a0f2:	e00f      	b.n	801a114 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	895b      	ldrh	r3, [r3, #10]
 801a0f8:	2b13      	cmp	r3, #19
 801a0fa:	d802      	bhi.n	801a102 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a0fc:	f06f 0301 	mvn.w	r3, #1
 801a100:	e020      	b.n	801a144 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a108:	69fb      	ldr	r3, [r7, #28]
 801a10a:	691b      	ldr	r3, [r3, #16]
 801a10c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a10e:	f107 0314 	add.w	r3, r7, #20
 801a112:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d00c      	beq.n	801a136 <ip4_output_if_src+0x12e>
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	891a      	ldrh	r2, [r3, #8]
 801a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a122:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a124:	429a      	cmp	r2, r3
 801a126:	d906      	bls.n	801a136 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a128:	687a      	ldr	r2, [r7, #4]
 801a12a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a12c:	68f8      	ldr	r0, [r7, #12]
 801a12e:	f000 fd53 	bl	801abd8 <ip4_frag>
 801a132:	4603      	mov	r3, r0
 801a134:	e006      	b.n	801a144 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a138:	695b      	ldr	r3, [r3, #20]
 801a13a:	687a      	ldr	r2, [r7, #4]
 801a13c:	68f9      	ldr	r1, [r7, #12]
 801a13e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a140:	4798      	blx	r3
 801a142:	4603      	mov	r3, r0
}
 801a144:	4618      	mov	r0, r3
 801a146:	3720      	adds	r7, #32
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}
 801a14c:	0801f27c 	.word	0x0801f27c
 801a150:	0801f2b0 	.word	0x0801f2b0
 801a154:	0801f2bc 	.word	0x0801f2bc
 801a158:	0801f2e4 	.word	0x0801f2e4
 801a15c:	2000b12e 	.word	0x2000b12e
 801a160:	0801f864 	.word	0x0801f864

0801a164 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a164:	b480      	push	{r7}
 801a166:	b085      	sub	sp, #20
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
 801a16c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a178:	d002      	beq.n	801a180 <ip4_addr_isbroadcast_u32+0x1c>
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d101      	bne.n	801a184 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a180:	2301      	movs	r3, #1
 801a182:	e02a      	b.n	801a1da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a18a:	f003 0302 	and.w	r3, r3, #2
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d101      	bne.n	801a196 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a192:	2300      	movs	r3, #0
 801a194:	e021      	b.n	801a1da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	3304      	adds	r3, #4
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	687a      	ldr	r2, [r7, #4]
 801a19e:	429a      	cmp	r2, r3
 801a1a0:	d101      	bne.n	801a1a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	e019      	b.n	801a1da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a1a6:	68fa      	ldr	r2, [r7, #12]
 801a1a8:	683b      	ldr	r3, [r7, #0]
 801a1aa:	3304      	adds	r3, #4
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	405a      	eors	r2, r3
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	3308      	adds	r3, #8
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	4013      	ands	r3, r2
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d10d      	bne.n	801a1d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	3308      	adds	r3, #8
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	43da      	mvns	r2, r3
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	3308      	adds	r3, #8
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	d101      	bne.n	801a1d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a1d4:	2301      	movs	r3, #1
 801a1d6:	e000      	b.n	801a1da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a1d8:	2300      	movs	r3, #0
  }
}
 801a1da:	4618      	mov	r0, r3
 801a1dc:	3714      	adds	r7, #20
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e4:	4770      	bx	lr
	...

0801a1e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b084      	sub	sp, #16
 801a1ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a1f2:	4b12      	ldr	r3, [pc, #72]	; (801a23c <ip_reass_tmr+0x54>)
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a1f8:	e018      	b.n	801a22c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	7fdb      	ldrb	r3, [r3, #31]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d00b      	beq.n	801a21a <ip_reass_tmr+0x32>
      r->timer--;
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	7fdb      	ldrb	r3, [r3, #31]
 801a206:	3b01      	subs	r3, #1
 801a208:	b2da      	uxtb	r2, r3
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	60fb      	str	r3, [r7, #12]
 801a218:	e008      	b.n	801a22c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a224:	68b9      	ldr	r1, [r7, #8]
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f000 f80a 	bl	801a240 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d1e3      	bne.n	801a1fa <ip_reass_tmr+0x12>
    }
  }
}
 801a232:	bf00      	nop
 801a234:	bf00      	nop
 801a236:	3710      	adds	r7, #16
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}
 801a23c:	2000b130 	.word	0x2000b130

0801a240 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b088      	sub	sp, #32
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
 801a248:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a24a:	2300      	movs	r3, #0
 801a24c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a24e:	683a      	ldr	r2, [r7, #0]
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	429a      	cmp	r2, r3
 801a254:	d105      	bne.n	801a262 <ip_reass_free_complete_datagram+0x22>
 801a256:	4b45      	ldr	r3, [pc, #276]	; (801a36c <ip_reass_free_complete_datagram+0x12c>)
 801a258:	22ab      	movs	r2, #171	; 0xab
 801a25a:	4945      	ldr	r1, [pc, #276]	; (801a370 <ip_reass_free_complete_datagram+0x130>)
 801a25c:	4845      	ldr	r0, [pc, #276]	; (801a374 <ip_reass_free_complete_datagram+0x134>)
 801a25e:	f001 fa31 	bl	801b6c4 <iprintf>
  if (prev != NULL) {
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d00a      	beq.n	801a27e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	687a      	ldr	r2, [r7, #4]
 801a26e:	429a      	cmp	r2, r3
 801a270:	d005      	beq.n	801a27e <ip_reass_free_complete_datagram+0x3e>
 801a272:	4b3e      	ldr	r3, [pc, #248]	; (801a36c <ip_reass_free_complete_datagram+0x12c>)
 801a274:	22ad      	movs	r2, #173	; 0xad
 801a276:	4940      	ldr	r1, [pc, #256]	; (801a378 <ip_reass_free_complete_datagram+0x138>)
 801a278:	483e      	ldr	r0, [pc, #248]	; (801a374 <ip_reass_free_complete_datagram+0x134>)
 801a27a:	f001 fa23 	bl	801b6c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	685b      	ldr	r3, [r3, #4]
 801a282:	685b      	ldr	r3, [r3, #4]
 801a284:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a286:	697b      	ldr	r3, [r7, #20]
 801a288:	889b      	ldrh	r3, [r3, #4]
 801a28a:	b29b      	uxth	r3, r3
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d12a      	bne.n	801a2e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a296:	697b      	ldr	r3, [r7, #20]
 801a298:	681a      	ldr	r2, [r3, #0]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a29e:	69bb      	ldr	r3, [r7, #24]
 801a2a0:	6858      	ldr	r0, [r3, #4]
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	3308      	adds	r3, #8
 801a2a6:	2214      	movs	r2, #20
 801a2a8:	4619      	mov	r1, r3
 801a2aa:	f001 fb7c 	bl	801b9a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a2ae:	2101      	movs	r1, #1
 801a2b0:	69b8      	ldr	r0, [r7, #24]
 801a2b2:	f7ff fc3d 	bl	8019b30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a2b6:	69b8      	ldr	r0, [r7, #24]
 801a2b8:	f7f7 feda 	bl	8012070 <pbuf_clen>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a2c0:	8bfa      	ldrh	r2, [r7, #30]
 801a2c2:	8a7b      	ldrh	r3, [r7, #18]
 801a2c4:	4413      	add	r3, r2
 801a2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a2ca:	db05      	blt.n	801a2d8 <ip_reass_free_complete_datagram+0x98>
 801a2cc:	4b27      	ldr	r3, [pc, #156]	; (801a36c <ip_reass_free_complete_datagram+0x12c>)
 801a2ce:	22bc      	movs	r2, #188	; 0xbc
 801a2d0:	492a      	ldr	r1, [pc, #168]	; (801a37c <ip_reass_free_complete_datagram+0x13c>)
 801a2d2:	4828      	ldr	r0, [pc, #160]	; (801a374 <ip_reass_free_complete_datagram+0x134>)
 801a2d4:	f001 f9f6 	bl	801b6c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a2d8:	8bfa      	ldrh	r2, [r7, #30]
 801a2da:	8a7b      	ldrh	r3, [r7, #18]
 801a2dc:	4413      	add	r3, r2
 801a2de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a2e0:	69b8      	ldr	r0, [r7, #24]
 801a2e2:	f7f7 fe3d 	bl	8011f60 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	685b      	ldr	r3, [r3, #4]
 801a2ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a2ec:	e01f      	b.n	801a32e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a2ee:	69bb      	ldr	r3, [r7, #24]
 801a2f0:	685b      	ldr	r3, [r3, #4]
 801a2f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a2f4:	69bb      	ldr	r3, [r7, #24]
 801a2f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a2f8:	697b      	ldr	r3, [r7, #20]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a2fe:	68f8      	ldr	r0, [r7, #12]
 801a300:	f7f7 feb6 	bl	8012070 <pbuf_clen>
 801a304:	4603      	mov	r3, r0
 801a306:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a308:	8bfa      	ldrh	r2, [r7, #30]
 801a30a:	8a7b      	ldrh	r3, [r7, #18]
 801a30c:	4413      	add	r3, r2
 801a30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a312:	db05      	blt.n	801a320 <ip_reass_free_complete_datagram+0xe0>
 801a314:	4b15      	ldr	r3, [pc, #84]	; (801a36c <ip_reass_free_complete_datagram+0x12c>)
 801a316:	22cc      	movs	r2, #204	; 0xcc
 801a318:	4918      	ldr	r1, [pc, #96]	; (801a37c <ip_reass_free_complete_datagram+0x13c>)
 801a31a:	4816      	ldr	r0, [pc, #88]	; (801a374 <ip_reass_free_complete_datagram+0x134>)
 801a31c:	f001 f9d2 	bl	801b6c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a320:	8bfa      	ldrh	r2, [r7, #30]
 801a322:	8a7b      	ldrh	r3, [r7, #18]
 801a324:	4413      	add	r3, r2
 801a326:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a328:	68f8      	ldr	r0, [r7, #12]
 801a32a:	f7f7 fe19 	bl	8011f60 <pbuf_free>
  while (p != NULL) {
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d1dc      	bne.n	801a2ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a334:	6839      	ldr	r1, [r7, #0]
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f000 f8c2 	bl	801a4c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a33c:	4b10      	ldr	r3, [pc, #64]	; (801a380 <ip_reass_free_complete_datagram+0x140>)
 801a33e:	881b      	ldrh	r3, [r3, #0]
 801a340:	8bfa      	ldrh	r2, [r7, #30]
 801a342:	429a      	cmp	r2, r3
 801a344:	d905      	bls.n	801a352 <ip_reass_free_complete_datagram+0x112>
 801a346:	4b09      	ldr	r3, [pc, #36]	; (801a36c <ip_reass_free_complete_datagram+0x12c>)
 801a348:	22d2      	movs	r2, #210	; 0xd2
 801a34a:	490e      	ldr	r1, [pc, #56]	; (801a384 <ip_reass_free_complete_datagram+0x144>)
 801a34c:	4809      	ldr	r0, [pc, #36]	; (801a374 <ip_reass_free_complete_datagram+0x134>)
 801a34e:	f001 f9b9 	bl	801b6c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a352:	4b0b      	ldr	r3, [pc, #44]	; (801a380 <ip_reass_free_complete_datagram+0x140>)
 801a354:	881a      	ldrh	r2, [r3, #0]
 801a356:	8bfb      	ldrh	r3, [r7, #30]
 801a358:	1ad3      	subs	r3, r2, r3
 801a35a:	b29a      	uxth	r2, r3
 801a35c:	4b08      	ldr	r3, [pc, #32]	; (801a380 <ip_reass_free_complete_datagram+0x140>)
 801a35e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a360:	8bfb      	ldrh	r3, [r7, #30]
}
 801a362:	4618      	mov	r0, r3
 801a364:	3720      	adds	r7, #32
 801a366:	46bd      	mov	sp, r7
 801a368:	bd80      	pop	{r7, pc}
 801a36a:	bf00      	nop
 801a36c:	0801f314 	.word	0x0801f314
 801a370:	0801f350 	.word	0x0801f350
 801a374:	0801f35c 	.word	0x0801f35c
 801a378:	0801f384 	.word	0x0801f384
 801a37c:	0801f398 	.word	0x0801f398
 801a380:	2000b134 	.word	0x2000b134
 801a384:	0801f3b8 	.word	0x0801f3b8

0801a388 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b08a      	sub	sp, #40	; 0x28
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a392:	2300      	movs	r3, #0
 801a394:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a396:	2300      	movs	r3, #0
 801a398:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a39a:	2300      	movs	r3, #0
 801a39c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a3a6:	4b28      	ldr	r3, [pc, #160]	; (801a448 <ip_reass_remove_oldest_datagram+0xc0>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a3ac:	e030      	b.n	801a410 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b0:	695a      	ldr	r2, [r3, #20]
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	68db      	ldr	r3, [r3, #12]
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	d10c      	bne.n	801a3d4 <ip_reass_remove_oldest_datagram+0x4c>
 801a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3bc:	699a      	ldr	r2, [r3, #24]
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	691b      	ldr	r3, [r3, #16]
 801a3c2:	429a      	cmp	r2, r3
 801a3c4:	d106      	bne.n	801a3d4 <ip_reass_remove_oldest_datagram+0x4c>
 801a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c8:	899a      	ldrh	r2, [r3, #12]
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	889b      	ldrh	r3, [r3, #4]
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d014      	beq.n	801a3fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a3d4:	693b      	ldr	r3, [r7, #16]
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a3da:	6a3b      	ldr	r3, [r7, #32]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d104      	bne.n	801a3ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	61bb      	str	r3, [r7, #24]
 801a3e8:	e009      	b.n	801a3fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ec:	7fda      	ldrb	r2, [r3, #31]
 801a3ee:	6a3b      	ldr	r3, [r7, #32]
 801a3f0:	7fdb      	ldrb	r3, [r3, #31]
 801a3f2:	429a      	cmp	r2, r3
 801a3f4:	d803      	bhi.n	801a3fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a3fa:	69fb      	ldr	r3, [r7, #28]
 801a3fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d001      	beq.n	801a40a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a408:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a412:	2b00      	cmp	r3, #0
 801a414:	d1cb      	bne.n	801a3ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a416:	6a3b      	ldr	r3, [r7, #32]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d008      	beq.n	801a42e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a41c:	69b9      	ldr	r1, [r7, #24]
 801a41e:	6a38      	ldr	r0, [r7, #32]
 801a420:	f7ff ff0e 	bl	801a240 <ip_reass_free_complete_datagram>
 801a424:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a426:	697a      	ldr	r2, [r7, #20]
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	4413      	add	r3, r2
 801a42c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a42e:	697a      	ldr	r2, [r7, #20]
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	429a      	cmp	r2, r3
 801a434:	da02      	bge.n	801a43c <ip_reass_remove_oldest_datagram+0xb4>
 801a436:	693b      	ldr	r3, [r7, #16]
 801a438:	2b01      	cmp	r3, #1
 801a43a:	dcac      	bgt.n	801a396 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a43c:	697b      	ldr	r3, [r7, #20]
}
 801a43e:	4618      	mov	r0, r3
 801a440:	3728      	adds	r7, #40	; 0x28
 801a442:	46bd      	mov	sp, r7
 801a444:	bd80      	pop	{r7, pc}
 801a446:	bf00      	nop
 801a448:	2000b130 	.word	0x2000b130

0801a44c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b084      	sub	sp, #16
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a456:	2004      	movs	r0, #4
 801a458:	f7f6 fe9c 	bl	8011194 <memp_malloc>
 801a45c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d110      	bne.n	801a486 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a464:	6839      	ldr	r1, [r7, #0]
 801a466:	6878      	ldr	r0, [r7, #4]
 801a468:	f7ff ff8e 	bl	801a388 <ip_reass_remove_oldest_datagram>
 801a46c:	4602      	mov	r2, r0
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	4293      	cmp	r3, r2
 801a472:	dc03      	bgt.n	801a47c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a474:	2004      	movs	r0, #4
 801a476:	f7f6 fe8d 	bl	8011194 <memp_malloc>
 801a47a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d101      	bne.n	801a486 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a482:	2300      	movs	r3, #0
 801a484:	e016      	b.n	801a4b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a486:	2220      	movs	r2, #32
 801a488:	2100      	movs	r1, #0
 801a48a:	68f8      	ldr	r0, [r7, #12]
 801a48c:	f001 f9f2 	bl	801b874 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	220f      	movs	r2, #15
 801a494:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a496:	4b09      	ldr	r3, [pc, #36]	; (801a4bc <ip_reass_enqueue_new_datagram+0x70>)
 801a498:	681a      	ldr	r2, [r3, #0]
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a49e:	4a07      	ldr	r2, [pc, #28]	; (801a4bc <ip_reass_enqueue_new_datagram+0x70>)
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	3308      	adds	r3, #8
 801a4a8:	2214      	movs	r2, #20
 801a4aa:	6879      	ldr	r1, [r7, #4]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f001 fa7a 	bl	801b9a6 <memcpy>
  return ipr;
 801a4b2:	68fb      	ldr	r3, [r7, #12]
}
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	3710      	adds	r7, #16
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bd80      	pop	{r7, pc}
 801a4bc:	2000b130 	.word	0x2000b130

0801a4c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b082      	sub	sp, #8
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
 801a4c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a4ca:	4b10      	ldr	r3, [pc, #64]	; (801a50c <ip_reass_dequeue_datagram+0x4c>)
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	687a      	ldr	r2, [r7, #4]
 801a4d0:	429a      	cmp	r2, r3
 801a4d2:	d104      	bne.n	801a4de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	4a0c      	ldr	r2, [pc, #48]	; (801a50c <ip_reass_dequeue_datagram+0x4c>)
 801a4da:	6013      	str	r3, [r2, #0]
 801a4dc:	e00d      	b.n	801a4fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a4de:	683b      	ldr	r3, [r7, #0]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d106      	bne.n	801a4f2 <ip_reass_dequeue_datagram+0x32>
 801a4e4:	4b0a      	ldr	r3, [pc, #40]	; (801a510 <ip_reass_dequeue_datagram+0x50>)
 801a4e6:	f240 1245 	movw	r2, #325	; 0x145
 801a4ea:	490a      	ldr	r1, [pc, #40]	; (801a514 <ip_reass_dequeue_datagram+0x54>)
 801a4ec:	480a      	ldr	r0, [pc, #40]	; (801a518 <ip_reass_dequeue_datagram+0x58>)
 801a4ee:	f001 f8e9 	bl	801b6c4 <iprintf>
    prev->next = ipr->next;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	681a      	ldr	r2, [r3, #0]
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a4fa:	6879      	ldr	r1, [r7, #4]
 801a4fc:	2004      	movs	r0, #4
 801a4fe:	f7f6 feb9 	bl	8011274 <memp_free>
}
 801a502:	bf00      	nop
 801a504:	3708      	adds	r7, #8
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}
 801a50a:	bf00      	nop
 801a50c:	2000b130 	.word	0x2000b130
 801a510:	0801f314 	.word	0x0801f314
 801a514:	0801f3dc 	.word	0x0801f3dc
 801a518:	0801f35c 	.word	0x0801f35c

0801a51c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b08c      	sub	sp, #48	; 0x30
 801a520:	af00      	add	r7, sp, #0
 801a522:	60f8      	str	r0, [r7, #12]
 801a524:	60b9      	str	r1, [r7, #8]
 801a526:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a528:	2300      	movs	r3, #0
 801a52a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a52c:	2301      	movs	r3, #1
 801a52e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a530:	68bb      	ldr	r3, [r7, #8]
 801a532:	685b      	ldr	r3, [r3, #4]
 801a534:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a536:	69fb      	ldr	r3, [r7, #28]
 801a538:	885b      	ldrh	r3, [r3, #2]
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	4618      	mov	r0, r3
 801a53e:	f7f6 f946 	bl	80107ce <lwip_htons>
 801a542:	4603      	mov	r3, r0
 801a544:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	781b      	ldrb	r3, [r3, #0]
 801a54a:	f003 030f 	and.w	r3, r3, #15
 801a54e:	b2db      	uxtb	r3, r3
 801a550:	009b      	lsls	r3, r3, #2
 801a552:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a554:	7e7b      	ldrb	r3, [r7, #25]
 801a556:	b29b      	uxth	r3, r3
 801a558:	8b7a      	ldrh	r2, [r7, #26]
 801a55a:	429a      	cmp	r2, r3
 801a55c:	d202      	bcs.n	801a564 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a55e:	f04f 33ff 	mov.w	r3, #4294967295
 801a562:	e135      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a564:	7e7b      	ldrb	r3, [r7, #25]
 801a566:	b29b      	uxth	r3, r3
 801a568:	8b7a      	ldrh	r2, [r7, #26]
 801a56a:	1ad3      	subs	r3, r2, r3
 801a56c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a56e:	69fb      	ldr	r3, [r7, #28]
 801a570:	88db      	ldrh	r3, [r3, #6]
 801a572:	b29b      	uxth	r3, r3
 801a574:	4618      	mov	r0, r3
 801a576:	f7f6 f92a 	bl	80107ce <lwip_htons>
 801a57a:	4603      	mov	r3, r0
 801a57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a580:	b29b      	uxth	r3, r3
 801a582:	00db      	lsls	r3, r3, #3
 801a584:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a58e:	2200      	movs	r2, #0
 801a590:	701a      	strb	r2, [r3, #0]
 801a592:	2200      	movs	r2, #0
 801a594:	705a      	strb	r2, [r3, #1]
 801a596:	2200      	movs	r2, #0
 801a598:	709a      	strb	r2, [r3, #2]
 801a59a:	2200      	movs	r2, #0
 801a59c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a0:	8afa      	ldrh	r2, [r7, #22]
 801a5a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a5a4:	8afa      	ldrh	r2, [r7, #22]
 801a5a6:	8b7b      	ldrh	r3, [r7, #26]
 801a5a8:	4413      	add	r3, r2
 801a5aa:	b29a      	uxth	r2, r3
 801a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b2:	88db      	ldrh	r3, [r3, #6]
 801a5b4:	b29b      	uxth	r3, r3
 801a5b6:	8afa      	ldrh	r2, [r7, #22]
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d902      	bls.n	801a5c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c0:	e106      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	685b      	ldr	r3, [r3, #4]
 801a5c6:	627b      	str	r3, [r7, #36]	; 0x24
 801a5c8:	e068      	b.n	801a69c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5cc:	685b      	ldr	r3, [r3, #4]
 801a5ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d2:	889b      	ldrh	r3, [r3, #4]
 801a5d4:	b29a      	uxth	r2, r3
 801a5d6:	693b      	ldr	r3, [r7, #16]
 801a5d8:	889b      	ldrh	r3, [r3, #4]
 801a5da:	b29b      	uxth	r3, r3
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	d235      	bcs.n	801a64c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a5e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d020      	beq.n	801a62e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ee:	889b      	ldrh	r3, [r3, #4]
 801a5f0:	b29a      	uxth	r2, r3
 801a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5f4:	88db      	ldrh	r3, [r3, #6]
 801a5f6:	b29b      	uxth	r3, r3
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	d307      	bcc.n	801a60c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fe:	88db      	ldrh	r3, [r3, #6]
 801a600:	b29a      	uxth	r2, r3
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	889b      	ldrh	r3, [r3, #4]
 801a606:	b29b      	uxth	r3, r3
 801a608:	429a      	cmp	r2, r3
 801a60a:	d902      	bls.n	801a612 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a60c:	f04f 33ff 	mov.w	r3, #4294967295
 801a610:	e0de      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a614:	68ba      	ldr	r2, [r7, #8]
 801a616:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a61a:	88db      	ldrh	r3, [r3, #6]
 801a61c:	b29a      	uxth	r2, r3
 801a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a620:	889b      	ldrh	r3, [r3, #4]
 801a622:	b29b      	uxth	r3, r3
 801a624:	429a      	cmp	r2, r3
 801a626:	d03d      	beq.n	801a6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a628:	2300      	movs	r3, #0
 801a62a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a62c:	e03a      	b.n	801a6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a630:	88db      	ldrh	r3, [r3, #6]
 801a632:	b29a      	uxth	r2, r3
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	889b      	ldrh	r3, [r3, #4]
 801a638:	b29b      	uxth	r3, r3
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d902      	bls.n	801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a63e:	f04f 33ff 	mov.w	r3, #4294967295
 801a642:	e0c5      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	68ba      	ldr	r2, [r7, #8]
 801a648:	605a      	str	r2, [r3, #4]
      break;
 801a64a:	e02b      	b.n	801a6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a64e:	889b      	ldrh	r3, [r3, #4]
 801a650:	b29a      	uxth	r2, r3
 801a652:	693b      	ldr	r3, [r7, #16]
 801a654:	889b      	ldrh	r3, [r3, #4]
 801a656:	b29b      	uxth	r3, r3
 801a658:	429a      	cmp	r2, r3
 801a65a:	d102      	bne.n	801a662 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a65c:	f04f 33ff 	mov.w	r3, #4294967295
 801a660:	e0b6      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a664:	889b      	ldrh	r3, [r3, #4]
 801a666:	b29a      	uxth	r2, r3
 801a668:	693b      	ldr	r3, [r7, #16]
 801a66a:	88db      	ldrh	r3, [r3, #6]
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	429a      	cmp	r2, r3
 801a670:	d202      	bcs.n	801a678 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a672:	f04f 33ff 	mov.w	r3, #4294967295
 801a676:	e0ab      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d009      	beq.n	801a692 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a680:	88db      	ldrh	r3, [r3, #6]
 801a682:	b29a      	uxth	r2, r3
 801a684:	693b      	ldr	r3, [r7, #16]
 801a686:	889b      	ldrh	r3, [r3, #4]
 801a688:	b29b      	uxth	r3, r3
 801a68a:	429a      	cmp	r2, r3
 801a68c:	d001      	beq.n	801a692 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a68e:	2300      	movs	r3, #0
 801a690:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a692:	693b      	ldr	r3, [r7, #16]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a698:	693b      	ldr	r3, [r7, #16]
 801a69a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d193      	bne.n	801a5ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a6a2:	e000      	b.n	801a6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a6a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d12d      	bne.n	801a708 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d01c      	beq.n	801a6ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6b4:	88db      	ldrh	r3, [r3, #6]
 801a6b6:	b29a      	uxth	r2, r3
 801a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ba:	889b      	ldrh	r3, [r3, #4]
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	d906      	bls.n	801a6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a6c2:	4b45      	ldr	r3, [pc, #276]	; (801a7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a6c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a6c8:	4944      	ldr	r1, [pc, #272]	; (801a7dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a6ca:	4845      	ldr	r0, [pc, #276]	; (801a7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a6cc:	f000 fffa 	bl	801b6c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6d2:	68ba      	ldr	r2, [r7, #8]
 801a6d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6d8:	88db      	ldrh	r3, [r3, #6]
 801a6da:	b29a      	uxth	r2, r3
 801a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6de:	889b      	ldrh	r3, [r3, #4]
 801a6e0:	b29b      	uxth	r3, r3
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d010      	beq.n	801a708 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	623b      	str	r3, [r7, #32]
 801a6ea:	e00d      	b.n	801a708 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	685b      	ldr	r3, [r3, #4]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d006      	beq.n	801a702 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a6f4:	4b38      	ldr	r3, [pc, #224]	; (801a7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a6f6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a6fa:	493a      	ldr	r1, [pc, #232]	; (801a7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a6fc:	4838      	ldr	r0, [pc, #224]	; (801a7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a6fe:	f000 ffe1 	bl	801b6c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	68ba      	ldr	r2, [r7, #8]
 801a706:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d105      	bne.n	801a71a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	7f9b      	ldrb	r3, [r3, #30]
 801a712:	f003 0301 	and.w	r3, r3, #1
 801a716:	2b00      	cmp	r3, #0
 801a718:	d059      	beq.n	801a7ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a71a:	6a3b      	ldr	r3, [r7, #32]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d04f      	beq.n	801a7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	685b      	ldr	r3, [r3, #4]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d006      	beq.n	801a736 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	685b      	ldr	r3, [r3, #4]
 801a72c:	685b      	ldr	r3, [r3, #4]
 801a72e:	889b      	ldrh	r3, [r3, #4]
 801a730:	b29b      	uxth	r3, r3
 801a732:	2b00      	cmp	r3, #0
 801a734:	d002      	beq.n	801a73c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a736:	2300      	movs	r3, #0
 801a738:	623b      	str	r3, [r7, #32]
 801a73a:	e041      	b.n	801a7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a73e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a746:	e012      	b.n	801a76e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a74a:	685b      	ldr	r3, [r3, #4]
 801a74c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a750:	88db      	ldrh	r3, [r3, #6]
 801a752:	b29a      	uxth	r2, r3
 801a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a756:	889b      	ldrh	r3, [r3, #4]
 801a758:	b29b      	uxth	r3, r3
 801a75a:	429a      	cmp	r2, r3
 801a75c:	d002      	beq.n	801a764 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a75e:	2300      	movs	r3, #0
 801a760:	623b      	str	r3, [r7, #32]
            break;
 801a762:	e007      	b.n	801a774 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a766:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a770:	2b00      	cmp	r3, #0
 801a772:	d1e9      	bne.n	801a748 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a774:	6a3b      	ldr	r3, [r7, #32]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d022      	beq.n	801a7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	685b      	ldr	r3, [r3, #4]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d106      	bne.n	801a790 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a782:	4b15      	ldr	r3, [pc, #84]	; (801a7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a784:	f240 12df 	movw	r2, #479	; 0x1df
 801a788:	4917      	ldr	r1, [pc, #92]	; (801a7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a78a:	4815      	ldr	r0, [pc, #84]	; (801a7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a78c:	f000 ff9a 	bl	801b6c4 <iprintf>
          LWIP_ASSERT("sanity check",
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	685b      	ldr	r3, [r3, #4]
 801a794:	685b      	ldr	r3, [r3, #4]
 801a796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a798:	429a      	cmp	r2, r3
 801a79a:	d106      	bne.n	801a7aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a79c:	4b0e      	ldr	r3, [pc, #56]	; (801a7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a79e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a7a2:	4911      	ldr	r1, [pc, #68]	; (801a7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a7a4:	480e      	ldr	r0, [pc, #56]	; (801a7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7a6:	f000 ff8d 	bl	801b6c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d006      	beq.n	801a7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a7b2:	4b09      	ldr	r3, [pc, #36]	; (801a7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7b4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a7b8:	490c      	ldr	r1, [pc, #48]	; (801a7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a7ba:	4809      	ldr	r0, [pc, #36]	; (801a7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7bc:	f000 ff82 	bl	801b6c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a7c0:	6a3b      	ldr	r3, [r7, #32]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	bf14      	ite	ne
 801a7c6:	2301      	movne	r3, #1
 801a7c8:	2300      	moveq	r3, #0
 801a7ca:	b2db      	uxtb	r3, r3
 801a7cc:	e000      	b.n	801a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a7ce:	2300      	movs	r3, #0
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	3730      	adds	r7, #48	; 0x30
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}
 801a7d8:	0801f314 	.word	0x0801f314
 801a7dc:	0801f3f8 	.word	0x0801f3f8
 801a7e0:	0801f35c 	.word	0x0801f35c
 801a7e4:	0801f418 	.word	0x0801f418
 801a7e8:	0801f450 	.word	0x0801f450
 801a7ec:	0801f460 	.word	0x0801f460

0801a7f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b08e      	sub	sp, #56	; 0x38
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a800:	781b      	ldrb	r3, [r3, #0]
 801a802:	f003 030f 	and.w	r3, r3, #15
 801a806:	b2db      	uxtb	r3, r3
 801a808:	009b      	lsls	r3, r3, #2
 801a80a:	b2db      	uxtb	r3, r3
 801a80c:	2b14      	cmp	r3, #20
 801a80e:	f040 8171 	bne.w	801aaf4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a814:	88db      	ldrh	r3, [r3, #6]
 801a816:	b29b      	uxth	r3, r3
 801a818:	4618      	mov	r0, r3
 801a81a:	f7f5 ffd8 	bl	80107ce <lwip_htons>
 801a81e:	4603      	mov	r3, r0
 801a820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a824:	b29b      	uxth	r3, r3
 801a826:	00db      	lsls	r3, r3, #3
 801a828:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a82c:	885b      	ldrh	r3, [r3, #2]
 801a82e:	b29b      	uxth	r3, r3
 801a830:	4618      	mov	r0, r3
 801a832:	f7f5 ffcc 	bl	80107ce <lwip_htons>
 801a836:	4603      	mov	r3, r0
 801a838:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a83c:	781b      	ldrb	r3, [r3, #0]
 801a83e:	f003 030f 	and.w	r3, r3, #15
 801a842:	b2db      	uxtb	r3, r3
 801a844:	009b      	lsls	r3, r3, #2
 801a846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a84a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a84e:	b29b      	uxth	r3, r3
 801a850:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a852:	429a      	cmp	r2, r3
 801a854:	f0c0 8150 	bcc.w	801aaf8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a860:	1ad3      	subs	r3, r2, r3
 801a862:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a864:	6878      	ldr	r0, [r7, #4]
 801a866:	f7f7 fc03 	bl	8012070 <pbuf_clen>
 801a86a:	4603      	mov	r3, r0
 801a86c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a86e:	4b8c      	ldr	r3, [pc, #560]	; (801aaa0 <ip4_reass+0x2b0>)
 801a870:	881b      	ldrh	r3, [r3, #0]
 801a872:	461a      	mov	r2, r3
 801a874:	8c3b      	ldrh	r3, [r7, #32]
 801a876:	4413      	add	r3, r2
 801a878:	2b0a      	cmp	r3, #10
 801a87a:	dd10      	ble.n	801a89e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a87c:	8c3b      	ldrh	r3, [r7, #32]
 801a87e:	4619      	mov	r1, r3
 801a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a882:	f7ff fd81 	bl	801a388 <ip_reass_remove_oldest_datagram>
 801a886:	4603      	mov	r3, r0
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f000 8137 	beq.w	801aafc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a88e:	4b84      	ldr	r3, [pc, #528]	; (801aaa0 <ip4_reass+0x2b0>)
 801a890:	881b      	ldrh	r3, [r3, #0]
 801a892:	461a      	mov	r2, r3
 801a894:	8c3b      	ldrh	r3, [r7, #32]
 801a896:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a898:	2b0a      	cmp	r3, #10
 801a89a:	f300 812f 	bgt.w	801aafc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a89e:	4b81      	ldr	r3, [pc, #516]	; (801aaa4 <ip4_reass+0x2b4>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	633b      	str	r3, [r7, #48]	; 0x30
 801a8a4:	e015      	b.n	801a8d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8a8:	695a      	ldr	r2, [r3, #20]
 801a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8ac:	68db      	ldr	r3, [r3, #12]
 801a8ae:	429a      	cmp	r2, r3
 801a8b0:	d10c      	bne.n	801a8cc <ip4_reass+0xdc>
 801a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8b4:	699a      	ldr	r2, [r3, #24]
 801a8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8b8:	691b      	ldr	r3, [r3, #16]
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d106      	bne.n	801a8cc <ip4_reass+0xdc>
 801a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c0:	899a      	ldrh	r2, [r3, #12]
 801a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8c4:	889b      	ldrh	r3, [r3, #4]
 801a8c6:	b29b      	uxth	r3, r3
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	d006      	beq.n	801a8da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	633b      	str	r3, [r7, #48]	; 0x30
 801a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d1e6      	bne.n	801a8a6 <ip4_reass+0xb6>
 801a8d8:	e000      	b.n	801a8dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a8da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d109      	bne.n	801a8f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a8e2:	8c3b      	ldrh	r3, [r7, #32]
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a8e8:	f7ff fdb0 	bl	801a44c <ip_reass_enqueue_new_datagram>
 801a8ec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d11c      	bne.n	801a92e <ip4_reass+0x13e>
      goto nullreturn;
 801a8f4:	e105      	b.n	801ab02 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f8:	88db      	ldrh	r3, [r3, #6]
 801a8fa:	b29b      	uxth	r3, r3
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f7f5 ff66 	bl	80107ce <lwip_htons>
 801a902:	4603      	mov	r3, r0
 801a904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d110      	bne.n	801a92e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a90e:	89db      	ldrh	r3, [r3, #14]
 801a910:	4618      	mov	r0, r3
 801a912:	f7f5 ff5c 	bl	80107ce <lwip_htons>
 801a916:	4603      	mov	r3, r0
 801a918:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d006      	beq.n	801a92e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a922:	3308      	adds	r3, #8
 801a924:	2214      	movs	r2, #20
 801a926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a928:	4618      	mov	r0, r3
 801a92a:	f001 f83c 	bl	801b9a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a930:	88db      	ldrh	r3, [r3, #6]
 801a932:	b29b      	uxth	r3, r3
 801a934:	f003 0320 	and.w	r3, r3, #32
 801a938:	2b00      	cmp	r3, #0
 801a93a:	bf0c      	ite	eq
 801a93c:	2301      	moveq	r3, #1
 801a93e:	2300      	movne	r3, #0
 801a940:	b2db      	uxtb	r3, r3
 801a942:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a944:	69fb      	ldr	r3, [r7, #28]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d00e      	beq.n	801a968 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a94a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a94c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a94e:	4413      	add	r3, r2
 801a950:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a952:	8b7a      	ldrh	r2, [r7, #26]
 801a954:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a956:	429a      	cmp	r2, r3
 801a958:	f0c0 80a0 	bcc.w	801aa9c <ip4_reass+0x2ac>
 801a95c:	8b7b      	ldrh	r3, [r7, #26]
 801a95e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a962:	4293      	cmp	r3, r2
 801a964:	f200 809a 	bhi.w	801aa9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a968:	69fa      	ldr	r2, [r7, #28]
 801a96a:	6879      	ldr	r1, [r7, #4]
 801a96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a96e:	f7ff fdd5 	bl	801a51c <ip_reass_chain_frag_into_datagram_and_validate>
 801a972:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a974:	697b      	ldr	r3, [r7, #20]
 801a976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a97a:	f000 809b 	beq.w	801aab4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a97e:	4b48      	ldr	r3, [pc, #288]	; (801aaa0 <ip4_reass+0x2b0>)
 801a980:	881a      	ldrh	r2, [r3, #0]
 801a982:	8c3b      	ldrh	r3, [r7, #32]
 801a984:	4413      	add	r3, r2
 801a986:	b29a      	uxth	r2, r3
 801a988:	4b45      	ldr	r3, [pc, #276]	; (801aaa0 <ip4_reass+0x2b0>)
 801a98a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a98c:	69fb      	ldr	r3, [r7, #28]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d00d      	beq.n	801a9ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a992:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a996:	4413      	add	r3, r2
 801a998:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a99c:	8a7a      	ldrh	r2, [r7, #18]
 801a99e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a2:	7f9b      	ldrb	r3, [r3, #30]
 801a9a4:	f043 0301 	orr.w	r3, r3, #1
 801a9a8:	b2da      	uxtb	r2, r3
 801a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a9ae:	697b      	ldr	r3, [r7, #20]
 801a9b0:	2b01      	cmp	r3, #1
 801a9b2:	d171      	bne.n	801aa98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b6:	8b9b      	ldrh	r3, [r3, #28]
 801a9b8:	3314      	adds	r3, #20
 801a9ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9be:	685b      	ldr	r3, [r3, #4]
 801a9c0:	685b      	ldr	r3, [r3, #4]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9c8:	685b      	ldr	r3, [r3, #4]
 801a9ca:	685b      	ldr	r3, [r3, #4]
 801a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d0:	3308      	adds	r3, #8
 801a9d2:	2214      	movs	r2, #20
 801a9d4:	4619      	mov	r1, r3
 801a9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9d8:	f000 ffe5 	bl	801b9a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a9dc:	8a3b      	ldrh	r3, [r7, #16]
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7f5 fef5 	bl	80107ce <lwip_htons>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	719a      	strb	r2, [r3, #6]
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	729a      	strb	r2, [r3, #10]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa02:	685b      	ldr	r3, [r3, #4]
 801aa04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801aa06:	e00d      	b.n	801aa24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801aa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa0a:	685b      	ldr	r3, [r3, #4]
 801aa0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801aa0e:	2114      	movs	r1, #20
 801aa10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801aa12:	f7f7 fa1f 	bl	8011e54 <pbuf_remove_header>
      pbuf_cat(p, r);
 801aa16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aa18:	6878      	ldr	r0, [r7, #4]
 801aa1a:	f7f7 fb63 	bl	80120e4 <pbuf_cat>
      r = iprh->next_pbuf;
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d1ee      	bne.n	801aa08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801aa2a:	4b1e      	ldr	r3, [pc, #120]	; (801aaa4 <ip4_reass+0x2b4>)
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d102      	bne.n	801aa3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801aa34:	2300      	movs	r3, #0
 801aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa38:	e010      	b.n	801aa5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801aa3a:	4b1a      	ldr	r3, [pc, #104]	; (801aaa4 <ip4_reass+0x2b4>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa40:	e007      	b.n	801aa52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa48:	429a      	cmp	r2, r3
 801aa4a:	d006      	beq.n	801aa5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d1f4      	bne.n	801aa42 <ip4_reass+0x252>
 801aa58:	e000      	b.n	801aa5c <ip4_reass+0x26c>
          break;
 801aa5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801aa5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aa5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa60:	f7ff fd2e 	bl	801a4c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801aa64:	6878      	ldr	r0, [r7, #4]
 801aa66:	f7f7 fb03 	bl	8012070 <pbuf_clen>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801aa6e:	4b0c      	ldr	r3, [pc, #48]	; (801aaa0 <ip4_reass+0x2b0>)
 801aa70:	881b      	ldrh	r3, [r3, #0]
 801aa72:	8c3a      	ldrh	r2, [r7, #32]
 801aa74:	429a      	cmp	r2, r3
 801aa76:	d906      	bls.n	801aa86 <ip4_reass+0x296>
 801aa78:	4b0b      	ldr	r3, [pc, #44]	; (801aaa8 <ip4_reass+0x2b8>)
 801aa7a:	f240 229b 	movw	r2, #667	; 0x29b
 801aa7e:	490b      	ldr	r1, [pc, #44]	; (801aaac <ip4_reass+0x2bc>)
 801aa80:	480b      	ldr	r0, [pc, #44]	; (801aab0 <ip4_reass+0x2c0>)
 801aa82:	f000 fe1f 	bl	801b6c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801aa86:	4b06      	ldr	r3, [pc, #24]	; (801aaa0 <ip4_reass+0x2b0>)
 801aa88:	881a      	ldrh	r2, [r3, #0]
 801aa8a:	8c3b      	ldrh	r3, [r7, #32]
 801aa8c:	1ad3      	subs	r3, r2, r3
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	4b03      	ldr	r3, [pc, #12]	; (801aaa0 <ip4_reass+0x2b0>)
 801aa92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	e038      	b.n	801ab0a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801aa98:	2300      	movs	r3, #0
 801aa9a:	e036      	b.n	801ab0a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801aa9c:	bf00      	nop
 801aa9e:	e00a      	b.n	801aab6 <ip4_reass+0x2c6>
 801aaa0:	2000b134 	.word	0x2000b134
 801aaa4:	2000b130 	.word	0x2000b130
 801aaa8:	0801f314 	.word	0x0801f314
 801aaac:	0801f484 	.word	0x0801f484
 801aab0:	0801f35c 	.word	0x0801f35c
    goto nullreturn_ipr;
 801aab4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d106      	bne.n	801aaca <ip4_reass+0x2da>
 801aabc:	4b15      	ldr	r3, [pc, #84]	; (801ab14 <ip4_reass+0x324>)
 801aabe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801aac2:	4915      	ldr	r1, [pc, #84]	; (801ab18 <ip4_reass+0x328>)
 801aac4:	4815      	ldr	r0, [pc, #84]	; (801ab1c <ip4_reass+0x32c>)
 801aac6:	f000 fdfd 	bl	801b6c4 <iprintf>
  if (ipr->p == NULL) {
 801aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aacc:	685b      	ldr	r3, [r3, #4]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d116      	bne.n	801ab00 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801aad2:	4b13      	ldr	r3, [pc, #76]	; (801ab20 <ip4_reass+0x330>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aad8:	429a      	cmp	r2, r3
 801aada:	d006      	beq.n	801aaea <ip4_reass+0x2fa>
 801aadc:	4b0d      	ldr	r3, [pc, #52]	; (801ab14 <ip4_reass+0x324>)
 801aade:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aae2:	4910      	ldr	r1, [pc, #64]	; (801ab24 <ip4_reass+0x334>)
 801aae4:	480d      	ldr	r0, [pc, #52]	; (801ab1c <ip4_reass+0x32c>)
 801aae6:	f000 fded 	bl	801b6c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801aaea:	2100      	movs	r1, #0
 801aaec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aaee:	f7ff fce7 	bl	801a4c0 <ip_reass_dequeue_datagram>
 801aaf2:	e006      	b.n	801ab02 <ip4_reass+0x312>
    goto nullreturn;
 801aaf4:	bf00      	nop
 801aaf6:	e004      	b.n	801ab02 <ip4_reass+0x312>
    goto nullreturn;
 801aaf8:	bf00      	nop
 801aafa:	e002      	b.n	801ab02 <ip4_reass+0x312>
      goto nullreturn;
 801aafc:	bf00      	nop
 801aafe:	e000      	b.n	801ab02 <ip4_reass+0x312>
  }

nullreturn:
 801ab00:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ab02:	6878      	ldr	r0, [r7, #4]
 801ab04:	f7f7 fa2c 	bl	8011f60 <pbuf_free>
  return NULL;
 801ab08:	2300      	movs	r3, #0
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3738      	adds	r7, #56	; 0x38
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}
 801ab12:	bf00      	nop
 801ab14:	0801f314 	.word	0x0801f314
 801ab18:	0801f4a0 	.word	0x0801f4a0
 801ab1c:	0801f35c 	.word	0x0801f35c
 801ab20:	2000b130 	.word	0x2000b130
 801ab24:	0801f4ac 	.word	0x0801f4ac

0801ab28 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ab2c:	2005      	movs	r0, #5
 801ab2e:	f7f6 fb31 	bl	8011194 <memp_malloc>
 801ab32:	4603      	mov	r3, r0
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	bd80      	pop	{r7, pc}

0801ab38 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d106      	bne.n	801ab54 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ab46:	4b07      	ldr	r3, [pc, #28]	; (801ab64 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ab48:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ab4c:	4906      	ldr	r1, [pc, #24]	; (801ab68 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ab4e:	4807      	ldr	r0, [pc, #28]	; (801ab6c <ip_frag_free_pbuf_custom_ref+0x34>)
 801ab50:	f000 fdb8 	bl	801b6c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ab54:	6879      	ldr	r1, [r7, #4]
 801ab56:	2005      	movs	r0, #5
 801ab58:	f7f6 fb8c 	bl	8011274 <memp_free>
}
 801ab5c:	bf00      	nop
 801ab5e:	3708      	adds	r7, #8
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}
 801ab64:	0801f314 	.word	0x0801f314
 801ab68:	0801f4cc 	.word	0x0801f4cc
 801ab6c:	0801f35c 	.word	0x0801f35c

0801ab70 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b084      	sub	sp, #16
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d106      	bne.n	801ab90 <ipfrag_free_pbuf_custom+0x20>
 801ab82:	4b11      	ldr	r3, [pc, #68]	; (801abc8 <ipfrag_free_pbuf_custom+0x58>)
 801ab84:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ab88:	4910      	ldr	r1, [pc, #64]	; (801abcc <ipfrag_free_pbuf_custom+0x5c>)
 801ab8a:	4811      	ldr	r0, [pc, #68]	; (801abd0 <ipfrag_free_pbuf_custom+0x60>)
 801ab8c:	f000 fd9a 	bl	801b6c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ab90:	68fa      	ldr	r2, [r7, #12]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d006      	beq.n	801aba6 <ipfrag_free_pbuf_custom+0x36>
 801ab98:	4b0b      	ldr	r3, [pc, #44]	; (801abc8 <ipfrag_free_pbuf_custom+0x58>)
 801ab9a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ab9e:	490d      	ldr	r1, [pc, #52]	; (801abd4 <ipfrag_free_pbuf_custom+0x64>)
 801aba0:	480b      	ldr	r0, [pc, #44]	; (801abd0 <ipfrag_free_pbuf_custom+0x60>)
 801aba2:	f000 fd8f 	bl	801b6c4 <iprintf>
  if (pcr->original != NULL) {
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	695b      	ldr	r3, [r3, #20]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d004      	beq.n	801abb8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	695b      	ldr	r3, [r3, #20]
 801abb2:	4618      	mov	r0, r3
 801abb4:	f7f7 f9d4 	bl	8011f60 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801abb8:	68f8      	ldr	r0, [r7, #12]
 801abba:	f7ff ffbd 	bl	801ab38 <ip_frag_free_pbuf_custom_ref>
}
 801abbe:	bf00      	nop
 801abc0:	3710      	adds	r7, #16
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}
 801abc6:	bf00      	nop
 801abc8:	0801f314 	.word	0x0801f314
 801abcc:	0801f4d8 	.word	0x0801f4d8
 801abd0:	0801f35c 	.word	0x0801f35c
 801abd4:	0801f4e4 	.word	0x0801f4e4

0801abd8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b094      	sub	sp, #80	; 0x50
 801abdc:	af02      	add	r7, sp, #8
 801abde:	60f8      	str	r0, [r7, #12]
 801abe0:	60b9      	str	r1, [r7, #8]
 801abe2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801abe4:	2300      	movs	r3, #0
 801abe6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801abee:	3b14      	subs	r3, #20
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	da00      	bge.n	801abf6 <ip4_frag+0x1e>
 801abf4:	3307      	adds	r3, #7
 801abf6:	10db      	asrs	r3, r3, #3
 801abf8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801abfa:	2314      	movs	r3, #20
 801abfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	685b      	ldr	r3, [r3, #4]
 801ac02:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac06:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac0a:	781b      	ldrb	r3, [r3, #0]
 801ac0c:	f003 030f 	and.w	r3, r3, #15
 801ac10:	b2db      	uxtb	r3, r3
 801ac12:	009b      	lsls	r3, r3, #2
 801ac14:	b2db      	uxtb	r3, r3
 801ac16:	2b14      	cmp	r3, #20
 801ac18:	d002      	beq.n	801ac20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ac1a:	f06f 0305 	mvn.w	r3, #5
 801ac1e:	e110      	b.n	801ae42 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	895b      	ldrh	r3, [r3, #10]
 801ac24:	2b13      	cmp	r3, #19
 801ac26:	d809      	bhi.n	801ac3c <ip4_frag+0x64>
 801ac28:	4b88      	ldr	r3, [pc, #544]	; (801ae4c <ip4_frag+0x274>)
 801ac2a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ac2e:	4988      	ldr	r1, [pc, #544]	; (801ae50 <ip4_frag+0x278>)
 801ac30:	4888      	ldr	r0, [pc, #544]	; (801ae54 <ip4_frag+0x27c>)
 801ac32:	f000 fd47 	bl	801b6c4 <iprintf>
 801ac36:	f06f 0305 	mvn.w	r3, #5
 801ac3a:	e102      	b.n	801ae42 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac3e:	88db      	ldrh	r3, [r3, #6]
 801ac40:	b29b      	uxth	r3, r3
 801ac42:	4618      	mov	r0, r3
 801ac44:	f7f5 fdc3 	bl	80107ce <lwip_htons>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ac4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ac4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ac56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ac58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	891b      	ldrh	r3, [r3, #8]
 801ac62:	3b14      	subs	r3, #20
 801ac64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ac68:	e0e1      	b.n	801ae2e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ac6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ac6c:	00db      	lsls	r3, r3, #3
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac74:	4293      	cmp	r3, r2
 801ac76:	bf28      	it	cs
 801ac78:	4613      	movcs	r3, r2
 801ac7a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ac7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac80:	2114      	movs	r1, #20
 801ac82:	200e      	movs	r0, #14
 801ac84:	f7f6 fe88 	bl	8011998 <pbuf_alloc>
 801ac88:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	f000 80d5 	beq.w	801ae3c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac94:	895b      	ldrh	r3, [r3, #10]
 801ac96:	2b13      	cmp	r3, #19
 801ac98:	d806      	bhi.n	801aca8 <ip4_frag+0xd0>
 801ac9a:	4b6c      	ldr	r3, [pc, #432]	; (801ae4c <ip4_frag+0x274>)
 801ac9c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801aca0:	496d      	ldr	r1, [pc, #436]	; (801ae58 <ip4_frag+0x280>)
 801aca2:	486c      	ldr	r0, [pc, #432]	; (801ae54 <ip4_frag+0x27c>)
 801aca4:	f000 fd0e 	bl	801b6c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acaa:	685b      	ldr	r3, [r3, #4]
 801acac:	2214      	movs	r2, #20
 801acae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801acb0:	4618      	mov	r0, r3
 801acb2:	f000 fe78 	bl	801b9a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb8:	685b      	ldr	r3, [r3, #4]
 801acba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801acbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801acbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801acc2:	e064      	b.n	801ad8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	895a      	ldrh	r2, [r3, #10]
 801acc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acca:	1ad3      	subs	r3, r2, r3
 801accc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	895b      	ldrh	r3, [r3, #10]
 801acd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801acd4:	429a      	cmp	r2, r3
 801acd6:	d906      	bls.n	801ace6 <ip4_frag+0x10e>
 801acd8:	4b5c      	ldr	r3, [pc, #368]	; (801ae4c <ip4_frag+0x274>)
 801acda:	f240 322d 	movw	r2, #813	; 0x32d
 801acde:	495f      	ldr	r1, [pc, #380]	; (801ae5c <ip4_frag+0x284>)
 801ace0:	485c      	ldr	r0, [pc, #368]	; (801ae54 <ip4_frag+0x27c>)
 801ace2:	f000 fcef 	bl	801b6c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ace6:	8bfa      	ldrh	r2, [r7, #30]
 801ace8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801acec:	4293      	cmp	r3, r2
 801acee:	bf28      	it	cs
 801acf0:	4613      	movcs	r3, r2
 801acf2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801acf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d105      	bne.n	801ad0a <ip4_frag+0x132>
        poff = 0;
 801acfe:	2300      	movs	r3, #0
 801ad00:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	60fb      	str	r3, [r7, #12]
        continue;
 801ad08:	e041      	b.n	801ad8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ad0a:	f7ff ff0d 	bl	801ab28 <ip_frag_alloc_pbuf_custom_ref>
 801ad0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ad10:	69bb      	ldr	r3, [r7, #24]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d103      	bne.n	801ad1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ad16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad18:	f7f7 f922 	bl	8011f60 <pbuf_free>
        goto memerr;
 801ad1c:	e08f      	b.n	801ae3e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ad1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ad24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ad26:	4413      	add	r3, r2
 801ad28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ad2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ad30:	9201      	str	r2, [sp, #4]
 801ad32:	9300      	str	r3, [sp, #0]
 801ad34:	4603      	mov	r3, r0
 801ad36:	2241      	movs	r2, #65	; 0x41
 801ad38:	2000      	movs	r0, #0
 801ad3a:	f7f6 ff57 	bl	8011bec <pbuf_alloced_custom>
 801ad3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ad40:	697b      	ldr	r3, [r7, #20]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d106      	bne.n	801ad54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ad46:	69b8      	ldr	r0, [r7, #24]
 801ad48:	f7ff fef6 	bl	801ab38 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ad4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad4e:	f7f7 f907 	bl	8011f60 <pbuf_free>
        goto memerr;
 801ad52:	e074      	b.n	801ae3e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ad54:	68f8      	ldr	r0, [r7, #12]
 801ad56:	f7f7 f9a3 	bl	80120a0 <pbuf_ref>
      pcr->original = p;
 801ad5a:	69bb      	ldr	r3, [r7, #24]
 801ad5c:	68fa      	ldr	r2, [r7, #12]
 801ad5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ad60:	69bb      	ldr	r3, [r7, #24]
 801ad62:	4a3f      	ldr	r2, [pc, #252]	; (801ae60 <ip4_frag+0x288>)
 801ad64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ad66:	6979      	ldr	r1, [r7, #20]
 801ad68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad6a:	f7f7 f9bb 	bl	80120e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ad6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ad72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad76:	1ad3      	subs	r3, r2, r3
 801ad78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ad7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d004      	beq.n	801ad8e <ip4_frag+0x1b6>
        poff = 0;
 801ad84:	2300      	movs	r3, #0
 801ad86:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ad8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d196      	bne.n	801acc4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ad96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ad98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad9c:	4413      	add	r3, r2
 801ad9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ada4:	f1a3 0213 	sub.w	r2, r3, #19
 801ada8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adac:	429a      	cmp	r2, r3
 801adae:	bfcc      	ite	gt
 801adb0:	2301      	movgt	r3, #1
 801adb2:	2300      	movle	r3, #0
 801adb4:	b2db      	uxtb	r3, r3
 801adb6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801adb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801adbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801adc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801adc2:	6a3b      	ldr	r3, [r7, #32]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d002      	beq.n	801adce <ip4_frag+0x1f6>
 801adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d003      	beq.n	801add6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801adce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801add0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801add4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801add6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801add8:	4618      	mov	r0, r3
 801adda:	f7f5 fcf8 	bl	80107ce <lwip_htons>
 801adde:	4603      	mov	r3, r0
 801ade0:	461a      	mov	r2, r3
 801ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ade4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ade6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ade8:	3314      	adds	r3, #20
 801adea:	b29b      	uxth	r3, r3
 801adec:	4618      	mov	r0, r3
 801adee:	f7f5 fcee 	bl	80107ce <lwip_htons>
 801adf2:	4603      	mov	r3, r0
 801adf4:	461a      	mov	r2, r3
 801adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adfc:	2200      	movs	r2, #0
 801adfe:	729a      	strb	r2, [r3, #10]
 801ae00:	2200      	movs	r2, #0
 801ae02:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ae04:	68bb      	ldr	r3, [r7, #8]
 801ae06:	695b      	ldr	r3, [r3, #20]
 801ae08:	687a      	ldr	r2, [r7, #4]
 801ae0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae0c:	68b8      	ldr	r0, [r7, #8]
 801ae0e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ae10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae12:	f7f7 f8a5 	bl	8011f60 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ae16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ae1c:	1ad3      	subs	r3, r2, r3
 801ae1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ae22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ae26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae28:	4413      	add	r3, r2
 801ae2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ae2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	f47f af19 	bne.w	801ac6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ae38:	2300      	movs	r3, #0
 801ae3a:	e002      	b.n	801ae42 <ip4_frag+0x26a>
      goto memerr;
 801ae3c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ae3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ae42:	4618      	mov	r0, r3
 801ae44:	3748      	adds	r7, #72	; 0x48
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bd80      	pop	{r7, pc}
 801ae4a:	bf00      	nop
 801ae4c:	0801f314 	.word	0x0801f314
 801ae50:	0801f4f0 	.word	0x0801f4f0
 801ae54:	0801f35c 	.word	0x0801f35c
 801ae58:	0801f50c 	.word	0x0801f50c
 801ae5c:	0801f52c 	.word	0x0801f52c
 801ae60:	0801ab71 	.word	0x0801ab71

0801ae64 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b086      	sub	sp, #24
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
 801ae6c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ae6e:	230e      	movs	r3, #14
 801ae70:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	895b      	ldrh	r3, [r3, #10]
 801ae76:	2b0e      	cmp	r3, #14
 801ae78:	d96e      	bls.n	801af58 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	7bdb      	ldrb	r3, [r3, #15]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d106      	bne.n	801ae90 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ae82:	683b      	ldr	r3, [r7, #0]
 801ae84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae88:	3301      	adds	r3, #1
 801ae8a:	b2da      	uxtb	r2, r3
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	685b      	ldr	r3, [r3, #4]
 801ae94:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ae96:	693b      	ldr	r3, [r7, #16]
 801ae98:	7b1a      	ldrb	r2, [r3, #12]
 801ae9a:	7b5b      	ldrb	r3, [r3, #13]
 801ae9c:	021b      	lsls	r3, r3, #8
 801ae9e:	4313      	orrs	r3, r2
 801aea0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	781b      	ldrb	r3, [r3, #0]
 801aea6:	f003 0301 	and.w	r3, r3, #1
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d023      	beq.n	801aef6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801aeae:	693b      	ldr	r3, [r7, #16]
 801aeb0:	781b      	ldrb	r3, [r3, #0]
 801aeb2:	2b01      	cmp	r3, #1
 801aeb4:	d10f      	bne.n	801aed6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aeb6:	693b      	ldr	r3, [r7, #16]
 801aeb8:	785b      	ldrb	r3, [r3, #1]
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d11b      	bne.n	801aef6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aebe:	693b      	ldr	r3, [r7, #16]
 801aec0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aec2:	2b5e      	cmp	r3, #94	; 0x5e
 801aec4:	d117      	bne.n	801aef6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	7b5b      	ldrb	r3, [r3, #13]
 801aeca:	f043 0310 	orr.w	r3, r3, #16
 801aece:	b2da      	uxtb	r2, r3
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	735a      	strb	r2, [r3, #13]
 801aed4:	e00f      	b.n	801aef6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aed6:	693b      	ldr	r3, [r7, #16]
 801aed8:	2206      	movs	r2, #6
 801aeda:	4928      	ldr	r1, [pc, #160]	; (801af7c <ethernet_input+0x118>)
 801aedc:	4618      	mov	r0, r3
 801aede:	f000 fc9f 	bl	801b820 <memcmp>
 801aee2:	4603      	mov	r3, r0
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d106      	bne.n	801aef6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	7b5b      	ldrb	r3, [r3, #13]
 801aeec:	f043 0308 	orr.w	r3, r3, #8
 801aef0:	b2da      	uxtb	r2, r3
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801aef6:	89fb      	ldrh	r3, [r7, #14]
 801aef8:	2b08      	cmp	r3, #8
 801aefa:	d003      	beq.n	801af04 <ethernet_input+0xa0>
 801aefc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801af00:	d014      	beq.n	801af2c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801af02:	e032      	b.n	801af6a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af0a:	f003 0308 	and.w	r3, r3, #8
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d024      	beq.n	801af5c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801af12:	8afb      	ldrh	r3, [r7, #22]
 801af14:	4619      	mov	r1, r3
 801af16:	6878      	ldr	r0, [r7, #4]
 801af18:	f7f6 ff9c 	bl	8011e54 <pbuf_remove_header>
 801af1c:	4603      	mov	r3, r0
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d11e      	bne.n	801af60 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801af22:	6839      	ldr	r1, [r7, #0]
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7fe ff21 	bl	8019d6c <ip4_input>
      break;
 801af2a:	e013      	b.n	801af54 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801af2c:	683b      	ldr	r3, [r7, #0]
 801af2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af32:	f003 0308 	and.w	r3, r3, #8
 801af36:	2b00      	cmp	r3, #0
 801af38:	d014      	beq.n	801af64 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801af3a:	8afb      	ldrh	r3, [r7, #22]
 801af3c:	4619      	mov	r1, r3
 801af3e:	6878      	ldr	r0, [r7, #4]
 801af40:	f7f6 ff88 	bl	8011e54 <pbuf_remove_header>
 801af44:	4603      	mov	r3, r0
 801af46:	2b00      	cmp	r3, #0
 801af48:	d10e      	bne.n	801af68 <ethernet_input+0x104>
        etharp_input(p, netif);
 801af4a:	6839      	ldr	r1, [r7, #0]
 801af4c:	6878      	ldr	r0, [r7, #4]
 801af4e:	f7fe f8a5 	bl	801909c <etharp_input>
      break;
 801af52:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801af54:	2300      	movs	r3, #0
 801af56:	e00c      	b.n	801af72 <ethernet_input+0x10e>
    goto free_and_return;
 801af58:	bf00      	nop
 801af5a:	e006      	b.n	801af6a <ethernet_input+0x106>
        goto free_and_return;
 801af5c:	bf00      	nop
 801af5e:	e004      	b.n	801af6a <ethernet_input+0x106>
        goto free_and_return;
 801af60:	bf00      	nop
 801af62:	e002      	b.n	801af6a <ethernet_input+0x106>
        goto free_and_return;
 801af64:	bf00      	nop
 801af66:	e000      	b.n	801af6a <ethernet_input+0x106>
        goto free_and_return;
 801af68:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801af6a:	6878      	ldr	r0, [r7, #4]
 801af6c:	f7f6 fff8 	bl	8011f60 <pbuf_free>
  return ERR_OK;
 801af70:	2300      	movs	r3, #0
}
 801af72:	4618      	mov	r0, r3
 801af74:	3718      	adds	r7, #24
 801af76:	46bd      	mov	sp, r7
 801af78:	bd80      	pop	{r7, pc}
 801af7a:	bf00      	nop
 801af7c:	0801f868 	.word	0x0801f868

0801af80 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801af80:	b580      	push	{r7, lr}
 801af82:	b086      	sub	sp, #24
 801af84:	af00      	add	r7, sp, #0
 801af86:	60f8      	str	r0, [r7, #12]
 801af88:	60b9      	str	r1, [r7, #8]
 801af8a:	607a      	str	r2, [r7, #4]
 801af8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801af8e:	8c3b      	ldrh	r3, [r7, #32]
 801af90:	4618      	mov	r0, r3
 801af92:	f7f5 fc1c 	bl	80107ce <lwip_htons>
 801af96:	4603      	mov	r3, r0
 801af98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801af9a:	210e      	movs	r1, #14
 801af9c:	68b8      	ldr	r0, [r7, #8]
 801af9e:	f7f6 ff49 	bl	8011e34 <pbuf_add_header>
 801afa2:	4603      	mov	r3, r0
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d125      	bne.n	801aff4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801afa8:	68bb      	ldr	r3, [r7, #8]
 801afaa:	685b      	ldr	r3, [r3, #4]
 801afac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801afae:	693b      	ldr	r3, [r7, #16]
 801afb0:	8afa      	ldrh	r2, [r7, #22]
 801afb2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801afb4:	693b      	ldr	r3, [r7, #16]
 801afb6:	2206      	movs	r2, #6
 801afb8:	6839      	ldr	r1, [r7, #0]
 801afba:	4618      	mov	r0, r3
 801afbc:	f000 fcf3 	bl	801b9a6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801afc0:	693b      	ldr	r3, [r7, #16]
 801afc2:	3306      	adds	r3, #6
 801afc4:	2206      	movs	r2, #6
 801afc6:	6879      	ldr	r1, [r7, #4]
 801afc8:	4618      	mov	r0, r3
 801afca:	f000 fcec 	bl	801b9a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801afd4:	2b06      	cmp	r3, #6
 801afd6:	d006      	beq.n	801afe6 <ethernet_output+0x66>
 801afd8:	4b0a      	ldr	r3, [pc, #40]	; (801b004 <ethernet_output+0x84>)
 801afda:	f44f 7299 	mov.w	r2, #306	; 0x132
 801afde:	490a      	ldr	r1, [pc, #40]	; (801b008 <ethernet_output+0x88>)
 801afe0:	480a      	ldr	r0, [pc, #40]	; (801b00c <ethernet_output+0x8c>)
 801afe2:	f000 fb6f 	bl	801b6c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	699b      	ldr	r3, [r3, #24]
 801afea:	68b9      	ldr	r1, [r7, #8]
 801afec:	68f8      	ldr	r0, [r7, #12]
 801afee:	4798      	blx	r3
 801aff0:	4603      	mov	r3, r0
 801aff2:	e002      	b.n	801affa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801aff4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801aff6:	f06f 0301 	mvn.w	r3, #1
}
 801affa:	4618      	mov	r0, r3
 801affc:	3718      	adds	r7, #24
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}
 801b002:	bf00      	nop
 801b004:	0801f53c 	.word	0x0801f53c
 801b008:	0801f574 	.word	0x0801f574
 801b00c:	0801f5a8 	.word	0x0801f5a8

0801b010 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 801b010:	b580      	push	{r7, lr}
 801b012:	b084      	sub	sp, #16
 801b014:	af00      	add	r7, sp, #0
 801b016:	60f8      	str	r0, [r7, #12]
 801b018:	60b9      	str	r1, [r7, #8]
 801b01a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d005      	beq.n	801b02e <lwrb_init+0x1e>
 801b022:	68bb      	ldr	r3, [r7, #8]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d002      	beq.n	801b02e <lwrb_init+0x1e>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d101      	bne.n	801b032 <lwrb_init+0x22>
        return 0;
 801b02e:	2300      	movs	r3, #0
 801b030:	e00b      	b.n	801b04a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 801b032:	2214      	movs	r2, #20
 801b034:	2100      	movs	r1, #0
 801b036:	68f8      	ldr	r0, [r7, #12]
 801b038:	f000 fc1c 	bl	801b874 <memset>

    buff->size = size;
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	687a      	ldr	r2, [r7, #4]
 801b040:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	68ba      	ldr	r2, [r7, #8]
 801b046:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 801b048:	2301      	movs	r3, #1
}
 801b04a:	4618      	mov	r0, r3
 801b04c:	3710      	adds	r7, #16
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd80      	pop	{r7, pc}

0801b052 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 801b052:	b480      	push	{r7}
 801b054:	b083      	sub	sp, #12
 801b056:	af00      	add	r7, sp, #0
 801b058:	6078      	str	r0, [r7, #4]
 801b05a:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d00a      	beq.n	801b078 <lwrb_set_evt_fn+0x26>
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d006      	beq.n	801b078 <lwrb_set_evt_fn+0x26>
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d002      	beq.n	801b078 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	683a      	ldr	r2, [r7, #0]
 801b076:	611a      	str	r2, [r3, #16]
    }
}
 801b078:	bf00      	nop
 801b07a:	370c      	adds	r7, #12
 801b07c:	46bd      	mov	sp, r7
 801b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b082:	4770      	bx	lr

0801b084 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 801b084:	b580      	push	{r7, lr}
 801b086:	b088      	sub	sp, #32
 801b088:	af00      	add	r7, sp, #0
 801b08a:	60f8      	str	r0, [r7, #12]
 801b08c:	60b9      	str	r1, [r7, #8]
 801b08e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d00d      	beq.n	801b0b6 <lwrb_write+0x32>
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d009      	beq.n	801b0b6 <lwrb_write+0x32>
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	685b      	ldr	r3, [r3, #4]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d005      	beq.n	801b0b6 <lwrb_write+0x32>
 801b0aa:	68bb      	ldr	r3, [r7, #8]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d002      	beq.n	801b0b6 <lwrb_write+0x32>
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d101      	bne.n	801b0ba <lwrb_write+0x36>
        return 0;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	e059      	b.n	801b16e <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 801b0ba:	68f8      	ldr	r0, [r7, #12]
 801b0bc:	f000 f85b 	bl	801b176 <lwrb_get_free>
 801b0c0:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 801b0c2:	69fa      	ldr	r2, [r7, #28]
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	429a      	cmp	r2, r3
 801b0c8:	d20d      	bcs.n	801b0e6 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	691b      	ldr	r3, [r3, #16]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d005      	beq.n	801b0de <lwrb_write+0x5a>
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	691b      	ldr	r3, [r3, #16]
 801b0d6:	69fa      	ldr	r2, [r7, #28]
 801b0d8:	2102      	movs	r1, #2
 801b0da:	68f8      	ldr	r0, [r7, #12]
 801b0dc:	4798      	blx	r3
			free = lwrb_get_free(buff);
 801b0de:	68f8      	ldr	r0, [r7, #12]
 801b0e0:	f000 f849 	bl	801b176 <lwrb_get_free>
 801b0e4:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 801b0e6:	687a      	ldr	r2, [r7, #4]
 801b0e8:	69fb      	ldr	r3, [r7, #28]
 801b0ea:	4293      	cmp	r3, r2
 801b0ec:	bf28      	it	cs
 801b0ee:	4613      	movcs	r3, r2
 801b0f0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d101      	bne.n	801b0fc <lwrb_write+0x78>
        return 0;
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	e038      	b.n	801b16e <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	685a      	ldr	r2, [r3, #4]
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	68db      	ldr	r3, [r3, #12]
 801b104:	1ad3      	subs	r3, r2, r3
 801b106:	687a      	ldr	r2, [r7, #4]
 801b108:	4293      	cmp	r3, r2
 801b10a:	bf28      	it	cs
 801b10c:	4613      	movcs	r3, r2
 801b10e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	681a      	ldr	r2, [r3, #0]
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	68db      	ldr	r3, [r3, #12]
 801b118:	4413      	add	r3, r2
 801b11a:	697a      	ldr	r2, [r7, #20]
 801b11c:	69b9      	ldr	r1, [r7, #24]
 801b11e:	4618      	mov	r0, r3
 801b120:	f000 fc41 	bl	801b9a6 <memcpy>
    buff->w += tocopy;
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	68da      	ldr	r2, [r3, #12]
 801b128:	697b      	ldr	r3, [r7, #20]
 801b12a:	441a      	add	r2, r3
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 801b130:	687a      	ldr	r2, [r7, #4]
 801b132:	697b      	ldr	r3, [r7, #20]
 801b134:	1ad3      	subs	r3, r2, r3
 801b136:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d00b      	beq.n	801b156 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	6818      	ldr	r0, [r3, #0]
 801b142:	69ba      	ldr	r2, [r7, #24]
 801b144:	697b      	ldr	r3, [r7, #20]
 801b146:	4413      	add	r3, r2
 801b148:	687a      	ldr	r2, [r7, #4]
 801b14a:	4619      	mov	r1, r3
 801b14c:	f000 fc2b 	bl	801b9a6 <memcpy>
        buff->w = btw;
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	687a      	ldr	r2, [r7, #4]
 801b154:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	68da      	ldr	r2, [r3, #12]
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	685b      	ldr	r3, [r3, #4]
 801b15e:	429a      	cmp	r2, r3
 801b160:	d302      	bcc.n	801b168 <lwrb_write+0xe4>
        buff->w = 0;
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	2200      	movs	r2, #0
 801b166:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 801b168:	697a      	ldr	r2, [r7, #20]
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	4413      	add	r3, r2
}
 801b16e:	4618      	mov	r0, r3
 801b170:	3720      	adds	r7, #32
 801b172:	46bd      	mov	sp, r7
 801b174:	bd80      	pop	{r7, pc}

0801b176 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 801b176:	b480      	push	{r7}
 801b178:	b087      	sub	sp, #28
 801b17a:	af00      	add	r7, sp, #0
 801b17c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d007      	beq.n	801b194 <lwrb_get_free+0x1e>
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d003      	beq.n	801b194 <lwrb_get_free+0x1e>
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	685b      	ldr	r3, [r3, #4]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d101      	bne.n	801b198 <lwrb_get_free+0x22>
        return 0;
 801b194:	2300      	movs	r3, #0
 801b196:	e01f      	b.n	801b1d8 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	689b      	ldr	r3, [r3, #8]
 801b1a2:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801b1a4:	693a      	ldr	r2, [r7, #16]
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	d103      	bne.n	801b1b4 <lwrb_get_free+0x3e>
        size = buff->size;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	685b      	ldr	r3, [r3, #4]
 801b1b0:	617b      	str	r3, [r7, #20]
 801b1b2:	e00f      	b.n	801b1d4 <lwrb_get_free+0x5e>
    } else if (r > w) {
 801b1b4:	68fa      	ldr	r2, [r7, #12]
 801b1b6:	693b      	ldr	r3, [r7, #16]
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	d904      	bls.n	801b1c6 <lwrb_get_free+0x50>
        size = r - w;
 801b1bc:	68fa      	ldr	r2, [r7, #12]
 801b1be:	693b      	ldr	r3, [r7, #16]
 801b1c0:	1ad3      	subs	r3, r2, r3
 801b1c2:	617b      	str	r3, [r7, #20]
 801b1c4:	e006      	b.n	801b1d4 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	685a      	ldr	r2, [r3, #4]
 801b1ca:	68f9      	ldr	r1, [r7, #12]
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	1acb      	subs	r3, r1, r3
 801b1d0:	4413      	add	r3, r2
 801b1d2:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	3b01      	subs	r3, #1
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	371c      	adds	r7, #28
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e2:	4770      	bx	lr

0801b1e4 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 801b1e4:	b480      	push	{r7}
 801b1e6:	b087      	sub	sp, #28
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d007      	beq.n	801b202 <lwrb_get_full+0x1e>
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d003      	beq.n	801b202 <lwrb_get_full+0x1e>
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	685b      	ldr	r3, [r3, #4]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d101      	bne.n	801b206 <lwrb_get_full+0x22>
        return 0;
 801b202:	2300      	movs	r3, #0
 801b204:	e01d      	b.n	801b242 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	68db      	ldr	r3, [r3, #12]
 801b20a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	689b      	ldr	r3, [r3, #8]
 801b210:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801b212:	693a      	ldr	r2, [r7, #16]
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	429a      	cmp	r2, r3
 801b218:	d102      	bne.n	801b220 <lwrb_get_full+0x3c>
        size = 0;
 801b21a:	2300      	movs	r3, #0
 801b21c:	617b      	str	r3, [r7, #20]
 801b21e:	e00f      	b.n	801b240 <lwrb_get_full+0x5c>
    } else if (w > r) {
 801b220:	693a      	ldr	r2, [r7, #16]
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	429a      	cmp	r2, r3
 801b226:	d904      	bls.n	801b232 <lwrb_get_full+0x4e>
        size = w - r;
 801b228:	693a      	ldr	r2, [r7, #16]
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	1ad3      	subs	r3, r2, r3
 801b22e:	617b      	str	r3, [r7, #20]
 801b230:	e006      	b.n	801b240 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	685a      	ldr	r2, [r3, #4]
 801b236:	6939      	ldr	r1, [r7, #16]
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	1acb      	subs	r3, r1, r3
 801b23c:	4413      	add	r3, r2
 801b23e:	617b      	str	r3, [r7, #20]
    }
    return size;
 801b240:	697b      	ldr	r3, [r7, #20]
}
 801b242:	4618      	mov	r0, r3
 801b244:	371c      	adds	r7, #28
 801b246:	46bd      	mov	sp, r7
 801b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24c:	4770      	bx	lr

0801b24e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 801b24e:	b480      	push	{r7}
 801b250:	b083      	sub	sp, #12
 801b252:	af00      	add	r7, sp, #0
 801b254:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d007      	beq.n	801b26c <lwrb_get_linear_block_read_address+0x1e>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d003      	beq.n	801b26c <lwrb_get_linear_block_read_address+0x1e>
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	685b      	ldr	r3, [r3, #4]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d101      	bne.n	801b270 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 801b26c:	2300      	movs	r3, #0
 801b26e:	e004      	b.n	801b27a <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681a      	ldr	r2, [r3, #0]
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	689b      	ldr	r3, [r3, #8]
 801b278:	4413      	add	r3, r2
}
 801b27a:	4618      	mov	r0, r3
 801b27c:	370c      	adds	r7, #12
 801b27e:	46bd      	mov	sp, r7
 801b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b284:	4770      	bx	lr

0801b286 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 801b286:	b480      	push	{r7}
 801b288:	b087      	sub	sp, #28
 801b28a:	af00      	add	r7, sp, #0
 801b28c:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d007      	beq.n	801b2a4 <lwrb_get_linear_block_read_length+0x1e>
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d003      	beq.n	801b2a4 <lwrb_get_linear_block_read_length+0x1e>
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	685b      	ldr	r3, [r3, #4]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d101      	bne.n	801b2a8 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	e01b      	b.n	801b2e0 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	68db      	ldr	r3, [r3, #12]
 801b2ac:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	689b      	ldr	r3, [r3, #8]
 801b2b2:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 801b2b4:	693a      	ldr	r2, [r7, #16]
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	429a      	cmp	r2, r3
 801b2ba:	d904      	bls.n	801b2c6 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 801b2bc:	693a      	ldr	r2, [r7, #16]
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	1ad3      	subs	r3, r2, r3
 801b2c2:	617b      	str	r3, [r7, #20]
 801b2c4:	e00b      	b.n	801b2de <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 801b2c6:	68fa      	ldr	r2, [r7, #12]
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d905      	bls.n	801b2da <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	685a      	ldr	r2, [r3, #4]
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	1ad3      	subs	r3, r2, r3
 801b2d6:	617b      	str	r3, [r7, #20]
 801b2d8:	e001      	b.n	801b2de <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 801b2da:	2300      	movs	r3, #0
 801b2dc:	617b      	str	r3, [r7, #20]
    }
    return len;
 801b2de:	697b      	ldr	r3, [r7, #20]
}
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	371c      	adds	r7, #28
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ea:	4770      	bx	lr

0801b2ec <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	b084      	sub	sp, #16
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	6078      	str	r0, [r7, #4]
 801b2f4:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d00a      	beq.n	801b312 <lwrb_skip+0x26>
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d006      	beq.n	801b312 <lwrb_skip+0x26>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	685b      	ldr	r3, [r3, #4]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d002      	beq.n	801b312 <lwrb_skip+0x26>
 801b30c:	683b      	ldr	r3, [r7, #0]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d101      	bne.n	801b316 <lwrb_skip+0x2a>
        return 0;
 801b312:	2300      	movs	r3, #0
 801b314:	e01d      	b.n	801b352 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 801b316:	6878      	ldr	r0, [r7, #4]
 801b318:	f7ff ff64 	bl	801b1e4 <lwrb_get_full>
 801b31c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 801b31e:	683a      	ldr	r2, [r7, #0]
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	4293      	cmp	r3, r2
 801b324:	bf28      	it	cs
 801b326:	4613      	movcs	r3, r2
 801b328:	603b      	str	r3, [r7, #0]
    buff->r += len;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	689a      	ldr	r2, [r3, #8]
 801b32e:	683b      	ldr	r3, [r7, #0]
 801b330:	441a      	add	r2, r3
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	689a      	ldr	r2, [r3, #8]
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	685b      	ldr	r3, [r3, #4]
 801b33e:	429a      	cmp	r2, r3
 801b340:	d306      	bcc.n	801b350 <lwrb_skip+0x64>
        buff->r -= buff->size;
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	689a      	ldr	r2, [r3, #8]
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	685b      	ldr	r3, [r3, #4]
 801b34a:	1ad2      	subs	r2, r2, r3
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 801b350:	683b      	ldr	r3, [r7, #0]
}
 801b352:	4618      	mov	r0, r3
 801b354:	3710      	adds	r7, #16
 801b356:	46bd      	mov	sp, r7
 801b358:	bd80      	pop	{r7, pc}
	...

0801b35c <malloc>:
 801b35c:	4b02      	ldr	r3, [pc, #8]	; (801b368 <malloc+0xc>)
 801b35e:	4601      	mov	r1, r0
 801b360:	6818      	ldr	r0, [r3, #0]
 801b362:	f000 b823 	b.w	801b3ac <_malloc_r>
 801b366:	bf00      	nop
 801b368:	200000dc 	.word	0x200000dc

0801b36c <sbrk_aligned>:
 801b36c:	b570      	push	{r4, r5, r6, lr}
 801b36e:	4e0e      	ldr	r6, [pc, #56]	; (801b3a8 <sbrk_aligned+0x3c>)
 801b370:	460c      	mov	r4, r1
 801b372:	4605      	mov	r5, r0
 801b374:	6831      	ldr	r1, [r6, #0]
 801b376:	b911      	cbnz	r1, 801b37e <sbrk_aligned+0x12>
 801b378:	f000 facc 	bl	801b914 <_sbrk_r>
 801b37c:	6030      	str	r0, [r6, #0]
 801b37e:	4621      	mov	r1, r4
 801b380:	4628      	mov	r0, r5
 801b382:	f000 fac7 	bl	801b914 <_sbrk_r>
 801b386:	1c43      	adds	r3, r0, #1
 801b388:	d00a      	beq.n	801b3a0 <sbrk_aligned+0x34>
 801b38a:	1cc4      	adds	r4, r0, #3
 801b38c:	f024 0403 	bic.w	r4, r4, #3
 801b390:	42a0      	cmp	r0, r4
 801b392:	d007      	beq.n	801b3a4 <sbrk_aligned+0x38>
 801b394:	1a21      	subs	r1, r4, r0
 801b396:	4628      	mov	r0, r5
 801b398:	f000 fabc 	bl	801b914 <_sbrk_r>
 801b39c:	3001      	adds	r0, #1
 801b39e:	d101      	bne.n	801b3a4 <sbrk_aligned+0x38>
 801b3a0:	f04f 34ff 	mov.w	r4, #4294967295
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	bd70      	pop	{r4, r5, r6, pc}
 801b3a8:	2000b13c 	.word	0x2000b13c

0801b3ac <_malloc_r>:
 801b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3b0:	1ccd      	adds	r5, r1, #3
 801b3b2:	4607      	mov	r7, r0
 801b3b4:	f025 0503 	bic.w	r5, r5, #3
 801b3b8:	3508      	adds	r5, #8
 801b3ba:	2d0c      	cmp	r5, #12
 801b3bc:	bf38      	it	cc
 801b3be:	250c      	movcc	r5, #12
 801b3c0:	2d00      	cmp	r5, #0
 801b3c2:	db01      	blt.n	801b3c8 <_malloc_r+0x1c>
 801b3c4:	42a9      	cmp	r1, r5
 801b3c6:	d905      	bls.n	801b3d4 <_malloc_r+0x28>
 801b3c8:	230c      	movs	r3, #12
 801b3ca:	2600      	movs	r6, #0
 801b3cc:	603b      	str	r3, [r7, #0]
 801b3ce:	4630      	mov	r0, r6
 801b3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b4a8 <_malloc_r+0xfc>
 801b3d8:	f000 f868 	bl	801b4ac <__malloc_lock>
 801b3dc:	f8d8 3000 	ldr.w	r3, [r8]
 801b3e0:	461c      	mov	r4, r3
 801b3e2:	bb5c      	cbnz	r4, 801b43c <_malloc_r+0x90>
 801b3e4:	4629      	mov	r1, r5
 801b3e6:	4638      	mov	r0, r7
 801b3e8:	f7ff ffc0 	bl	801b36c <sbrk_aligned>
 801b3ec:	1c43      	adds	r3, r0, #1
 801b3ee:	4604      	mov	r4, r0
 801b3f0:	d155      	bne.n	801b49e <_malloc_r+0xf2>
 801b3f2:	f8d8 4000 	ldr.w	r4, [r8]
 801b3f6:	4626      	mov	r6, r4
 801b3f8:	2e00      	cmp	r6, #0
 801b3fa:	d145      	bne.n	801b488 <_malloc_r+0xdc>
 801b3fc:	2c00      	cmp	r4, #0
 801b3fe:	d048      	beq.n	801b492 <_malloc_r+0xe6>
 801b400:	6823      	ldr	r3, [r4, #0]
 801b402:	4631      	mov	r1, r6
 801b404:	4638      	mov	r0, r7
 801b406:	eb04 0903 	add.w	r9, r4, r3
 801b40a:	f000 fa83 	bl	801b914 <_sbrk_r>
 801b40e:	4581      	cmp	r9, r0
 801b410:	d13f      	bne.n	801b492 <_malloc_r+0xe6>
 801b412:	6821      	ldr	r1, [r4, #0]
 801b414:	4638      	mov	r0, r7
 801b416:	1a6d      	subs	r5, r5, r1
 801b418:	4629      	mov	r1, r5
 801b41a:	f7ff ffa7 	bl	801b36c <sbrk_aligned>
 801b41e:	3001      	adds	r0, #1
 801b420:	d037      	beq.n	801b492 <_malloc_r+0xe6>
 801b422:	6823      	ldr	r3, [r4, #0]
 801b424:	442b      	add	r3, r5
 801b426:	6023      	str	r3, [r4, #0]
 801b428:	f8d8 3000 	ldr.w	r3, [r8]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d038      	beq.n	801b4a2 <_malloc_r+0xf6>
 801b430:	685a      	ldr	r2, [r3, #4]
 801b432:	42a2      	cmp	r2, r4
 801b434:	d12b      	bne.n	801b48e <_malloc_r+0xe2>
 801b436:	2200      	movs	r2, #0
 801b438:	605a      	str	r2, [r3, #4]
 801b43a:	e00f      	b.n	801b45c <_malloc_r+0xb0>
 801b43c:	6822      	ldr	r2, [r4, #0]
 801b43e:	1b52      	subs	r2, r2, r5
 801b440:	d41f      	bmi.n	801b482 <_malloc_r+0xd6>
 801b442:	2a0b      	cmp	r2, #11
 801b444:	d917      	bls.n	801b476 <_malloc_r+0xca>
 801b446:	1961      	adds	r1, r4, r5
 801b448:	42a3      	cmp	r3, r4
 801b44a:	6025      	str	r5, [r4, #0]
 801b44c:	bf18      	it	ne
 801b44e:	6059      	strne	r1, [r3, #4]
 801b450:	6863      	ldr	r3, [r4, #4]
 801b452:	bf08      	it	eq
 801b454:	f8c8 1000 	streq.w	r1, [r8]
 801b458:	5162      	str	r2, [r4, r5]
 801b45a:	604b      	str	r3, [r1, #4]
 801b45c:	f104 060b 	add.w	r6, r4, #11
 801b460:	4638      	mov	r0, r7
 801b462:	f000 f829 	bl	801b4b8 <__malloc_unlock>
 801b466:	1d23      	adds	r3, r4, #4
 801b468:	f026 0607 	bic.w	r6, r6, #7
 801b46c:	1af2      	subs	r2, r6, r3
 801b46e:	d0ae      	beq.n	801b3ce <_malloc_r+0x22>
 801b470:	1b9b      	subs	r3, r3, r6
 801b472:	50a3      	str	r3, [r4, r2]
 801b474:	e7ab      	b.n	801b3ce <_malloc_r+0x22>
 801b476:	42a3      	cmp	r3, r4
 801b478:	6862      	ldr	r2, [r4, #4]
 801b47a:	d1dd      	bne.n	801b438 <_malloc_r+0x8c>
 801b47c:	f8c8 2000 	str.w	r2, [r8]
 801b480:	e7ec      	b.n	801b45c <_malloc_r+0xb0>
 801b482:	4623      	mov	r3, r4
 801b484:	6864      	ldr	r4, [r4, #4]
 801b486:	e7ac      	b.n	801b3e2 <_malloc_r+0x36>
 801b488:	4634      	mov	r4, r6
 801b48a:	6876      	ldr	r6, [r6, #4]
 801b48c:	e7b4      	b.n	801b3f8 <_malloc_r+0x4c>
 801b48e:	4613      	mov	r3, r2
 801b490:	e7cc      	b.n	801b42c <_malloc_r+0x80>
 801b492:	230c      	movs	r3, #12
 801b494:	4638      	mov	r0, r7
 801b496:	603b      	str	r3, [r7, #0]
 801b498:	f000 f80e 	bl	801b4b8 <__malloc_unlock>
 801b49c:	e797      	b.n	801b3ce <_malloc_r+0x22>
 801b49e:	6025      	str	r5, [r4, #0]
 801b4a0:	e7dc      	b.n	801b45c <_malloc_r+0xb0>
 801b4a2:	605b      	str	r3, [r3, #4]
 801b4a4:	deff      	udf	#255	; 0xff
 801b4a6:	bf00      	nop
 801b4a8:	2000b138 	.word	0x2000b138

0801b4ac <__malloc_lock>:
 801b4ac:	4801      	ldr	r0, [pc, #4]	; (801b4b4 <__malloc_lock+0x8>)
 801b4ae:	f000 ba78 	b.w	801b9a2 <__retarget_lock_acquire_recursive>
 801b4b2:	bf00      	nop
 801b4b4:	2000b280 	.word	0x2000b280

0801b4b8 <__malloc_unlock>:
 801b4b8:	4801      	ldr	r0, [pc, #4]	; (801b4c0 <__malloc_unlock+0x8>)
 801b4ba:	f000 ba73 	b.w	801b9a4 <__retarget_lock_release_recursive>
 801b4be:	bf00      	nop
 801b4c0:	2000b280 	.word	0x2000b280

0801b4c4 <rand>:
 801b4c4:	4b16      	ldr	r3, [pc, #88]	; (801b520 <rand+0x5c>)
 801b4c6:	b510      	push	{r4, lr}
 801b4c8:	681c      	ldr	r4, [r3, #0]
 801b4ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b4cc:	b9b3      	cbnz	r3, 801b4fc <rand+0x38>
 801b4ce:	2018      	movs	r0, #24
 801b4d0:	f7ff ff44 	bl	801b35c <malloc>
 801b4d4:	4602      	mov	r2, r0
 801b4d6:	6320      	str	r0, [r4, #48]	; 0x30
 801b4d8:	b920      	cbnz	r0, 801b4e4 <rand+0x20>
 801b4da:	4b12      	ldr	r3, [pc, #72]	; (801b524 <rand+0x60>)
 801b4dc:	2152      	movs	r1, #82	; 0x52
 801b4de:	4812      	ldr	r0, [pc, #72]	; (801b528 <rand+0x64>)
 801b4e0:	f000 fa6e 	bl	801b9c0 <__assert_func>
 801b4e4:	4911      	ldr	r1, [pc, #68]	; (801b52c <rand+0x68>)
 801b4e6:	4b12      	ldr	r3, [pc, #72]	; (801b530 <rand+0x6c>)
 801b4e8:	e9c0 1300 	strd	r1, r3, [r0]
 801b4ec:	4b11      	ldr	r3, [pc, #68]	; (801b534 <rand+0x70>)
 801b4ee:	2100      	movs	r1, #0
 801b4f0:	6083      	str	r3, [r0, #8]
 801b4f2:	230b      	movs	r3, #11
 801b4f4:	8183      	strh	r3, [r0, #12]
 801b4f6:	2001      	movs	r0, #1
 801b4f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b4fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b4fe:	480e      	ldr	r0, [pc, #56]	; (801b538 <rand+0x74>)
 801b500:	690b      	ldr	r3, [r1, #16]
 801b502:	694c      	ldr	r4, [r1, #20]
 801b504:	4a0d      	ldr	r2, [pc, #52]	; (801b53c <rand+0x78>)
 801b506:	4358      	muls	r0, r3
 801b508:	fb02 0004 	mla	r0, r2, r4, r0
 801b50c:	fba3 3202 	umull	r3, r2, r3, r2
 801b510:	3301      	adds	r3, #1
 801b512:	eb40 0002 	adc.w	r0, r0, r2
 801b516:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b51a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b51e:	bd10      	pop	{r4, pc}
 801b520:	200000dc 	.word	0x200000dc
 801b524:	0801f876 	.word	0x0801f876
 801b528:	0801f88d 	.word	0x0801f88d
 801b52c:	abcd330e 	.word	0xabcd330e
 801b530:	e66d1234 	.word	0xe66d1234
 801b534:	0005deec 	.word	0x0005deec
 801b538:	5851f42d 	.word	0x5851f42d
 801b53c:	4c957f2d 	.word	0x4c957f2d

0801b540 <std>:
 801b540:	2300      	movs	r3, #0
 801b542:	b510      	push	{r4, lr}
 801b544:	4604      	mov	r4, r0
 801b546:	6083      	str	r3, [r0, #8]
 801b548:	8181      	strh	r1, [r0, #12]
 801b54a:	4619      	mov	r1, r3
 801b54c:	6643      	str	r3, [r0, #100]	; 0x64
 801b54e:	81c2      	strh	r2, [r0, #14]
 801b550:	2208      	movs	r2, #8
 801b552:	6183      	str	r3, [r0, #24]
 801b554:	e9c0 3300 	strd	r3, r3, [r0]
 801b558:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b55c:	305c      	adds	r0, #92	; 0x5c
 801b55e:	f000 f989 	bl	801b874 <memset>
 801b562:	4b0d      	ldr	r3, [pc, #52]	; (801b598 <std+0x58>)
 801b564:	6224      	str	r4, [r4, #32]
 801b566:	6263      	str	r3, [r4, #36]	; 0x24
 801b568:	4b0c      	ldr	r3, [pc, #48]	; (801b59c <std+0x5c>)
 801b56a:	62a3      	str	r3, [r4, #40]	; 0x28
 801b56c:	4b0c      	ldr	r3, [pc, #48]	; (801b5a0 <std+0x60>)
 801b56e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b570:	4b0c      	ldr	r3, [pc, #48]	; (801b5a4 <std+0x64>)
 801b572:	6323      	str	r3, [r4, #48]	; 0x30
 801b574:	4b0c      	ldr	r3, [pc, #48]	; (801b5a8 <std+0x68>)
 801b576:	429c      	cmp	r4, r3
 801b578:	d006      	beq.n	801b588 <std+0x48>
 801b57a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b57e:	4294      	cmp	r4, r2
 801b580:	d002      	beq.n	801b588 <std+0x48>
 801b582:	33d0      	adds	r3, #208	; 0xd0
 801b584:	429c      	cmp	r4, r3
 801b586:	d105      	bne.n	801b594 <std+0x54>
 801b588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b590:	f000 ba06 	b.w	801b9a0 <__retarget_lock_init_recursive>
 801b594:	bd10      	pop	{r4, pc}
 801b596:	bf00      	nop
 801b598:	0801b6e9 	.word	0x0801b6e9
 801b59c:	0801b70b 	.word	0x0801b70b
 801b5a0:	0801b743 	.word	0x0801b743
 801b5a4:	0801b767 	.word	0x0801b767
 801b5a8:	2000b140 	.word	0x2000b140

0801b5ac <stdio_exit_handler>:
 801b5ac:	4a02      	ldr	r2, [pc, #8]	; (801b5b8 <stdio_exit_handler+0xc>)
 801b5ae:	4903      	ldr	r1, [pc, #12]	; (801b5bc <stdio_exit_handler+0x10>)
 801b5b0:	4803      	ldr	r0, [pc, #12]	; (801b5c0 <stdio_exit_handler+0x14>)
 801b5b2:	f000 b869 	b.w	801b688 <_fwalk_sglue>
 801b5b6:	bf00      	nop
 801b5b8:	20000084 	.word	0x20000084
 801b5bc:	0801c3f9 	.word	0x0801c3f9
 801b5c0:	20000090 	.word	0x20000090

0801b5c4 <cleanup_stdio>:
 801b5c4:	6841      	ldr	r1, [r0, #4]
 801b5c6:	4b0c      	ldr	r3, [pc, #48]	; (801b5f8 <cleanup_stdio+0x34>)
 801b5c8:	4299      	cmp	r1, r3
 801b5ca:	b510      	push	{r4, lr}
 801b5cc:	4604      	mov	r4, r0
 801b5ce:	d001      	beq.n	801b5d4 <cleanup_stdio+0x10>
 801b5d0:	f000 ff12 	bl	801c3f8 <_fflush_r>
 801b5d4:	68a1      	ldr	r1, [r4, #8]
 801b5d6:	4b09      	ldr	r3, [pc, #36]	; (801b5fc <cleanup_stdio+0x38>)
 801b5d8:	4299      	cmp	r1, r3
 801b5da:	d002      	beq.n	801b5e2 <cleanup_stdio+0x1e>
 801b5dc:	4620      	mov	r0, r4
 801b5de:	f000 ff0b 	bl	801c3f8 <_fflush_r>
 801b5e2:	68e1      	ldr	r1, [r4, #12]
 801b5e4:	4b06      	ldr	r3, [pc, #24]	; (801b600 <cleanup_stdio+0x3c>)
 801b5e6:	4299      	cmp	r1, r3
 801b5e8:	d004      	beq.n	801b5f4 <cleanup_stdio+0x30>
 801b5ea:	4620      	mov	r0, r4
 801b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5f0:	f000 bf02 	b.w	801c3f8 <_fflush_r>
 801b5f4:	bd10      	pop	{r4, pc}
 801b5f6:	bf00      	nop
 801b5f8:	2000b140 	.word	0x2000b140
 801b5fc:	2000b1a8 	.word	0x2000b1a8
 801b600:	2000b210 	.word	0x2000b210

0801b604 <global_stdio_init.part.0>:
 801b604:	b510      	push	{r4, lr}
 801b606:	4b0b      	ldr	r3, [pc, #44]	; (801b634 <global_stdio_init.part.0+0x30>)
 801b608:	2104      	movs	r1, #4
 801b60a:	4c0b      	ldr	r4, [pc, #44]	; (801b638 <global_stdio_init.part.0+0x34>)
 801b60c:	4a0b      	ldr	r2, [pc, #44]	; (801b63c <global_stdio_init.part.0+0x38>)
 801b60e:	4620      	mov	r0, r4
 801b610:	601a      	str	r2, [r3, #0]
 801b612:	2200      	movs	r2, #0
 801b614:	f7ff ff94 	bl	801b540 <std>
 801b618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b61c:	2201      	movs	r2, #1
 801b61e:	2109      	movs	r1, #9
 801b620:	f7ff ff8e 	bl	801b540 <std>
 801b624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b628:	2202      	movs	r2, #2
 801b62a:	2112      	movs	r1, #18
 801b62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b630:	f7ff bf86 	b.w	801b540 <std>
 801b634:	2000b278 	.word	0x2000b278
 801b638:	2000b140 	.word	0x2000b140
 801b63c:	0801b5ad 	.word	0x0801b5ad

0801b640 <__sfp_lock_acquire>:
 801b640:	4801      	ldr	r0, [pc, #4]	; (801b648 <__sfp_lock_acquire+0x8>)
 801b642:	f000 b9ae 	b.w	801b9a2 <__retarget_lock_acquire_recursive>
 801b646:	bf00      	nop
 801b648:	2000b281 	.word	0x2000b281

0801b64c <__sfp_lock_release>:
 801b64c:	4801      	ldr	r0, [pc, #4]	; (801b654 <__sfp_lock_release+0x8>)
 801b64e:	f000 b9a9 	b.w	801b9a4 <__retarget_lock_release_recursive>
 801b652:	bf00      	nop
 801b654:	2000b281 	.word	0x2000b281

0801b658 <__sinit>:
 801b658:	b510      	push	{r4, lr}
 801b65a:	4604      	mov	r4, r0
 801b65c:	f7ff fff0 	bl	801b640 <__sfp_lock_acquire>
 801b660:	6a23      	ldr	r3, [r4, #32]
 801b662:	b11b      	cbz	r3, 801b66c <__sinit+0x14>
 801b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b668:	f7ff bff0 	b.w	801b64c <__sfp_lock_release>
 801b66c:	4b04      	ldr	r3, [pc, #16]	; (801b680 <__sinit+0x28>)
 801b66e:	6223      	str	r3, [r4, #32]
 801b670:	4b04      	ldr	r3, [pc, #16]	; (801b684 <__sinit+0x2c>)
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d1f5      	bne.n	801b664 <__sinit+0xc>
 801b678:	f7ff ffc4 	bl	801b604 <global_stdio_init.part.0>
 801b67c:	e7f2      	b.n	801b664 <__sinit+0xc>
 801b67e:	bf00      	nop
 801b680:	0801b5c5 	.word	0x0801b5c5
 801b684:	2000b278 	.word	0x2000b278

0801b688 <_fwalk_sglue>:
 801b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b68c:	4607      	mov	r7, r0
 801b68e:	4688      	mov	r8, r1
 801b690:	4614      	mov	r4, r2
 801b692:	2600      	movs	r6, #0
 801b694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b698:	f1b9 0901 	subs.w	r9, r9, #1
 801b69c:	d505      	bpl.n	801b6aa <_fwalk_sglue+0x22>
 801b69e:	6824      	ldr	r4, [r4, #0]
 801b6a0:	2c00      	cmp	r4, #0
 801b6a2:	d1f7      	bne.n	801b694 <_fwalk_sglue+0xc>
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6aa:	89ab      	ldrh	r3, [r5, #12]
 801b6ac:	2b01      	cmp	r3, #1
 801b6ae:	d907      	bls.n	801b6c0 <_fwalk_sglue+0x38>
 801b6b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6b4:	3301      	adds	r3, #1
 801b6b6:	d003      	beq.n	801b6c0 <_fwalk_sglue+0x38>
 801b6b8:	4629      	mov	r1, r5
 801b6ba:	4638      	mov	r0, r7
 801b6bc:	47c0      	blx	r8
 801b6be:	4306      	orrs	r6, r0
 801b6c0:	3568      	adds	r5, #104	; 0x68
 801b6c2:	e7e9      	b.n	801b698 <_fwalk_sglue+0x10>

0801b6c4 <iprintf>:
 801b6c4:	b40f      	push	{r0, r1, r2, r3}
 801b6c6:	b507      	push	{r0, r1, r2, lr}
 801b6c8:	4906      	ldr	r1, [pc, #24]	; (801b6e4 <iprintf+0x20>)
 801b6ca:	ab04      	add	r3, sp, #16
 801b6cc:	6808      	ldr	r0, [r1, #0]
 801b6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801b6d2:	6881      	ldr	r1, [r0, #8]
 801b6d4:	9301      	str	r3, [sp, #4]
 801b6d6:	f000 fb5f 	bl	801bd98 <_vfiprintf_r>
 801b6da:	b003      	add	sp, #12
 801b6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b6e0:	b004      	add	sp, #16
 801b6e2:	4770      	bx	lr
 801b6e4:	200000dc 	.word	0x200000dc

0801b6e8 <__sread>:
 801b6e8:	b510      	push	{r4, lr}
 801b6ea:	460c      	mov	r4, r1
 801b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6f0:	f000 f8fe 	bl	801b8f0 <_read_r>
 801b6f4:	2800      	cmp	r0, #0
 801b6f6:	bfab      	itete	ge
 801b6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b6fa:	89a3      	ldrhlt	r3, [r4, #12]
 801b6fc:	181b      	addge	r3, r3, r0
 801b6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b702:	bfac      	ite	ge
 801b704:	6563      	strge	r3, [r4, #84]	; 0x54
 801b706:	81a3      	strhlt	r3, [r4, #12]
 801b708:	bd10      	pop	{r4, pc}

0801b70a <__swrite>:
 801b70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b70e:	461f      	mov	r7, r3
 801b710:	898b      	ldrh	r3, [r1, #12]
 801b712:	4605      	mov	r5, r0
 801b714:	460c      	mov	r4, r1
 801b716:	05db      	lsls	r3, r3, #23
 801b718:	4616      	mov	r6, r2
 801b71a:	d505      	bpl.n	801b728 <__swrite+0x1e>
 801b71c:	2302      	movs	r3, #2
 801b71e:	2200      	movs	r2, #0
 801b720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b724:	f000 f8d2 	bl	801b8cc <_lseek_r>
 801b728:	89a3      	ldrh	r3, [r4, #12]
 801b72a:	4632      	mov	r2, r6
 801b72c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b730:	4628      	mov	r0, r5
 801b732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b736:	81a3      	strh	r3, [r4, #12]
 801b738:	463b      	mov	r3, r7
 801b73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b73e:	f000 b8f9 	b.w	801b934 <_write_r>

0801b742 <__sseek>:
 801b742:	b510      	push	{r4, lr}
 801b744:	460c      	mov	r4, r1
 801b746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b74a:	f000 f8bf 	bl	801b8cc <_lseek_r>
 801b74e:	1c43      	adds	r3, r0, #1
 801b750:	89a3      	ldrh	r3, [r4, #12]
 801b752:	bf15      	itete	ne
 801b754:	6560      	strne	r0, [r4, #84]	; 0x54
 801b756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b75e:	81a3      	strheq	r3, [r4, #12]
 801b760:	bf18      	it	ne
 801b762:	81a3      	strhne	r3, [r4, #12]
 801b764:	bd10      	pop	{r4, pc}

0801b766 <__sclose>:
 801b766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b76a:	f000 b89f 	b.w	801b8ac <_close_r>

0801b76e <_vsniprintf_r>:
 801b76e:	b530      	push	{r4, r5, lr}
 801b770:	4614      	mov	r4, r2
 801b772:	b09b      	sub	sp, #108	; 0x6c
 801b774:	4605      	mov	r5, r0
 801b776:	461a      	mov	r2, r3
 801b778:	2c00      	cmp	r4, #0
 801b77a:	da05      	bge.n	801b788 <_vsniprintf_r+0x1a>
 801b77c:	238b      	movs	r3, #139	; 0x8b
 801b77e:	6003      	str	r3, [r0, #0]
 801b780:	f04f 30ff 	mov.w	r0, #4294967295
 801b784:	b01b      	add	sp, #108	; 0x6c
 801b786:	bd30      	pop	{r4, r5, pc}
 801b788:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b78c:	9100      	str	r1, [sp, #0]
 801b78e:	9104      	str	r1, [sp, #16]
 801b790:	4669      	mov	r1, sp
 801b792:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b796:	bf14      	ite	ne
 801b798:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b79c:	4623      	moveq	r3, r4
 801b79e:	9302      	str	r3, [sp, #8]
 801b7a0:	9305      	str	r3, [sp, #20]
 801b7a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b7aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b7ac:	f000 f9cc 	bl	801bb48 <_svfiprintf_r>
 801b7b0:	1c43      	adds	r3, r0, #1
 801b7b2:	bfbc      	itt	lt
 801b7b4:	238b      	movlt	r3, #139	; 0x8b
 801b7b6:	602b      	strlt	r3, [r5, #0]
 801b7b8:	2c00      	cmp	r4, #0
 801b7ba:	d0e3      	beq.n	801b784 <_vsniprintf_r+0x16>
 801b7bc:	9b00      	ldr	r3, [sp, #0]
 801b7be:	2200      	movs	r2, #0
 801b7c0:	701a      	strb	r2, [r3, #0]
 801b7c2:	e7df      	b.n	801b784 <_vsniprintf_r+0x16>

0801b7c4 <vsniprintf>:
 801b7c4:	b507      	push	{r0, r1, r2, lr}
 801b7c6:	9300      	str	r3, [sp, #0]
 801b7c8:	4613      	mov	r3, r2
 801b7ca:	460a      	mov	r2, r1
 801b7cc:	4601      	mov	r1, r0
 801b7ce:	4803      	ldr	r0, [pc, #12]	; (801b7dc <vsniprintf+0x18>)
 801b7d0:	6800      	ldr	r0, [r0, #0]
 801b7d2:	f7ff ffcc 	bl	801b76e <_vsniprintf_r>
 801b7d6:	b003      	add	sp, #12
 801b7d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b7dc:	200000dc 	.word	0x200000dc

0801b7e0 <_vsiprintf_r>:
 801b7e0:	b500      	push	{lr}
 801b7e2:	b09b      	sub	sp, #108	; 0x6c
 801b7e4:	9100      	str	r1, [sp, #0]
 801b7e6:	9104      	str	r1, [sp, #16]
 801b7e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b7ec:	9105      	str	r1, [sp, #20]
 801b7ee:	9102      	str	r1, [sp, #8]
 801b7f0:	4905      	ldr	r1, [pc, #20]	; (801b808 <_vsiprintf_r+0x28>)
 801b7f2:	9103      	str	r1, [sp, #12]
 801b7f4:	4669      	mov	r1, sp
 801b7f6:	f000 f9a7 	bl	801bb48 <_svfiprintf_r>
 801b7fa:	9b00      	ldr	r3, [sp, #0]
 801b7fc:	2200      	movs	r2, #0
 801b7fe:	701a      	strb	r2, [r3, #0]
 801b800:	b01b      	add	sp, #108	; 0x6c
 801b802:	f85d fb04 	ldr.w	pc, [sp], #4
 801b806:	bf00      	nop
 801b808:	ffff0208 	.word	0xffff0208

0801b80c <vsiprintf>:
 801b80c:	4613      	mov	r3, r2
 801b80e:	460a      	mov	r2, r1
 801b810:	4601      	mov	r1, r0
 801b812:	4802      	ldr	r0, [pc, #8]	; (801b81c <vsiprintf+0x10>)
 801b814:	6800      	ldr	r0, [r0, #0]
 801b816:	f7ff bfe3 	b.w	801b7e0 <_vsiprintf_r>
 801b81a:	bf00      	nop
 801b81c:	200000dc 	.word	0x200000dc

0801b820 <memcmp>:
 801b820:	3901      	subs	r1, #1
 801b822:	4402      	add	r2, r0
 801b824:	b510      	push	{r4, lr}
 801b826:	4290      	cmp	r0, r2
 801b828:	d101      	bne.n	801b82e <memcmp+0xe>
 801b82a:	2000      	movs	r0, #0
 801b82c:	e005      	b.n	801b83a <memcmp+0x1a>
 801b82e:	7803      	ldrb	r3, [r0, #0]
 801b830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b834:	42a3      	cmp	r3, r4
 801b836:	d001      	beq.n	801b83c <memcmp+0x1c>
 801b838:	1b18      	subs	r0, r3, r4
 801b83a:	bd10      	pop	{r4, pc}
 801b83c:	3001      	adds	r0, #1
 801b83e:	e7f2      	b.n	801b826 <memcmp+0x6>

0801b840 <memmove>:
 801b840:	4288      	cmp	r0, r1
 801b842:	b510      	push	{r4, lr}
 801b844:	eb01 0402 	add.w	r4, r1, r2
 801b848:	d902      	bls.n	801b850 <memmove+0x10>
 801b84a:	4284      	cmp	r4, r0
 801b84c:	4623      	mov	r3, r4
 801b84e:	d807      	bhi.n	801b860 <memmove+0x20>
 801b850:	1e43      	subs	r3, r0, #1
 801b852:	42a1      	cmp	r1, r4
 801b854:	d008      	beq.n	801b868 <memmove+0x28>
 801b856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b85a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b85e:	e7f8      	b.n	801b852 <memmove+0x12>
 801b860:	4402      	add	r2, r0
 801b862:	4601      	mov	r1, r0
 801b864:	428a      	cmp	r2, r1
 801b866:	d100      	bne.n	801b86a <memmove+0x2a>
 801b868:	bd10      	pop	{r4, pc}
 801b86a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b86e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b872:	e7f7      	b.n	801b864 <memmove+0x24>

0801b874 <memset>:
 801b874:	4402      	add	r2, r0
 801b876:	4603      	mov	r3, r0
 801b878:	4293      	cmp	r3, r2
 801b87a:	d100      	bne.n	801b87e <memset+0xa>
 801b87c:	4770      	bx	lr
 801b87e:	f803 1b01 	strb.w	r1, [r3], #1
 801b882:	e7f9      	b.n	801b878 <memset+0x4>

0801b884 <strncpy>:
 801b884:	3901      	subs	r1, #1
 801b886:	4603      	mov	r3, r0
 801b888:	b510      	push	{r4, lr}
 801b88a:	b132      	cbz	r2, 801b89a <strncpy+0x16>
 801b88c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b890:	3a01      	subs	r2, #1
 801b892:	f803 4b01 	strb.w	r4, [r3], #1
 801b896:	2c00      	cmp	r4, #0
 801b898:	d1f7      	bne.n	801b88a <strncpy+0x6>
 801b89a:	441a      	add	r2, r3
 801b89c:	2100      	movs	r1, #0
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	d100      	bne.n	801b8a4 <strncpy+0x20>
 801b8a2:	bd10      	pop	{r4, pc}
 801b8a4:	f803 1b01 	strb.w	r1, [r3], #1
 801b8a8:	e7f9      	b.n	801b89e <strncpy+0x1a>
	...

0801b8ac <_close_r>:
 801b8ac:	b538      	push	{r3, r4, r5, lr}
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	4d05      	ldr	r5, [pc, #20]	; (801b8c8 <_close_r+0x1c>)
 801b8b2:	4604      	mov	r4, r0
 801b8b4:	4608      	mov	r0, r1
 801b8b6:	602b      	str	r3, [r5, #0]
 801b8b8:	f7e5 fbcb 	bl	8001052 <_close>
 801b8bc:	1c43      	adds	r3, r0, #1
 801b8be:	d102      	bne.n	801b8c6 <_close_r+0x1a>
 801b8c0:	682b      	ldr	r3, [r5, #0]
 801b8c2:	b103      	cbz	r3, 801b8c6 <_close_r+0x1a>
 801b8c4:	6023      	str	r3, [r4, #0]
 801b8c6:	bd38      	pop	{r3, r4, r5, pc}
 801b8c8:	2000b27c 	.word	0x2000b27c

0801b8cc <_lseek_r>:
 801b8cc:	b538      	push	{r3, r4, r5, lr}
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	4d06      	ldr	r5, [pc, #24]	; (801b8ec <_lseek_r+0x20>)
 801b8d2:	4608      	mov	r0, r1
 801b8d4:	4611      	mov	r1, r2
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	602a      	str	r2, [r5, #0]
 801b8da:	461a      	mov	r2, r3
 801b8dc:	f7e5 fbe0 	bl	80010a0 <_lseek>
 801b8e0:	1c43      	adds	r3, r0, #1
 801b8e2:	d102      	bne.n	801b8ea <_lseek_r+0x1e>
 801b8e4:	682b      	ldr	r3, [r5, #0]
 801b8e6:	b103      	cbz	r3, 801b8ea <_lseek_r+0x1e>
 801b8e8:	6023      	str	r3, [r4, #0]
 801b8ea:	bd38      	pop	{r3, r4, r5, pc}
 801b8ec:	2000b27c 	.word	0x2000b27c

0801b8f0 <_read_r>:
 801b8f0:	b538      	push	{r3, r4, r5, lr}
 801b8f2:	4604      	mov	r4, r0
 801b8f4:	4d06      	ldr	r5, [pc, #24]	; (801b910 <_read_r+0x20>)
 801b8f6:	4608      	mov	r0, r1
 801b8f8:	4611      	mov	r1, r2
 801b8fa:	2200      	movs	r2, #0
 801b8fc:	602a      	str	r2, [r5, #0]
 801b8fe:	461a      	mov	r2, r3
 801b900:	f7e5 fb6e 	bl	8000fe0 <_read>
 801b904:	1c43      	adds	r3, r0, #1
 801b906:	d102      	bne.n	801b90e <_read_r+0x1e>
 801b908:	682b      	ldr	r3, [r5, #0]
 801b90a:	b103      	cbz	r3, 801b90e <_read_r+0x1e>
 801b90c:	6023      	str	r3, [r4, #0]
 801b90e:	bd38      	pop	{r3, r4, r5, pc}
 801b910:	2000b27c 	.word	0x2000b27c

0801b914 <_sbrk_r>:
 801b914:	b538      	push	{r3, r4, r5, lr}
 801b916:	2300      	movs	r3, #0
 801b918:	4d05      	ldr	r5, [pc, #20]	; (801b930 <_sbrk_r+0x1c>)
 801b91a:	4604      	mov	r4, r0
 801b91c:	4608      	mov	r0, r1
 801b91e:	602b      	str	r3, [r5, #0]
 801b920:	f7e5 fbcc 	bl	80010bc <_sbrk>
 801b924:	1c43      	adds	r3, r0, #1
 801b926:	d102      	bne.n	801b92e <_sbrk_r+0x1a>
 801b928:	682b      	ldr	r3, [r5, #0]
 801b92a:	b103      	cbz	r3, 801b92e <_sbrk_r+0x1a>
 801b92c:	6023      	str	r3, [r4, #0]
 801b92e:	bd38      	pop	{r3, r4, r5, pc}
 801b930:	2000b27c 	.word	0x2000b27c

0801b934 <_write_r>:
 801b934:	b538      	push	{r3, r4, r5, lr}
 801b936:	4604      	mov	r4, r0
 801b938:	4d06      	ldr	r5, [pc, #24]	; (801b954 <_write_r+0x20>)
 801b93a:	4608      	mov	r0, r1
 801b93c:	4611      	mov	r1, r2
 801b93e:	2200      	movs	r2, #0
 801b940:	602a      	str	r2, [r5, #0]
 801b942:	461a      	mov	r2, r3
 801b944:	f7e5 fb69 	bl	800101a <_write>
 801b948:	1c43      	adds	r3, r0, #1
 801b94a:	d102      	bne.n	801b952 <_write_r+0x1e>
 801b94c:	682b      	ldr	r3, [r5, #0]
 801b94e:	b103      	cbz	r3, 801b952 <_write_r+0x1e>
 801b950:	6023      	str	r3, [r4, #0]
 801b952:	bd38      	pop	{r3, r4, r5, pc}
 801b954:	2000b27c 	.word	0x2000b27c

0801b958 <__libc_init_array>:
 801b958:	b570      	push	{r4, r5, r6, lr}
 801b95a:	4d0d      	ldr	r5, [pc, #52]	; (801b990 <__libc_init_array+0x38>)
 801b95c:	2600      	movs	r6, #0
 801b95e:	4c0d      	ldr	r4, [pc, #52]	; (801b994 <__libc_init_array+0x3c>)
 801b960:	1b64      	subs	r4, r4, r5
 801b962:	10a4      	asrs	r4, r4, #2
 801b964:	42a6      	cmp	r6, r4
 801b966:	d109      	bne.n	801b97c <__libc_init_array+0x24>
 801b968:	4d0b      	ldr	r5, [pc, #44]	; (801b998 <__libc_init_array+0x40>)
 801b96a:	2600      	movs	r6, #0
 801b96c:	4c0b      	ldr	r4, [pc, #44]	; (801b99c <__libc_init_array+0x44>)
 801b96e:	f000 ff27 	bl	801c7c0 <_init>
 801b972:	1b64      	subs	r4, r4, r5
 801b974:	10a4      	asrs	r4, r4, #2
 801b976:	42a6      	cmp	r6, r4
 801b978:	d105      	bne.n	801b986 <__libc_init_array+0x2e>
 801b97a:	bd70      	pop	{r4, r5, r6, pc}
 801b97c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b980:	3601      	adds	r6, #1
 801b982:	4798      	blx	r3
 801b984:	e7ee      	b.n	801b964 <__libc_init_array+0xc>
 801b986:	f855 3b04 	ldr.w	r3, [r5], #4
 801b98a:	3601      	adds	r6, #1
 801b98c:	4798      	blx	r3
 801b98e:	e7f2      	b.n	801b976 <__libc_init_array+0x1e>
 801b990:	0801f95c 	.word	0x0801f95c
 801b994:	0801f95c 	.word	0x0801f95c
 801b998:	0801f95c 	.word	0x0801f95c
 801b99c:	0801f960 	.word	0x0801f960

0801b9a0 <__retarget_lock_init_recursive>:
 801b9a0:	4770      	bx	lr

0801b9a2 <__retarget_lock_acquire_recursive>:
 801b9a2:	4770      	bx	lr

0801b9a4 <__retarget_lock_release_recursive>:
 801b9a4:	4770      	bx	lr

0801b9a6 <memcpy>:
 801b9a6:	440a      	add	r2, r1
 801b9a8:	1e43      	subs	r3, r0, #1
 801b9aa:	4291      	cmp	r1, r2
 801b9ac:	d100      	bne.n	801b9b0 <memcpy+0xa>
 801b9ae:	4770      	bx	lr
 801b9b0:	b510      	push	{r4, lr}
 801b9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b9b6:	4291      	cmp	r1, r2
 801b9b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b9bc:	d1f9      	bne.n	801b9b2 <memcpy+0xc>
 801b9be:	bd10      	pop	{r4, pc}

0801b9c0 <__assert_func>:
 801b9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b9c2:	4614      	mov	r4, r2
 801b9c4:	461a      	mov	r2, r3
 801b9c6:	4b09      	ldr	r3, [pc, #36]	; (801b9ec <__assert_func+0x2c>)
 801b9c8:	4605      	mov	r5, r0
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	68d8      	ldr	r0, [r3, #12]
 801b9ce:	b14c      	cbz	r4, 801b9e4 <__assert_func+0x24>
 801b9d0:	4b07      	ldr	r3, [pc, #28]	; (801b9f0 <__assert_func+0x30>)
 801b9d2:	9100      	str	r1, [sp, #0]
 801b9d4:	4907      	ldr	r1, [pc, #28]	; (801b9f4 <__assert_func+0x34>)
 801b9d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b9da:	462b      	mov	r3, r5
 801b9dc:	f000 fd34 	bl	801c448 <fiprintf>
 801b9e0:	f000 fde8 	bl	801c5b4 <abort>
 801b9e4:	4b04      	ldr	r3, [pc, #16]	; (801b9f8 <__assert_func+0x38>)
 801b9e6:	461c      	mov	r4, r3
 801b9e8:	e7f3      	b.n	801b9d2 <__assert_func+0x12>
 801b9ea:	bf00      	nop
 801b9ec:	200000dc 	.word	0x200000dc
 801b9f0:	0801f8e5 	.word	0x0801f8e5
 801b9f4:	0801f8f2 	.word	0x0801f8f2
 801b9f8:	0801f920 	.word	0x0801f920

0801b9fc <_free_r>:
 801b9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9fe:	2900      	cmp	r1, #0
 801ba00:	d043      	beq.n	801ba8a <_free_r+0x8e>
 801ba02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba06:	1f0c      	subs	r4, r1, #4
 801ba08:	9001      	str	r0, [sp, #4]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	bfb8      	it	lt
 801ba0e:	18e4      	addlt	r4, r4, r3
 801ba10:	f7ff fd4c 	bl	801b4ac <__malloc_lock>
 801ba14:	4a1e      	ldr	r2, [pc, #120]	; (801ba90 <_free_r+0x94>)
 801ba16:	9801      	ldr	r0, [sp, #4]
 801ba18:	6813      	ldr	r3, [r2, #0]
 801ba1a:	b933      	cbnz	r3, 801ba2a <_free_r+0x2e>
 801ba1c:	6063      	str	r3, [r4, #4]
 801ba1e:	6014      	str	r4, [r2, #0]
 801ba20:	b003      	add	sp, #12
 801ba22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba26:	f7ff bd47 	b.w	801b4b8 <__malloc_unlock>
 801ba2a:	42a3      	cmp	r3, r4
 801ba2c:	d908      	bls.n	801ba40 <_free_r+0x44>
 801ba2e:	6825      	ldr	r5, [r4, #0]
 801ba30:	1961      	adds	r1, r4, r5
 801ba32:	428b      	cmp	r3, r1
 801ba34:	bf01      	itttt	eq
 801ba36:	6819      	ldreq	r1, [r3, #0]
 801ba38:	685b      	ldreq	r3, [r3, #4]
 801ba3a:	1949      	addeq	r1, r1, r5
 801ba3c:	6021      	streq	r1, [r4, #0]
 801ba3e:	e7ed      	b.n	801ba1c <_free_r+0x20>
 801ba40:	461a      	mov	r2, r3
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	b10b      	cbz	r3, 801ba4a <_free_r+0x4e>
 801ba46:	42a3      	cmp	r3, r4
 801ba48:	d9fa      	bls.n	801ba40 <_free_r+0x44>
 801ba4a:	6811      	ldr	r1, [r2, #0]
 801ba4c:	1855      	adds	r5, r2, r1
 801ba4e:	42a5      	cmp	r5, r4
 801ba50:	d10b      	bne.n	801ba6a <_free_r+0x6e>
 801ba52:	6824      	ldr	r4, [r4, #0]
 801ba54:	4421      	add	r1, r4
 801ba56:	1854      	adds	r4, r2, r1
 801ba58:	6011      	str	r1, [r2, #0]
 801ba5a:	42a3      	cmp	r3, r4
 801ba5c:	d1e0      	bne.n	801ba20 <_free_r+0x24>
 801ba5e:	681c      	ldr	r4, [r3, #0]
 801ba60:	685b      	ldr	r3, [r3, #4]
 801ba62:	440c      	add	r4, r1
 801ba64:	6053      	str	r3, [r2, #4]
 801ba66:	6014      	str	r4, [r2, #0]
 801ba68:	e7da      	b.n	801ba20 <_free_r+0x24>
 801ba6a:	d902      	bls.n	801ba72 <_free_r+0x76>
 801ba6c:	230c      	movs	r3, #12
 801ba6e:	6003      	str	r3, [r0, #0]
 801ba70:	e7d6      	b.n	801ba20 <_free_r+0x24>
 801ba72:	6825      	ldr	r5, [r4, #0]
 801ba74:	1961      	adds	r1, r4, r5
 801ba76:	428b      	cmp	r3, r1
 801ba78:	bf02      	ittt	eq
 801ba7a:	6819      	ldreq	r1, [r3, #0]
 801ba7c:	685b      	ldreq	r3, [r3, #4]
 801ba7e:	1949      	addeq	r1, r1, r5
 801ba80:	6063      	str	r3, [r4, #4]
 801ba82:	bf08      	it	eq
 801ba84:	6021      	streq	r1, [r4, #0]
 801ba86:	6054      	str	r4, [r2, #4]
 801ba88:	e7ca      	b.n	801ba20 <_free_r+0x24>
 801ba8a:	b003      	add	sp, #12
 801ba8c:	bd30      	pop	{r4, r5, pc}
 801ba8e:	bf00      	nop
 801ba90:	2000b138 	.word	0x2000b138

0801ba94 <__ssputs_r>:
 801ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba98:	461f      	mov	r7, r3
 801ba9a:	688e      	ldr	r6, [r1, #8]
 801ba9c:	4682      	mov	sl, r0
 801ba9e:	460c      	mov	r4, r1
 801baa0:	42be      	cmp	r6, r7
 801baa2:	4690      	mov	r8, r2
 801baa4:	680b      	ldr	r3, [r1, #0]
 801baa6:	d82c      	bhi.n	801bb02 <__ssputs_r+0x6e>
 801baa8:	898a      	ldrh	r2, [r1, #12]
 801baaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801baae:	d026      	beq.n	801bafe <__ssputs_r+0x6a>
 801bab0:	6965      	ldr	r5, [r4, #20]
 801bab2:	6909      	ldr	r1, [r1, #16]
 801bab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bab8:	eba3 0901 	sub.w	r9, r3, r1
 801babc:	1c7b      	adds	r3, r7, #1
 801babe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bac2:	444b      	add	r3, r9
 801bac4:	106d      	asrs	r5, r5, #1
 801bac6:	429d      	cmp	r5, r3
 801bac8:	bf38      	it	cc
 801baca:	461d      	movcc	r5, r3
 801bacc:	0553      	lsls	r3, r2, #21
 801bace:	d527      	bpl.n	801bb20 <__ssputs_r+0x8c>
 801bad0:	4629      	mov	r1, r5
 801bad2:	f7ff fc6b 	bl	801b3ac <_malloc_r>
 801bad6:	4606      	mov	r6, r0
 801bad8:	b360      	cbz	r0, 801bb34 <__ssputs_r+0xa0>
 801bada:	464a      	mov	r2, r9
 801badc:	6921      	ldr	r1, [r4, #16]
 801bade:	f7ff ff62 	bl	801b9a6 <memcpy>
 801bae2:	89a3      	ldrh	r3, [r4, #12]
 801bae4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801baec:	81a3      	strh	r3, [r4, #12]
 801baee:	6126      	str	r6, [r4, #16]
 801baf0:	444e      	add	r6, r9
 801baf2:	6165      	str	r5, [r4, #20]
 801baf4:	eba5 0509 	sub.w	r5, r5, r9
 801baf8:	6026      	str	r6, [r4, #0]
 801bafa:	463e      	mov	r6, r7
 801bafc:	60a5      	str	r5, [r4, #8]
 801bafe:	42be      	cmp	r6, r7
 801bb00:	d900      	bls.n	801bb04 <__ssputs_r+0x70>
 801bb02:	463e      	mov	r6, r7
 801bb04:	4632      	mov	r2, r6
 801bb06:	4641      	mov	r1, r8
 801bb08:	6820      	ldr	r0, [r4, #0]
 801bb0a:	f7ff fe99 	bl	801b840 <memmove>
 801bb0e:	68a3      	ldr	r3, [r4, #8]
 801bb10:	2000      	movs	r0, #0
 801bb12:	1b9b      	subs	r3, r3, r6
 801bb14:	60a3      	str	r3, [r4, #8]
 801bb16:	6823      	ldr	r3, [r4, #0]
 801bb18:	4433      	add	r3, r6
 801bb1a:	6023      	str	r3, [r4, #0]
 801bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb20:	462a      	mov	r2, r5
 801bb22:	f000 fd4e 	bl	801c5c2 <_realloc_r>
 801bb26:	4606      	mov	r6, r0
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	d1e0      	bne.n	801baee <__ssputs_r+0x5a>
 801bb2c:	6921      	ldr	r1, [r4, #16]
 801bb2e:	4650      	mov	r0, sl
 801bb30:	f7ff ff64 	bl	801b9fc <_free_r>
 801bb34:	230c      	movs	r3, #12
 801bb36:	f04f 30ff 	mov.w	r0, #4294967295
 801bb3a:	f8ca 3000 	str.w	r3, [sl]
 801bb3e:	89a3      	ldrh	r3, [r4, #12]
 801bb40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb44:	81a3      	strh	r3, [r4, #12]
 801bb46:	e7e9      	b.n	801bb1c <__ssputs_r+0x88>

0801bb48 <_svfiprintf_r>:
 801bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb4c:	4698      	mov	r8, r3
 801bb4e:	898b      	ldrh	r3, [r1, #12]
 801bb50:	b09d      	sub	sp, #116	; 0x74
 801bb52:	4607      	mov	r7, r0
 801bb54:	061b      	lsls	r3, r3, #24
 801bb56:	460d      	mov	r5, r1
 801bb58:	4614      	mov	r4, r2
 801bb5a:	d50e      	bpl.n	801bb7a <_svfiprintf_r+0x32>
 801bb5c:	690b      	ldr	r3, [r1, #16]
 801bb5e:	b963      	cbnz	r3, 801bb7a <_svfiprintf_r+0x32>
 801bb60:	2140      	movs	r1, #64	; 0x40
 801bb62:	f7ff fc23 	bl	801b3ac <_malloc_r>
 801bb66:	6028      	str	r0, [r5, #0]
 801bb68:	6128      	str	r0, [r5, #16]
 801bb6a:	b920      	cbnz	r0, 801bb76 <_svfiprintf_r+0x2e>
 801bb6c:	230c      	movs	r3, #12
 801bb6e:	603b      	str	r3, [r7, #0]
 801bb70:	f04f 30ff 	mov.w	r0, #4294967295
 801bb74:	e0d0      	b.n	801bd18 <_svfiprintf_r+0x1d0>
 801bb76:	2340      	movs	r3, #64	; 0x40
 801bb78:	616b      	str	r3, [r5, #20]
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb80:	f04f 0901 	mov.w	r9, #1
 801bb84:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bd30 <_svfiprintf_r+0x1e8>
 801bb88:	9309      	str	r3, [sp, #36]	; 0x24
 801bb8a:	2320      	movs	r3, #32
 801bb8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bb90:	2330      	movs	r3, #48	; 0x30
 801bb92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bb96:	4623      	mov	r3, r4
 801bb98:	469a      	mov	sl, r3
 801bb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb9e:	b10a      	cbz	r2, 801bba4 <_svfiprintf_r+0x5c>
 801bba0:	2a25      	cmp	r2, #37	; 0x25
 801bba2:	d1f9      	bne.n	801bb98 <_svfiprintf_r+0x50>
 801bba4:	ebba 0b04 	subs.w	fp, sl, r4
 801bba8:	d00b      	beq.n	801bbc2 <_svfiprintf_r+0x7a>
 801bbaa:	465b      	mov	r3, fp
 801bbac:	4622      	mov	r2, r4
 801bbae:	4629      	mov	r1, r5
 801bbb0:	4638      	mov	r0, r7
 801bbb2:	f7ff ff6f 	bl	801ba94 <__ssputs_r>
 801bbb6:	3001      	adds	r0, #1
 801bbb8:	f000 80a9 	beq.w	801bd0e <_svfiprintf_r+0x1c6>
 801bbbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbbe:	445a      	add	r2, fp
 801bbc0:	9209      	str	r2, [sp, #36]	; 0x24
 801bbc2:	f89a 3000 	ldrb.w	r3, [sl]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	f000 80a1 	beq.w	801bd0e <_svfiprintf_r+0x1c6>
 801bbcc:	2300      	movs	r3, #0
 801bbce:	f04f 32ff 	mov.w	r2, #4294967295
 801bbd2:	f10a 0a01 	add.w	sl, sl, #1
 801bbd6:	9304      	str	r3, [sp, #16]
 801bbd8:	9307      	str	r3, [sp, #28]
 801bbda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bbde:	931a      	str	r3, [sp, #104]	; 0x68
 801bbe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbe4:	4654      	mov	r4, sl
 801bbe6:	2205      	movs	r2, #5
 801bbe8:	4851      	ldr	r0, [pc, #324]	; (801bd30 <_svfiprintf_r+0x1e8>)
 801bbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbee:	f000 fcd3 	bl	801c598 <memchr>
 801bbf2:	9a04      	ldr	r2, [sp, #16]
 801bbf4:	b9d8      	cbnz	r0, 801bc2e <_svfiprintf_r+0xe6>
 801bbf6:	06d0      	lsls	r0, r2, #27
 801bbf8:	bf44      	itt	mi
 801bbfa:	2320      	movmi	r3, #32
 801bbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc00:	0711      	lsls	r1, r2, #28
 801bc02:	bf44      	itt	mi
 801bc04:	232b      	movmi	r3, #43	; 0x2b
 801bc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 801bc0e:	2b2a      	cmp	r3, #42	; 0x2a
 801bc10:	d015      	beq.n	801bc3e <_svfiprintf_r+0xf6>
 801bc12:	9a07      	ldr	r2, [sp, #28]
 801bc14:	4654      	mov	r4, sl
 801bc16:	2000      	movs	r0, #0
 801bc18:	f04f 0c0a 	mov.w	ip, #10
 801bc1c:	4621      	mov	r1, r4
 801bc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc22:	3b30      	subs	r3, #48	; 0x30
 801bc24:	2b09      	cmp	r3, #9
 801bc26:	d94d      	bls.n	801bcc4 <_svfiprintf_r+0x17c>
 801bc28:	b1b0      	cbz	r0, 801bc58 <_svfiprintf_r+0x110>
 801bc2a:	9207      	str	r2, [sp, #28]
 801bc2c:	e014      	b.n	801bc58 <_svfiprintf_r+0x110>
 801bc2e:	eba0 0308 	sub.w	r3, r0, r8
 801bc32:	46a2      	mov	sl, r4
 801bc34:	fa09 f303 	lsl.w	r3, r9, r3
 801bc38:	4313      	orrs	r3, r2
 801bc3a:	9304      	str	r3, [sp, #16]
 801bc3c:	e7d2      	b.n	801bbe4 <_svfiprintf_r+0x9c>
 801bc3e:	9b03      	ldr	r3, [sp, #12]
 801bc40:	1d19      	adds	r1, r3, #4
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	9103      	str	r1, [sp, #12]
 801bc48:	bfbb      	ittet	lt
 801bc4a:	425b      	neglt	r3, r3
 801bc4c:	f042 0202 	orrlt.w	r2, r2, #2
 801bc50:	9307      	strge	r3, [sp, #28]
 801bc52:	9307      	strlt	r3, [sp, #28]
 801bc54:	bfb8      	it	lt
 801bc56:	9204      	strlt	r2, [sp, #16]
 801bc58:	7823      	ldrb	r3, [r4, #0]
 801bc5a:	2b2e      	cmp	r3, #46	; 0x2e
 801bc5c:	d10c      	bne.n	801bc78 <_svfiprintf_r+0x130>
 801bc5e:	7863      	ldrb	r3, [r4, #1]
 801bc60:	2b2a      	cmp	r3, #42	; 0x2a
 801bc62:	d134      	bne.n	801bcce <_svfiprintf_r+0x186>
 801bc64:	9b03      	ldr	r3, [sp, #12]
 801bc66:	3402      	adds	r4, #2
 801bc68:	1d1a      	adds	r2, r3, #4
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	9203      	str	r2, [sp, #12]
 801bc70:	bfb8      	it	lt
 801bc72:	f04f 33ff 	movlt.w	r3, #4294967295
 801bc76:	9305      	str	r3, [sp, #20]
 801bc78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801bd40 <_svfiprintf_r+0x1f8>
 801bc7c:	2203      	movs	r2, #3
 801bc7e:	7821      	ldrb	r1, [r4, #0]
 801bc80:	4650      	mov	r0, sl
 801bc82:	f000 fc89 	bl	801c598 <memchr>
 801bc86:	b138      	cbz	r0, 801bc98 <_svfiprintf_r+0x150>
 801bc88:	eba0 000a 	sub.w	r0, r0, sl
 801bc8c:	2240      	movs	r2, #64	; 0x40
 801bc8e:	9b04      	ldr	r3, [sp, #16]
 801bc90:	3401      	adds	r4, #1
 801bc92:	4082      	lsls	r2, r0
 801bc94:	4313      	orrs	r3, r2
 801bc96:	9304      	str	r3, [sp, #16]
 801bc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc9c:	2206      	movs	r2, #6
 801bc9e:	4825      	ldr	r0, [pc, #148]	; (801bd34 <_svfiprintf_r+0x1ec>)
 801bca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bca4:	f000 fc78 	bl	801c598 <memchr>
 801bca8:	2800      	cmp	r0, #0
 801bcaa:	d038      	beq.n	801bd1e <_svfiprintf_r+0x1d6>
 801bcac:	4b22      	ldr	r3, [pc, #136]	; (801bd38 <_svfiprintf_r+0x1f0>)
 801bcae:	bb1b      	cbnz	r3, 801bcf8 <_svfiprintf_r+0x1b0>
 801bcb0:	9b03      	ldr	r3, [sp, #12]
 801bcb2:	3307      	adds	r3, #7
 801bcb4:	f023 0307 	bic.w	r3, r3, #7
 801bcb8:	3308      	adds	r3, #8
 801bcba:	9303      	str	r3, [sp, #12]
 801bcbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcbe:	4433      	add	r3, r6
 801bcc0:	9309      	str	r3, [sp, #36]	; 0x24
 801bcc2:	e768      	b.n	801bb96 <_svfiprintf_r+0x4e>
 801bcc4:	fb0c 3202 	mla	r2, ip, r2, r3
 801bcc8:	460c      	mov	r4, r1
 801bcca:	2001      	movs	r0, #1
 801bccc:	e7a6      	b.n	801bc1c <_svfiprintf_r+0xd4>
 801bcce:	2300      	movs	r3, #0
 801bcd0:	3401      	adds	r4, #1
 801bcd2:	f04f 0c0a 	mov.w	ip, #10
 801bcd6:	4619      	mov	r1, r3
 801bcd8:	9305      	str	r3, [sp, #20]
 801bcda:	4620      	mov	r0, r4
 801bcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bce0:	3a30      	subs	r2, #48	; 0x30
 801bce2:	2a09      	cmp	r2, #9
 801bce4:	d903      	bls.n	801bcee <_svfiprintf_r+0x1a6>
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d0c6      	beq.n	801bc78 <_svfiprintf_r+0x130>
 801bcea:	9105      	str	r1, [sp, #20]
 801bcec:	e7c4      	b.n	801bc78 <_svfiprintf_r+0x130>
 801bcee:	fb0c 2101 	mla	r1, ip, r1, r2
 801bcf2:	4604      	mov	r4, r0
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	e7f0      	b.n	801bcda <_svfiprintf_r+0x192>
 801bcf8:	ab03      	add	r3, sp, #12
 801bcfa:	462a      	mov	r2, r5
 801bcfc:	a904      	add	r1, sp, #16
 801bcfe:	4638      	mov	r0, r7
 801bd00:	9300      	str	r3, [sp, #0]
 801bd02:	4b0e      	ldr	r3, [pc, #56]	; (801bd3c <_svfiprintf_r+0x1f4>)
 801bd04:	f3af 8000 	nop.w
 801bd08:	1c42      	adds	r2, r0, #1
 801bd0a:	4606      	mov	r6, r0
 801bd0c:	d1d6      	bne.n	801bcbc <_svfiprintf_r+0x174>
 801bd0e:	89ab      	ldrh	r3, [r5, #12]
 801bd10:	065b      	lsls	r3, r3, #25
 801bd12:	f53f af2d 	bmi.w	801bb70 <_svfiprintf_r+0x28>
 801bd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd18:	b01d      	add	sp, #116	; 0x74
 801bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd1e:	ab03      	add	r3, sp, #12
 801bd20:	462a      	mov	r2, r5
 801bd22:	a904      	add	r1, sp, #16
 801bd24:	4638      	mov	r0, r7
 801bd26:	9300      	str	r3, [sp, #0]
 801bd28:	4b04      	ldr	r3, [pc, #16]	; (801bd3c <_svfiprintf_r+0x1f4>)
 801bd2a:	f000 f9c1 	bl	801c0b0 <_printf_i>
 801bd2e:	e7eb      	b.n	801bd08 <_svfiprintf_r+0x1c0>
 801bd30:	0801f921 	.word	0x0801f921
 801bd34:	0801f92b 	.word	0x0801f92b
 801bd38:	00000000 	.word	0x00000000
 801bd3c:	0801ba95 	.word	0x0801ba95
 801bd40:	0801f927 	.word	0x0801f927

0801bd44 <__sfputc_r>:
 801bd44:	6893      	ldr	r3, [r2, #8]
 801bd46:	3b01      	subs	r3, #1
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	6093      	str	r3, [r2, #8]
 801bd4c:	b410      	push	{r4}
 801bd4e:	da08      	bge.n	801bd62 <__sfputc_r+0x1e>
 801bd50:	6994      	ldr	r4, [r2, #24]
 801bd52:	42a3      	cmp	r3, r4
 801bd54:	db01      	blt.n	801bd5a <__sfputc_r+0x16>
 801bd56:	290a      	cmp	r1, #10
 801bd58:	d103      	bne.n	801bd62 <__sfputc_r+0x1e>
 801bd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd5e:	f000 bb85 	b.w	801c46c <__swbuf_r>
 801bd62:	6813      	ldr	r3, [r2, #0]
 801bd64:	1c58      	adds	r0, r3, #1
 801bd66:	6010      	str	r0, [r2, #0]
 801bd68:	4608      	mov	r0, r1
 801bd6a:	7019      	strb	r1, [r3, #0]
 801bd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd70:	4770      	bx	lr

0801bd72 <__sfputs_r>:
 801bd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd74:	4606      	mov	r6, r0
 801bd76:	460f      	mov	r7, r1
 801bd78:	4614      	mov	r4, r2
 801bd7a:	18d5      	adds	r5, r2, r3
 801bd7c:	42ac      	cmp	r4, r5
 801bd7e:	d101      	bne.n	801bd84 <__sfputs_r+0x12>
 801bd80:	2000      	movs	r0, #0
 801bd82:	e007      	b.n	801bd94 <__sfputs_r+0x22>
 801bd84:	463a      	mov	r2, r7
 801bd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd8a:	4630      	mov	r0, r6
 801bd8c:	f7ff ffda 	bl	801bd44 <__sfputc_r>
 801bd90:	1c43      	adds	r3, r0, #1
 801bd92:	d1f3      	bne.n	801bd7c <__sfputs_r+0xa>
 801bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bd98 <_vfiprintf_r>:
 801bd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd9c:	460d      	mov	r5, r1
 801bd9e:	b09d      	sub	sp, #116	; 0x74
 801bda0:	4614      	mov	r4, r2
 801bda2:	4698      	mov	r8, r3
 801bda4:	4606      	mov	r6, r0
 801bda6:	b118      	cbz	r0, 801bdb0 <_vfiprintf_r+0x18>
 801bda8:	6a03      	ldr	r3, [r0, #32]
 801bdaa:	b90b      	cbnz	r3, 801bdb0 <_vfiprintf_r+0x18>
 801bdac:	f7ff fc54 	bl	801b658 <__sinit>
 801bdb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bdb2:	07d9      	lsls	r1, r3, #31
 801bdb4:	d405      	bmi.n	801bdc2 <_vfiprintf_r+0x2a>
 801bdb6:	89ab      	ldrh	r3, [r5, #12]
 801bdb8:	059a      	lsls	r2, r3, #22
 801bdba:	d402      	bmi.n	801bdc2 <_vfiprintf_r+0x2a>
 801bdbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bdbe:	f7ff fdf0 	bl	801b9a2 <__retarget_lock_acquire_recursive>
 801bdc2:	89ab      	ldrh	r3, [r5, #12]
 801bdc4:	071b      	lsls	r3, r3, #28
 801bdc6:	d501      	bpl.n	801bdcc <_vfiprintf_r+0x34>
 801bdc8:	692b      	ldr	r3, [r5, #16]
 801bdca:	b99b      	cbnz	r3, 801bdf4 <_vfiprintf_r+0x5c>
 801bdcc:	4629      	mov	r1, r5
 801bdce:	4630      	mov	r0, r6
 801bdd0:	f000 fb8a 	bl	801c4e8 <__swsetup_r>
 801bdd4:	b170      	cbz	r0, 801bdf4 <_vfiprintf_r+0x5c>
 801bdd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bdd8:	07dc      	lsls	r4, r3, #31
 801bdda:	d504      	bpl.n	801bde6 <_vfiprintf_r+0x4e>
 801bddc:	f04f 30ff 	mov.w	r0, #4294967295
 801bde0:	b01d      	add	sp, #116	; 0x74
 801bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bde6:	89ab      	ldrh	r3, [r5, #12]
 801bde8:	0598      	lsls	r0, r3, #22
 801bdea:	d4f7      	bmi.n	801bddc <_vfiprintf_r+0x44>
 801bdec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bdee:	f7ff fdd9 	bl	801b9a4 <__retarget_lock_release_recursive>
 801bdf2:	e7f3      	b.n	801bddc <_vfiprintf_r+0x44>
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	f8cd 800c 	str.w	r8, [sp, #12]
 801bdfa:	f04f 0901 	mov.w	r9, #1
 801bdfe:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801bfb8 <_vfiprintf_r+0x220>
 801be02:	9309      	str	r3, [sp, #36]	; 0x24
 801be04:	2320      	movs	r3, #32
 801be06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be0a:	2330      	movs	r3, #48	; 0x30
 801be0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be10:	4623      	mov	r3, r4
 801be12:	469a      	mov	sl, r3
 801be14:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be18:	b10a      	cbz	r2, 801be1e <_vfiprintf_r+0x86>
 801be1a:	2a25      	cmp	r2, #37	; 0x25
 801be1c:	d1f9      	bne.n	801be12 <_vfiprintf_r+0x7a>
 801be1e:	ebba 0b04 	subs.w	fp, sl, r4
 801be22:	d00b      	beq.n	801be3c <_vfiprintf_r+0xa4>
 801be24:	465b      	mov	r3, fp
 801be26:	4622      	mov	r2, r4
 801be28:	4629      	mov	r1, r5
 801be2a:	4630      	mov	r0, r6
 801be2c:	f7ff ffa1 	bl	801bd72 <__sfputs_r>
 801be30:	3001      	adds	r0, #1
 801be32:	f000 80a9 	beq.w	801bf88 <_vfiprintf_r+0x1f0>
 801be36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be38:	445a      	add	r2, fp
 801be3a:	9209      	str	r2, [sp, #36]	; 0x24
 801be3c:	f89a 3000 	ldrb.w	r3, [sl]
 801be40:	2b00      	cmp	r3, #0
 801be42:	f000 80a1 	beq.w	801bf88 <_vfiprintf_r+0x1f0>
 801be46:	2300      	movs	r3, #0
 801be48:	f04f 32ff 	mov.w	r2, #4294967295
 801be4c:	f10a 0a01 	add.w	sl, sl, #1
 801be50:	9304      	str	r3, [sp, #16]
 801be52:	9307      	str	r3, [sp, #28]
 801be54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801be58:	931a      	str	r3, [sp, #104]	; 0x68
 801be5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be5e:	4654      	mov	r4, sl
 801be60:	2205      	movs	r2, #5
 801be62:	4855      	ldr	r0, [pc, #340]	; (801bfb8 <_vfiprintf_r+0x220>)
 801be64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be68:	f000 fb96 	bl	801c598 <memchr>
 801be6c:	9a04      	ldr	r2, [sp, #16]
 801be6e:	b9d8      	cbnz	r0, 801bea8 <_vfiprintf_r+0x110>
 801be70:	06d1      	lsls	r1, r2, #27
 801be72:	bf44      	itt	mi
 801be74:	2320      	movmi	r3, #32
 801be76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801be7a:	0713      	lsls	r3, r2, #28
 801be7c:	bf44      	itt	mi
 801be7e:	232b      	movmi	r3, #43	; 0x2b
 801be80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801be84:	f89a 3000 	ldrb.w	r3, [sl]
 801be88:	2b2a      	cmp	r3, #42	; 0x2a
 801be8a:	d015      	beq.n	801beb8 <_vfiprintf_r+0x120>
 801be8c:	9a07      	ldr	r2, [sp, #28]
 801be8e:	4654      	mov	r4, sl
 801be90:	2000      	movs	r0, #0
 801be92:	f04f 0c0a 	mov.w	ip, #10
 801be96:	4621      	mov	r1, r4
 801be98:	f811 3b01 	ldrb.w	r3, [r1], #1
 801be9c:	3b30      	subs	r3, #48	; 0x30
 801be9e:	2b09      	cmp	r3, #9
 801bea0:	d94d      	bls.n	801bf3e <_vfiprintf_r+0x1a6>
 801bea2:	b1b0      	cbz	r0, 801bed2 <_vfiprintf_r+0x13a>
 801bea4:	9207      	str	r2, [sp, #28]
 801bea6:	e014      	b.n	801bed2 <_vfiprintf_r+0x13a>
 801bea8:	eba0 0308 	sub.w	r3, r0, r8
 801beac:	46a2      	mov	sl, r4
 801beae:	fa09 f303 	lsl.w	r3, r9, r3
 801beb2:	4313      	orrs	r3, r2
 801beb4:	9304      	str	r3, [sp, #16]
 801beb6:	e7d2      	b.n	801be5e <_vfiprintf_r+0xc6>
 801beb8:	9b03      	ldr	r3, [sp, #12]
 801beba:	1d19      	adds	r1, r3, #4
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	9103      	str	r1, [sp, #12]
 801bec2:	bfbb      	ittet	lt
 801bec4:	425b      	neglt	r3, r3
 801bec6:	f042 0202 	orrlt.w	r2, r2, #2
 801beca:	9307      	strge	r3, [sp, #28]
 801becc:	9307      	strlt	r3, [sp, #28]
 801bece:	bfb8      	it	lt
 801bed0:	9204      	strlt	r2, [sp, #16]
 801bed2:	7823      	ldrb	r3, [r4, #0]
 801bed4:	2b2e      	cmp	r3, #46	; 0x2e
 801bed6:	d10c      	bne.n	801bef2 <_vfiprintf_r+0x15a>
 801bed8:	7863      	ldrb	r3, [r4, #1]
 801beda:	2b2a      	cmp	r3, #42	; 0x2a
 801bedc:	d134      	bne.n	801bf48 <_vfiprintf_r+0x1b0>
 801bede:	9b03      	ldr	r3, [sp, #12]
 801bee0:	3402      	adds	r4, #2
 801bee2:	1d1a      	adds	r2, r3, #4
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	9203      	str	r2, [sp, #12]
 801beea:	bfb8      	it	lt
 801beec:	f04f 33ff 	movlt.w	r3, #4294967295
 801bef0:	9305      	str	r3, [sp, #20]
 801bef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801bfc8 <_vfiprintf_r+0x230>
 801bef6:	2203      	movs	r2, #3
 801bef8:	7821      	ldrb	r1, [r4, #0]
 801befa:	4650      	mov	r0, sl
 801befc:	f000 fb4c 	bl	801c598 <memchr>
 801bf00:	b138      	cbz	r0, 801bf12 <_vfiprintf_r+0x17a>
 801bf02:	eba0 000a 	sub.w	r0, r0, sl
 801bf06:	2240      	movs	r2, #64	; 0x40
 801bf08:	9b04      	ldr	r3, [sp, #16]
 801bf0a:	3401      	adds	r4, #1
 801bf0c:	4082      	lsls	r2, r0
 801bf0e:	4313      	orrs	r3, r2
 801bf10:	9304      	str	r3, [sp, #16]
 801bf12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf16:	2206      	movs	r2, #6
 801bf18:	4828      	ldr	r0, [pc, #160]	; (801bfbc <_vfiprintf_r+0x224>)
 801bf1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf1e:	f000 fb3b 	bl	801c598 <memchr>
 801bf22:	2800      	cmp	r0, #0
 801bf24:	d03f      	beq.n	801bfa6 <_vfiprintf_r+0x20e>
 801bf26:	4b26      	ldr	r3, [pc, #152]	; (801bfc0 <_vfiprintf_r+0x228>)
 801bf28:	bb1b      	cbnz	r3, 801bf72 <_vfiprintf_r+0x1da>
 801bf2a:	9b03      	ldr	r3, [sp, #12]
 801bf2c:	3307      	adds	r3, #7
 801bf2e:	f023 0307 	bic.w	r3, r3, #7
 801bf32:	3308      	adds	r3, #8
 801bf34:	9303      	str	r3, [sp, #12]
 801bf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf38:	443b      	add	r3, r7
 801bf3a:	9309      	str	r3, [sp, #36]	; 0x24
 801bf3c:	e768      	b.n	801be10 <_vfiprintf_r+0x78>
 801bf3e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf42:	460c      	mov	r4, r1
 801bf44:	2001      	movs	r0, #1
 801bf46:	e7a6      	b.n	801be96 <_vfiprintf_r+0xfe>
 801bf48:	2300      	movs	r3, #0
 801bf4a:	3401      	adds	r4, #1
 801bf4c:	f04f 0c0a 	mov.w	ip, #10
 801bf50:	4619      	mov	r1, r3
 801bf52:	9305      	str	r3, [sp, #20]
 801bf54:	4620      	mov	r0, r4
 801bf56:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf5a:	3a30      	subs	r2, #48	; 0x30
 801bf5c:	2a09      	cmp	r2, #9
 801bf5e:	d903      	bls.n	801bf68 <_vfiprintf_r+0x1d0>
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d0c6      	beq.n	801bef2 <_vfiprintf_r+0x15a>
 801bf64:	9105      	str	r1, [sp, #20]
 801bf66:	e7c4      	b.n	801bef2 <_vfiprintf_r+0x15a>
 801bf68:	fb0c 2101 	mla	r1, ip, r1, r2
 801bf6c:	4604      	mov	r4, r0
 801bf6e:	2301      	movs	r3, #1
 801bf70:	e7f0      	b.n	801bf54 <_vfiprintf_r+0x1bc>
 801bf72:	ab03      	add	r3, sp, #12
 801bf74:	462a      	mov	r2, r5
 801bf76:	a904      	add	r1, sp, #16
 801bf78:	4630      	mov	r0, r6
 801bf7a:	9300      	str	r3, [sp, #0]
 801bf7c:	4b11      	ldr	r3, [pc, #68]	; (801bfc4 <_vfiprintf_r+0x22c>)
 801bf7e:	f3af 8000 	nop.w
 801bf82:	4607      	mov	r7, r0
 801bf84:	1c78      	adds	r0, r7, #1
 801bf86:	d1d6      	bne.n	801bf36 <_vfiprintf_r+0x19e>
 801bf88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf8a:	07d9      	lsls	r1, r3, #31
 801bf8c:	d405      	bmi.n	801bf9a <_vfiprintf_r+0x202>
 801bf8e:	89ab      	ldrh	r3, [r5, #12]
 801bf90:	059a      	lsls	r2, r3, #22
 801bf92:	d402      	bmi.n	801bf9a <_vfiprintf_r+0x202>
 801bf94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf96:	f7ff fd05 	bl	801b9a4 <__retarget_lock_release_recursive>
 801bf9a:	89ab      	ldrh	r3, [r5, #12]
 801bf9c:	065b      	lsls	r3, r3, #25
 801bf9e:	f53f af1d 	bmi.w	801bddc <_vfiprintf_r+0x44>
 801bfa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bfa4:	e71c      	b.n	801bde0 <_vfiprintf_r+0x48>
 801bfa6:	ab03      	add	r3, sp, #12
 801bfa8:	462a      	mov	r2, r5
 801bfaa:	a904      	add	r1, sp, #16
 801bfac:	4630      	mov	r0, r6
 801bfae:	9300      	str	r3, [sp, #0]
 801bfb0:	4b04      	ldr	r3, [pc, #16]	; (801bfc4 <_vfiprintf_r+0x22c>)
 801bfb2:	f000 f87d 	bl	801c0b0 <_printf_i>
 801bfb6:	e7e4      	b.n	801bf82 <_vfiprintf_r+0x1ea>
 801bfb8:	0801f921 	.word	0x0801f921
 801bfbc:	0801f92b 	.word	0x0801f92b
 801bfc0:	00000000 	.word	0x00000000
 801bfc4:	0801bd73 	.word	0x0801bd73
 801bfc8:	0801f927 	.word	0x0801f927

0801bfcc <_printf_common>:
 801bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd0:	4616      	mov	r6, r2
 801bfd2:	4699      	mov	r9, r3
 801bfd4:	688a      	ldr	r2, [r1, #8]
 801bfd6:	4607      	mov	r7, r0
 801bfd8:	690b      	ldr	r3, [r1, #16]
 801bfda:	460c      	mov	r4, r1
 801bfdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bfe0:	4293      	cmp	r3, r2
 801bfe2:	bfb8      	it	lt
 801bfe4:	4613      	movlt	r3, r2
 801bfe6:	6033      	str	r3, [r6, #0]
 801bfe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bfec:	b10a      	cbz	r2, 801bff2 <_printf_common+0x26>
 801bfee:	3301      	adds	r3, #1
 801bff0:	6033      	str	r3, [r6, #0]
 801bff2:	6823      	ldr	r3, [r4, #0]
 801bff4:	0699      	lsls	r1, r3, #26
 801bff6:	bf42      	ittt	mi
 801bff8:	6833      	ldrmi	r3, [r6, #0]
 801bffa:	3302      	addmi	r3, #2
 801bffc:	6033      	strmi	r3, [r6, #0]
 801bffe:	6825      	ldr	r5, [r4, #0]
 801c000:	f015 0506 	ands.w	r5, r5, #6
 801c004:	d106      	bne.n	801c014 <_printf_common+0x48>
 801c006:	f104 0a19 	add.w	sl, r4, #25
 801c00a:	68e3      	ldr	r3, [r4, #12]
 801c00c:	6832      	ldr	r2, [r6, #0]
 801c00e:	1a9b      	subs	r3, r3, r2
 801c010:	42ab      	cmp	r3, r5
 801c012:	dc2b      	bgt.n	801c06c <_printf_common+0xa0>
 801c014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c018:	1e13      	subs	r3, r2, #0
 801c01a:	6822      	ldr	r2, [r4, #0]
 801c01c:	bf18      	it	ne
 801c01e:	2301      	movne	r3, #1
 801c020:	0692      	lsls	r2, r2, #26
 801c022:	d430      	bmi.n	801c086 <_printf_common+0xba>
 801c024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c028:	4649      	mov	r1, r9
 801c02a:	4638      	mov	r0, r7
 801c02c:	47c0      	blx	r8
 801c02e:	3001      	adds	r0, #1
 801c030:	d023      	beq.n	801c07a <_printf_common+0xae>
 801c032:	6823      	ldr	r3, [r4, #0]
 801c034:	341a      	adds	r4, #26
 801c036:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801c03a:	f003 0306 	and.w	r3, r3, #6
 801c03e:	2b04      	cmp	r3, #4
 801c040:	bf0a      	itet	eq
 801c042:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801c046:	2500      	movne	r5, #0
 801c048:	6833      	ldreq	r3, [r6, #0]
 801c04a:	f04f 0600 	mov.w	r6, #0
 801c04e:	bf08      	it	eq
 801c050:	1aed      	subeq	r5, r5, r3
 801c052:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c056:	bf08      	it	eq
 801c058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c05c:	4293      	cmp	r3, r2
 801c05e:	bfc4      	itt	gt
 801c060:	1a9b      	subgt	r3, r3, r2
 801c062:	18ed      	addgt	r5, r5, r3
 801c064:	42b5      	cmp	r5, r6
 801c066:	d11a      	bne.n	801c09e <_printf_common+0xd2>
 801c068:	2000      	movs	r0, #0
 801c06a:	e008      	b.n	801c07e <_printf_common+0xb2>
 801c06c:	2301      	movs	r3, #1
 801c06e:	4652      	mov	r2, sl
 801c070:	4649      	mov	r1, r9
 801c072:	4638      	mov	r0, r7
 801c074:	47c0      	blx	r8
 801c076:	3001      	adds	r0, #1
 801c078:	d103      	bne.n	801c082 <_printf_common+0xb6>
 801c07a:	f04f 30ff 	mov.w	r0, #4294967295
 801c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c082:	3501      	adds	r5, #1
 801c084:	e7c1      	b.n	801c00a <_printf_common+0x3e>
 801c086:	18e1      	adds	r1, r4, r3
 801c088:	1c5a      	adds	r2, r3, #1
 801c08a:	2030      	movs	r0, #48	; 0x30
 801c08c:	3302      	adds	r3, #2
 801c08e:	4422      	add	r2, r4
 801c090:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c09c:	e7c2      	b.n	801c024 <_printf_common+0x58>
 801c09e:	2301      	movs	r3, #1
 801c0a0:	4622      	mov	r2, r4
 801c0a2:	4649      	mov	r1, r9
 801c0a4:	4638      	mov	r0, r7
 801c0a6:	47c0      	blx	r8
 801c0a8:	3001      	adds	r0, #1
 801c0aa:	d0e6      	beq.n	801c07a <_printf_common+0xae>
 801c0ac:	3601      	adds	r6, #1
 801c0ae:	e7d9      	b.n	801c064 <_printf_common+0x98>

0801c0b0 <_printf_i>:
 801c0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0b4:	7e0f      	ldrb	r7, [r1, #24]
 801c0b6:	4691      	mov	r9, r2
 801c0b8:	4680      	mov	r8, r0
 801c0ba:	460c      	mov	r4, r1
 801c0bc:	2f78      	cmp	r7, #120	; 0x78
 801c0be:	469a      	mov	sl, r3
 801c0c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c0c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c0c6:	d807      	bhi.n	801c0d8 <_printf_i+0x28>
 801c0c8:	2f62      	cmp	r7, #98	; 0x62
 801c0ca:	d80a      	bhi.n	801c0e2 <_printf_i+0x32>
 801c0cc:	2f00      	cmp	r7, #0
 801c0ce:	f000 80d3 	beq.w	801c278 <_printf_i+0x1c8>
 801c0d2:	2f58      	cmp	r7, #88	; 0x58
 801c0d4:	f000 80bf 	beq.w	801c256 <_printf_i+0x1a6>
 801c0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c0dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c0e0:	e03a      	b.n	801c158 <_printf_i+0xa8>
 801c0e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c0e6:	2b15      	cmp	r3, #21
 801c0e8:	d8f6      	bhi.n	801c0d8 <_printf_i+0x28>
 801c0ea:	a101      	add	r1, pc, #4	; (adr r1, 801c0f0 <_printf_i+0x40>)
 801c0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c0f0:	0801c149 	.word	0x0801c149
 801c0f4:	0801c15d 	.word	0x0801c15d
 801c0f8:	0801c0d9 	.word	0x0801c0d9
 801c0fc:	0801c0d9 	.word	0x0801c0d9
 801c100:	0801c0d9 	.word	0x0801c0d9
 801c104:	0801c0d9 	.word	0x0801c0d9
 801c108:	0801c15d 	.word	0x0801c15d
 801c10c:	0801c0d9 	.word	0x0801c0d9
 801c110:	0801c0d9 	.word	0x0801c0d9
 801c114:	0801c0d9 	.word	0x0801c0d9
 801c118:	0801c0d9 	.word	0x0801c0d9
 801c11c:	0801c25f 	.word	0x0801c25f
 801c120:	0801c189 	.word	0x0801c189
 801c124:	0801c21b 	.word	0x0801c21b
 801c128:	0801c0d9 	.word	0x0801c0d9
 801c12c:	0801c0d9 	.word	0x0801c0d9
 801c130:	0801c281 	.word	0x0801c281
 801c134:	0801c0d9 	.word	0x0801c0d9
 801c138:	0801c189 	.word	0x0801c189
 801c13c:	0801c0d9 	.word	0x0801c0d9
 801c140:	0801c0d9 	.word	0x0801c0d9
 801c144:	0801c223 	.word	0x0801c223
 801c148:	682b      	ldr	r3, [r5, #0]
 801c14a:	1d1a      	adds	r2, r3, #4
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	602a      	str	r2, [r5, #0]
 801c150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c158:	2301      	movs	r3, #1
 801c15a:	e09e      	b.n	801c29a <_printf_i+0x1ea>
 801c15c:	6820      	ldr	r0, [r4, #0]
 801c15e:	682b      	ldr	r3, [r5, #0]
 801c160:	0607      	lsls	r7, r0, #24
 801c162:	f103 0104 	add.w	r1, r3, #4
 801c166:	6029      	str	r1, [r5, #0]
 801c168:	d501      	bpl.n	801c16e <_printf_i+0xbe>
 801c16a:	681e      	ldr	r6, [r3, #0]
 801c16c:	e003      	b.n	801c176 <_printf_i+0xc6>
 801c16e:	0646      	lsls	r6, r0, #25
 801c170:	d5fb      	bpl.n	801c16a <_printf_i+0xba>
 801c172:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c176:	2e00      	cmp	r6, #0
 801c178:	da03      	bge.n	801c182 <_printf_i+0xd2>
 801c17a:	232d      	movs	r3, #45	; 0x2d
 801c17c:	4276      	negs	r6, r6
 801c17e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c182:	4859      	ldr	r0, [pc, #356]	; (801c2e8 <_printf_i+0x238>)
 801c184:	230a      	movs	r3, #10
 801c186:	e012      	b.n	801c1ae <_printf_i+0xfe>
 801c188:	682b      	ldr	r3, [r5, #0]
 801c18a:	6820      	ldr	r0, [r4, #0]
 801c18c:	1d19      	adds	r1, r3, #4
 801c18e:	6029      	str	r1, [r5, #0]
 801c190:	0605      	lsls	r5, r0, #24
 801c192:	d501      	bpl.n	801c198 <_printf_i+0xe8>
 801c194:	681e      	ldr	r6, [r3, #0]
 801c196:	e002      	b.n	801c19e <_printf_i+0xee>
 801c198:	0641      	lsls	r1, r0, #25
 801c19a:	d5fb      	bpl.n	801c194 <_printf_i+0xe4>
 801c19c:	881e      	ldrh	r6, [r3, #0]
 801c19e:	2f6f      	cmp	r7, #111	; 0x6f
 801c1a0:	4851      	ldr	r0, [pc, #324]	; (801c2e8 <_printf_i+0x238>)
 801c1a2:	bf0c      	ite	eq
 801c1a4:	2308      	moveq	r3, #8
 801c1a6:	230a      	movne	r3, #10
 801c1a8:	2100      	movs	r1, #0
 801c1aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c1ae:	6865      	ldr	r5, [r4, #4]
 801c1b0:	2d00      	cmp	r5, #0
 801c1b2:	60a5      	str	r5, [r4, #8]
 801c1b4:	bfa2      	ittt	ge
 801c1b6:	6821      	ldrge	r1, [r4, #0]
 801c1b8:	f021 0104 	bicge.w	r1, r1, #4
 801c1bc:	6021      	strge	r1, [r4, #0]
 801c1be:	b90e      	cbnz	r6, 801c1c4 <_printf_i+0x114>
 801c1c0:	2d00      	cmp	r5, #0
 801c1c2:	d04a      	beq.n	801c25a <_printf_i+0x1aa>
 801c1c4:	4615      	mov	r5, r2
 801c1c6:	fbb6 f1f3 	udiv	r1, r6, r3
 801c1ca:	fb03 6711 	mls	r7, r3, r1, r6
 801c1ce:	5dc7      	ldrb	r7, [r0, r7]
 801c1d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c1d4:	4637      	mov	r7, r6
 801c1d6:	460e      	mov	r6, r1
 801c1d8:	42bb      	cmp	r3, r7
 801c1da:	d9f4      	bls.n	801c1c6 <_printf_i+0x116>
 801c1dc:	2b08      	cmp	r3, #8
 801c1de:	d10b      	bne.n	801c1f8 <_printf_i+0x148>
 801c1e0:	6823      	ldr	r3, [r4, #0]
 801c1e2:	07de      	lsls	r6, r3, #31
 801c1e4:	d508      	bpl.n	801c1f8 <_printf_i+0x148>
 801c1e6:	6923      	ldr	r3, [r4, #16]
 801c1e8:	6861      	ldr	r1, [r4, #4]
 801c1ea:	4299      	cmp	r1, r3
 801c1ec:	bfde      	ittt	le
 801c1ee:	2330      	movle	r3, #48	; 0x30
 801c1f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c1f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c1f8:	1b52      	subs	r2, r2, r5
 801c1fa:	6122      	str	r2, [r4, #16]
 801c1fc:	464b      	mov	r3, r9
 801c1fe:	aa03      	add	r2, sp, #12
 801c200:	4621      	mov	r1, r4
 801c202:	4640      	mov	r0, r8
 801c204:	f8cd a000 	str.w	sl, [sp]
 801c208:	f7ff fee0 	bl	801bfcc <_printf_common>
 801c20c:	3001      	adds	r0, #1
 801c20e:	d149      	bne.n	801c2a4 <_printf_i+0x1f4>
 801c210:	f04f 30ff 	mov.w	r0, #4294967295
 801c214:	b004      	add	sp, #16
 801c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c21a:	6823      	ldr	r3, [r4, #0]
 801c21c:	f043 0320 	orr.w	r3, r3, #32
 801c220:	6023      	str	r3, [r4, #0]
 801c222:	2778      	movs	r7, #120	; 0x78
 801c224:	4831      	ldr	r0, [pc, #196]	; (801c2ec <_printf_i+0x23c>)
 801c226:	6823      	ldr	r3, [r4, #0]
 801c228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c22c:	061f      	lsls	r7, r3, #24
 801c22e:	6829      	ldr	r1, [r5, #0]
 801c230:	f851 6b04 	ldr.w	r6, [r1], #4
 801c234:	d402      	bmi.n	801c23c <_printf_i+0x18c>
 801c236:	065f      	lsls	r7, r3, #25
 801c238:	bf48      	it	mi
 801c23a:	b2b6      	uxthmi	r6, r6
 801c23c:	07df      	lsls	r7, r3, #31
 801c23e:	6029      	str	r1, [r5, #0]
 801c240:	bf44      	itt	mi
 801c242:	f043 0320 	orrmi.w	r3, r3, #32
 801c246:	6023      	strmi	r3, [r4, #0]
 801c248:	b91e      	cbnz	r6, 801c252 <_printf_i+0x1a2>
 801c24a:	6823      	ldr	r3, [r4, #0]
 801c24c:	f023 0320 	bic.w	r3, r3, #32
 801c250:	6023      	str	r3, [r4, #0]
 801c252:	2310      	movs	r3, #16
 801c254:	e7a8      	b.n	801c1a8 <_printf_i+0xf8>
 801c256:	4824      	ldr	r0, [pc, #144]	; (801c2e8 <_printf_i+0x238>)
 801c258:	e7e5      	b.n	801c226 <_printf_i+0x176>
 801c25a:	4615      	mov	r5, r2
 801c25c:	e7be      	b.n	801c1dc <_printf_i+0x12c>
 801c25e:	682b      	ldr	r3, [r5, #0]
 801c260:	6826      	ldr	r6, [r4, #0]
 801c262:	1d18      	adds	r0, r3, #4
 801c264:	6961      	ldr	r1, [r4, #20]
 801c266:	6028      	str	r0, [r5, #0]
 801c268:	0635      	lsls	r5, r6, #24
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	d501      	bpl.n	801c272 <_printf_i+0x1c2>
 801c26e:	6019      	str	r1, [r3, #0]
 801c270:	e002      	b.n	801c278 <_printf_i+0x1c8>
 801c272:	0670      	lsls	r0, r6, #25
 801c274:	d5fb      	bpl.n	801c26e <_printf_i+0x1be>
 801c276:	8019      	strh	r1, [r3, #0]
 801c278:	2300      	movs	r3, #0
 801c27a:	4615      	mov	r5, r2
 801c27c:	6123      	str	r3, [r4, #16]
 801c27e:	e7bd      	b.n	801c1fc <_printf_i+0x14c>
 801c280:	682b      	ldr	r3, [r5, #0]
 801c282:	2100      	movs	r1, #0
 801c284:	1d1a      	adds	r2, r3, #4
 801c286:	602a      	str	r2, [r5, #0]
 801c288:	681d      	ldr	r5, [r3, #0]
 801c28a:	6862      	ldr	r2, [r4, #4]
 801c28c:	4628      	mov	r0, r5
 801c28e:	f000 f983 	bl	801c598 <memchr>
 801c292:	b108      	cbz	r0, 801c298 <_printf_i+0x1e8>
 801c294:	1b40      	subs	r0, r0, r5
 801c296:	6060      	str	r0, [r4, #4]
 801c298:	6863      	ldr	r3, [r4, #4]
 801c29a:	6123      	str	r3, [r4, #16]
 801c29c:	2300      	movs	r3, #0
 801c29e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c2a2:	e7ab      	b.n	801c1fc <_printf_i+0x14c>
 801c2a4:	6923      	ldr	r3, [r4, #16]
 801c2a6:	462a      	mov	r2, r5
 801c2a8:	4649      	mov	r1, r9
 801c2aa:	4640      	mov	r0, r8
 801c2ac:	47d0      	blx	sl
 801c2ae:	3001      	adds	r0, #1
 801c2b0:	d0ae      	beq.n	801c210 <_printf_i+0x160>
 801c2b2:	6823      	ldr	r3, [r4, #0]
 801c2b4:	079b      	lsls	r3, r3, #30
 801c2b6:	d413      	bmi.n	801c2e0 <_printf_i+0x230>
 801c2b8:	68e0      	ldr	r0, [r4, #12]
 801c2ba:	9b03      	ldr	r3, [sp, #12]
 801c2bc:	4298      	cmp	r0, r3
 801c2be:	bfb8      	it	lt
 801c2c0:	4618      	movlt	r0, r3
 801c2c2:	e7a7      	b.n	801c214 <_printf_i+0x164>
 801c2c4:	2301      	movs	r3, #1
 801c2c6:	4632      	mov	r2, r6
 801c2c8:	4649      	mov	r1, r9
 801c2ca:	4640      	mov	r0, r8
 801c2cc:	47d0      	blx	sl
 801c2ce:	3001      	adds	r0, #1
 801c2d0:	d09e      	beq.n	801c210 <_printf_i+0x160>
 801c2d2:	3501      	adds	r5, #1
 801c2d4:	68e3      	ldr	r3, [r4, #12]
 801c2d6:	9903      	ldr	r1, [sp, #12]
 801c2d8:	1a5b      	subs	r3, r3, r1
 801c2da:	42ab      	cmp	r3, r5
 801c2dc:	dcf2      	bgt.n	801c2c4 <_printf_i+0x214>
 801c2de:	e7eb      	b.n	801c2b8 <_printf_i+0x208>
 801c2e0:	2500      	movs	r5, #0
 801c2e2:	f104 0619 	add.w	r6, r4, #25
 801c2e6:	e7f5      	b.n	801c2d4 <_printf_i+0x224>
 801c2e8:	0801f932 	.word	0x0801f932
 801c2ec:	0801f943 	.word	0x0801f943

0801c2f0 <__sflush_r>:
 801c2f0:	898a      	ldrh	r2, [r1, #12]
 801c2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2f6:	4605      	mov	r5, r0
 801c2f8:	0710      	lsls	r0, r2, #28
 801c2fa:	460c      	mov	r4, r1
 801c2fc:	d458      	bmi.n	801c3b0 <__sflush_r+0xc0>
 801c2fe:	684b      	ldr	r3, [r1, #4]
 801c300:	2b00      	cmp	r3, #0
 801c302:	dc05      	bgt.n	801c310 <__sflush_r+0x20>
 801c304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c306:	2b00      	cmp	r3, #0
 801c308:	dc02      	bgt.n	801c310 <__sflush_r+0x20>
 801c30a:	2000      	movs	r0, #0
 801c30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c312:	2e00      	cmp	r6, #0
 801c314:	d0f9      	beq.n	801c30a <__sflush_r+0x1a>
 801c316:	2300      	movs	r3, #0
 801c318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c31c:	682f      	ldr	r7, [r5, #0]
 801c31e:	6a21      	ldr	r1, [r4, #32]
 801c320:	602b      	str	r3, [r5, #0]
 801c322:	d032      	beq.n	801c38a <__sflush_r+0x9a>
 801c324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c326:	89a3      	ldrh	r3, [r4, #12]
 801c328:	075a      	lsls	r2, r3, #29
 801c32a:	d505      	bpl.n	801c338 <__sflush_r+0x48>
 801c32c:	6863      	ldr	r3, [r4, #4]
 801c32e:	1ac0      	subs	r0, r0, r3
 801c330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c332:	b10b      	cbz	r3, 801c338 <__sflush_r+0x48>
 801c334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c336:	1ac0      	subs	r0, r0, r3
 801c338:	2300      	movs	r3, #0
 801c33a:	4602      	mov	r2, r0
 801c33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c33e:	4628      	mov	r0, r5
 801c340:	6a21      	ldr	r1, [r4, #32]
 801c342:	47b0      	blx	r6
 801c344:	1c43      	adds	r3, r0, #1
 801c346:	89a3      	ldrh	r3, [r4, #12]
 801c348:	d106      	bne.n	801c358 <__sflush_r+0x68>
 801c34a:	6829      	ldr	r1, [r5, #0]
 801c34c:	291d      	cmp	r1, #29
 801c34e:	d82b      	bhi.n	801c3a8 <__sflush_r+0xb8>
 801c350:	4a28      	ldr	r2, [pc, #160]	; (801c3f4 <__sflush_r+0x104>)
 801c352:	410a      	asrs	r2, r1
 801c354:	07d6      	lsls	r6, r2, #31
 801c356:	d427      	bmi.n	801c3a8 <__sflush_r+0xb8>
 801c358:	2200      	movs	r2, #0
 801c35a:	04d9      	lsls	r1, r3, #19
 801c35c:	6062      	str	r2, [r4, #4]
 801c35e:	6922      	ldr	r2, [r4, #16]
 801c360:	6022      	str	r2, [r4, #0]
 801c362:	d504      	bpl.n	801c36e <__sflush_r+0x7e>
 801c364:	1c42      	adds	r2, r0, #1
 801c366:	d101      	bne.n	801c36c <__sflush_r+0x7c>
 801c368:	682b      	ldr	r3, [r5, #0]
 801c36a:	b903      	cbnz	r3, 801c36e <__sflush_r+0x7e>
 801c36c:	6560      	str	r0, [r4, #84]	; 0x54
 801c36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c370:	602f      	str	r7, [r5, #0]
 801c372:	2900      	cmp	r1, #0
 801c374:	d0c9      	beq.n	801c30a <__sflush_r+0x1a>
 801c376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c37a:	4299      	cmp	r1, r3
 801c37c:	d002      	beq.n	801c384 <__sflush_r+0x94>
 801c37e:	4628      	mov	r0, r5
 801c380:	f7ff fb3c 	bl	801b9fc <_free_r>
 801c384:	2000      	movs	r0, #0
 801c386:	6360      	str	r0, [r4, #52]	; 0x34
 801c388:	e7c0      	b.n	801c30c <__sflush_r+0x1c>
 801c38a:	2301      	movs	r3, #1
 801c38c:	4628      	mov	r0, r5
 801c38e:	47b0      	blx	r6
 801c390:	1c41      	adds	r1, r0, #1
 801c392:	d1c8      	bne.n	801c326 <__sflush_r+0x36>
 801c394:	682b      	ldr	r3, [r5, #0]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d0c5      	beq.n	801c326 <__sflush_r+0x36>
 801c39a:	2b1d      	cmp	r3, #29
 801c39c:	d001      	beq.n	801c3a2 <__sflush_r+0xb2>
 801c39e:	2b16      	cmp	r3, #22
 801c3a0:	d101      	bne.n	801c3a6 <__sflush_r+0xb6>
 801c3a2:	602f      	str	r7, [r5, #0]
 801c3a4:	e7b1      	b.n	801c30a <__sflush_r+0x1a>
 801c3a6:	89a3      	ldrh	r3, [r4, #12]
 801c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3ac:	81a3      	strh	r3, [r4, #12]
 801c3ae:	e7ad      	b.n	801c30c <__sflush_r+0x1c>
 801c3b0:	690f      	ldr	r7, [r1, #16]
 801c3b2:	2f00      	cmp	r7, #0
 801c3b4:	d0a9      	beq.n	801c30a <__sflush_r+0x1a>
 801c3b6:	0793      	lsls	r3, r2, #30
 801c3b8:	680e      	ldr	r6, [r1, #0]
 801c3ba:	600f      	str	r7, [r1, #0]
 801c3bc:	bf0c      	ite	eq
 801c3be:	694b      	ldreq	r3, [r1, #20]
 801c3c0:	2300      	movne	r3, #0
 801c3c2:	eba6 0807 	sub.w	r8, r6, r7
 801c3c6:	608b      	str	r3, [r1, #8]
 801c3c8:	f1b8 0f00 	cmp.w	r8, #0
 801c3cc:	dd9d      	ble.n	801c30a <__sflush_r+0x1a>
 801c3ce:	4643      	mov	r3, r8
 801c3d0:	463a      	mov	r2, r7
 801c3d2:	6a21      	ldr	r1, [r4, #32]
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c3d8:	47b0      	blx	r6
 801c3da:	2800      	cmp	r0, #0
 801c3dc:	dc06      	bgt.n	801c3ec <__sflush_r+0xfc>
 801c3de:	89a3      	ldrh	r3, [r4, #12]
 801c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3e8:	81a3      	strh	r3, [r4, #12]
 801c3ea:	e78f      	b.n	801c30c <__sflush_r+0x1c>
 801c3ec:	4407      	add	r7, r0
 801c3ee:	eba8 0800 	sub.w	r8, r8, r0
 801c3f2:	e7e9      	b.n	801c3c8 <__sflush_r+0xd8>
 801c3f4:	dfbffffe 	.word	0xdfbffffe

0801c3f8 <_fflush_r>:
 801c3f8:	b538      	push	{r3, r4, r5, lr}
 801c3fa:	690b      	ldr	r3, [r1, #16]
 801c3fc:	4605      	mov	r5, r0
 801c3fe:	460c      	mov	r4, r1
 801c400:	b913      	cbnz	r3, 801c408 <_fflush_r+0x10>
 801c402:	2500      	movs	r5, #0
 801c404:	4628      	mov	r0, r5
 801c406:	bd38      	pop	{r3, r4, r5, pc}
 801c408:	b118      	cbz	r0, 801c412 <_fflush_r+0x1a>
 801c40a:	6a03      	ldr	r3, [r0, #32]
 801c40c:	b90b      	cbnz	r3, 801c412 <_fflush_r+0x1a>
 801c40e:	f7ff f923 	bl	801b658 <__sinit>
 801c412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d0f3      	beq.n	801c402 <_fflush_r+0xa>
 801c41a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c41c:	07d0      	lsls	r0, r2, #31
 801c41e:	d404      	bmi.n	801c42a <_fflush_r+0x32>
 801c420:	0599      	lsls	r1, r3, #22
 801c422:	d402      	bmi.n	801c42a <_fflush_r+0x32>
 801c424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c426:	f7ff fabc 	bl	801b9a2 <__retarget_lock_acquire_recursive>
 801c42a:	4628      	mov	r0, r5
 801c42c:	4621      	mov	r1, r4
 801c42e:	f7ff ff5f 	bl	801c2f0 <__sflush_r>
 801c432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c434:	4605      	mov	r5, r0
 801c436:	07da      	lsls	r2, r3, #31
 801c438:	d4e4      	bmi.n	801c404 <_fflush_r+0xc>
 801c43a:	89a3      	ldrh	r3, [r4, #12]
 801c43c:	059b      	lsls	r3, r3, #22
 801c43e:	d4e1      	bmi.n	801c404 <_fflush_r+0xc>
 801c440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c442:	f7ff faaf 	bl	801b9a4 <__retarget_lock_release_recursive>
 801c446:	e7dd      	b.n	801c404 <_fflush_r+0xc>

0801c448 <fiprintf>:
 801c448:	b40e      	push	{r1, r2, r3}
 801c44a:	b503      	push	{r0, r1, lr}
 801c44c:	ab03      	add	r3, sp, #12
 801c44e:	4601      	mov	r1, r0
 801c450:	4805      	ldr	r0, [pc, #20]	; (801c468 <fiprintf+0x20>)
 801c452:	f853 2b04 	ldr.w	r2, [r3], #4
 801c456:	6800      	ldr	r0, [r0, #0]
 801c458:	9301      	str	r3, [sp, #4]
 801c45a:	f7ff fc9d 	bl	801bd98 <_vfiprintf_r>
 801c45e:	b002      	add	sp, #8
 801c460:	f85d eb04 	ldr.w	lr, [sp], #4
 801c464:	b003      	add	sp, #12
 801c466:	4770      	bx	lr
 801c468:	200000dc 	.word	0x200000dc

0801c46c <__swbuf_r>:
 801c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c46e:	460e      	mov	r6, r1
 801c470:	4614      	mov	r4, r2
 801c472:	4605      	mov	r5, r0
 801c474:	b118      	cbz	r0, 801c47e <__swbuf_r+0x12>
 801c476:	6a03      	ldr	r3, [r0, #32]
 801c478:	b90b      	cbnz	r3, 801c47e <__swbuf_r+0x12>
 801c47a:	f7ff f8ed 	bl	801b658 <__sinit>
 801c47e:	69a3      	ldr	r3, [r4, #24]
 801c480:	60a3      	str	r3, [r4, #8]
 801c482:	89a3      	ldrh	r3, [r4, #12]
 801c484:	071a      	lsls	r2, r3, #28
 801c486:	d525      	bpl.n	801c4d4 <__swbuf_r+0x68>
 801c488:	6923      	ldr	r3, [r4, #16]
 801c48a:	b31b      	cbz	r3, 801c4d4 <__swbuf_r+0x68>
 801c48c:	6823      	ldr	r3, [r4, #0]
 801c48e:	b2f6      	uxtb	r6, r6
 801c490:	6922      	ldr	r2, [r4, #16]
 801c492:	4637      	mov	r7, r6
 801c494:	1a98      	subs	r0, r3, r2
 801c496:	6963      	ldr	r3, [r4, #20]
 801c498:	4283      	cmp	r3, r0
 801c49a:	dc04      	bgt.n	801c4a6 <__swbuf_r+0x3a>
 801c49c:	4621      	mov	r1, r4
 801c49e:	4628      	mov	r0, r5
 801c4a0:	f7ff ffaa 	bl	801c3f8 <_fflush_r>
 801c4a4:	b9e0      	cbnz	r0, 801c4e0 <__swbuf_r+0x74>
 801c4a6:	68a3      	ldr	r3, [r4, #8]
 801c4a8:	3b01      	subs	r3, #1
 801c4aa:	60a3      	str	r3, [r4, #8]
 801c4ac:	6823      	ldr	r3, [r4, #0]
 801c4ae:	1c5a      	adds	r2, r3, #1
 801c4b0:	6022      	str	r2, [r4, #0]
 801c4b2:	701e      	strb	r6, [r3, #0]
 801c4b4:	1c43      	adds	r3, r0, #1
 801c4b6:	6962      	ldr	r2, [r4, #20]
 801c4b8:	429a      	cmp	r2, r3
 801c4ba:	d004      	beq.n	801c4c6 <__swbuf_r+0x5a>
 801c4bc:	89a3      	ldrh	r3, [r4, #12]
 801c4be:	07db      	lsls	r3, r3, #31
 801c4c0:	d506      	bpl.n	801c4d0 <__swbuf_r+0x64>
 801c4c2:	2e0a      	cmp	r6, #10
 801c4c4:	d104      	bne.n	801c4d0 <__swbuf_r+0x64>
 801c4c6:	4621      	mov	r1, r4
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	f7ff ff95 	bl	801c3f8 <_fflush_r>
 801c4ce:	b938      	cbnz	r0, 801c4e0 <__swbuf_r+0x74>
 801c4d0:	4638      	mov	r0, r7
 801c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4d4:	4621      	mov	r1, r4
 801c4d6:	4628      	mov	r0, r5
 801c4d8:	f000 f806 	bl	801c4e8 <__swsetup_r>
 801c4dc:	2800      	cmp	r0, #0
 801c4de:	d0d5      	beq.n	801c48c <__swbuf_r+0x20>
 801c4e0:	f04f 37ff 	mov.w	r7, #4294967295
 801c4e4:	e7f4      	b.n	801c4d0 <__swbuf_r+0x64>
	...

0801c4e8 <__swsetup_r>:
 801c4e8:	b538      	push	{r3, r4, r5, lr}
 801c4ea:	4b2a      	ldr	r3, [pc, #168]	; (801c594 <__swsetup_r+0xac>)
 801c4ec:	4605      	mov	r5, r0
 801c4ee:	460c      	mov	r4, r1
 801c4f0:	6818      	ldr	r0, [r3, #0]
 801c4f2:	b118      	cbz	r0, 801c4fc <__swsetup_r+0x14>
 801c4f4:	6a03      	ldr	r3, [r0, #32]
 801c4f6:	b90b      	cbnz	r3, 801c4fc <__swsetup_r+0x14>
 801c4f8:	f7ff f8ae 	bl	801b658 <__sinit>
 801c4fc:	89a3      	ldrh	r3, [r4, #12]
 801c4fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c502:	0718      	lsls	r0, r3, #28
 801c504:	d422      	bmi.n	801c54c <__swsetup_r+0x64>
 801c506:	06d9      	lsls	r1, r3, #27
 801c508:	d407      	bmi.n	801c51a <__swsetup_r+0x32>
 801c50a:	2309      	movs	r3, #9
 801c50c:	602b      	str	r3, [r5, #0]
 801c50e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c512:	f04f 30ff 	mov.w	r0, #4294967295
 801c516:	81a3      	strh	r3, [r4, #12]
 801c518:	e034      	b.n	801c584 <__swsetup_r+0x9c>
 801c51a:	0758      	lsls	r0, r3, #29
 801c51c:	d512      	bpl.n	801c544 <__swsetup_r+0x5c>
 801c51e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c520:	b141      	cbz	r1, 801c534 <__swsetup_r+0x4c>
 801c522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c526:	4299      	cmp	r1, r3
 801c528:	d002      	beq.n	801c530 <__swsetup_r+0x48>
 801c52a:	4628      	mov	r0, r5
 801c52c:	f7ff fa66 	bl	801b9fc <_free_r>
 801c530:	2300      	movs	r3, #0
 801c532:	6363      	str	r3, [r4, #52]	; 0x34
 801c534:	89a3      	ldrh	r3, [r4, #12]
 801c536:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c53a:	81a3      	strh	r3, [r4, #12]
 801c53c:	2300      	movs	r3, #0
 801c53e:	6063      	str	r3, [r4, #4]
 801c540:	6923      	ldr	r3, [r4, #16]
 801c542:	6023      	str	r3, [r4, #0]
 801c544:	89a3      	ldrh	r3, [r4, #12]
 801c546:	f043 0308 	orr.w	r3, r3, #8
 801c54a:	81a3      	strh	r3, [r4, #12]
 801c54c:	6923      	ldr	r3, [r4, #16]
 801c54e:	b94b      	cbnz	r3, 801c564 <__swsetup_r+0x7c>
 801c550:	89a3      	ldrh	r3, [r4, #12]
 801c552:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c55a:	d003      	beq.n	801c564 <__swsetup_r+0x7c>
 801c55c:	4621      	mov	r1, r4
 801c55e:	4628      	mov	r0, r5
 801c560:	f000 f883 	bl	801c66a <__smakebuf_r>
 801c564:	89a0      	ldrh	r0, [r4, #12]
 801c566:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c56a:	f010 0301 	ands.w	r3, r0, #1
 801c56e:	d00a      	beq.n	801c586 <__swsetup_r+0x9e>
 801c570:	2300      	movs	r3, #0
 801c572:	60a3      	str	r3, [r4, #8]
 801c574:	6963      	ldr	r3, [r4, #20]
 801c576:	425b      	negs	r3, r3
 801c578:	61a3      	str	r3, [r4, #24]
 801c57a:	6923      	ldr	r3, [r4, #16]
 801c57c:	b943      	cbnz	r3, 801c590 <__swsetup_r+0xa8>
 801c57e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c582:	d1c4      	bne.n	801c50e <__swsetup_r+0x26>
 801c584:	bd38      	pop	{r3, r4, r5, pc}
 801c586:	0781      	lsls	r1, r0, #30
 801c588:	bf58      	it	pl
 801c58a:	6963      	ldrpl	r3, [r4, #20]
 801c58c:	60a3      	str	r3, [r4, #8]
 801c58e:	e7f4      	b.n	801c57a <__swsetup_r+0x92>
 801c590:	2000      	movs	r0, #0
 801c592:	e7f7      	b.n	801c584 <__swsetup_r+0x9c>
 801c594:	200000dc 	.word	0x200000dc

0801c598 <memchr>:
 801c598:	b2c9      	uxtb	r1, r1
 801c59a:	4402      	add	r2, r0
 801c59c:	b510      	push	{r4, lr}
 801c59e:	4290      	cmp	r0, r2
 801c5a0:	4603      	mov	r3, r0
 801c5a2:	d101      	bne.n	801c5a8 <memchr+0x10>
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	e003      	b.n	801c5b0 <memchr+0x18>
 801c5a8:	781c      	ldrb	r4, [r3, #0]
 801c5aa:	3001      	adds	r0, #1
 801c5ac:	428c      	cmp	r4, r1
 801c5ae:	d1f6      	bne.n	801c59e <memchr+0x6>
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	bd10      	pop	{r4, pc}

0801c5b4 <abort>:
 801c5b4:	2006      	movs	r0, #6
 801c5b6:	b508      	push	{r3, lr}
 801c5b8:	f000 f8bc 	bl	801c734 <raise>
 801c5bc:	2001      	movs	r0, #1
 801c5be:	f7e4 fd05 	bl	8000fcc <_exit>

0801c5c2 <_realloc_r>:
 801c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5c6:	4680      	mov	r8, r0
 801c5c8:	4614      	mov	r4, r2
 801c5ca:	460e      	mov	r6, r1
 801c5cc:	b921      	cbnz	r1, 801c5d8 <_realloc_r+0x16>
 801c5ce:	4611      	mov	r1, r2
 801c5d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c5d4:	f7fe beea 	b.w	801b3ac <_malloc_r>
 801c5d8:	b92a      	cbnz	r2, 801c5e6 <_realloc_r+0x24>
 801c5da:	4625      	mov	r5, r4
 801c5dc:	f7ff fa0e 	bl	801b9fc <_free_r>
 801c5e0:	4628      	mov	r0, r5
 801c5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5e6:	f000 f8e3 	bl	801c7b0 <_malloc_usable_size_r>
 801c5ea:	4284      	cmp	r4, r0
 801c5ec:	4607      	mov	r7, r0
 801c5ee:	d802      	bhi.n	801c5f6 <_realloc_r+0x34>
 801c5f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c5f4:	d812      	bhi.n	801c61c <_realloc_r+0x5a>
 801c5f6:	4621      	mov	r1, r4
 801c5f8:	4640      	mov	r0, r8
 801c5fa:	f7fe fed7 	bl	801b3ac <_malloc_r>
 801c5fe:	4605      	mov	r5, r0
 801c600:	2800      	cmp	r0, #0
 801c602:	d0ed      	beq.n	801c5e0 <_realloc_r+0x1e>
 801c604:	42bc      	cmp	r4, r7
 801c606:	4622      	mov	r2, r4
 801c608:	4631      	mov	r1, r6
 801c60a:	bf28      	it	cs
 801c60c:	463a      	movcs	r2, r7
 801c60e:	f7ff f9ca 	bl	801b9a6 <memcpy>
 801c612:	4631      	mov	r1, r6
 801c614:	4640      	mov	r0, r8
 801c616:	f7ff f9f1 	bl	801b9fc <_free_r>
 801c61a:	e7e1      	b.n	801c5e0 <_realloc_r+0x1e>
 801c61c:	4635      	mov	r5, r6
 801c61e:	e7df      	b.n	801c5e0 <_realloc_r+0x1e>

0801c620 <__swhatbuf_r>:
 801c620:	b570      	push	{r4, r5, r6, lr}
 801c622:	460c      	mov	r4, r1
 801c624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c628:	b096      	sub	sp, #88	; 0x58
 801c62a:	4615      	mov	r5, r2
 801c62c:	2900      	cmp	r1, #0
 801c62e:	461e      	mov	r6, r3
 801c630:	da0c      	bge.n	801c64c <__swhatbuf_r+0x2c>
 801c632:	89a3      	ldrh	r3, [r4, #12]
 801c634:	2100      	movs	r1, #0
 801c636:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c63a:	bf0c      	ite	eq
 801c63c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c640:	2340      	movne	r3, #64	; 0x40
 801c642:	2000      	movs	r0, #0
 801c644:	6031      	str	r1, [r6, #0]
 801c646:	602b      	str	r3, [r5, #0]
 801c648:	b016      	add	sp, #88	; 0x58
 801c64a:	bd70      	pop	{r4, r5, r6, pc}
 801c64c:	466a      	mov	r2, sp
 801c64e:	f000 f879 	bl	801c744 <_fstat_r>
 801c652:	2800      	cmp	r0, #0
 801c654:	dbed      	blt.n	801c632 <__swhatbuf_r+0x12>
 801c656:	9901      	ldr	r1, [sp, #4]
 801c658:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c65c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c660:	4259      	negs	r1, r3
 801c662:	4159      	adcs	r1, r3
 801c664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c668:	e7eb      	b.n	801c642 <__swhatbuf_r+0x22>

0801c66a <__smakebuf_r>:
 801c66a:	898b      	ldrh	r3, [r1, #12]
 801c66c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c66e:	079d      	lsls	r5, r3, #30
 801c670:	4606      	mov	r6, r0
 801c672:	460c      	mov	r4, r1
 801c674:	d507      	bpl.n	801c686 <__smakebuf_r+0x1c>
 801c676:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c67a:	6023      	str	r3, [r4, #0]
 801c67c:	6123      	str	r3, [r4, #16]
 801c67e:	2301      	movs	r3, #1
 801c680:	6163      	str	r3, [r4, #20]
 801c682:	b002      	add	sp, #8
 801c684:	bd70      	pop	{r4, r5, r6, pc}
 801c686:	ab01      	add	r3, sp, #4
 801c688:	466a      	mov	r2, sp
 801c68a:	f7ff ffc9 	bl	801c620 <__swhatbuf_r>
 801c68e:	9900      	ldr	r1, [sp, #0]
 801c690:	4605      	mov	r5, r0
 801c692:	4630      	mov	r0, r6
 801c694:	f7fe fe8a 	bl	801b3ac <_malloc_r>
 801c698:	b948      	cbnz	r0, 801c6ae <__smakebuf_r+0x44>
 801c69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c69e:	059a      	lsls	r2, r3, #22
 801c6a0:	d4ef      	bmi.n	801c682 <__smakebuf_r+0x18>
 801c6a2:	f023 0303 	bic.w	r3, r3, #3
 801c6a6:	f043 0302 	orr.w	r3, r3, #2
 801c6aa:	81a3      	strh	r3, [r4, #12]
 801c6ac:	e7e3      	b.n	801c676 <__smakebuf_r+0xc>
 801c6ae:	89a3      	ldrh	r3, [r4, #12]
 801c6b0:	6020      	str	r0, [r4, #0]
 801c6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c6b6:	6120      	str	r0, [r4, #16]
 801c6b8:	81a3      	strh	r3, [r4, #12]
 801c6ba:	9b00      	ldr	r3, [sp, #0]
 801c6bc:	6163      	str	r3, [r4, #20]
 801c6be:	9b01      	ldr	r3, [sp, #4]
 801c6c0:	b15b      	cbz	r3, 801c6da <__smakebuf_r+0x70>
 801c6c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c6c6:	4630      	mov	r0, r6
 801c6c8:	f000 f84e 	bl	801c768 <_isatty_r>
 801c6cc:	b128      	cbz	r0, 801c6da <__smakebuf_r+0x70>
 801c6ce:	89a3      	ldrh	r3, [r4, #12]
 801c6d0:	f023 0303 	bic.w	r3, r3, #3
 801c6d4:	f043 0301 	orr.w	r3, r3, #1
 801c6d8:	81a3      	strh	r3, [r4, #12]
 801c6da:	89a3      	ldrh	r3, [r4, #12]
 801c6dc:	431d      	orrs	r5, r3
 801c6de:	81a5      	strh	r5, [r4, #12]
 801c6e0:	e7cf      	b.n	801c682 <__smakebuf_r+0x18>

0801c6e2 <_raise_r>:
 801c6e2:	291f      	cmp	r1, #31
 801c6e4:	b538      	push	{r3, r4, r5, lr}
 801c6e6:	4604      	mov	r4, r0
 801c6e8:	460d      	mov	r5, r1
 801c6ea:	d904      	bls.n	801c6f6 <_raise_r+0x14>
 801c6ec:	2316      	movs	r3, #22
 801c6ee:	6003      	str	r3, [r0, #0]
 801c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c6f4:	bd38      	pop	{r3, r4, r5, pc}
 801c6f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c6f8:	b112      	cbz	r2, 801c700 <_raise_r+0x1e>
 801c6fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c6fe:	b94b      	cbnz	r3, 801c714 <_raise_r+0x32>
 801c700:	4620      	mov	r0, r4
 801c702:	f000 f853 	bl	801c7ac <_getpid_r>
 801c706:	462a      	mov	r2, r5
 801c708:	4601      	mov	r1, r0
 801c70a:	4620      	mov	r0, r4
 801c70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c710:	f000 b83a 	b.w	801c788 <_kill_r>
 801c714:	2b01      	cmp	r3, #1
 801c716:	d00a      	beq.n	801c72e <_raise_r+0x4c>
 801c718:	1c59      	adds	r1, r3, #1
 801c71a:	d103      	bne.n	801c724 <_raise_r+0x42>
 801c71c:	2316      	movs	r3, #22
 801c71e:	6003      	str	r3, [r0, #0]
 801c720:	2001      	movs	r0, #1
 801c722:	e7e7      	b.n	801c6f4 <_raise_r+0x12>
 801c724:	2400      	movs	r4, #0
 801c726:	4628      	mov	r0, r5
 801c728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c72c:	4798      	blx	r3
 801c72e:	2000      	movs	r0, #0
 801c730:	e7e0      	b.n	801c6f4 <_raise_r+0x12>
	...

0801c734 <raise>:
 801c734:	4b02      	ldr	r3, [pc, #8]	; (801c740 <raise+0xc>)
 801c736:	4601      	mov	r1, r0
 801c738:	6818      	ldr	r0, [r3, #0]
 801c73a:	f7ff bfd2 	b.w	801c6e2 <_raise_r>
 801c73e:	bf00      	nop
 801c740:	200000dc 	.word	0x200000dc

0801c744 <_fstat_r>:
 801c744:	b538      	push	{r3, r4, r5, lr}
 801c746:	2300      	movs	r3, #0
 801c748:	4d06      	ldr	r5, [pc, #24]	; (801c764 <_fstat_r+0x20>)
 801c74a:	4604      	mov	r4, r0
 801c74c:	4608      	mov	r0, r1
 801c74e:	4611      	mov	r1, r2
 801c750:	602b      	str	r3, [r5, #0]
 801c752:	f7e4 fc8a 	bl	800106a <_fstat>
 801c756:	1c43      	adds	r3, r0, #1
 801c758:	d102      	bne.n	801c760 <_fstat_r+0x1c>
 801c75a:	682b      	ldr	r3, [r5, #0]
 801c75c:	b103      	cbz	r3, 801c760 <_fstat_r+0x1c>
 801c75e:	6023      	str	r3, [r4, #0]
 801c760:	bd38      	pop	{r3, r4, r5, pc}
 801c762:	bf00      	nop
 801c764:	2000b27c 	.word	0x2000b27c

0801c768 <_isatty_r>:
 801c768:	b538      	push	{r3, r4, r5, lr}
 801c76a:	2300      	movs	r3, #0
 801c76c:	4d05      	ldr	r5, [pc, #20]	; (801c784 <_isatty_r+0x1c>)
 801c76e:	4604      	mov	r4, r0
 801c770:	4608      	mov	r0, r1
 801c772:	602b      	str	r3, [r5, #0]
 801c774:	f7e4 fc89 	bl	800108a <_isatty>
 801c778:	1c43      	adds	r3, r0, #1
 801c77a:	d102      	bne.n	801c782 <_isatty_r+0x1a>
 801c77c:	682b      	ldr	r3, [r5, #0]
 801c77e:	b103      	cbz	r3, 801c782 <_isatty_r+0x1a>
 801c780:	6023      	str	r3, [r4, #0]
 801c782:	bd38      	pop	{r3, r4, r5, pc}
 801c784:	2000b27c 	.word	0x2000b27c

0801c788 <_kill_r>:
 801c788:	b538      	push	{r3, r4, r5, lr}
 801c78a:	2300      	movs	r3, #0
 801c78c:	4d06      	ldr	r5, [pc, #24]	; (801c7a8 <_kill_r+0x20>)
 801c78e:	4604      	mov	r4, r0
 801c790:	4608      	mov	r0, r1
 801c792:	4611      	mov	r1, r2
 801c794:	602b      	str	r3, [r5, #0]
 801c796:	f7e4 fc07 	bl	8000fa8 <_kill>
 801c79a:	1c43      	adds	r3, r0, #1
 801c79c:	d102      	bne.n	801c7a4 <_kill_r+0x1c>
 801c79e:	682b      	ldr	r3, [r5, #0]
 801c7a0:	b103      	cbz	r3, 801c7a4 <_kill_r+0x1c>
 801c7a2:	6023      	str	r3, [r4, #0]
 801c7a4:	bd38      	pop	{r3, r4, r5, pc}
 801c7a6:	bf00      	nop
 801c7a8:	2000b27c 	.word	0x2000b27c

0801c7ac <_getpid_r>:
 801c7ac:	f7e4 bbf4 	b.w	8000f98 <_getpid>

0801c7b0 <_malloc_usable_size_r>:
 801c7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7b4:	1f18      	subs	r0, r3, #4
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	bfbc      	itt	lt
 801c7ba:	580b      	ldrlt	r3, [r1, r0]
 801c7bc:	18c0      	addlt	r0, r0, r3
 801c7be:	4770      	bx	lr

0801c7c0 <_init>:
 801c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7c2:	bf00      	nop
 801c7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7c6:	bc08      	pop	{r3}
 801c7c8:	469e      	mov	lr, r3
 801c7ca:	4770      	bx	lr

0801c7cc <_fini>:
 801c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ce:	bf00      	nop
 801c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7d2:	bc08      	pop	{r3}
 801c7d4:	469e      	mov	lr, r3
 801c7d6:	4770      	bx	lr
